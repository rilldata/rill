# This workflow runs full or nightly releases.
# Full releases are published to brew, CDN (for install script), and Github Releases.
# A full release gets its version number from the Git tag that triggered it.
# Nightly releases are only published to CDN and do not have a version. Their version number is "nightly".
# Caching of the release artifacts are intentionally disabled at the bucket level by setting the Cache-Control header of the objects to 'no-store',
# this is done because the files are cached at the CDN layer instead and multiple caching layers makes invalidating the cache difficult.
# The CDN cache is explicitly invalidated as part of the release process, to prevent old versions from being accidentally served after the release is done.

name: Release Rill CLI
on:
  push:
    # Trigger a full release on new Git tag
    tags:
      - "v*"
  # Trigger a nightly release at midnight
  schedule:
    - cron: '0 0 * * *'
  # Trigger a nightly release manually
  workflow_dispatch:

env:
  PUBLISH_NIGHTLY: ${{ contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
  PUBLISH_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

jobs:
  validate-sequential:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Admin Migrations
      run: |
        ./scripts/check_migrations.sh admin/database/postgres/migrations

    - name: Check Runtime Migrations
      run: |
        ./scripts/check_migrations.sh runtime/drivers/sqlite/migrations

  release:
    name: Release rill
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-13, macos-14]
        include:
          - os: ubuntu-22.04
            platform: linux_amd64
          - os: ubuntu-22.04-arm
            platform: linux_arm64
          - os: macos-13
            platform: darwin_amd64
          - os: macos-14
            platform: darwin_arm64
      fail-fast: false

    needs: validate-sequential
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags required by goreleaser
        run: git fetch --prune --unshallow

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Set up NodeJS
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Build and embed static UI
        run: make cli.prepare
        env:
          RILL_UI_PUBLIC_INTAKE_USER: "data-modeler"
          RILL_UI_PUBLIC_INTAKE_PASSWORD: ${{ secrets.RILL_INTAKE_PASSWORD }}
          RILL_UI_PUBLIC_POSTHOG_API_KEY: "phc_4qnfUotXUuevk2zJN8ei8HgKXMynddEMI0wPI9XwzlS"
          RILL_UI_PUBLIC_PYLON_APP_ID: "26a0fdd2-3bd3-41e2-82bc-1b35a444729f"
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Set GORELEASER_CURRENT_TAG and NIGHTLY
        run: |
          echo '${{ github.ref_name }}' >> latest.txt
          if [[ ${{ env.PUBLISH_NIGHTLY }} == 'true' ]]; then
            echo "NIGHTLY=--snapshot" >> $GITHUB_ENV
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "GORELEASER_CURRENT_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          else
            echo "NIGHTLY=" >> $GITHUB_ENV
          fi   

      - name: Authenticate GCS
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.RILL_BINARY_SA }}"

      - name: Build Rill using Goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release ${{ env.NIGHTLY }} --config .goreleaser-${{ matrix.platform }}.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_ACCESS_TOKEN }}
          CGO_ENABLED: 1
          GORELEASER_CURRENT_TAG: ${{ env.GORELEASER_CURRENT_TAG }}
          PUBLISH_NIGHTLY: ${{ env.PUBLISH_NIGHTLY }}
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}Add commentMore actions
          DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}

      - name: Release - Upload install script to CDN bucket
        uses: google-github-actions/upload-cloud-storage@v2
        if: env.PUBLISH_RELEASE == 'true'
        with:
          path: scripts/install.sh
          destination: prod-cdn.rilldata.com/
          headers: |-
            cache-control: no-store

      - name: Release - Upload latest version file to CDN bucket
        if: env.PUBLISH_RELEASE == 'true'
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: latest.txt
          destination: prod-cdn.rilldata.com/rill/
          headers: |-
            cache-control: no-store

      - name: Publish nightly docker image
        if: ${{ env.PUBLISH_NIGHTLY == 'true' && matrix.os == 'ubuntu-latest' }}
        run: |-
          echo '${{ secrets.DOCKERHUB_PASS }}' | docker login -u '${{ secrets.DOCKERHUB_USER }}' --password-stdin
          docker tag rilldata/rill:latest rilldata/rill:nightly
          docker push rilldata/rill:nightly

      - name: Nightly - Prepare for nightly GCS upload
        if: env.PUBLISH_NIGHTLY == 'true'
        run: |-
          mkdir nightly
          cp dist/*.zip nightly/
          cp dist/checksums*.txt nightly/

      - name: Nightly - Upload nightly to CDN bucket
        if: env.PUBLISH_NIGHTLY == 'true'
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: nightly/
          destination: prod-cdn.rilldata.com/rill/
          headers: |-
            cache-control: no-store

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: CDN - Explicitly invalidate the old artifacts from CDN cache
        run: |-
          gcloud compute url-maps invalidate-cdn-cache prod --path "/install.sh" --async
          gcloud compute url-maps invalidate-cdn-cache prod --path "/rill/latest.txt" --async
          if [[ ${{ env.PUBLISH_NIGHTLY }} == 'true' ]]; then
            gcloud compute url-maps invalidate-cdn-cache prod --path "/rill/nightly/*" --async
          fi

      - name: Notify Slack
        uses: ravsamhq/notify-slack-action@v2
        if: always()
        with:
          status: ${{ job.status }}
          notification_title: "{workflow} has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_ANNOUNCE_DD }}

  combine-checksums:
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.RILL_BINARY_SA }}"

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Create working directory
        run: mkdir -p checksums

      - name: Evaluate release specific bucket dir
        run: |
          if [[ ${{ env.PUBLISH_NIGHTLY }} == 'true' ]]; then
            echo "BUCKET_DIR=rill/nightly" >> $GITHUB_ENV
          else
            echo "BUCKET_DIR=rill/$(echo "${GITHUB_REF#refs/tags/}")" >> $GITHUB_ENV
          fi

      - name: Download checksum files from GCS
        run: |
          gsutil cp gs://prod-cdn.rilldata.com/$BUCKET_DIR/checksums_*.txt ./checksums/

      - name: Combine checksum files
        run: |
          cat checksums/*.txt | sort | uniq > combined-checksums.txt

      - name: Upload combined checksums back to GCS
        run: |
          gsutil cp combined-checksums.txt gs://prod-cdn.rilldata.com/$BUCKET_DIR/checksums.txt
          if [[ ${{ env.PUBLISH_RELEASE }} == 'true' ]]; then
            gsutil cp combined-checksums.txt gs://prod-cdn.rilldata.com/rill/latest/checksums.txt
          fi