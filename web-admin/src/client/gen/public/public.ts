/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * rill/admin/v1/ai.proto
 * OpenAPI spec version: version not set
 */
import {
  createInfiniteQuery,
  createMutation,
  createQuery,
} from "@tanstack/svelte-query";
import type {
  CreateInfiniteQueryOptions,
  CreateInfiniteQueryResult,
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
} from "@tanstack/svelte-query";

import type {
  AdminServiceAddOrganizationMemberUserBody,
  AdminServiceCreateProjectBody,
  AdminServiceGetOrganizationParams,
  AdminServiceGetProjectParams,
  AdminServiceGetProjectVariablesParams,
  AdminServiceListOrganizationInvitesParams,
  AdminServiceListOrganizationMemberUsersParams,
  AdminServiceListOrganizationsParams,
  AdminServiceListProjectsForOrganizationParams,
  AdminServiceUpdateOrganizationBody,
  AdminServiceUpdateProjectBody,
  AdminServiceUpdateProjectVariablesBody,
  RpcStatus,
  V1AddOrganizationMemberUserResponse,
  V1CreateOrganizationRequest,
  V1CreateOrganizationResponse,
  V1CreateProjectResponse,
  V1DeleteOrganizationResponse,
  V1DeleteProjectResponse,
  V1GetOrganizationResponse,
  V1GetProjectResponse,
  V1GetProjectVariablesResponse,
  V1ListOrganizationInvitesResponse,
  V1ListOrganizationMemberUsersResponse,
  V1ListOrganizationsResponse,
  V1ListProjectsForOrganizationResponse,
  V1RemoveOrganizationMemberUserResponse,
  V1UpdateOrganizationResponse,
  V1UpdateProjectResponse,
  V1UpdateProjectVariablesResponse,
} from "../index.schemas";

import { httpClient } from "../../http-client";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary ListOrganizations lists all the organizations currently managed by the admin
 */
export const adminServiceListOrganizations = (
  params?: AdminServiceListOrganizationsParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1ListOrganizationsResponse>({
    url: `/v1/orgs`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationsQueryKey = (
  params?: AdminServiceListOrganizationsParams,
) => {
  return [`/v1/orgs`, ...(params ? [params] : [])] as const;
};

export const getAdminServiceListOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizations>>,
  TError = RpcStatus,
>(
  params?: AdminServiceListOrganizationsParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceListOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizations>>
  > = ({ signal }) => adminServiceListOrganizations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizations>>
>;
export type AdminServiceListOrganizationsQueryError = RpcStatus;

/**
 * @summary ListOrganizations lists all the organizations currently managed by the admin
 */

export function createAdminServiceListOrganizations<
  TData = Awaited<ReturnType<typeof adminServiceListOrganizations>>,
  TError = RpcStatus,
>(
  params?: AdminServiceListOrganizationsParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizations>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceListOrganizationsQueryOptions(
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary CreateOrganization creates a new organization
 */
export const adminServiceCreateOrganization = (
  v1CreateOrganizationRequest: V1CreateOrganizationRequest,
  signal?: AbortSignal,
) => {
  return httpClient<V1CreateOrganizationResponse>({
    url: `/v1/orgs`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: v1CreateOrganizationRequest,
    signal,
  });
};

export const getAdminServiceCreateOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    TError,
    { data: V1CreateOrganizationRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
  TError,
  { data: V1CreateOrganizationRequest },
  TContext
> => {
  const mutationKey = ["adminServiceCreateOrganization"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    { data: V1CreateOrganizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceCreateOrganization(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>
>;
export type AdminServiceCreateOrganizationMutationBody =
  V1CreateOrganizationRequest;
export type AdminServiceCreateOrganizationMutationError = RpcStatus;

/**
 * @summary CreateOrganization creates a new organization
 */
export const createAdminServiceCreateOrganization = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
      TError,
      { data: V1CreateOrganizationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
  TError,
  { data: V1CreateOrganizationRequest },
  TContext
> => {
  const mutationOptions =
    getAdminServiceCreateOrganizationMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary GetOrganization returns information about a specific organization
 */
export const adminServiceGetOrganization = (
  org: string,
  params?: AdminServiceGetOrganizationParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1GetOrganizationResponse>({
    url: `/v1/orgs/${org}`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceGetOrganizationQueryKey = (
  org: string,
  params?: AdminServiceGetOrganizationParams,
) => {
  return [`/v1/orgs/${org}`, ...(params ? [params] : [])] as const;
};

export const getAdminServiceGetOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetOrganization>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceGetOrganizationParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetOrganization>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetOrganizationQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetOrganization>>
  > = ({ signal }) => adminServiceGetOrganization(org, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceGetOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceGetOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetOrganization>>
>;
export type AdminServiceGetOrganizationQueryError = RpcStatus;

/**
 * @summary GetOrganization returns information about a specific organization
 */

export function createAdminServiceGetOrganization<
  TData = Awaited<ReturnType<typeof adminServiceGetOrganization>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceGetOrganizationParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetOrganization>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceGetOrganizationQueryOptions(
    org,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary DeleteOrganization deletes an organization
 */
export const adminServiceDeleteOrganization = (org: string) => {
  return httpClient<V1DeleteOrganizationResponse>({
    url: `/v1/orgs/${org}`,
    method: "DELETE",
  });
};

export const getAdminServiceDeleteOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    TError,
    { org: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
  TError,
  { org: string },
  TContext
> => {
  const mutationKey = ["adminServiceDeleteOrganization"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    { org: string }
  > = (props) => {
    const { org } = props ?? {};

    return adminServiceDeleteOrganization(org);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceDeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>
>;

export type AdminServiceDeleteOrganizationMutationError = RpcStatus;

/**
 * @summary DeleteOrganization deletes an organization
 */
export const createAdminServiceDeleteOrganization = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
      TError,
      { org: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
  TError,
  { org: string },
  TContext
> => {
  const mutationOptions =
    getAdminServiceDeleteOrganizationMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary UpdateOrganization deletes an organizations
 */
export const adminServiceUpdateOrganization = (
  org: string,
  adminServiceUpdateOrganizationBody: AdminServiceUpdateOrganizationBody,
) => {
  return httpClient<V1UpdateOrganizationResponse>({
    url: `/v1/orgs/${org}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateOrganizationBody,
  });
};

export const getAdminServiceUpdateOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    TError,
    { org: string; data: AdminServiceUpdateOrganizationBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
  TError,
  { org: string; data: AdminServiceUpdateOrganizationBody },
  TContext
> => {
  const mutationKey = ["adminServiceUpdateOrganization"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    { org: string; data: AdminServiceUpdateOrganizationBody }
  > = (props) => {
    const { org, data } = props ?? {};

    return adminServiceUpdateOrganization(org, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>
>;
export type AdminServiceUpdateOrganizationMutationBody =
  AdminServiceUpdateOrganizationBody;
export type AdminServiceUpdateOrganizationMutationError = RpcStatus;

/**
 * @summary UpdateOrganization deletes an organizations
 */
export const createAdminServiceUpdateOrganization = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
      TError,
      { org: string; data: AdminServiceUpdateOrganizationBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
  TError,
  { org: string; data: AdminServiceUpdateOrganizationBody },
  TContext
> => {
  const mutationOptions =
    getAdminServiceUpdateOrganizationMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary ListOrganizationInvites lists all the org invites
 */
export const adminServiceListOrganizationInvites = (
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1ListOrganizationInvitesResponse>({
    url: `/v1/orgs/${org}/invites`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationInvitesQueryKey = (
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
) => {
  return [`/v1/orgs/${org}/invites`, ...(params ? [params] : [])] as const;
};

export const getAdminServiceListOrganizationInvitesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    AdminServiceListOrganizationInvitesParams["pageToken"]
  >,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: Partial<
      CreateInfiniteQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        TError,
        TData,
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        QueryKey,
        AdminServiceListOrganizationInvitesParams["pageToken"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationInvitesQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    QueryKey,
    AdminServiceListOrganizationInvitesParams["pageToken"]
  > = ({ signal, pageParam }) =>
    adminServiceListOrganizationInvites(
      org,
      { ...params, pageToken: pageParam || params?.["pageToken"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateInfiniteQueryOptions<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    TError,
    TData,
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    QueryKey,
    AdminServiceListOrganizationInvitesParams["pageToken"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListOrganizationInvitesInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>>;
export type AdminServiceListOrganizationInvitesInfiniteQueryError = RpcStatus;

/**
 * @summary ListOrganizationInvites lists all the org invites
 */

export function createAdminServiceListOrganizationInvitesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    AdminServiceListOrganizationInvitesParams["pageToken"]
  >,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: Partial<
      CreateInfiniteQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        TError,
        TData,
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        QueryKey,
        AdminServiceListOrganizationInvitesParams["pageToken"]
      >
    >;
  },
  queryClient?: QueryClient,
): CreateInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdminServiceListOrganizationInvitesInfiniteQueryOptions(
      org,
      params,
      options,
    );

  const query = createInfiniteQuery(
    queryOptions,
    queryClient,
  ) as CreateInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminServiceListOrganizationInvitesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationInvitesQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>
  > = ({ signal }) => adminServiceListOrganizationInvites(org, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListOrganizationInvitesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>
>;
export type AdminServiceListOrganizationInvitesQueryError = RpcStatus;

/**
 * @summary ListOrganizationInvites lists all the org invites
 */

export function createAdminServiceListOrganizationInvites<
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceListOrganizationInvitesQueryOptions(
    org,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ListOrganizationMemberUsers lists all the org members
 */
export const adminServiceListOrganizationMemberUsers = (
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1ListOrganizationMemberUsersResponse>({
    url: `/v1/orgs/${org}/members`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationMemberUsersQueryKey = (
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
) => {
  return [`/v1/orgs/${org}/members`, ...(params ? [params] : [])] as const;
};

export const getAdminServiceListOrganizationMemberUsersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    AdminServiceListOrganizationMemberUsersParams["pageToken"]
  >,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
  options?: {
    query?: Partial<
      CreateInfiniteQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        QueryKey,
        AdminServiceListOrganizationMemberUsersParams["pageToken"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationMemberUsersQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    QueryKey,
    AdminServiceListOrganizationMemberUsersParams["pageToken"]
  > = ({ signal, pageParam }) =>
    adminServiceListOrganizationMemberUsers(
      org,
      { ...params, pageToken: pageParam || params?.["pageToken"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateInfiniteQueryOptions<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    TError,
    TData,
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    QueryKey,
    AdminServiceListOrganizationMemberUsersParams["pageToken"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListOrganizationMemberUsersInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>
  >;
export type AdminServiceListOrganizationMemberUsersInfiniteQueryError =
  RpcStatus;

/**
 * @summary ListOrganizationMemberUsers lists all the org members
 */

export function createAdminServiceListOrganizationMemberUsersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    AdminServiceListOrganizationMemberUsersParams["pageToken"]
  >,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
  options?: {
    query?: Partial<
      CreateInfiniteQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        QueryKey,
        AdminServiceListOrganizationMemberUsersParams["pageToken"]
      >
    >;
  },
  queryClient?: QueryClient,
): CreateInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdminServiceListOrganizationMemberUsersInfiniteQueryOptions(
      org,
      params,
      options,
    );

  const query = createInfiniteQuery(
    queryOptions,
    queryClient,
  ) as CreateInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminServiceListOrganizationMemberUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationMemberUsersQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>
  > = ({ signal }) =>
    adminServiceListOrganizationMemberUsers(org, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListOrganizationMemberUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>
>;
export type AdminServiceListOrganizationMemberUsersQueryError = RpcStatus;

/**
 * @summary ListOrganizationMemberUsers lists all the org members
 */

export function createAdminServiceListOrganizationMemberUsers<
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListOrganizationMemberUsersParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListOrganizationMemberUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceListOrganizationMemberUsersQueryOptions(
    org,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary AddOrganizationMemberUser adds a user to the organization
 */
export const adminServiceAddOrganizationMemberUser = (
  org: string,
  adminServiceAddOrganizationMemberUserBody: AdminServiceAddOrganizationMemberUserBody,
  signal?: AbortSignal,
) => {
  return httpClient<V1AddOrganizationMemberUserResponse>({
    url: `/v1/orgs/${org}/members`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: adminServiceAddOrganizationMemberUserBody,
    signal,
  });
};

export const getAdminServiceAddOrganizationMemberUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>,
    TError,
    { org: string; data: AdminServiceAddOrganizationMemberUserBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>,
  TError,
  { org: string; data: AdminServiceAddOrganizationMemberUserBody },
  TContext
> => {
  const mutationKey = ["adminServiceAddOrganizationMemberUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>,
    { org: string; data: AdminServiceAddOrganizationMemberUserBody }
  > = (props) => {
    const { org, data } = props ?? {};

    return adminServiceAddOrganizationMemberUser(org, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceAddOrganizationMemberUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>
>;
export type AdminServiceAddOrganizationMemberUserMutationBody =
  AdminServiceAddOrganizationMemberUserBody;
export type AdminServiceAddOrganizationMemberUserMutationError = RpcStatus;

/**
 * @summary AddOrganizationMemberUser adds a user to the organization
 */
export const createAdminServiceAddOrganizationMemberUser = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>,
      TError,
      { org: string; data: AdminServiceAddOrganizationMemberUserBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceAddOrganizationMemberUser>>,
  TError,
  { org: string; data: AdminServiceAddOrganizationMemberUserBody },
  TContext
> => {
  const mutationOptions =
    getAdminServiceAddOrganizationMemberUserMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary RemoveOrganizationMemberUser removes member from the organization
 */
export const adminServiceRemoveOrganizationMemberUser = (
  org: string,
  email: string,
) => {
  return httpClient<V1RemoveOrganizationMemberUserResponse>({
    url: `/v1/orgs/${org}/members/${email}`,
    method: "DELETE",
  });
};

export const getAdminServiceRemoveOrganizationMemberUserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>,
    TError,
    { org: string; email: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>,
  TError,
  { org: string; email: string },
  TContext
> => {
  const mutationKey = ["adminServiceRemoveOrganizationMemberUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>,
    { org: string; email: string }
  > = (props) => {
    const { org, email } = props ?? {};

    return adminServiceRemoveOrganizationMemberUser(org, email);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRemoveOrganizationMemberUserMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>
  >;

export type AdminServiceRemoveOrganizationMemberUserMutationError = RpcStatus;

/**
 * @summary RemoveOrganizationMemberUser removes member from the organization
 */
export const createAdminServiceRemoveOrganizationMemberUser = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>,
      TError,
      { org: string; email: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceRemoveOrganizationMemberUser>>,
  TError,
  { org: string; email: string },
  TContext
> => {
  const mutationOptions =
    getAdminServiceRemoveOrganizationMemberUserMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary ListProjectsForOrganization lists all the projects currently available for given organizations.
 */
export const adminServiceListProjectsForOrganization = (
  org: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1ListProjectsForOrganizationResponse>({
    url: `/v1/orgs/${org}/projects`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceListProjectsForOrganizationQueryKey = (
  org: string,
  params?: AdminServiceListProjectsForOrganizationParams,
) => {
  return [`/v1/orgs/${org}/projects`, ...(params ? [params] : [])] as const;
};

export const getAdminServiceListProjectsForOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListProjectsForOrganizationQueryKey(org, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>
  > = ({ signal }) =>
    adminServiceListProjectsForOrganization(org, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!org,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceListProjectsForOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>
>;
export type AdminServiceListProjectsForOrganizationQueryError = RpcStatus;

/**
 * @summary ListProjectsForOrganization lists all the projects currently available for given organizations.
 */

export function createAdminServiceListProjectsForOrganization<
  TData = Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
  TError = RpcStatus,
>(
  org: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceListProjectsForOrganizationQueryOptions(
    org,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary CreateProject creates a new project
 */
export const adminServiceCreateProject = (
  org: string,
  adminServiceCreateProjectBody: AdminServiceCreateProjectBody,
  signal?: AbortSignal,
) => {
  return httpClient<V1CreateProjectResponse>({
    url: `/v1/orgs/${org}/projects`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: adminServiceCreateProjectBody,
    signal,
  });
};

export const getAdminServiceCreateProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    TError,
    { org: string; data: AdminServiceCreateProjectBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateProject>>,
  TError,
  { org: string; data: AdminServiceCreateProjectBody },
  TContext
> => {
  const mutationKey = ["adminServiceCreateProject"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    { org: string; data: AdminServiceCreateProjectBody }
  > = (props) => {
    const { org, data } = props ?? {};

    return adminServiceCreateProject(org, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateProject>>
>;
export type AdminServiceCreateProjectMutationBody =
  AdminServiceCreateProjectBody;
export type AdminServiceCreateProjectMutationError = RpcStatus;

/**
 * @summary CreateProject creates a new project
 */
export const createAdminServiceCreateProject = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceCreateProject>>,
      TError,
      { org: string; data: AdminServiceCreateProjectBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceCreateProject>>,
  TError,
  { org: string; data: AdminServiceCreateProjectBody },
  TContext
> => {
  const mutationOptions = getAdminServiceCreateProjectMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary GetProject returns information about a specific project
 */
export const adminServiceGetProject = (
  org: string,
  project: string,
  params?: AdminServiceGetProjectParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1GetProjectResponse>({
    url: `/v1/orgs/${org}/projects/${project}`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceGetProjectQueryKey = (
  org: string,
  project: string,
  params?: AdminServiceGetProjectParams,
) => {
  return [
    `/v1/orgs/${org}/projects/${project}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdminServiceGetProjectQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetProject>>,
  TError = RpcStatus,
>(
  org: string,
  project: string,
  params?: AdminServiceGetProjectParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetProject>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetProjectQueryKey(org, project, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetProject>>
  > = ({ signal }) => adminServiceGetProject(org, project, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(org && project),
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceGetProject>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceGetProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetProject>>
>;
export type AdminServiceGetProjectQueryError = RpcStatus;

/**
 * @summary GetProject returns information about a specific project
 */

export function createAdminServiceGetProject<
  TData = Awaited<ReturnType<typeof adminServiceGetProject>>,
  TError = RpcStatus,
>(
  org: string,
  project: string,
  params?: AdminServiceGetProjectParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetProject>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceGetProjectQueryOptions(
    org,
    project,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary DeleteProject deletes an project
 */
export const adminServiceDeleteProject = (org: string, project: string) => {
  return httpClient<V1DeleteProjectResponse>({
    url: `/v1/orgs/${org}/projects/${project}`,
    method: "DELETE",
  });
};

export const getAdminServiceDeleteProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    TError,
    { org: string; project: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>,
  TError,
  { org: string; project: string },
  TContext
> => {
  const mutationKey = ["adminServiceDeleteProject"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    { org: string; project: string }
  > = (props) => {
    const { org, project } = props ?? {};

    return adminServiceDeleteProject(org, project);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceDeleteProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>
>;

export type AdminServiceDeleteProjectMutationError = RpcStatus;

/**
 * @summary DeleteProject deletes an project
 */
export const createAdminServiceDeleteProject = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceDeleteProject>>,
      TError,
      { org: string; project: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>,
  TError,
  { org: string; project: string },
  TContext
> => {
  const mutationOptions = getAdminServiceDeleteProjectMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary UpdateProject updates a project
 */
export const adminServiceUpdateProject = (
  org: string,
  project: string,
  adminServiceUpdateProjectBody: AdminServiceUpdateProjectBody,
) => {
  return httpClient<V1UpdateProjectResponse>({
    url: `/v1/orgs/${org}/projects/${project}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateProjectBody,
  });
};

export const getAdminServiceUpdateProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    TError,
    { org: string; project: string; data: AdminServiceUpdateProjectBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>,
  TError,
  { org: string; project: string; data: AdminServiceUpdateProjectBody },
  TContext
> => {
  const mutationKey = ["adminServiceUpdateProject"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    { org: string; project: string; data: AdminServiceUpdateProjectBody }
  > = (props) => {
    const { org, project, data } = props ?? {};

    return adminServiceUpdateProject(org, project, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>
>;
export type AdminServiceUpdateProjectMutationBody =
  AdminServiceUpdateProjectBody;
export type AdminServiceUpdateProjectMutationError = RpcStatus;

/**
 * @summary UpdateProject updates a project
 */
export const createAdminServiceUpdateProject = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceUpdateProject>>,
      TError,
      { org: string; project: string; data: AdminServiceUpdateProjectBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>,
  TError,
  { org: string; project: string; data: AdminServiceUpdateProjectBody },
  TContext
> => {
  const mutationOptions = getAdminServiceUpdateProjectMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
/**
 * @summary GetProjectVariables returns project variables.
 */
export const adminServiceGetProjectVariables = (
  org: string,
  project: string,
  params?: AdminServiceGetProjectVariablesParams,
  signal?: AbortSignal,
) => {
  return httpClient<V1GetProjectVariablesResponse>({
    url: `/v1/orgs/${org}/projects/${project}/variables`,
    method: "GET",
    params,
    signal,
  });
};

export const getAdminServiceGetProjectVariablesQueryKey = (
  org: string,
  project: string,
  params?: AdminServiceGetProjectVariablesParams,
) => {
  return [
    `/v1/orgs/${org}/projects/${project}/variables`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdminServiceGetProjectVariablesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
  TError = RpcStatus,
>(
  org: string,
  project: string,
  params?: AdminServiceGetProjectVariablesParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetProjectVariablesQueryKey(org, project, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetProjectVariables>>
  > = ({ signal }) =>
    adminServiceGetProjectVariables(org, project, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(org && project),
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminServiceGetProjectVariablesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetProjectVariables>>
>;
export type AdminServiceGetProjectVariablesQueryError = RpcStatus;

/**
 * @summary GetProjectVariables returns project variables.
 */

export function createAdminServiceGetProjectVariables<
  TData = Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
  TError = RpcStatus,
>(
  org: string,
  project: string,
  params?: AdminServiceGetProjectVariablesParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminServiceGetProjectVariablesQueryOptions(
    org,
    project,
    params,
    options,
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary UpdateProjectVariables updates variables for a project.
 */
export const adminServiceUpdateProjectVariables = (
  org: string,
  project: string,
  adminServiceUpdateProjectVariablesBody: AdminServiceUpdateProjectVariablesBody,
) => {
  return httpClient<V1UpdateProjectVariablesResponse>({
    url: `/v1/orgs/${org}/projects/${project}/variables`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateProjectVariablesBody,
  });
};

export const getAdminServiceUpdateProjectVariablesMutationOptions = <
  TError = RpcStatus,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
    TError,
    {
      org: string;
      project: string;
      data: AdminServiceUpdateProjectVariablesBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
  TError,
  {
    org: string;
    project: string;
    data: AdminServiceUpdateProjectVariablesBody;
  },
  TContext
> => {
  const mutationKey = ["adminServiceUpdateProjectVariables"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
    {
      org: string;
      project: string;
      data: AdminServiceUpdateProjectVariablesBody;
    }
  > = (props) => {
    const { org, project, data } = props ?? {};

    return adminServiceUpdateProjectVariables(org, project, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateProjectVariablesMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>
>;
export type AdminServiceUpdateProjectVariablesMutationBody =
  AdminServiceUpdateProjectVariablesBody;
export type AdminServiceUpdateProjectVariablesMutationError = RpcStatus;

/**
 * @summary UpdateProjectVariables updates variables for a project.
 */
export const createAdminServiceUpdateProjectVariables = <
  TError = RpcStatus,
  TContext = unknown,
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
      TError,
      {
        org: string;
        project: string;
        data: AdminServiceUpdateProjectVariablesBody;
      },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
  TError,
  {
    org: string;
    project: string;
    data: AdminServiceUpdateProjectVariablesBody;
  },
  TContext
> => {
  const mutationOptions =
    getAdminServiceUpdateProjectVariablesMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
