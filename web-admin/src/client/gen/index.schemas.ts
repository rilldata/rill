/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * rill/admin/v1/ai.proto
 * OpenAPI spec version: version not set
 */
export interface ProtobufAny {
  "@type"?: string;
  [key: string]: unknown;
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

The JSON representation for `NullValue` is JSON `null`.

 - NULL_VALUE: Null value.
 */
export type ProtobufNullValue =
  (typeof ProtobufNullValue)[keyof typeof ProtobufNullValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProtobufNullValue = {
  NULL_VALUE: "NULL_VALUE",
} as const;

export interface RpcStatus {
  code?: number;
  message?: string;
  details?: ProtobufAny[];
}

export interface V1AddOrganizationMemberUserResponse {
  pendingSignup?: boolean;
}

export interface V1CompleteRequest {
  messages?: V1CompletionMessage[];
  tools?: V1Tool[];
}

export interface V1CompleteResponse {
  message?: V1CompletionMessage;
}

export interface V1CompletionMessage {
  role?: string;
  data?: string;
  content?: V1ContentBlock[];
}

export interface V1ContentBlock {
  text?: string;
  toolCall?: V1ToolCall;
  toolResult?: V1ToolResult;
}

export interface V1CreateOrganizationRequest {
  name?: string;
  description?: string;
  displayName?: string;
}

export interface V1CreateOrganizationResponse {
  organization?: V1Organization;
}

export interface V1CreateProjectResponse {
  project?: V1Project;
}

export interface V1DeleteOrganizationResponse {
  [key: string]: unknown;
}

export interface V1DeleteProjectResponse {
  id?: string;
}

export interface V1Deployment {
  id?: string;
  projectId?: string;
  ownerUserId?: string;
  environment?: string;
  branch?: string;
  runtimeHost?: string;
  runtimeInstanceId?: string;
  status?: V1DeploymentStatus;
  statusMessage?: string;
  createdOn?: string;
  updatedOn?: string;
}

export type V1DeploymentStatus =
  (typeof V1DeploymentStatus)[keyof typeof V1DeploymentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1DeploymentStatus = {
  DEPLOYMENT_STATUS_UNSPECIFIED: "DEPLOYMENT_STATUS_UNSPECIFIED",
  DEPLOYMENT_STATUS_PENDING: "DEPLOYMENT_STATUS_PENDING",
  DEPLOYMENT_STATUS_OK: "DEPLOYMENT_STATUS_OK",
  DEPLOYMENT_STATUS_ERROR: "DEPLOYMENT_STATUS_ERROR",
  DEPLOYMENT_STATUS_STOPPED: "DEPLOYMENT_STATUS_STOPPED",
} as const;

export interface V1GetOrganizationResponse {
  organization?: V1Organization;
  permissions?: V1OrganizationPermissions;
}

export interface V1GetProjectResponse {
  project?: V1Project;
  prodDeployment?: V1Deployment;
  jwt?: string;
  projectPermissions?: V1ProjectPermissions;
}

/**
 * Deprecated: Populated for backwards compatibility.
(Renamed from "variables" to "variables_map").
 */
export type V1GetProjectVariablesResponseVariablesMap = {
  [key: string]: string;
};

export interface V1GetProjectVariablesResponse {
  variables?: V1ProjectVariable[];
  /** Deprecated: Populated for backwards compatibility.
(Renamed from "variables" to "variables_map"). */
  variablesMap?: V1GetProjectVariablesResponseVariablesMap;
}

export interface V1ListOrganizationInvitesResponse {
  invites?: V1OrganizationInvite[];
  totalCount?: number;
  nextPageToken?: string;
}

export interface V1ListOrganizationMemberUsersResponse {
  members?: V1OrganizationMemberUser[];
  totalCount?: number;
  nextPageToken?: string;
}

export interface V1ListOrganizationsResponse {
  organizations?: V1Organization[];
  nextPageToken?: string;
}

export interface V1ListProjectsForOrganizationResponse {
  projects?: V1Project[];
  nextPageToken?: string;
}

export interface V1Organization {
  id?: string;
  name?: string;
  displayName?: string;
  description?: string;
  logoUrl?: string;
  faviconUrl?: string;
  thumbnailUrl?: string;
  customDomain?: string;
  defaultProjectRoleId?: string;
  quotas?: V1OrganizationQuotas;
  billingCustomerId?: string;
  paymentCustomerId?: string;
  billingEmail?: string;
  billingPlanName?: string;
  billingPlanDisplayName?: string;
  createdOn?: string;
  updatedOn?: string;
}

export interface V1OrganizationInvite {
  email?: string;
  roleName?: string;
  invitedBy?: string;
}

export interface V1OrganizationMemberUser {
  userId?: string;
  userEmail?: string;
  userName?: string;
  userPhotoUrl?: string;
  roleName?: string;
  projectsCount?: number;
  usergroupsCount?: number;
  createdOn?: string;
  updatedOn?: string;
}

export interface V1OrganizationPermissions {
  admin?: boolean;
  guest?: boolean;
  readOrg?: boolean;
  manageOrg?: boolean;
  readProjects?: boolean;
  createProjects?: boolean;
  manageProjects?: boolean;
  readOrgMembers?: boolean;
  manageOrgMembers?: boolean;
  manageOrgAdmins?: boolean;
}

export interface V1OrganizationQuotas {
  projects?: number;
  deployments?: number;
  slotsTotal?: number;
  slotsPerDeployment?: number;
  outstandingInvites?: number;
  storageLimitBytesPerDeployment?: string;
}

export type V1ProjectAnnotations = { [key: string]: string };

export interface V1Project {
  id?: string;
  name?: string;
  orgId?: string;
  orgName?: string;
  description?: string;
  public?: boolean;
  createdByUserId?: string;
  directoryName?: string;
  provisioner?: string;
  gitRemote?: string;
  /** managed_git_id is set if the project is connected to a rill-managed git repo. */
  managedGitId?: string;
  subpath?: string;
  prodBranch?: string;
  archiveAssetId?: string;
  prodSlots?: string;
  prodDeploymentId?: string;
  devSlots?: string;
  /** Note: Does NOT incorporate the parent org's custom domain. */
  frontendUrl?: string;
  prodTtlSeconds?: string;
  annotations?: V1ProjectAnnotations;
  prodVersion?: string;
  createdOn?: string;
  updatedOn?: string;
}

export interface V1ProjectPermissions {
  admin?: boolean;
  readProject?: boolean;
  manageProject?: boolean;
  readProd?: boolean;
  readProdStatus?: boolean;
  manageProd?: boolean;
  readDev?: boolean;
  readDevStatus?: boolean;
  manageDev?: boolean;
  readProvisionerResources?: boolean;
  manageProvisionerResources?: boolean;
  readProjectMembers?: boolean;
  manageProjectMembers?: boolean;
  manageProjectAdmins?: boolean;
  createMagicAuthTokens?: boolean;
  manageMagicAuthTokens?: boolean;
  createReports?: boolean;
  manageReports?: boolean;
  createAlerts?: boolean;
  manageAlerts?: boolean;
  createBookmarks?: boolean;
  manageBookmarks?: boolean;
}

export interface V1ProjectVariable {
  /** Internal ID. */
  id?: string;
  /** Variable name (case insensitive). */
  name?: string;
  /** Variable value. */
  value?: string;
  /** Environment the variable is set for.
If empty, the variable is shared for all environments. */
  environment?: string;
  /** User ID that most recently updated the variable. May be empty. */
  updatedByUserId?: string;
  /** Timestamp when the variable was created. */
  createdOn?: string;
  /** Timestamp when the variable was last updated. */
  updatedOn?: string;
}

export type V1RecordEventsRequestEventsItem = { [key: string]: unknown };

export interface V1RecordEventsRequest {
  events?: V1RecordEventsRequestEventsItem[];
}

export interface V1RecordEventsResponse {
  [key: string]: unknown;
}

export interface V1RemoveOrganizationMemberUserResponse {
  [key: string]: unknown;
}

export interface V1Tool {
  name?: string;
  description?: string;
  inputSchema?: string;
}

export type V1ToolCallInput = { [key: string]: unknown };

export interface V1ToolCall {
  id?: string;
  name?: string;
  input?: V1ToolCallInput;
}

export interface V1ToolResult {
  id?: string;
  content?: string;
  isError?: boolean;
}

export interface V1UpdateOrganizationResponse {
  organization?: V1Organization;
}

export interface V1UpdateProjectResponse {
  project?: V1Project;
}

export interface V1UpdateProjectVariablesResponse {
  /** Variables that were created or updated by the request. */
  variables?: V1ProjectVariable[];
}

export type AdminServiceListOrganizationsParams = {
  pageSize?: number;
  pageToken?: string;
};

export type AdminServiceGetOrganizationParams = {
  superuserForceAccess?: boolean;
};

export type AdminServiceUpdateOrganizationBody = {
  description?: string;
  newName?: string;
  displayName?: string;
  logoAssetId?: string;
  faviconAssetId?: string;
  thumbnailAssetId?: string;
  defaultProjectRole?: string;
  billingEmail?: string;
};

export type AdminServiceListOrganizationInvitesParams = {
  pageSize?: number;
  pageToken?: string;
};

export type AdminServiceListOrganizationMemberUsersParams = {
  /**
   * Optionally filter by role
   */
  role?: string;
  /**
   * Optionally include counts
   */
  includeCounts?: boolean;
  pageSize?: number;
  pageToken?: string;
  superuserForceAccess?: boolean;
};

export type AdminServiceAddOrganizationMemberUserBody = {
  email?: string;
  role?: string;
  superuserForceAccess?: boolean;
};

export type AdminServiceGetProjectVariablesParams = {
  /**
 * Environment to get the variables for.
If empty, only variables shared across all environments are returned.
 */
  environment?: string;
  /**
 * If true, return variable values for all environments.
Can't be used together with the "environment" option.
 */
  forAllEnvironments?: boolean;
};

/**
 * New variable values.
It is NOT NECESSARY to pass all variables, existing variables not included in the request will be left unchanged.
 */
export type AdminServiceUpdateProjectVariablesBodyVariables = {
  [key: string]: string;
};

export type AdminServiceUpdateProjectVariablesBody = {
  /** Environment to set the variables for.
If empty, the variable(s) will be used as defaults for all environments. */
  environment?: string;
  /** New variable values.
It is NOT NECESSARY to pass all variables, existing variables not included in the request will be left unchanged. */
  variables?: AdminServiceUpdateProjectVariablesBodyVariables;
  /** Variables to delete. */
  unsetVariables?: string[];
};

export type AdminServiceListProjectsForOrganizationParams = {
  pageSize?: number;
  pageToken?: string;
};

export type AdminServiceCreateProjectBody = {
  name?: string;
  description?: string;
  public?: boolean;
  /** directory_name should be the most recently observed local directory name for the project.
See ListProjectsForFingerprint for more context. */
  directoryName?: string;
  provisioner?: string;
  prodSlots?: string;
  subpath?: string;
  prodBranch?: string;
  /** git_remote is set for projects whose project files are stored in Git.
It currently only supports Github remotes. It should be a HTTPS remote ending in .git for github.com.
Either git_remote or archive_asset_id should be set. */
  gitRemote?: string;
  /** archive_asset_id is set for projects whose project files are not stored in github but are managed by rill. */
  archiveAssetId?: string;
  prodVersion?: string;
  skipDeploy?: boolean;
};

export type AdminServiceGetProjectParams = {
  accessTokenTtlSeconds?: number;
  superuserForceAccess?: boolean;
  issueSuperuserToken?: boolean;
};

export type AdminServiceUpdateProjectBody = {
  description?: string;
  public?: boolean;
  directoryName?: string;
  prodBranch?: string;
  gitRemote?: string;
  subpath?: string;
  archiveAssetId?: string;
  prodSlots?: string;
  provisioner?: string;
  newName?: string;
  prodTtlSeconds?: string;
  prodVersion?: string;
  superuserForceAccess?: boolean;
};
