// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/admin/v1/api.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	runtimev1 "github.com/rilldata/rill/proto/gen/rill/runtime/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = runtimev1.ExportFormat(0)
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationNameForDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationNameForDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationNameForDomainRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationNameForDomainRequestMultiError, or nil if none found.
func (m *GetOrganizationNameForDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationNameForDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := GetOrganizationNameForDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationNameForDomainRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationNameForDomainRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationNameForDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationNameForDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationNameForDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationNameForDomainRequestMultiError) AllErrors() []error { return m }

// GetOrganizationNameForDomainRequestValidationError is the validation error
// returned by GetOrganizationNameForDomainRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationNameForDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationNameForDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationNameForDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationNameForDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationNameForDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationNameForDomainRequestValidationError) ErrorName() string {
	return "GetOrganizationNameForDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationNameForDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationNameForDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationNameForDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationNameForDomainRequestValidationError{}

// Validate checks the field values on GetOrganizationNameForDomainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationNameForDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationNameForDomainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationNameForDomainResponseMultiError, or nil if none found.
func (m *GetOrganizationNameForDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationNameForDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrganizationNameForDomainResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationNameForDomainResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationNameForDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationNameForDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationNameForDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationNameForDomainResponseMultiError) AllErrors() []error { return m }

// GetOrganizationNameForDomainResponseValidationError is the validation error
// returned by GetOrganizationNameForDomainResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationNameForDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationNameForDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationNameForDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationNameForDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationNameForDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationNameForDomainResponseValidationError) ErrorName() string {
	return "GetOrganizationNameForDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationNameForDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationNameForDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationNameForDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationNameForDomainResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.NewName != nil {
		// no validation rules for NewName
	}

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.LogoAssetId != nil {
		// no validation rules for LogoAssetId
	}

	if m.FaviconAssetId != nil {
		// no validation rules for FaviconAssetId
	}

	if m.BillingEmail != nil {

		if err := m._validateEmail(m.GetBillingEmail()); err != nil {
			err = UpdateOrganizationRequestValidationError{
				field:  "BillingEmail",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateOrganizationRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateOrganizationRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on ListProjectsForOrganizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsForOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsForOrganizationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsForOrganizationRequestMultiError, or nil if none found.
func (m *ListProjectsForOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsForOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := ListProjectsForOrganizationRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectsForOrganizationRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectsForOrganizationRequestMultiError(errors)
	}

	return nil
}

// ListProjectsForOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsForOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsForOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsForOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsForOrganizationRequestMultiError) AllErrors() []error { return m }

// ListProjectsForOrganizationRequestValidationError is the validation error
// returned by ListProjectsForOrganizationRequest.Validate if the designated
// constraints aren't met.
type ListProjectsForOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsForOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsForOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsForOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsForOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsForOrganizationRequestValidationError) ErrorName() string {
	return "ListProjectsForOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsForOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsForOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsForOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsForOrganizationRequestValidationError{}

// Validate checks the field values on ListProjectsForOrganizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsForOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsForOrganizationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsForOrganizationResponseMultiError, or nil if none found.
func (m *ListProjectsForOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsForOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsForOrganizationResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsForOrganizationResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsForOrganizationResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectsForOrganizationResponseMultiError(errors)
	}

	return nil
}

// ListProjectsForOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsForOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsForOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsForOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsForOrganizationResponseMultiError) AllErrors() []error { return m }

// ListProjectsForOrganizationResponseValidationError is the validation error
// returned by ListProjectsForOrganizationResponse.Validate if the designated
// constraints aren't met.
type ListProjectsForOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsForOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsForOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsForOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsForOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsForOrganizationResponseValidationError) ErrorName() string {
	return "ListProjectsForOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsForOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsForOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsForOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsForOrganizationResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	// no validation rules for AccessTokenTtlSeconds

	// no validation rules for IssueSuperuserToken

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProdDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProdDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProdDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProdDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "ProdDeployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jwt

	if all {
		switch v := interface{}(m.GetProjectPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProjectPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProjectPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "ProjectPermissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on GetProjectByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectByIDRequestMultiError, or nil if none found.
func (m *GetProjectByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProjectByIDRequestMultiError(errors)
	}

	return nil
}

// GetProjectByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectByIDRequestMultiError) AllErrors() []error { return m }

// GetProjectByIDRequestValidationError is the validation error returned by
// GetProjectByIDRequest.Validate if the designated constraints aren't met.
type GetProjectByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectByIDRequestValidationError) ErrorName() string {
	return "GetProjectByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectByIDRequestValidationError{}

// Validate checks the field values on GetProjectByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectByIDResponseMultiError, or nil if none found.
func (m *GetProjectByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectByIDResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectByIDResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectByIDResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectByIDResponseMultiError(errors)
	}

	return nil
}

// GetProjectByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetProjectByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProjectByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectByIDResponseMultiError) AllErrors() []error { return m }

// GetProjectByIDResponseValidationError is the validation error returned by
// GetProjectByIDResponse.Validate if the designated constraints aren't met.
type GetProjectByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectByIDResponseValidationError) ErrorName() string {
	return "GetProjectByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectByIDResponseValidationError{}

// Validate checks the field values on SearchProjectNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProjectNamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProjectNamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProjectNamesRequestMultiError, or nil if none found.
func (m *SearchProjectNamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProjectNamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamePattern

	// no validation rules for Annotations

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := SearchProjectNamesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SearchProjectNamesRequestMultiError(errors)
	}

	return nil
}

// SearchProjectNamesRequestMultiError is an error wrapping multiple validation
// errors returned by SearchProjectNamesRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchProjectNamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProjectNamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProjectNamesRequestMultiError) AllErrors() []error { return m }

// SearchProjectNamesRequestValidationError is the validation error returned by
// SearchProjectNamesRequest.Validate if the designated constraints aren't met.
type SearchProjectNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProjectNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProjectNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProjectNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProjectNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProjectNamesRequestValidationError) ErrorName() string {
	return "SearchProjectNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProjectNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProjectNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProjectNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProjectNamesRequestValidationError{}

// Validate checks the field values on SearchProjectNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProjectNamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProjectNamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProjectNamesResponseMultiError, or nil if none found.
func (m *SearchProjectNamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProjectNamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return SearchProjectNamesResponseMultiError(errors)
	}

	return nil
}

// SearchProjectNamesResponseMultiError is an error wrapping multiple
// validation errors returned by SearchProjectNamesResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchProjectNamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProjectNamesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProjectNamesResponseMultiError) AllErrors() []error { return m }

// SearchProjectNamesResponseValidationError is the validation error returned
// by SearchProjectNamesResponse.Validate if the designated constraints aren't met.
type SearchProjectNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProjectNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProjectNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProjectNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProjectNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProjectNamesResponseValidationError) ErrorName() string {
	return "SearchProjectNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProjectNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProjectNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProjectNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProjectNamesResponseValidationError{}

// Validate checks the field values on GetProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectVariablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectVariablesRequestMultiError, or nil if none found.
func (m *GetProjectVariablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectVariablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetProjectVariablesRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := GetProjectVariablesRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Environment

	// no validation rules for ForAllEnvironments

	if len(errors) > 0 {
		return GetProjectVariablesRequestMultiError(errors)
	}

	return nil
}

// GetProjectVariablesRequestMultiError is an error wrapping multiple
// validation errors returned by GetProjectVariablesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProjectVariablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectVariablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectVariablesRequestMultiError) AllErrors() []error { return m }

// GetProjectVariablesRequestValidationError is the validation error returned
// by GetProjectVariablesRequest.Validate if the designated constraints aren't met.
type GetProjectVariablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectVariablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectVariablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectVariablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectVariablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectVariablesRequestValidationError) ErrorName() string {
	return "GetProjectVariablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectVariablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectVariablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectVariablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectVariablesRequestValidationError{}

// Validate checks the field values on GetProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectVariablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectVariablesResponseMultiError, or nil if none found.
func (m *GetProjectVariablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectVariablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProjectVariablesResponseValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProjectVariablesResponseValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectVariablesResponseValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for VariablesMap

	if len(errors) > 0 {
		return GetProjectVariablesResponseMultiError(errors)
	}

	return nil
}

// GetProjectVariablesResponseMultiError is an error wrapping multiple
// validation errors returned by GetProjectVariablesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProjectVariablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectVariablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectVariablesResponseMultiError) AllErrors() []error { return m }

// GetProjectVariablesResponseValidationError is the validation error returned
// by GetProjectVariablesResponse.Validate if the designated constraints
// aren't met.
type GetProjectVariablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectVariablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectVariablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectVariablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectVariablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectVariablesResponseValidationError) ErrorName() string {
	return "GetProjectVariablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectVariablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectVariablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectVariablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectVariablesResponseValidationError{}

// Validate checks the field values on ProjectVariable with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectVariable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectVariable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectVariableMultiError, or nil if none found.
func (m *ProjectVariable) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectVariable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Environment

	// no validation rules for UpdatedByUserId

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectVariableValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectVariableValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectVariableValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectVariableValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectVariableValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectVariableValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectVariableMultiError(errors)
	}

	return nil
}

// ProjectVariableMultiError is an error wrapping multiple validation errors
// returned by ProjectVariable.ValidateAll() if the designated constraints
// aren't met.
type ProjectVariableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectVariableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectVariableMultiError) AllErrors() []error { return m }

// ProjectVariableValidationError is the validation error returned by
// ProjectVariable.Validate if the designated constraints aren't met.
type ProjectVariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectVariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectVariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectVariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectVariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectVariableValidationError) ErrorName() string { return "ProjectVariableValidationError" }

// Error satisfies the builtin error interface
func (e ProjectVariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectVariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectVariableValidationError{}

// Validate checks the field values on UpdateProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectVariablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectVariablesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectVariablesRequestMultiError, or nil if none found.
func (m *UpdateProjectVariablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectVariablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := UpdateProjectVariablesRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := UpdateProjectVariablesRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Environment

	// no validation rules for Variables

	if len(errors) > 0 {
		return UpdateProjectVariablesRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectVariablesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectVariablesRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectVariablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectVariablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectVariablesRequestMultiError) AllErrors() []error { return m }

// UpdateProjectVariablesRequestValidationError is the validation error
// returned by UpdateProjectVariablesRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectVariablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectVariablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectVariablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectVariablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectVariablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectVariablesRequestValidationError) ErrorName() string {
	return "UpdateProjectVariablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectVariablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectVariablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectVariablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectVariablesRequestValidationError{}

// Validate checks the field values on UpdateProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectVariablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectVariablesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectVariablesResponseMultiError, or nil if none found.
func (m *UpdateProjectVariablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectVariablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProjectVariablesResponseValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProjectVariablesResponseValidationError{
						field:  fmt.Sprintf("Variables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProjectVariablesResponseValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateProjectVariablesResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectVariablesResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectVariablesResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectVariablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectVariablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectVariablesResponseMultiError) AllErrors() []error { return m }

// UpdateProjectVariablesResponseValidationError is the validation error
// returned by UpdateProjectVariablesResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectVariablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectVariablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectVariablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectVariablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectVariablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectVariablesResponseValidationError) ErrorName() string {
	return "UpdateProjectVariablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectVariablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectVariablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectVariablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectVariablesResponseValidationError{}

// Validate checks the field values on SearchProjectUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProjectUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProjectUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProjectUsersRequestMultiError, or nil if none found.
func (m *SearchProjectUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProjectUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for EmailQuery

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := SearchProjectUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SearchProjectUsersRequestMultiError(errors)
	}

	return nil
}

// SearchProjectUsersRequestMultiError is an error wrapping multiple validation
// errors returned by SearchProjectUsersRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchProjectUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProjectUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProjectUsersRequestMultiError) AllErrors() []error { return m }

// SearchProjectUsersRequestValidationError is the validation error returned by
// SearchProjectUsersRequest.Validate if the designated constraints aren't met.
type SearchProjectUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProjectUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProjectUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProjectUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProjectUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProjectUsersRequestValidationError) ErrorName() string {
	return "SearchProjectUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProjectUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProjectUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProjectUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProjectUsersRequestValidationError{}

// Validate checks the field values on SearchProjectUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProjectUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProjectUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProjectUsersResponseMultiError, or nil if none found.
func (m *SearchProjectUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProjectUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchProjectUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return SearchProjectUsersResponseMultiError(errors)
	}

	return nil
}

// SearchProjectUsersResponseMultiError is an error wrapping multiple
// validation errors returned by SearchProjectUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchProjectUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProjectUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProjectUsersResponseMultiError) AllErrors() []error { return m }

// SearchProjectUsersResponseValidationError is the validation error returned
// by SearchProjectUsersResponse.Validate if the designated constraints aren't met.
type SearchProjectUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProjectUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProjectUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProjectUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProjectUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProjectUsersResponseValidationError) ErrorName() string {
	return "SearchProjectUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProjectUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProjectUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProjectUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProjectUsersResponseValidationError{}

// Validate checks the field values on GetDeploymentCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDeploymentCredentialsRequestMultiError, or nil if none found.
func (m *GetDeploymentCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Branch

	// no validation rules for TtlSeconds

	switch v := m.For.(type) {
	case *GetDeploymentCredentialsRequest_UserId:
		if v == nil {
			err := GetDeploymentCredentialsRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserId
	case *GetDeploymentCredentialsRequest_UserEmail:
		if v == nil {
			err := GetDeploymentCredentialsRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateEmail(m.GetUserEmail()); err != nil {
			err = GetDeploymentCredentialsRequestValidationError{
				field:  "UserEmail",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDeploymentCredentialsRequest_Attributes:
		if v == nil {
			err := GetDeploymentCredentialsRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeploymentCredentialsRequestValidationError{
						field:  "Attributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeploymentCredentialsRequestValidationError{
						field:  "Attributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeploymentCredentialsRequestValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDeploymentCredentialsRequestMultiError(errors)
	}

	return nil
}

func (m *GetDeploymentCredentialsRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetDeploymentCredentialsRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetDeploymentCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentCredentialsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDeploymentCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentCredentialsRequestMultiError) AllErrors() []error { return m }

// GetDeploymentCredentialsRequestValidationError is the validation error
// returned by GetDeploymentCredentialsRequest.Validate if the designated
// constraints aren't met.
type GetDeploymentCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentCredentialsRequestValidationError) ErrorName() string {
	return "GetDeploymentCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentCredentialsRequestValidationError{}

// Validate checks the field values on GetDeploymentCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDeploymentCredentialsResponseMultiError, or nil if none found.
func (m *GetDeploymentCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeHost

	// no validation rules for InstanceId

	// no validation rules for AccessToken

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return GetDeploymentCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentCredentialsResponseMultiError) AllErrors() []error { return m }

// GetDeploymentCredentialsResponseValidationError is the validation error
// returned by GetDeploymentCredentialsResponse.Validate if the designated
// constraints aren't met.
type GetDeploymentCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentCredentialsResponseValidationError) ErrorName() string {
	return "GetDeploymentCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentCredentialsResponseValidationError{}

// Validate checks the field values on GetIFrameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIFrameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIFrameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIFrameRequestMultiError, or nil if none found.
func (m *GetIFrameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIFrameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Branch

	// no validation rules for TtlSeconds

	// no validation rules for Type

	// no validation rules for Kind

	// no validation rules for Resource

	// no validation rules for Theme

	// no validation rules for Navigation

	// no validation rules for State

	// no validation rules for Query

	switch v := m.For.(type) {
	case *GetIFrameRequest_UserId:
		if v == nil {
			err := GetIFrameRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserId
	case *GetIFrameRequest_UserEmail:
		if v == nil {
			err := GetIFrameRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateEmail(m.GetUserEmail()); err != nil {
			err = GetIFrameRequestValidationError{
				field:  "UserEmail",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetIFrameRequest_Attributes:
		if v == nil {
			err := GetIFrameRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIFrameRequestValidationError{
						field:  "Attributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIFrameRequestValidationError{
						field:  "Attributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIFrameRequestValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetIFrameRequestMultiError(errors)
	}

	return nil
}

func (m *GetIFrameRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetIFrameRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetIFrameRequestMultiError is an error wrapping multiple validation errors
// returned by GetIFrameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIFrameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIFrameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIFrameRequestMultiError) AllErrors() []error { return m }

// GetIFrameRequestValidationError is the validation error returned by
// GetIFrameRequest.Validate if the designated constraints aren't met.
type GetIFrameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIFrameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIFrameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIFrameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIFrameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIFrameRequestValidationError) ErrorName() string { return "GetIFrameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIFrameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIFrameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIFrameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIFrameRequestValidationError{}

// Validate checks the field values on GetIFrameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIFrameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIFrameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIFrameResponseMultiError, or nil if none found.
func (m *GetIFrameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIFrameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IframeSrc

	// no validation rules for RuntimeHost

	// no validation rules for InstanceId

	// no validation rules for AccessToken

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return GetIFrameResponseMultiError(errors)
	}

	return nil
}

// GetIFrameResponseMultiError is an error wrapping multiple validation errors
// returned by GetIFrameResponse.ValidateAll() if the designated constraints
// aren't met.
type GetIFrameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIFrameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIFrameResponseMultiError) AllErrors() []error { return m }

// GetIFrameResponseValidationError is the validation error returned by
// GetIFrameResponse.Validate if the designated constraints aren't met.
type GetIFrameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIFrameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIFrameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIFrameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIFrameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIFrameResponseValidationError) ErrorName() string {
	return "GetIFrameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIFrameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIFrameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIFrameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIFrameResponseValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := ListServicesRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceRequestMultiError, or nil if none found.
func (m *CreateServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateServiceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := CreateServiceRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceRequestMultiError(errors)
	}

	return nil
}

// CreateServiceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceRequestMultiError) AllErrors() []error { return m }

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

// Validate checks the field values on CreateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceResponseMultiError, or nil if none found.
func (m *CreateServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceResponseMultiError(errors)
	}

	return nil
}

// CreateServiceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceResponseMultiError) AllErrors() []error { return m }

// CreateServiceResponseValidationError is the validation error returned by
// CreateServiceResponse.Validate if the designated constraints aren't met.
type CreateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceResponseValidationError) ErrorName() string {
	return "CreateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceResponseValidationError{}

// Validate checks the field values on UpdateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceRequestMultiError, or nil if none found.
func (m *UpdateServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateServiceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := UpdateServiceRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.NewName != nil {
		// no validation rules for NewName
	}

	if len(errors) > 0 {
		return UpdateServiceRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceRequestMultiError) AllErrors() []error { return m }

// UpdateServiceRequestValidationError is the validation error returned by
// UpdateServiceRequest.Validate if the designated constraints aren't met.
type UpdateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceRequestValidationError) ErrorName() string {
	return "UpdateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceRequestValidationError{}

// Validate checks the field values on UpdateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceResponseMultiError, or nil if none found.
func (m *UpdateServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServiceResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceResponseMultiError) AllErrors() []error { return m }

// UpdateServiceResponseValidationError is the validation error returned by
// UpdateServiceResponse.Validate if the designated constraints aren't met.
type UpdateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceResponseValidationError) ErrorName() string {
	return "UpdateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceRequestMultiError, or nil if none found.
func (m *DeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteServiceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := DeleteServiceRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceRequestMultiError) AllErrors() []error { return m }

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceResponseMultiError, or nil if none found.
func (m *DeleteServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteServiceResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceResponseMultiError) AllErrors() []error { return m }

// DeleteServiceResponseValidationError is the validation error returned by
// DeleteServiceResponse.Validate if the designated constraints aren't met.
type DeleteServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceResponseValidationError) ErrorName() string {
	return "DeleteServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceResponseValidationError{}

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectRequestMultiError, or nil if none found.
func (m *CreateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := CreateProjectRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Provisioner

	// no validation rules for ProdOlapDriver

	// no validation rules for ProdOlapDsn

	// no validation rules for ProdSlots

	// no validation rules for Subpath

	// no validation rules for ProdBranch

	// no validation rules for GithubUrl

	// no validation rules for ArchiveAssetId

	// no validation rules for ProdVersion

	if len(errors) > 0 {
		return CreateProjectRequestMultiError(errors)
	}

	return nil
}

// CreateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectRequestMultiError) AllErrors() []error { return m }

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResponseMultiError, or nil if none found.
func (m *CreateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResponseMultiError) AllErrors() []error { return m }

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRequestMultiError, or nil if none found.
func (m *DeleteProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteProjectRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResponseMultiError, or nil if none found.
func (m *DeleteProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProjectResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRequestMultiError, or nil if none found.
func (m *UpdateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := UpdateProjectRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SuperuserForceAccess

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Public != nil {
		// no validation rules for Public
	}

	if m.ProdBranch != nil {
		// no validation rules for ProdBranch
	}

	if m.GithubUrl != nil {
		// no validation rules for GithubUrl
	}

	if m.Subpath != nil {
		// no validation rules for Subpath
	}

	if m.ArchiveAssetId != nil {
		// no validation rules for ArchiveAssetId
	}

	if m.ProdSlots != nil {
		// no validation rules for ProdSlots
	}

	if m.Provisioner != nil {
		// no validation rules for Provisioner
	}

	if m.NewName != nil {
		// no validation rules for NewName
	}

	if m.ProdTtlSeconds != nil {
		// no validation rules for ProdTtlSeconds
	}

	if m.ProdVersion != nil {
		// no validation rules for ProdVersion
	}

	if len(errors) > 0 {
		return UpdateProjectRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResponseMultiError, or nil if none found.
func (m *UpdateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetRequestMultiError, or nil if none found.
func (m *CreateAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := CreateAssetRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateAssetRequest_Type_InLookup[m.GetType()]; !ok {
		err := CreateAssetRequestValidationError{
			field:  "Type",
			reason: "value must be in list [deploy image]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateAssetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Extension

	// no validation rules for Public

	// no validation rules for EstimatedSizeBytes

	if len(errors) > 0 {
		return CreateAssetRequestMultiError(errors)
	}

	return nil
}

// CreateAssetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetRequestMultiError) AllErrors() []error { return m }

// CreateAssetRequestValidationError is the validation error returned by
// CreateAssetRequest.Validate if the designated constraints aren't met.
type CreateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetRequestValidationError) ErrorName() string {
	return "CreateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetRequestValidationError{}

var _CreateAssetRequest_Type_InLookup = map[string]struct{}{
	"deploy": {},
	"image":  {},
}

// Validate checks the field values on CreateAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetResponseMultiError, or nil if none found.
func (m *CreateAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for SignedUrl

	// no validation rules for SigningHeaders

	if len(errors) > 0 {
		return CreateAssetResponseMultiError(errors)
	}

	return nil
}

// CreateAssetResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetResponseMultiError) AllErrors() []error { return m }

// CreateAssetResponseValidationError is the validation error returned by
// CreateAssetResponse.Validate if the designated constraints aren't met.
type CreateAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetResponseValidationError) ErrorName() string {
	return "CreateAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetResponseValidationError{}

// Validate checks the field values on RedeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeployProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeployProjectRequestMultiError, or nil if none found.
func (m *RedeployProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeployProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for SuperuserForceAccess

	if len(errors) > 0 {
		return RedeployProjectRequestMultiError(errors)
	}

	return nil
}

// RedeployProjectRequestMultiError is an error wrapping multiple validation
// errors returned by RedeployProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type RedeployProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeployProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeployProjectRequestMultiError) AllErrors() []error { return m }

// RedeployProjectRequestValidationError is the validation error returned by
// RedeployProjectRequest.Validate if the designated constraints aren't met.
type RedeployProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeployProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeployProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeployProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeployProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeployProjectRequestValidationError) ErrorName() string {
	return "RedeployProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RedeployProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeployProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeployProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeployProjectRequestValidationError{}

// Validate checks the field values on RedeployProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeployProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeployProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeployProjectResponseMultiError, or nil if none found.
func (m *RedeployProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeployProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RedeployProjectResponseMultiError(errors)
	}

	return nil
}

// RedeployProjectResponseMultiError is an error wrapping multiple validation
// errors returned by RedeployProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type RedeployProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeployProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeployProjectResponseMultiError) AllErrors() []error { return m }

// RedeployProjectResponseValidationError is the validation error returned by
// RedeployProjectResponse.Validate if the designated constraints aren't met.
type RedeployProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeployProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeployProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeployProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeployProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeployProjectResponseValidationError) ErrorName() string {
	return "RedeployProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RedeployProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeployProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeployProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeployProjectResponseValidationError{}

// Validate checks the field values on HibernateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HibernateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HibernateProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HibernateProjectRequestMultiError, or nil if none found.
func (m *HibernateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HibernateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if len(errors) > 0 {
		return HibernateProjectRequestMultiError(errors)
	}

	return nil
}

// HibernateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by HibernateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type HibernateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HibernateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HibernateProjectRequestMultiError) AllErrors() []error { return m }

// HibernateProjectRequestValidationError is the validation error returned by
// HibernateProjectRequest.Validate if the designated constraints aren't met.
type HibernateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HibernateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HibernateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HibernateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HibernateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HibernateProjectRequestValidationError) ErrorName() string {
	return "HibernateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HibernateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHibernateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HibernateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HibernateProjectRequestValidationError{}

// Validate checks the field values on HibernateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HibernateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HibernateProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HibernateProjectResponseMultiError, or nil if none found.
func (m *HibernateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HibernateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HibernateProjectResponseMultiError(errors)
	}

	return nil
}

// HibernateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by HibernateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type HibernateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HibernateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HibernateProjectResponseMultiError) AllErrors() []error { return m }

// HibernateProjectResponseValidationError is the validation error returned by
// HibernateProjectResponse.Validate if the designated constraints aren't met.
type HibernateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HibernateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HibernateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HibernateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HibernateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HibernateProjectResponseValidationError) ErrorName() string {
	return "HibernateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HibernateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHibernateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HibernateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HibernateProjectResponseValidationError{}

// Validate checks the field values on TriggerReconcileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReconcileRequestMultiError, or nil if none found.
func (m *TriggerReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerReconcileRequestMultiError(errors)
	}

	return nil
}

// TriggerReconcileRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerReconcileRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconcileRequestMultiError) AllErrors() []error { return m }

// TriggerReconcileRequestValidationError is the validation error returned by
// TriggerReconcileRequest.Validate if the designated constraints aren't met.
type TriggerReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconcileRequestValidationError) ErrorName() string {
	return "TriggerReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconcileRequestValidationError{}

// Validate checks the field values on TriggerReconcileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReconcileResponseMultiError, or nil if none found.
func (m *TriggerReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerReconcileResponseMultiError(errors)
	}

	return nil
}

// TriggerReconcileResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerReconcileResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconcileResponseMultiError) AllErrors() []error { return m }

// TriggerReconcileResponseValidationError is the validation error returned by
// TriggerReconcileResponse.Validate if the designated constraints aren't met.
type TriggerReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconcileResponseValidationError) ErrorName() string {
	return "TriggerReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconcileResponseValidationError{}

// Validate checks the field values on TriggerRefreshSourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshSourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshSourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRefreshSourcesRequestMultiError, or nil if none found.
func (m *TriggerRefreshSourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshSourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerRefreshSourcesRequestMultiError(errors)
	}

	return nil
}

// TriggerRefreshSourcesRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerRefreshSourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerRefreshSourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshSourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshSourcesRequestMultiError) AllErrors() []error { return m }

// TriggerRefreshSourcesRequestValidationError is the validation error returned
// by TriggerRefreshSourcesRequest.Validate if the designated constraints
// aren't met.
type TriggerRefreshSourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshSourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshSourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshSourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshSourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshSourcesRequestValidationError) ErrorName() string {
	return "TriggerRefreshSourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshSourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshSourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshSourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshSourcesRequestValidationError{}

// Validate checks the field values on TriggerRefreshSourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshSourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshSourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerRefreshSourcesResponseMultiError, or nil if none found.
func (m *TriggerRefreshSourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshSourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerRefreshSourcesResponseMultiError(errors)
	}

	return nil
}

// TriggerRefreshSourcesResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerRefreshSourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerRefreshSourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshSourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshSourcesResponseMultiError) AllErrors() []error { return m }

// TriggerRefreshSourcesResponseValidationError is the validation error
// returned by TriggerRefreshSourcesResponse.Validate if the designated
// constraints aren't met.
type TriggerRefreshSourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshSourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshSourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshSourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshSourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshSourcesResponseValidationError) ErrorName() string {
	return "TriggerRefreshSourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshSourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshSourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshSourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshSourcesResponseValidationError{}

// Validate checks the field values on TriggerRedeployRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRedeployRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRedeployRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRedeployRequestMultiError, or nil if none found.
func (m *TriggerRedeployRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRedeployRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerRedeployRequestMultiError(errors)
	}

	return nil
}

// TriggerRedeployRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerRedeployRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerRedeployRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRedeployRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRedeployRequestMultiError) AllErrors() []error { return m }

// TriggerRedeployRequestValidationError is the validation error returned by
// TriggerRedeployRequest.Validate if the designated constraints aren't met.
type TriggerRedeployRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRedeployRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRedeployRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRedeployRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRedeployRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRedeployRequestValidationError) ErrorName() string {
	return "TriggerRedeployRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRedeployRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRedeployRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRedeployRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRedeployRequestValidationError{}

// Validate checks the field values on TriggerRedeployResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRedeployResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRedeployResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRedeployResponseMultiError, or nil if none found.
func (m *TriggerRedeployResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRedeployResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerRedeployResponseMultiError(errors)
	}

	return nil
}

// TriggerRedeployResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerRedeployResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerRedeployResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRedeployResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRedeployResponseMultiError) AllErrors() []error { return m }

// TriggerRedeployResponseValidationError is the validation error returned by
// TriggerRedeployResponse.Validate if the designated constraints aren't met.
type TriggerRedeployResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRedeployResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRedeployResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRedeployResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRedeployResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRedeployResponseValidationError) ErrorName() string {
	return "TriggerRedeployResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRedeployResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRedeployResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRedeployResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRedeployResponseValidationError{}

// Validate checks the field values on ProvisionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProvisionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvisionRequestMultiError, or nil if none found.
func (m *ProvisionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	// no validation rules for Type

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProvisionRequestMultiError(errors)
	}

	return nil
}

// ProvisionRequestMultiError is an error wrapping multiple validation errors
// returned by ProvisionRequest.ValidateAll() if the designated constraints
// aren't met.
type ProvisionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionRequestMultiError) AllErrors() []error { return m }

// ProvisionRequestValidationError is the validation error returned by
// ProvisionRequest.Validate if the designated constraints aren't met.
type ProvisionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionRequestValidationError) ErrorName() string { return "ProvisionRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProvisionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionRequestValidationError{}

// Validate checks the field values on ProvisionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProvisionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvisionResponseMultiError, or nil if none found.
func (m *ProvisionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProvisionResponseMultiError(errors)
	}

	return nil
}

// ProvisionResponseMultiError is an error wrapping multiple validation errors
// returned by ProvisionResponse.ValidateAll() if the designated constraints
// aren't met.
type ProvisionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionResponseMultiError) AllErrors() []error { return m }

// ProvisionResponseValidationError is the validation error returned by
// ProvisionResponse.Validate if the designated constraints aren't met.
type ProvisionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionResponseValidationError) ErrorName() string {
	return "ProvisionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionResponseValidationError{}

// Validate checks the field values on ListOrganizationMemberUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationMemberUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMemberUsersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationMemberUsersRequestMultiError, or nil if none found.
func (m *ListOrganizationMemberUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMemberUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationMemberUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationMemberUsersRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationMemberUsersRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationMemberUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMemberUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMemberUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMemberUsersRequestMultiError) AllErrors() []error { return m }

// ListOrganizationMemberUsersRequestValidationError is the validation error
// returned by ListOrganizationMemberUsersRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationMemberUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMemberUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMemberUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMemberUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMemberUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMemberUsersRequestValidationError) ErrorName() string {
	return "ListOrganizationMemberUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMemberUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMemberUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMemberUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMemberUsersRequestValidationError{}

// Validate checks the field values on ListOrganizationMemberUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationMemberUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMemberUsersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationMemberUsersResponseMultiError, or nil if none found.
func (m *ListOrganizationMemberUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMemberUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationMemberUsersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationMemberUsersResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationMemberUsersResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationMemberUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMemberUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMemberUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMemberUsersResponseMultiError) AllErrors() []error { return m }

// ListOrganizationMemberUsersResponseValidationError is the validation error
// returned by ListOrganizationMemberUsersResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationMemberUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMemberUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMemberUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMemberUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMemberUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMemberUsersResponseValidationError) ErrorName() string {
	return "ListOrganizationMemberUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMemberUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMemberUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMemberUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMemberUsersResponseValidationError{}

// Validate checks the field values on ListOrganizationInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitesRequestMultiError, or nil if none found.
func (m *ListOrganizationInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationInvitesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationInvitesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitesRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationInvitesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationInvitesRequestValidationError is the validation error
// returned by ListOrganizationInvitesRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitesRequestValidationError) ErrorName() string {
	return "ListOrganizationInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitesRequestValidationError{}

// Validate checks the field values on ListOrganizationInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitesResponseMultiError, or nil if none found.
func (m *ListOrganizationInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationInvitesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationInvitesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationInvitesResponseValidationError is the validation error
// returned by ListOrganizationInvitesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitesResponseValidationError) ErrorName() string {
	return "ListOrganizationInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitesResponseValidationError{}

// Validate checks the field values on AddOrganizationMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrganizationMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrganizationMemberUserRequestMultiError, or nil if none found.
func (m *AddOrganizationMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddOrganizationMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddOrganizationMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for SuperuserForceAccess

	if len(errors) > 0 {
		return AddOrganizationMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *AddOrganizationMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddOrganizationMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddOrganizationMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddOrganizationMemberUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AddOrganizationMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberUserRequestMultiError) AllErrors() []error { return m }

// AddOrganizationMemberUserRequestValidationError is the validation error
// returned by AddOrganizationMemberUserRequest.Validate if the designated
// constraints aren't met.
type AddOrganizationMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberUserRequestValidationError) ErrorName() string {
	return "AddOrganizationMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberUserRequestValidationError{}

// Validate checks the field values on AddOrganizationMemberUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrganizationMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationMemberUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrganizationMemberUserResponseMultiError, or nil if none found.
func (m *AddOrganizationMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PendingSignup

	if len(errors) > 0 {
		return AddOrganizationMemberUserResponseMultiError(errors)
	}

	return nil
}

// AddOrganizationMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddOrganizationMemberUserResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOrganizationMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberUserResponseMultiError) AllErrors() []error { return m }

// AddOrganizationMemberUserResponseValidationError is the validation error
// returned by AddOrganizationMemberUserResponse.Validate if the designated
// constraints aren't met.
type AddOrganizationMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberUserResponseValidationError) ErrorName() string {
	return "AddOrganizationMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberUserResponseValidationError{}

// Validate checks the field values on RemoveOrganizationMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveOrganizationMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationMemberUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationMemberUserRequestMultiError, or nil if none found.
func (m *RemoveOrganizationMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveOrganizationMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RemoveOrganizationMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for KeepProjectRoles

	if len(errors) > 0 {
		return RemoveOrganizationMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveOrganizationMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RemoveOrganizationMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RemoveOrganizationMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveOrganizationMemberUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrganizationMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberUserRequestMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberUserRequestValidationError is the validation error
// returned by RemoveOrganizationMemberUserRequest.Validate if the designated
// constraints aren't met.
type RemoveOrganizationMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberUserRequestValidationError) ErrorName() string {
	return "RemoveOrganizationMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberUserRequestValidationError{}

// Validate checks the field values on RemoveOrganizationMemberUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveOrganizationMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationMemberUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationMemberUserResponseMultiError, or nil if none found.
func (m *RemoveOrganizationMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrganizationMemberUserResponseMultiError(errors)
	}

	return nil
}

// RemoveOrganizationMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveOrganizationMemberUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrganizationMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberUserResponseMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberUserResponseValidationError is the validation error
// returned by RemoveOrganizationMemberUserResponse.Validate if the designated
// constraints aren't met.
type RemoveOrganizationMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberUserResponseValidationError) ErrorName() string {
	return "RemoveOrganizationMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberUserResponseValidationError{}

// Validate checks the field values on LeaveOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationRequestMultiError, or nil if none found.
func (m *LeaveOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := LeaveOrganizationRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LeaveOrganizationRequestMultiError(errors)
	}

	return nil
}

// LeaveOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type LeaveOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationRequestMultiError) AllErrors() []error { return m }

// LeaveOrganizationRequestValidationError is the validation error returned by
// LeaveOrganizationRequest.Validate if the designated constraints aren't met.
type LeaveOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationRequestValidationError) ErrorName() string {
	return "LeaveOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationRequestValidationError{}

// Validate checks the field values on LeaveOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationResponseMultiError, or nil if none found.
func (m *LeaveOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveOrganizationResponseMultiError(errors)
	}

	return nil
}

// LeaveOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationResponse.ValidateAll() if the
// designated constraints aren't met.
type LeaveOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationResponseMultiError) AllErrors() []error { return m }

// LeaveOrganizationResponseValidationError is the validation error returned by
// LeaveOrganizationResponse.Validate if the designated constraints aren't met.
type LeaveOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationResponseValidationError) ErrorName() string {
	return "LeaveOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationResponseValidationError{}

// Validate checks the field values on SetOrganizationMemberUserRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetOrganizationMemberUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMemberUserRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetOrganizationMemberUserRoleRequestMultiError, or nil if none found.
func (m *SetOrganizationMemberUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetOrganizationMemberUserRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetOrganizationMemberUserRoleRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetOrganizationMemberUserRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetOrganizationMemberUserRoleRequestMultiError(errors)
	}

	return nil
}

func (m *SetOrganizationMemberUserRoleRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetOrganizationMemberUserRoleRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetOrganizationMemberUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetOrganizationMemberUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberUserRoleRequestMultiError) AllErrors() []error { return m }

// SetOrganizationMemberUserRoleRequestValidationError is the validation error
// returned by SetOrganizationMemberUserRoleRequest.Validate if the designated
// constraints aren't met.
type SetOrganizationMemberUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberUserRoleRequestValidationError) ErrorName() string {
	return "SetOrganizationMemberUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberUserRoleRequestValidationError{}

// Validate checks the field values on SetOrganizationMemberUserRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetOrganizationMemberUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMemberUserRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetOrganizationMemberUserRoleResponseMultiError, or nil if none found.
func (m *SetOrganizationMemberUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOrganizationMemberUserRoleResponseMultiError(errors)
	}

	return nil
}

// SetOrganizationMemberUserRoleResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetOrganizationMemberUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberUserRoleResponseMultiError) AllErrors() []error { return m }

// SetOrganizationMemberUserRoleResponseValidationError is the validation error
// returned by SetOrganizationMemberUserRoleResponse.Validate if the
// designated constraints aren't met.
type SetOrganizationMemberUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberUserRoleResponseValidationError) ErrorName() string {
	return "SetOrganizationMemberUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberUserRoleResponseValidationError{}

// Validate checks the field values on ListSuperusersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSuperusersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSuperusersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSuperusersRequestMultiError, or nil if none found.
func (m *ListSuperusersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSuperusersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSuperusersRequestMultiError(errors)
	}

	return nil
}

// ListSuperusersRequestMultiError is an error wrapping multiple validation
// errors returned by ListSuperusersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSuperusersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSuperusersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSuperusersRequestMultiError) AllErrors() []error { return m }

// ListSuperusersRequestValidationError is the validation error returned by
// ListSuperusersRequest.Validate if the designated constraints aren't met.
type ListSuperusersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSuperusersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSuperusersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSuperusersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSuperusersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSuperusersRequestValidationError) ErrorName() string {
	return "ListSuperusersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSuperusersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSuperusersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSuperusersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSuperusersRequestValidationError{}

// Validate checks the field values on ListSuperusersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSuperusersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSuperusersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSuperusersResponseMultiError, or nil if none found.
func (m *ListSuperusersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSuperusersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSuperusersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSuperusersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSuperusersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSuperusersResponseMultiError(errors)
	}

	return nil
}

// ListSuperusersResponseMultiError is an error wrapping multiple validation
// errors returned by ListSuperusersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSuperusersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSuperusersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSuperusersResponseMultiError) AllErrors() []error { return m }

// ListSuperusersResponseValidationError is the validation error returned by
// ListSuperusersResponse.Validate if the designated constraints aren't met.
type ListSuperusersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSuperusersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSuperusersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSuperusersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSuperusersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSuperusersResponseValidationError) ErrorName() string {
	return "ListSuperusersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSuperusersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSuperusersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSuperusersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSuperusersResponseValidationError{}

// Validate checks the field values on SetSuperuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserRequestMultiError, or nil if none found.
func (m *SetSuperuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetSuperuserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Superuser

	if len(errors) > 0 {
		return SetSuperuserRequestMultiError(errors)
	}

	return nil
}

func (m *SetSuperuserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetSuperuserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetSuperuserRequestMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserRequestMultiError) AllErrors() []error { return m }

// SetSuperuserRequestValidationError is the validation error returned by
// SetSuperuserRequest.Validate if the designated constraints aren't met.
type SetSuperuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserRequestValidationError) ErrorName() string {
	return "SetSuperuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserRequestValidationError{}

// Validate checks the field values on SetSuperuserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserResponseMultiError, or nil if none found.
func (m *SetSuperuserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSuperuserResponseMultiError(errors)
	}

	return nil
}

// SetSuperuserResponseMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserResponseMultiError) AllErrors() []error { return m }

// SetSuperuserResponseValidationError is the validation error returned by
// SetSuperuserResponse.Validate if the designated constraints aren't met.
type SetSuperuserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserResponseValidationError) ErrorName() string {
	return "SetSuperuserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserResponseValidationError{}

// Validate checks the field values on SudoGetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoGetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoGetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoGetResourceRequestMultiError, or nil if none found.
func (m *SudoGetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoGetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *SudoGetResourceRequest_UserId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserId
	case *SudoGetResourceRequest_OrgId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for OrgId
	case *SudoGetResourceRequest_ProjectId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ProjectId
	case *SudoGetResourceRequest_DeploymentId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DeploymentId
	case *SudoGetResourceRequest_InstanceId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for InstanceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SudoGetResourceRequestMultiError(errors)
	}

	return nil
}

// SudoGetResourceRequestMultiError is an error wrapping multiple validation
// errors returned by SudoGetResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoGetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoGetResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoGetResourceRequestMultiError) AllErrors() []error { return m }

// SudoGetResourceRequestValidationError is the validation error returned by
// SudoGetResourceRequest.Validate if the designated constraints aren't met.
type SudoGetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoGetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoGetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoGetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoGetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoGetResourceRequestValidationError) ErrorName() string {
	return "SudoGetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoGetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoGetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoGetResourceRequestValidationError{}

// Validate checks the field values on SudoGetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoGetResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoGetResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoGetResourceResponseMultiError, or nil if none found.
func (m *SudoGetResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoGetResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resource.(type) {
	case *SudoGetResourceResponse_User:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Org:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrg()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Org",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Org",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Project:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Project",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Project",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Deployment:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeployment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Deployment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Deployment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Instance:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstance()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SudoGetResourceResponseMultiError(errors)
	}

	return nil
}

// SudoGetResourceResponseMultiError is an error wrapping multiple validation
// errors returned by SudoGetResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoGetResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoGetResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoGetResourceResponseMultiError) AllErrors() []error { return m }

// SudoGetResourceResponseValidationError is the validation error returned by
// SudoGetResourceResponse.Validate if the designated constraints aren't met.
type SudoGetResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoGetResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoGetResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoGetResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoGetResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoGetResourceResponseValidationError) ErrorName() string {
	return "SudoGetResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoGetResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoGetResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoGetResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoGetResourceResponseValidationError{}

// Validate checks the field values on SudoUpdateOrganizationQuotasRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SudoUpdateOrganizationQuotasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateOrganizationQuotasRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoUpdateOrganizationQuotasRequestMultiError, or nil if none found.
func (m *SudoUpdateOrganizationQuotasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationQuotasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.Projects != nil {
		// no validation rules for Projects
	}

	if m.Deployments != nil {
		// no validation rules for Deployments
	}

	if m.SlotsTotal != nil {
		// no validation rules for SlotsTotal
	}

	if m.SlotsPerDeployment != nil {
		// no validation rules for SlotsPerDeployment
	}

	if m.OutstandingInvites != nil {
		// no validation rules for OutstandingInvites
	}

	if m.StorageLimitBytesPerDeployment != nil {
		// no validation rules for StorageLimitBytesPerDeployment
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationQuotasRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationQuotasRequestMultiError is an error wrapping multiple
// validation errors returned by
// SudoUpdateOrganizationQuotasRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationQuotasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationQuotasRequestMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationQuotasRequestValidationError is the validation error
// returned by SudoUpdateOrganizationQuotasRequest.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationQuotasRequestValidationError) ErrorName() string {
	return "SudoUpdateOrganizationQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationQuotasRequestValidationError{}

// Validate checks the field values on SudoUpdateOrganizationQuotasResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SudoUpdateOrganizationQuotasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateOrganizationQuotasResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoUpdateOrganizationQuotasResponseMultiError, or nil if none found.
func (m *SudoUpdateOrganizationQuotasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationQuotasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateOrganizationQuotasResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateOrganizationQuotasResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateOrganizationQuotasResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationQuotasResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationQuotasResponseMultiError is an error wrapping multiple
// validation errors returned by
// SudoUpdateOrganizationQuotasResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationQuotasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationQuotasResponseMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationQuotasResponseValidationError is the validation error
// returned by SudoUpdateOrganizationQuotasResponse.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationQuotasResponseValidationError) ErrorName() string {
	return "SudoUpdateOrganizationQuotasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationQuotasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationQuotasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationQuotasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationQuotasResponseValidationError{}

// Validate checks the field values on
// SudoUpdateOrganizationBillingCustomerRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateOrganizationBillingCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoUpdateOrganizationBillingCustomerRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoUpdateOrganizationBillingCustomerRequestMultiError, or nil if none found.
func (m *SudoUpdateOrganizationBillingCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationBillingCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.BillingCustomerId != nil {
		// no validation rules for BillingCustomerId
	}

	if m.PaymentCustomerId != nil {
		// no validation rules for PaymentCustomerId
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationBillingCustomerRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationBillingCustomerRequestMultiError is an error wrapping
// multiple validation errors returned by
// SudoUpdateOrganizationBillingCustomerRequest.ValidateAll() if the
// designated constraints aren't met.
type SudoUpdateOrganizationBillingCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationBillingCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationBillingCustomerRequestMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationBillingCustomerRequestValidationError is the
// validation error returned by
// SudoUpdateOrganizationBillingCustomerRequest.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationBillingCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) ErrorName() string {
	return "SudoUpdateOrganizationBillingCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationBillingCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationBillingCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationBillingCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationBillingCustomerRequestValidationError{}

// Validate checks the field values on
// SudoUpdateOrganizationBillingCustomerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateOrganizationBillingCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoUpdateOrganizationBillingCustomerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoUpdateOrganizationBillingCustomerResponseMultiError, or nil if none found.
func (m *SudoUpdateOrganizationBillingCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationBillingCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateOrganizationBillingCustomerResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateOrganizationBillingCustomerResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateOrganizationBillingCustomerResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateOrganizationBillingCustomerResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateOrganizationBillingCustomerResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateOrganizationBillingCustomerResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationBillingCustomerResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationBillingCustomerResponseMultiError is an error wrapping
// multiple validation errors returned by
// SudoUpdateOrganizationBillingCustomerResponse.ValidateAll() if the
// designated constraints aren't met.
type SudoUpdateOrganizationBillingCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationBillingCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationBillingCustomerResponseMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationBillingCustomerResponseValidationError is the
// validation error returned by
// SudoUpdateOrganizationBillingCustomerResponse.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationBillingCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) ErrorName() string {
	return "SudoUpdateOrganizationBillingCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationBillingCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationBillingCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationBillingCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationBillingCustomerResponseValidationError{}

// Validate checks the field values on SudoExtendTrialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoExtendTrialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoExtendTrialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoExtendTrialRequestMultiError, or nil if none found.
func (m *SudoExtendTrialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoExtendTrialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SudoExtendTrialRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 30 {
		err := SudoExtendTrialRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 30]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SudoExtendTrialRequestMultiError(errors)
	}

	return nil
}

// SudoExtendTrialRequestMultiError is an error wrapping multiple validation
// errors returned by SudoExtendTrialRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoExtendTrialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoExtendTrialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoExtendTrialRequestMultiError) AllErrors() []error { return m }

// SudoExtendTrialRequestValidationError is the validation error returned by
// SudoExtendTrialRequest.Validate if the designated constraints aren't met.
type SudoExtendTrialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoExtendTrialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoExtendTrialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoExtendTrialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoExtendTrialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoExtendTrialRequestValidationError) ErrorName() string {
	return "SudoExtendTrialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoExtendTrialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoExtendTrialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoExtendTrialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoExtendTrialRequestValidationError{}

// Validate checks the field values on SudoExtendTrialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoExtendTrialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoExtendTrialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoExtendTrialResponseMultiError, or nil if none found.
func (m *SudoExtendTrialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoExtendTrialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrialEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoExtendTrialResponseValidationError{
					field:  "TrialEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoExtendTrialResponseValidationError{
					field:  "TrialEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrialEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoExtendTrialResponseValidationError{
				field:  "TrialEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoExtendTrialResponseMultiError(errors)
	}

	return nil
}

// SudoExtendTrialResponseMultiError is an error wrapping multiple validation
// errors returned by SudoExtendTrialResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoExtendTrialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoExtendTrialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoExtendTrialResponseMultiError) AllErrors() []error { return m }

// SudoExtendTrialResponseValidationError is the validation error returned by
// SudoExtendTrialResponse.Validate if the designated constraints aren't met.
type SudoExtendTrialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoExtendTrialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoExtendTrialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoExtendTrialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoExtendTrialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoExtendTrialResponseValidationError) ErrorName() string {
	return "SudoExtendTrialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoExtendTrialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoExtendTrialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoExtendTrialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoExtendTrialResponseValidationError{}

// Validate checks the field values on
// SudoUpdateOrganizationCustomDomainRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateOrganizationCustomDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoUpdateOrganizationCustomDomainRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoUpdateOrganizationCustomDomainRequestMultiError, or nil if none found.
func (m *SudoUpdateOrganizationCustomDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationCustomDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CustomDomain

	if len(errors) > 0 {
		return SudoUpdateOrganizationCustomDomainRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationCustomDomainRequestMultiError is an error wrapping
// multiple validation errors returned by
// SudoUpdateOrganizationCustomDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationCustomDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationCustomDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationCustomDomainRequestMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationCustomDomainRequestValidationError is the validation
// error returned by SudoUpdateOrganizationCustomDomainRequest.Validate if the
// designated constraints aren't met.
type SudoUpdateOrganizationCustomDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) ErrorName() string {
	return "SudoUpdateOrganizationCustomDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationCustomDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationCustomDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationCustomDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationCustomDomainRequestValidationError{}

// Validate checks the field values on
// SudoUpdateOrganizationCustomDomainResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateOrganizationCustomDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoUpdateOrganizationCustomDomainResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoUpdateOrganizationCustomDomainResponseMultiError, or nil if none found.
func (m *SudoUpdateOrganizationCustomDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationCustomDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateOrganizationCustomDomainResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateOrganizationCustomDomainResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateOrganizationCustomDomainResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationCustomDomainResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationCustomDomainResponseMultiError is an error wrapping
// multiple validation errors returned by
// SudoUpdateOrganizationCustomDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationCustomDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationCustomDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationCustomDomainResponseMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationCustomDomainResponseValidationError is the validation
// error returned by SudoUpdateOrganizationCustomDomainResponse.Validate if
// the designated constraints aren't met.
type SudoUpdateOrganizationCustomDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) ErrorName() string {
	return "SudoUpdateOrganizationCustomDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationCustomDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationCustomDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationCustomDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationCustomDomainResponseValidationError{}

// Validate checks the field values on SudoUpdateUserQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateUserQuotasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateUserQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoUpdateUserQuotasRequestMultiError, or nil if none found.
func (m *SudoUpdateUserQuotasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateUserQuotasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if m.SingleuserOrgs != nil {
		// no validation rules for SingleuserOrgs
	}

	if m.TrialOrgs != nil {
		// no validation rules for TrialOrgs
	}

	if len(errors) > 0 {
		return SudoUpdateUserQuotasRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateUserQuotasRequestMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateUserQuotasRequest.ValidateAll() if
// the designated constraints aren't met.
type SudoUpdateUserQuotasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateUserQuotasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateUserQuotasRequestMultiError) AllErrors() []error { return m }

// SudoUpdateUserQuotasRequestValidationError is the validation error returned
// by SudoUpdateUserQuotasRequest.Validate if the designated constraints
// aren't met.
type SudoUpdateUserQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateUserQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateUserQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateUserQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateUserQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateUserQuotasRequestValidationError) ErrorName() string {
	return "SudoUpdateUserQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateUserQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateUserQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateUserQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateUserQuotasRequestValidationError{}

// Validate checks the field values on SudoUpdateUserQuotasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateUserQuotasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateUserQuotasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoUpdateUserQuotasResponseMultiError, or nil if none found.
func (m *SudoUpdateUserQuotasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateUserQuotasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateUserQuotasResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateUserQuotasResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateUserQuotasResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateUserQuotasResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateUserQuotasResponseMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateUserQuotasResponse.ValidateAll() if
// the designated constraints aren't met.
type SudoUpdateUserQuotasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateUserQuotasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateUserQuotasResponseMultiError) AllErrors() []error { return m }

// SudoUpdateUserQuotasResponseValidationError is the validation error returned
// by SudoUpdateUserQuotasResponse.Validate if the designated constraints
// aren't met.
type SudoUpdateUserQuotasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateUserQuotasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateUserQuotasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateUserQuotasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateUserQuotasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateUserQuotasResponseValidationError) ErrorName() string {
	return "SudoUpdateUserQuotasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateUserQuotasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateUserQuotasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateUserQuotasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateUserQuotasResponseValidationError{}

// Validate checks the field values on SudoUpdateAnnotationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateAnnotationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateAnnotationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoUpdateAnnotationsRequestMultiError, or nil if none found.
func (m *SudoUpdateAnnotationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateAnnotationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SudoUpdateAnnotationsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := SudoUpdateAnnotationsRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	if len(errors) > 0 {
		return SudoUpdateAnnotationsRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateAnnotationsRequestMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateAnnotationsRequest.ValidateAll() if
// the designated constraints aren't met.
type SudoUpdateAnnotationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateAnnotationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateAnnotationsRequestMultiError) AllErrors() []error { return m }

// SudoUpdateAnnotationsRequestValidationError is the validation error returned
// by SudoUpdateAnnotationsRequest.Validate if the designated constraints
// aren't met.
type SudoUpdateAnnotationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateAnnotationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateAnnotationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateAnnotationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateAnnotationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateAnnotationsRequestValidationError) ErrorName() string {
	return "SudoUpdateAnnotationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateAnnotationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateAnnotationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateAnnotationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateAnnotationsRequestValidationError{}

// Validate checks the field values on SudoUpdateAnnotationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateAnnotationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateAnnotationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SudoUpdateAnnotationsResponseMultiError, or nil if none found.
func (m *SudoUpdateAnnotationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateAnnotationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateAnnotationsResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateAnnotationsResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateAnnotationsResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateAnnotationsResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateAnnotationsResponseMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateAnnotationsResponse.ValidateAll()
// if the designated constraints aren't met.
type SudoUpdateAnnotationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateAnnotationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateAnnotationsResponseMultiError) AllErrors() []error { return m }

// SudoUpdateAnnotationsResponseValidationError is the validation error
// returned by SudoUpdateAnnotationsResponse.Validate if the designated
// constraints aren't met.
type SudoUpdateAnnotationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateAnnotationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateAnnotationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateAnnotationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateAnnotationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateAnnotationsResponseValidationError) ErrorName() string {
	return "SudoUpdateAnnotationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateAnnotationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateAnnotationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateAnnotationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateAnnotationsResponseValidationError{}

// Validate checks the field values on SudoIssueRuntimeManagerTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SudoIssueRuntimeManagerTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoIssueRuntimeManagerTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoIssueRuntimeManagerTokenRequestMultiError, or nil if none found.
func (m *SudoIssueRuntimeManagerTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoIssueRuntimeManagerTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	if len(errors) > 0 {
		return SudoIssueRuntimeManagerTokenRequestMultiError(errors)
	}

	return nil
}

// SudoIssueRuntimeManagerTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// SudoIssueRuntimeManagerTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoIssueRuntimeManagerTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoIssueRuntimeManagerTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoIssueRuntimeManagerTokenRequestMultiError) AllErrors() []error { return m }

// SudoIssueRuntimeManagerTokenRequestValidationError is the validation error
// returned by SudoIssueRuntimeManagerTokenRequest.Validate if the designated
// constraints aren't met.
type SudoIssueRuntimeManagerTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoIssueRuntimeManagerTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoIssueRuntimeManagerTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoIssueRuntimeManagerTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoIssueRuntimeManagerTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoIssueRuntimeManagerTokenRequestValidationError) ErrorName() string {
	return "SudoIssueRuntimeManagerTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoIssueRuntimeManagerTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoIssueRuntimeManagerTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoIssueRuntimeManagerTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoIssueRuntimeManagerTokenRequestValidationError{}

// Validate checks the field values on SudoIssueRuntimeManagerTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SudoIssueRuntimeManagerTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoIssueRuntimeManagerTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoIssueRuntimeManagerTokenResponseMultiError, or nil if none found.
func (m *SudoIssueRuntimeManagerTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoIssueRuntimeManagerTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return SudoIssueRuntimeManagerTokenResponseMultiError(errors)
	}

	return nil
}

// SudoIssueRuntimeManagerTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// SudoIssueRuntimeManagerTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoIssueRuntimeManagerTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoIssueRuntimeManagerTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoIssueRuntimeManagerTokenResponseMultiError) AllErrors() []error { return m }

// SudoIssueRuntimeManagerTokenResponseValidationError is the validation error
// returned by SudoIssueRuntimeManagerTokenResponse.Validate if the designated
// constraints aren't met.
type SudoIssueRuntimeManagerTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoIssueRuntimeManagerTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoIssueRuntimeManagerTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoIssueRuntimeManagerTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoIssueRuntimeManagerTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoIssueRuntimeManagerTokenResponseValidationError) ErrorName() string {
	return "SudoIssueRuntimeManagerTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoIssueRuntimeManagerTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoIssueRuntimeManagerTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoIssueRuntimeManagerTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoIssueRuntimeManagerTokenResponseValidationError{}

// Validate checks the field values on
// SudoDeleteOrganizationBillingIssueRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoDeleteOrganizationBillingIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoDeleteOrganizationBillingIssueRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoDeleteOrganizationBillingIssueRequestMultiError, or nil if none found.
func (m *SudoDeleteOrganizationBillingIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoDeleteOrganizationBillingIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Type

	if len(errors) > 0 {
		return SudoDeleteOrganizationBillingIssueRequestMultiError(errors)
	}

	return nil
}

// SudoDeleteOrganizationBillingIssueRequestMultiError is an error wrapping
// multiple validation errors returned by
// SudoDeleteOrganizationBillingIssueRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoDeleteOrganizationBillingIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoDeleteOrganizationBillingIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoDeleteOrganizationBillingIssueRequestMultiError) AllErrors() []error { return m }

// SudoDeleteOrganizationBillingIssueRequestValidationError is the validation
// error returned by SudoDeleteOrganizationBillingIssueRequest.Validate if the
// designated constraints aren't met.
type SudoDeleteOrganizationBillingIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) ErrorName() string {
	return "SudoDeleteOrganizationBillingIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoDeleteOrganizationBillingIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoDeleteOrganizationBillingIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoDeleteOrganizationBillingIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoDeleteOrganizationBillingIssueRequestValidationError{}

// Validate checks the field values on
// SudoDeleteOrganizationBillingIssueResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SudoDeleteOrganizationBillingIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SudoDeleteOrganizationBillingIssueResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SudoDeleteOrganizationBillingIssueResponseMultiError, or nil if none found.
func (m *SudoDeleteOrganizationBillingIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoDeleteOrganizationBillingIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SudoDeleteOrganizationBillingIssueResponseMultiError(errors)
	}

	return nil
}

// SudoDeleteOrganizationBillingIssueResponseMultiError is an error wrapping
// multiple validation errors returned by
// SudoDeleteOrganizationBillingIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoDeleteOrganizationBillingIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoDeleteOrganizationBillingIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoDeleteOrganizationBillingIssueResponseMultiError) AllErrors() []error { return m }

// SudoDeleteOrganizationBillingIssueResponseValidationError is the validation
// error returned by SudoDeleteOrganizationBillingIssueResponse.Validate if
// the designated constraints aren't met.
type SudoDeleteOrganizationBillingIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) ErrorName() string {
	return "SudoDeleteOrganizationBillingIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoDeleteOrganizationBillingIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoDeleteOrganizationBillingIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoDeleteOrganizationBillingIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoDeleteOrganizationBillingIssueResponseValidationError{}

// Validate checks the field values on SudoTriggerBillingRepairRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoTriggerBillingRepairRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoTriggerBillingRepairRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SudoTriggerBillingRepairRequestMultiError, or nil if none found.
func (m *SudoTriggerBillingRepairRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoTriggerBillingRepairRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SudoTriggerBillingRepairRequestMultiError(errors)
	}

	return nil
}

// SudoTriggerBillingRepairRequestMultiError is an error wrapping multiple
// validation errors returned by SudoTriggerBillingRepairRequest.ValidateAll()
// if the designated constraints aren't met.
type SudoTriggerBillingRepairRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoTriggerBillingRepairRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoTriggerBillingRepairRequestMultiError) AllErrors() []error { return m }

// SudoTriggerBillingRepairRequestValidationError is the validation error
// returned by SudoTriggerBillingRepairRequest.Validate if the designated
// constraints aren't met.
type SudoTriggerBillingRepairRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoTriggerBillingRepairRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoTriggerBillingRepairRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoTriggerBillingRepairRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoTriggerBillingRepairRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoTriggerBillingRepairRequestValidationError) ErrorName() string {
	return "SudoTriggerBillingRepairRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoTriggerBillingRepairRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoTriggerBillingRepairRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoTriggerBillingRepairRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoTriggerBillingRepairRequestValidationError{}

// Validate checks the field values on SudoTriggerBillingRepairResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SudoTriggerBillingRepairResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoTriggerBillingRepairResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SudoTriggerBillingRepairResponseMultiError, or nil if none found.
func (m *SudoTriggerBillingRepairResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoTriggerBillingRepairResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SudoTriggerBillingRepairResponseMultiError(errors)
	}

	return nil
}

// SudoTriggerBillingRepairResponseMultiError is an error wrapping multiple
// validation errors returned by
// SudoTriggerBillingRepairResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoTriggerBillingRepairResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoTriggerBillingRepairResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoTriggerBillingRepairResponseMultiError) AllErrors() []error { return m }

// SudoTriggerBillingRepairResponseValidationError is the validation error
// returned by SudoTriggerBillingRepairResponse.Validate if the designated
// constraints aren't met.
type SudoTriggerBillingRepairResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoTriggerBillingRepairResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoTriggerBillingRepairResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoTriggerBillingRepairResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoTriggerBillingRepairResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoTriggerBillingRepairResponseValidationError) ErrorName() string {
	return "SudoTriggerBillingRepairResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoTriggerBillingRepairResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoTriggerBillingRepairResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoTriggerBillingRepairResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoTriggerBillingRepairResponseValidationError{}

// Validate checks the field values on ListProjectMemberUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMemberUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMemberUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectMemberUsersRequestMultiError, or nil if none found.
func (m *ListProjectMemberUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMemberUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectMemberUsersRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectMemberUsersRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectMemberUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectMemberUsersRequestMultiError(errors)
	}

	return nil
}

// ListProjectMemberUsersRequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectMemberUsersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProjectMemberUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMemberUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMemberUsersRequestMultiError) AllErrors() []error { return m }

// ListProjectMemberUsersRequestValidationError is the validation error
// returned by ListProjectMemberUsersRequest.Validate if the designated
// constraints aren't met.
type ListProjectMemberUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberUsersRequestValidationError) ErrorName() string {
	return "ListProjectMemberUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberUsersRequestValidationError{}

// Validate checks the field values on ListProjectMemberUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMemberUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMemberUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectMemberUsersResponseMultiError, or nil if none found.
func (m *ListProjectMemberUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMemberUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMemberUsersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectMemberUsersResponseMultiError(errors)
	}

	return nil
}

// ListProjectMemberUsersResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectMemberUsersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProjectMemberUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMemberUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMemberUsersResponseMultiError) AllErrors() []error { return m }

// ListProjectMemberUsersResponseValidationError is the validation error
// returned by ListProjectMemberUsersResponse.Validate if the designated
// constraints aren't met.
type ListProjectMemberUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberUsersResponseValidationError) ErrorName() string {
	return "ListProjectMemberUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberUsersResponseValidationError{}

// Validate checks the field values on ListProjectInvitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectInvitesRequestMultiError, or nil if none found.
func (m *ListProjectInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectInvitesRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectInvitesRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectInvitesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectInvitesRequestMultiError(errors)
	}

	return nil
}

// ListProjectInvitesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectInvitesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProjectInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectInvitesRequestMultiError) AllErrors() []error { return m }

// ListProjectInvitesRequestValidationError is the validation error returned by
// ListProjectInvitesRequest.Validate if the designated constraints aren't met.
type ListProjectInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectInvitesRequestValidationError) ErrorName() string {
	return "ListProjectInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectInvitesRequestValidationError{}

// Validate checks the field values on ListProjectInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectInvitesResponseMultiError, or nil if none found.
func (m *ListProjectInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectInvitesResponseMultiError(errors)
	}

	return nil
}

// ListProjectInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectInvitesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectInvitesResponseMultiError) AllErrors() []error { return m }

// ListProjectInvitesResponseValidationError is the validation error returned
// by ListProjectInvitesResponse.Validate if the designated constraints aren't met.
type ListProjectInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectInvitesResponseValidationError) ErrorName() string {
	return "ListProjectInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectInvitesResponseValidationError{}

// Validate checks the field values on AddProjectMemberUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberUserRequestMultiError, or nil if none found.
func (m *AddProjectMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddProjectMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := AddProjectMemberUserRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddProjectMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddProjectMemberUserRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *AddProjectMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddProjectMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddProjectMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by AddProjectMemberUserRequest.ValidateAll() if
// the designated constraints aren't met.
type AddProjectMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberUserRequestMultiError) AllErrors() []error { return m }

// AddProjectMemberUserRequestValidationError is the validation error returned
// by AddProjectMemberUserRequest.Validate if the designated constraints
// aren't met.
type AddProjectMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberUserRequestValidationError) ErrorName() string {
	return "AddProjectMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberUserRequestValidationError{}

// Validate checks the field values on AddProjectMemberUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberUserResponseMultiError, or nil if none found.
func (m *AddProjectMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PendingSignup

	if len(errors) > 0 {
		return AddProjectMemberUserResponseMultiError(errors)
	}

	return nil
}

// AddProjectMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by AddProjectMemberUserResponse.ValidateAll() if
// the designated constraints aren't met.
type AddProjectMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberUserResponseMultiError) AllErrors() []error { return m }

// AddProjectMemberUserResponseValidationError is the validation error returned
// by AddProjectMemberUserResponse.Validate if the designated constraints
// aren't met.
type AddProjectMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberUserResponseValidationError) ErrorName() string {
	return "AddProjectMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberUserResponseValidationError{}

// Validate checks the field values on RemoveProjectMemberUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberUserRequestMultiError, or nil if none found.
func (m *RemoveProjectMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveProjectMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := RemoveProjectMemberUserRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RemoveProjectMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveProjectMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveProjectMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RemoveProjectMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RemoveProjectMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberUserRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveProjectMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberUserRequestMultiError) AllErrors() []error { return m }

// RemoveProjectMemberUserRequestValidationError is the validation error
// returned by RemoveProjectMemberUserRequest.Validate if the designated
// constraints aren't met.
type RemoveProjectMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberUserRequestValidationError) ErrorName() string {
	return "RemoveProjectMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberUserRequestValidationError{}

// Validate checks the field values on RemoveProjectMemberUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberUserResponseMultiError, or nil if none found.
func (m *RemoveProjectMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveProjectMemberUserResponseMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberUserResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveProjectMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberUserResponseMultiError) AllErrors() []error { return m }

// RemoveProjectMemberUserResponseValidationError is the validation error
// returned by RemoveProjectMemberUserResponse.Validate if the designated
// constraints aren't met.
type RemoveProjectMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberUserResponseValidationError) ErrorName() string {
	return "RemoveProjectMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberUserResponseValidationError{}

// Validate checks the field values on SetProjectMemberUserRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProjectMemberUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberUserRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetProjectMemberUserRoleRequestMultiError, or nil if none found.
func (m *SetProjectMemberUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetProjectMemberUserRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := SetProjectMemberUserRoleRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetProjectMemberUserRoleRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetProjectMemberUserRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetProjectMemberUserRoleRequestMultiError(errors)
	}

	return nil
}

func (m *SetProjectMemberUserRoleRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetProjectMemberUserRoleRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetProjectMemberUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by SetProjectMemberUserRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type SetProjectMemberUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberUserRoleRequestMultiError) AllErrors() []error { return m }

// SetProjectMemberUserRoleRequestValidationError is the validation error
// returned by SetProjectMemberUserRoleRequest.Validate if the designated
// constraints aren't met.
type SetProjectMemberUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberUserRoleRequestValidationError) ErrorName() string {
	return "SetProjectMemberUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberUserRoleRequestValidationError{}

// Validate checks the field values on SetProjectMemberUserRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetProjectMemberUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberUserRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetProjectMemberUserRoleResponseMultiError, or nil if none found.
func (m *SetProjectMemberUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetProjectMemberUserRoleResponseMultiError(errors)
	}

	return nil
}

// SetProjectMemberUserRoleResponseMultiError is an error wrapping multiple
// validation errors returned by
// SetProjectMemberUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetProjectMemberUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberUserRoleResponseMultiError) AllErrors() []error { return m }

// SetProjectMemberUserRoleResponseValidationError is the validation error
// returned by SetProjectMemberUserRoleResponse.Validate if the designated
// constraints aren't met.
type SetProjectMemberUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberUserRoleResponseValidationError) ErrorName() string {
	return "SetProjectMemberUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberUserRoleResponseValidationError{}

// Validate checks the field values on CreateUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsergroupRequestMultiError, or nil if none found.
func (m *CreateUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := CreateUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateUsergroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUsergroupRequestMultiError(errors)
	}

	return nil
}

// CreateUsergroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsergroupRequestMultiError) AllErrors() []error { return m }

// CreateUsergroupRequestValidationError is the validation error returned by
// CreateUsergroupRequest.Validate if the designated constraints aren't met.
type CreateUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsergroupRequestValidationError) ErrorName() string {
	return "CreateUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsergroupRequestValidationError{}

// Validate checks the field values on CreateUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsergroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsergroupResponseMultiError, or nil if none found.
func (m *CreateUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUsergroupResponseMultiError(errors)
	}

	return nil
}

// CreateUsergroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsergroupResponseMultiError) AllErrors() []error { return m }

// CreateUsergroupResponseValidationError is the validation error returned by
// CreateUsergroupResponse.Validate if the designated constraints aren't met.
type CreateUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsergroupResponseValidationError) ErrorName() string {
	return "CreateUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsergroupResponseValidationError{}

// Validate checks the field values on GetUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsergroupRequestMultiError, or nil if none found.
func (m *GetUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := GetUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := GetUsergroupRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return GetUsergroupRequestMultiError(errors)
	}

	return nil
}

// GetUsergroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsergroupRequestMultiError) AllErrors() []error { return m }

// GetUsergroupRequestValidationError is the validation error returned by
// GetUsergroupRequest.Validate if the designated constraints aren't met.
type GetUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsergroupRequestValidationError) ErrorName() string {
	return "GetUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsergroupRequestValidationError{}

// Validate checks the field values on GetUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsergroupResponseMultiError, or nil if none found.
func (m *GetUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUsergroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUsergroupResponseValidationError{
					field:  "Usergroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUsergroupResponseValidationError{
					field:  "Usergroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsergroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUsergroupResponseValidationError{
				field:  "Usergroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetUsergroupResponseMultiError(errors)
	}

	return nil
}

// GetUsergroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsergroupResponseMultiError) AllErrors() []error { return m }

// GetUsergroupResponseValidationError is the validation error returned by
// GetUsergroupResponse.Validate if the designated constraints aren't met.
type GetUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsergroupResponseValidationError) ErrorName() string {
	return "GetUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsergroupResponseValidationError{}

// Validate checks the field values on RenameUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUsergroupRequestMultiError, or nil if none found.
func (m *RenameUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RenameUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := RenameUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RenameUsergroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenameUsergroupRequestMultiError(errors)
	}

	return nil
}

// RenameUsergroupRequestMultiError is an error wrapping multiple validation
// errors returned by RenameUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUsergroupRequestMultiError) AllErrors() []error { return m }

// RenameUsergroupRequestValidationError is the validation error returned by
// RenameUsergroupRequest.Validate if the designated constraints aren't met.
type RenameUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUsergroupRequestValidationError) ErrorName() string {
	return "RenameUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUsergroupRequestValidationError{}

// Validate checks the field values on RenameUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUsergroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUsergroupResponseMultiError, or nil if none found.
func (m *RenameUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RenameUsergroupResponseMultiError(errors)
	}

	return nil
}

// RenameUsergroupResponseMultiError is an error wrapping multiple validation
// errors returned by RenameUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUsergroupResponseMultiError) AllErrors() []error { return m }

// RenameUsergroupResponseValidationError is the validation error returned by
// RenameUsergroupResponse.Validate if the designated constraints aren't met.
type RenameUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUsergroupResponseValidationError) ErrorName() string {
	return "RenameUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUsergroupResponseValidationError{}

// Validate checks the field values on EditUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUsergroupRequestMultiError, or nil if none found.
func (m *EditUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := EditUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := EditUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return EditUsergroupRequestMultiError(errors)
	}

	return nil
}

// EditUsergroupRequestMultiError is an error wrapping multiple validation
// errors returned by EditUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type EditUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUsergroupRequestMultiError) AllErrors() []error { return m }

// EditUsergroupRequestValidationError is the validation error returned by
// EditUsergroupRequest.Validate if the designated constraints aren't met.
type EditUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUsergroupRequestValidationError) ErrorName() string {
	return "EditUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUsergroupRequestValidationError{}

// Validate checks the field values on EditUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUsergroupResponseMultiError, or nil if none found.
func (m *EditUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditUsergroupResponseMultiError(errors)
	}

	return nil
}

// EditUsergroupResponseMultiError is an error wrapping multiple validation
// errors returned by EditUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type EditUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUsergroupResponseMultiError) AllErrors() []error { return m }

// EditUsergroupResponseValidationError is the validation error returned by
// EditUsergroupResponse.Validate if the designated constraints aren't met.
type EditUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUsergroupResponseValidationError) ErrorName() string {
	return "EditUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUsergroupResponseValidationError{}

// Validate checks the field values on ListOrganizationMemberUsergroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationMemberUsergroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationMemberUsergroupsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOrganizationMemberUsergroupsRequestMultiError, or nil if none found.
func (m *ListOrganizationMemberUsergroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMemberUsergroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListOrganizationMemberUsergroupsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationMemberUsergroupsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationMemberUsergroupsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationMemberUsergroupsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationMemberUsergroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMemberUsergroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMemberUsergroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMemberUsergroupsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationMemberUsergroupsRequestValidationError is the validation
// error returned by ListOrganizationMemberUsergroupsRequest.Validate if the
// designated constraints aren't met.
type ListOrganizationMemberUsergroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMemberUsergroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMemberUsergroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMemberUsergroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMemberUsergroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMemberUsergroupsRequestValidationError) ErrorName() string {
	return "ListOrganizationMemberUsergroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMemberUsergroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMemberUsergroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMemberUsergroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMemberUsergroupsRequestValidationError{}

// Validate checks the field values on ListOrganizationMemberUsergroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationMemberUsergroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationMemberUsergroupsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOrganizationMemberUsergroupsResponseMultiError, or nil if none found.
func (m *ListOrganizationMemberUsergroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMemberUsergroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationMemberUsergroupsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationMemberUsergroupsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationMemberUsergroupsResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationMemberUsergroupsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationMemberUsergroupsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationMemberUsergroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMemberUsergroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMemberUsergroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMemberUsergroupsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationMemberUsergroupsResponseValidationError is the validation
// error returned by ListOrganizationMemberUsergroupsResponse.Validate if the
// designated constraints aren't met.
type ListOrganizationMemberUsergroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMemberUsergroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMemberUsergroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMemberUsergroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMemberUsergroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMemberUsergroupsResponseValidationError) ErrorName() string {
	return "ListOrganizationMemberUsergroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMemberUsergroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMemberUsergroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMemberUsergroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMemberUsergroupsResponseValidationError{}

// Validate checks the field values on ListProjectMemberUsergroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectMemberUsergroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMemberUsergroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectMemberUsergroupsRequestMultiError, or nil if none found.
func (m *ListProjectMemberUsergroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMemberUsergroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectMemberUsergroupsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectMemberUsergroupsRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectMemberUsergroupsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectMemberUsergroupsRequestMultiError(errors)
	}

	return nil
}

// ListProjectMemberUsergroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectMemberUsergroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMemberUsergroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMemberUsergroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMemberUsergroupsRequestMultiError) AllErrors() []error { return m }

// ListProjectMemberUsergroupsRequestValidationError is the validation error
// returned by ListProjectMemberUsergroupsRequest.Validate if the designated
// constraints aren't met.
type ListProjectMemberUsergroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberUsergroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberUsergroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberUsergroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberUsergroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberUsergroupsRequestValidationError) ErrorName() string {
	return "ListProjectMemberUsergroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberUsergroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberUsergroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberUsergroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberUsergroupsRequestValidationError{}

// Validate checks the field values on ListProjectMemberUsergroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectMemberUsergroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMemberUsergroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectMemberUsergroupsResponseMultiError, or nil if none found.
func (m *ListProjectMemberUsergroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMemberUsergroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMemberUsergroupsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMemberUsergroupsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMemberUsergroupsResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectMemberUsergroupsResponseMultiError(errors)
	}

	return nil
}

// ListProjectMemberUsergroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectMemberUsergroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectMemberUsergroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMemberUsergroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMemberUsergroupsResponseMultiError) AllErrors() []error { return m }

// ListProjectMemberUsergroupsResponseValidationError is the validation error
// returned by ListProjectMemberUsergroupsResponse.Validate if the designated
// constraints aren't met.
type ListProjectMemberUsergroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberUsergroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberUsergroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberUsergroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberUsergroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberUsergroupsResponseValidationError) ErrorName() string {
	return "ListProjectMemberUsergroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberUsergroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberUsergroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberUsergroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberUsergroupsResponseValidationError{}

// Validate checks the field values on DeleteUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUsergroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUsergroupRequestMultiError, or nil if none found.
func (m *DeleteUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := DeleteUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := DeleteUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUsergroupRequestMultiError(errors)
	}

	return nil
}

// DeleteUsergroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUsergroupRequestMultiError) AllErrors() []error { return m }

// DeleteUsergroupRequestValidationError is the validation error returned by
// DeleteUsergroupRequest.Validate if the designated constraints aren't met.
type DeleteUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUsergroupRequestValidationError) ErrorName() string {
	return "DeleteUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUsergroupRequestValidationError{}

// Validate checks the field values on DeleteUsergroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUsergroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUsergroupResponseMultiError, or nil if none found.
func (m *DeleteUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUsergroupResponseMultiError(errors)
	}

	return nil
}

// DeleteUsergroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUsergroupResponseMultiError) AllErrors() []error { return m }

// DeleteUsergroupResponseValidationError is the validation error returned by
// DeleteUsergroupResponse.Validate if the designated constraints aren't met.
type DeleteUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUsergroupResponseValidationError) ErrorName() string {
	return "DeleteUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUsergroupResponseValidationError{}

// Validate checks the field values on AddOrganizationMemberUsergroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddOrganizationMemberUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationMemberUsergroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrganizationMemberUsergroupRequestMultiError, or nil if none found.
func (m *AddOrganizationMemberUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddOrganizationMemberUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := AddOrganizationMemberUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddOrganizationMemberUsergroupRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrganizationMemberUsergroupRequestMultiError(errors)
	}

	return nil
}

// AddOrganizationMemberUsergroupRequestMultiError is an error wrapping
// multiple validation errors returned by
// AddOrganizationMemberUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type AddOrganizationMemberUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberUsergroupRequestMultiError) AllErrors() []error { return m }

// AddOrganizationMemberUsergroupRequestValidationError is the validation error
// returned by AddOrganizationMemberUsergroupRequest.Validate if the
// designated constraints aren't met.
type AddOrganizationMemberUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberUsergroupRequestValidationError) ErrorName() string {
	return "AddOrganizationMemberUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberUsergroupRequestValidationError{}

// Validate checks the field values on AddOrganizationMemberUsergroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddOrganizationMemberUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddOrganizationMemberUsergroupResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddOrganizationMemberUsergroupResponseMultiError, or nil if none found.
func (m *AddOrganizationMemberUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrganizationMemberUsergroupResponseMultiError(errors)
	}

	return nil
}

// AddOrganizationMemberUsergroupResponseMultiError is an error wrapping
// multiple validation errors returned by
// AddOrganizationMemberUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOrganizationMemberUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberUsergroupResponseMultiError) AllErrors() []error { return m }

// AddOrganizationMemberUsergroupResponseValidationError is the validation
// error returned by AddOrganizationMemberUsergroupResponse.Validate if the
// designated constraints aren't met.
type AddOrganizationMemberUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberUsergroupResponseValidationError) ErrorName() string {
	return "AddOrganizationMemberUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberUsergroupResponseValidationError{}

// Validate checks the field values on
// SetOrganizationMemberUsergroupRoleRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationMemberUsergroupRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetOrganizationMemberUsergroupRoleRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SetOrganizationMemberUsergroupRoleRequestMultiError, or nil if none found.
func (m *SetOrganizationMemberUsergroupRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberUsergroupRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetOrganizationMemberUsergroupRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := SetOrganizationMemberUsergroupRoleRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetOrganizationMemberUsergroupRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetOrganizationMemberUsergroupRoleRequestMultiError(errors)
	}

	return nil
}

// SetOrganizationMemberUsergroupRoleRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetOrganizationMemberUsergroupRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberUsergroupRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberUsergroupRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberUsergroupRoleRequestMultiError) AllErrors() []error { return m }

// SetOrganizationMemberUsergroupRoleRequestValidationError is the validation
// error returned by SetOrganizationMemberUsergroupRoleRequest.Validate if the
// designated constraints aren't met.
type SetOrganizationMemberUsergroupRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) ErrorName() string {
	return "SetOrganizationMemberUsergroupRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberUsergroupRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberUsergroupRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberUsergroupRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberUsergroupRoleRequestValidationError{}

// Validate checks the field values on
// SetOrganizationMemberUsergroupRoleResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationMemberUsergroupRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetOrganizationMemberUsergroupRoleResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SetOrganizationMemberUsergroupRoleResponseMultiError, or nil if none found.
func (m *SetOrganizationMemberUsergroupRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberUsergroupRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOrganizationMemberUsergroupRoleResponseMultiError(errors)
	}

	return nil
}

// SetOrganizationMemberUsergroupRoleResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetOrganizationMemberUsergroupRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberUsergroupRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberUsergroupRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberUsergroupRoleResponseMultiError) AllErrors() []error { return m }

// SetOrganizationMemberUsergroupRoleResponseValidationError is the validation
// error returned by SetOrganizationMemberUsergroupRoleResponse.Validate if
// the designated constraints aren't met.
type SetOrganizationMemberUsergroupRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) ErrorName() string {
	return "SetOrganizationMemberUsergroupRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberUsergroupRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberUsergroupRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberUsergroupRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberUsergroupRoleResponseValidationError{}

// Validate checks the field values on RemoveOrganizationMemberUsergroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveOrganizationMemberUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveOrganizationMemberUsergroupRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveOrganizationMemberUsergroupRequestMultiError, or nil if none found.
func (m *RemoveOrganizationMemberUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveOrganizationMemberUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := RemoveOrganizationMemberUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveOrganizationMemberUsergroupRequestMultiError(errors)
	}

	return nil
}

// RemoveOrganizationMemberUsergroupRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveOrganizationMemberUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrganizationMemberUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberUsergroupRequestMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberUsergroupRequestValidationError is the validation
// error returned by RemoveOrganizationMemberUsergroupRequest.Validate if the
// designated constraints aren't met.
type RemoveOrganizationMemberUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberUsergroupRequestValidationError) ErrorName() string {
	return "RemoveOrganizationMemberUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberUsergroupRequestValidationError{}

// Validate checks the field values on
// RemoveOrganizationMemberUsergroupResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationMemberUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveOrganizationMemberUsergroupResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveOrganizationMemberUsergroupResponseMultiError, or nil if none found.
func (m *RemoveOrganizationMemberUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrganizationMemberUsergroupResponseMultiError(errors)
	}

	return nil
}

// RemoveOrganizationMemberUsergroupResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveOrganizationMemberUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrganizationMemberUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberUsergroupResponseMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberUsergroupResponseValidationError is the validation
// error returned by RemoveOrganizationMemberUsergroupResponse.Validate if the
// designated constraints aren't met.
type RemoveOrganizationMemberUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberUsergroupResponseValidationError) ErrorName() string {
	return "RemoveOrganizationMemberUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberUsergroupResponseValidationError{}

// Validate checks the field values on AddProjectMemberUsergroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddProjectMemberUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberUsergroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddProjectMemberUsergroupRequestMultiError, or nil if none found.
func (m *AddProjectMemberUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddProjectMemberUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := AddProjectMemberUsergroupRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := AddProjectMemberUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddProjectMemberUsergroupRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectMemberUsergroupRequestMultiError(errors)
	}

	return nil
}

// AddProjectMemberUsergroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddProjectMemberUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberUsergroupRequestMultiError) AllErrors() []error { return m }

// AddProjectMemberUsergroupRequestValidationError is the validation error
// returned by AddProjectMemberUsergroupRequest.Validate if the designated
// constraints aren't met.
type AddProjectMemberUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberUsergroupRequestValidationError) ErrorName() string {
	return "AddProjectMemberUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberUsergroupRequestValidationError{}

// Validate checks the field values on AddProjectMemberUsergroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddProjectMemberUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberUsergroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddProjectMemberUsergroupResponseMultiError, or nil if none found.
func (m *AddProjectMemberUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectMemberUsergroupResponseMultiError(errors)
	}

	return nil
}

// AddProjectMemberUsergroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddProjectMemberUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberUsergroupResponseMultiError) AllErrors() []error { return m }

// AddProjectMemberUsergroupResponseValidationError is the validation error
// returned by AddProjectMemberUsergroupResponse.Validate if the designated
// constraints aren't met.
type AddProjectMemberUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberUsergroupResponseValidationError) ErrorName() string {
	return "AddProjectMemberUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberUsergroupResponseValidationError{}

// Validate checks the field values on SetProjectMemberUsergroupRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetProjectMemberUsergroupRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberUsergroupRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetProjectMemberUsergroupRoleRequestMultiError, or nil if none found.
func (m *SetProjectMemberUsergroupRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberUsergroupRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetProjectMemberUsergroupRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := SetProjectMemberUsergroupRoleRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := SetProjectMemberUsergroupRoleRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetProjectMemberUsergroupRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetProjectMemberUsergroupRoleRequestMultiError(errors)
	}

	return nil
}

// SetProjectMemberUsergroupRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetProjectMemberUsergroupRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetProjectMemberUsergroupRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberUsergroupRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberUsergroupRoleRequestMultiError) AllErrors() []error { return m }

// SetProjectMemberUsergroupRoleRequestValidationError is the validation error
// returned by SetProjectMemberUsergroupRoleRequest.Validate if the designated
// constraints aren't met.
type SetProjectMemberUsergroupRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberUsergroupRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberUsergroupRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberUsergroupRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberUsergroupRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberUsergroupRoleRequestValidationError) ErrorName() string {
	return "SetProjectMemberUsergroupRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberUsergroupRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberUsergroupRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberUsergroupRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberUsergroupRoleRequestValidationError{}

// Validate checks the field values on SetProjectMemberUsergroupRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetProjectMemberUsergroupRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberUsergroupRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetProjectMemberUsergroupRoleResponseMultiError, or nil if none found.
func (m *SetProjectMemberUsergroupRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberUsergroupRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetProjectMemberUsergroupRoleResponseMultiError(errors)
	}

	return nil
}

// SetProjectMemberUsergroupRoleResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetProjectMemberUsergroupRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetProjectMemberUsergroupRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberUsergroupRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberUsergroupRoleResponseMultiError) AllErrors() []error { return m }

// SetProjectMemberUsergroupRoleResponseValidationError is the validation error
// returned by SetProjectMemberUsergroupRoleResponse.Validate if the
// designated constraints aren't met.
type SetProjectMemberUsergroupRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberUsergroupRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberUsergroupRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberUsergroupRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberUsergroupRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberUsergroupRoleResponseValidationError) ErrorName() string {
	return "SetProjectMemberUsergroupRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberUsergroupRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberUsergroupRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberUsergroupRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberUsergroupRoleResponseValidationError{}

// Validate checks the field values on RemoveProjectMemberUsergroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveProjectMemberUsergroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberUsergroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberUsergroupRequestMultiError, or nil if none found.
func (m *RemoveProjectMemberUsergroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberUsergroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveProjectMemberUsergroupRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := RemoveProjectMemberUsergroupRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := RemoveProjectMemberUsergroupRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveProjectMemberUsergroupRequestMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberUsergroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveProjectMemberUsergroupRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveProjectMemberUsergroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberUsergroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberUsergroupRequestMultiError) AllErrors() []error { return m }

// RemoveProjectMemberUsergroupRequestValidationError is the validation error
// returned by RemoveProjectMemberUsergroupRequest.Validate if the designated
// constraints aren't met.
type RemoveProjectMemberUsergroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberUsergroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberUsergroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberUsergroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberUsergroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberUsergroupRequestValidationError) ErrorName() string {
	return "RemoveProjectMemberUsergroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberUsergroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberUsergroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberUsergroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberUsergroupRequestValidationError{}

// Validate checks the field values on RemoveProjectMemberUsergroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveProjectMemberUsergroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberUsergroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberUsergroupResponseMultiError, or nil if none found.
func (m *RemoveProjectMemberUsergroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberUsergroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveProjectMemberUsergroupResponseMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberUsergroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveProjectMemberUsergroupResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveProjectMemberUsergroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberUsergroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberUsergroupResponseMultiError) AllErrors() []error { return m }

// RemoveProjectMemberUsergroupResponseValidationError is the validation error
// returned by RemoveProjectMemberUsergroupResponse.Validate if the designated
// constraints aren't met.
type RemoveProjectMemberUsergroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberUsergroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberUsergroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberUsergroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberUsergroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberUsergroupResponseValidationError) ErrorName() string {
	return "RemoveProjectMemberUsergroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberUsergroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberUsergroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberUsergroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberUsergroupResponseValidationError{}

// Validate checks the field values on AddUsergroupMemberUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUsergroupMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUsergroupMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddUsergroupMemberUserRequestMultiError, or nil if none found.
func (m *AddUsergroupMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUsergroupMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddUsergroupMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := AddUsergroupMemberUserRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddUsergroupMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUsergroupMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *AddUsergroupMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddUsergroupMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddUsergroupMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by AddUsergroupMemberUserRequest.ValidateAll()
// if the designated constraints aren't met.
type AddUsergroupMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUsergroupMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUsergroupMemberUserRequestMultiError) AllErrors() []error { return m }

// AddUsergroupMemberUserRequestValidationError is the validation error
// returned by AddUsergroupMemberUserRequest.Validate if the designated
// constraints aren't met.
type AddUsergroupMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUsergroupMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUsergroupMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUsergroupMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUsergroupMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUsergroupMemberUserRequestValidationError) ErrorName() string {
	return "AddUsergroupMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUsergroupMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUsergroupMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUsergroupMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUsergroupMemberUserRequestValidationError{}

// Validate checks the field values on AddUsergroupMemberUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUsergroupMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUsergroupMemberUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddUsergroupMemberUserResponseMultiError, or nil if none found.
func (m *AddUsergroupMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUsergroupMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUsergroupMemberUserResponseMultiError(errors)
	}

	return nil
}

// AddUsergroupMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by AddUsergroupMemberUserResponse.ValidateAll()
// if the designated constraints aren't met.
type AddUsergroupMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUsergroupMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUsergroupMemberUserResponseMultiError) AllErrors() []error { return m }

// AddUsergroupMemberUserResponseValidationError is the validation error
// returned by AddUsergroupMemberUserResponse.Validate if the designated
// constraints aren't met.
type AddUsergroupMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUsergroupMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUsergroupMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUsergroupMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUsergroupMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUsergroupMemberUserResponseValidationError) ErrorName() string {
	return "AddUsergroupMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUsergroupMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUsergroupMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUsergroupMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUsergroupMemberUserResponseValidationError{}

// Validate checks the field values on ListUsergroupMemberUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsergroupMemberUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsergroupMemberUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUsergroupMemberUsersRequestMultiError, or nil if none found.
func (m *ListUsergroupMemberUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsergroupMemberUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListUsergroupMemberUsersRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := ListUsergroupMemberUsersRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListUsergroupMemberUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListUsergroupMemberUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsergroupMemberUsersRequestMultiError is an error wrapping multiple
// validation errors returned by ListUsergroupMemberUsersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUsergroupMemberUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsergroupMemberUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsergroupMemberUsersRequestMultiError) AllErrors() []error { return m }

// ListUsergroupMemberUsersRequestValidationError is the validation error
// returned by ListUsergroupMemberUsersRequest.Validate if the designated
// constraints aren't met.
type ListUsergroupMemberUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsergroupMemberUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsergroupMemberUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsergroupMemberUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsergroupMemberUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsergroupMemberUsersRequestValidationError) ErrorName() string {
	return "ListUsergroupMemberUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsergroupMemberUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsergroupMemberUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsergroupMemberUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsergroupMemberUsersRequestValidationError{}

// Validate checks the field values on ListUsergroupMemberUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUsergroupMemberUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsergroupMemberUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUsergroupMemberUsersResponseMultiError, or nil if none found.
func (m *ListUsergroupMemberUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsergroupMemberUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsergroupMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsergroupMemberUsersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsergroupMemberUsersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListUsergroupMemberUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsergroupMemberUsersResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListUsergroupMemberUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUsergroupMemberUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsergroupMemberUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsergroupMemberUsersResponseMultiError) AllErrors() []error { return m }

// ListUsergroupMemberUsersResponseValidationError is the validation error
// returned by ListUsergroupMemberUsersResponse.Validate if the designated
// constraints aren't met.
type ListUsergroupMemberUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsergroupMemberUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsergroupMemberUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsergroupMemberUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsergroupMemberUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsergroupMemberUsersResponseValidationError) ErrorName() string {
	return "ListUsergroupMemberUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsergroupMemberUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsergroupMemberUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsergroupMemberUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsergroupMemberUsersResponseValidationError{}

// Validate checks the field values on RemoveUsergroupMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveUsergroupMemberUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUsergroupMemberUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveUsergroupMemberUserRequestMultiError, or nil if none found.
func (m *RemoveUsergroupMemberUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUsergroupMemberUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveUsergroupMemberUserRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsergroup()) < 1 {
		err := RemoveUsergroupMemberUserRequestValidationError{
			field:  "Usergroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RemoveUsergroupMemberUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveUsergroupMemberUserRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveUsergroupMemberUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RemoveUsergroupMemberUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RemoveUsergroupMemberUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveUsergroupMemberUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveUsergroupMemberUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUsergroupMemberUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUsergroupMemberUserRequestMultiError) AllErrors() []error { return m }

// RemoveUsergroupMemberUserRequestValidationError is the validation error
// returned by RemoveUsergroupMemberUserRequest.Validate if the designated
// constraints aren't met.
type RemoveUsergroupMemberUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsergroupMemberUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsergroupMemberUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsergroupMemberUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsergroupMemberUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsergroupMemberUserRequestValidationError) ErrorName() string {
	return "RemoveUsergroupMemberUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUsergroupMemberUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsergroupMemberUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsergroupMemberUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsergroupMemberUserRequestValidationError{}

// Validate checks the field values on RemoveUsergroupMemberUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveUsergroupMemberUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUsergroupMemberUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveUsergroupMemberUserResponseMultiError, or nil if none found.
func (m *RemoveUsergroupMemberUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUsergroupMemberUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveUsergroupMemberUserResponseMultiError(errors)
	}

	return nil
}

// RemoveUsergroupMemberUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveUsergroupMemberUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveUsergroupMemberUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUsergroupMemberUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUsergroupMemberUserResponseMultiError) AllErrors() []error { return m }

// RemoveUsergroupMemberUserResponseValidationError is the validation error
// returned by RemoveUsergroupMemberUserResponse.Validate if the designated
// constraints aren't met.
type RemoveUsergroupMemberUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsergroupMemberUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsergroupMemberUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsergroupMemberUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsergroupMemberUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsergroupMemberUserResponseValidationError) ErrorName() string {
	return "RemoveUsergroupMemberUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUsergroupMemberUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsergroupMemberUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsergroupMemberUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsergroupMemberUserResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on UserPreferences with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPreferences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPreferences with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPreferencesMultiError, or nil if none found.
func (m *UserPreferences) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPreferences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.TimeZone != nil {
		// no validation rules for TimeZone
	}

	if len(errors) > 0 {
		return UserPreferencesMultiError(errors)
	}

	return nil
}

// UserPreferencesMultiError is an error wrapping multiple validation errors
// returned by UserPreferences.ValidateAll() if the designated constraints
// aren't met.
type UserPreferencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPreferencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPreferencesMultiError) AllErrors() []error { return m }

// UserPreferencesValidationError is the validation error returned by
// UserPreferences.Validate if the designated constraints aren't met.
type UserPreferencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPreferencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPreferencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPreferencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPreferencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPreferencesValidationError) ErrorName() string { return "UserPreferencesValidationError" }

// Error satisfies the builtin error interface
func (e UserPreferencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPreferences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPreferencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPreferencesValidationError{}

// Validate checks the field values on UpdateUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPreferencesRequestMultiError, or nil if none found.
func (m *UpdateUserPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPreferencesRequestValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPreferencesRequestValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPreferencesRequestValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPreferencesRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPreferencesRequestMultiError) AllErrors() []error { return m }

// UpdateUserPreferencesRequestValidationError is the validation error returned
// by UpdateUserPreferencesRequest.Validate if the designated constraints
// aren't met.
type UpdateUserPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPreferencesRequestValidationError) ErrorName() string {
	return "UpdateUserPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPreferencesRequestValidationError{}

// Validate checks the field values on UpdateUserPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserPreferencesResponseMultiError, or nil if none found.
func (m *UpdateUserPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPreferencesResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPreferencesResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPreferencesResponseValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPreferencesResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPreferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPreferencesResponseMultiError) AllErrors() []error { return m }

// UpdateUserPreferencesResponseValidationError is the validation error
// returned by UpdateUserPreferencesResponse.Validate if the designated
// constraints aren't met.
type UpdateUserPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPreferencesResponseValidationError) ErrorName() string {
	return "UpdateUserPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPreferencesResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = DeleteUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *DeleteUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on ListBookmarksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksRequestMultiError, or nil if none found.
func (m *ListBookmarksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for ResourceKind

	// no validation rules for ResourceName

	if len(errors) > 0 {
		return ListBookmarksRequestMultiError(errors)
	}

	return nil
}

// ListBookmarksRequestMultiError is an error wrapping multiple validation
// errors returned by ListBookmarksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBookmarksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksRequestMultiError) AllErrors() []error { return m }

// ListBookmarksRequestValidationError is the validation error returned by
// ListBookmarksRequest.Validate if the designated constraints aren't met.
type ListBookmarksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksRequestValidationError) ErrorName() string {
	return "ListBookmarksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksRequestValidationError{}

// Validate checks the field values on ListBookmarksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksResponseMultiError, or nil if none found.
func (m *ListBookmarksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookmarks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookmarksResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookmarksResponseValidationError{
						field:  fmt.Sprintf("Bookmarks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookmarksResponseValidationError{
					field:  fmt.Sprintf("Bookmarks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookmarksResponseMultiError(errors)
	}

	return nil
}

// ListBookmarksResponseMultiError is an error wrapping multiple validation
// errors returned by ListBookmarksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBookmarksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksResponseMultiError) AllErrors() []error { return m }

// ListBookmarksResponseValidationError is the validation error returned by
// ListBookmarksResponse.Validate if the designated constraints aren't met.
type ListBookmarksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksResponseValidationError) ErrorName() string {
	return "ListBookmarksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksResponseValidationError{}

// Validate checks the field values on GetBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkRequestMultiError, or nil if none found.
func (m *GetBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookmarkId

	if len(errors) > 0 {
		return GetBookmarkRequestMultiError(errors)
	}

	return nil
}

// GetBookmarkRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookmarkRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkRequestMultiError) AllErrors() []error { return m }

// GetBookmarkRequestValidationError is the validation error returned by
// GetBookmarkRequest.Validate if the designated constraints aren't met.
type GetBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkRequestValidationError) ErrorName() string {
	return "GetBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkRequestValidationError{}

// Validate checks the field values on GetBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkResponseMultiError, or nil if none found.
func (m *GetBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookmarkResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookmarkResponseMultiError(errors)
	}

	return nil
}

// GetBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkResponseMultiError) AllErrors() []error { return m }

// GetBookmarkResponseValidationError is the validation error returned by
// GetBookmarkResponse.Validate if the designated constraints aren't met.
type GetBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkResponseValidationError) ErrorName() string {
	return "GetBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkResponseValidationError{}

// Validate checks the field values on CreateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookmarkRequestMultiError, or nil if none found.
func (m *CreateBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Data

	// no validation rules for ResourceKind

	// no validation rules for ResourceName

	// no validation rules for ProjectId

	// no validation rules for Default

	// no validation rules for Shared

	if len(errors) > 0 {
		return CreateBookmarkRequestMultiError(errors)
	}

	return nil
}

// CreateBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookmarkRequestMultiError) AllErrors() []error { return m }

// CreateBookmarkRequestValidationError is the validation error returned by
// CreateBookmarkRequest.Validate if the designated constraints aren't met.
type CreateBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookmarkRequestValidationError) ErrorName() string {
	return "CreateBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookmarkRequestValidationError{}

// Validate checks the field values on CreateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookmarkResponseMultiError, or nil if none found.
func (m *CreateBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookmarkResponseValidationError{
					field:  "Bookmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookmarkResponseValidationError{
				field:  "Bookmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookmarkResponseMultiError(errors)
	}

	return nil
}

// CreateBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookmarkResponseMultiError) AllErrors() []error { return m }

// CreateBookmarkResponseValidationError is the validation error returned by
// CreateBookmarkResponse.Validate if the designated constraints aren't met.
type CreateBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookmarkResponseValidationError) ErrorName() string {
	return "CreateBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookmarkResponseValidationError{}

// Validate checks the field values on UpdateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookmarkRequestMultiError, or nil if none found.
func (m *UpdateBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookmarkId

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Data

	// no validation rules for Default

	// no validation rules for Shared

	if len(errors) > 0 {
		return UpdateBookmarkRequestMultiError(errors)
	}

	return nil
}

// UpdateBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookmarkRequestMultiError) AllErrors() []error { return m }

// UpdateBookmarkRequestValidationError is the validation error returned by
// UpdateBookmarkRequest.Validate if the designated constraints aren't met.
type UpdateBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookmarkRequestValidationError) ErrorName() string {
	return "UpdateBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookmarkRequestValidationError{}

// Validate checks the field values on UpdateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookmarkResponseMultiError, or nil if none found.
func (m *UpdateBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBookmarkResponseMultiError(errors)
	}

	return nil
}

// UpdateBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookmarkResponseMultiError) AllErrors() []error { return m }

// UpdateBookmarkResponseValidationError is the validation error returned by
// UpdateBookmarkResponse.Validate if the designated constraints aren't met.
type UpdateBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookmarkResponseValidationError) ErrorName() string {
	return "UpdateBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookmarkResponseValidationError{}

// Validate checks the field values on RemoveBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBookmarkRequestMultiError, or nil if none found.
func (m *RemoveBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookmarkId

	if len(errors) > 0 {
		return RemoveBookmarkRequestMultiError(errors)
	}

	return nil
}

// RemoveBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkRequestMultiError) AllErrors() []error { return m }

// RemoveBookmarkRequestValidationError is the validation error returned by
// RemoveBookmarkRequest.Validate if the designated constraints aren't met.
type RemoveBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkRequestValidationError) ErrorName() string {
	return "RemoveBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkRequestValidationError{}

// Validate checks the field values on RemoveBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBookmarkResponseMultiError, or nil if none found.
func (m *RemoveBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveBookmarkResponseMultiError(errors)
	}

	return nil
}

// RemoveBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBookmarkResponseMultiError) AllErrors() []error { return m }

// RemoveBookmarkResponseValidationError is the validation error returned by
// RemoveBookmarkResponse.Validate if the designated constraints aren't met.
type RemoveBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBookmarkResponseValidationError) ErrorName() string {
	return "RemoveBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBookmarkResponseValidationError{}

// Validate checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUsersRequestMultiError, or nil if none found.
func (m *SearchUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmailPattern()) < 1 {
		err := SearchUsersRequestValidationError{
			field:  "EmailPattern",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := SearchUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SearchUsersRequestMultiError(errors)
	}

	return nil
}

// SearchUsersRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUsersRequestMultiError) AllErrors() []error { return m }

// SearchUsersRequestValidationError is the validation error returned by
// SearchUsersRequest.Validate if the designated constraints aren't met.
type SearchUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUsersRequestValidationError) ErrorName() string {
	return "SearchUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUsersRequestValidationError{}

// Validate checks the field values on SearchUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUsersResponseMultiError, or nil if none found.
func (m *SearchUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return SearchUsersResponseMultiError(errors)
	}

	return nil
}

// SearchUsersResponseMultiError is an error wrapping multiple validation
// errors returned by SearchUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUsersResponseMultiError) AllErrors() []error { return m }

// SearchUsersResponseValidationError is the validation error returned by
// SearchUsersResponse.Validate if the designated constraints aren't met.
type SearchUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUsersResponseValidationError) ErrorName() string {
	return "SearchUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUsersResponseValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenRequestMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenRequestMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenRequestValidationError is the validation error
// returned by RevokeCurrentAuthTokenRequest.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenRequestValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenRequestValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenResponseMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenResponseMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenResponseValidationError is the validation error
// returned by RevokeCurrentAuthTokenResponse.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenResponseValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenResponseValidationError{}

// Validate checks the field values on IssueRepresentativeAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IssueRepresentativeAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueRepresentativeAuthTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IssueRepresentativeAuthTokenRequestMultiError, or nil if none found.
func (m *IssueRepresentativeAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueRepresentativeAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = IssueRepresentativeAuthTokenRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TtlMinutes

	if len(errors) > 0 {
		return IssueRepresentativeAuthTokenRequestMultiError(errors)
	}

	return nil
}

func (m *IssueRepresentativeAuthTokenRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *IssueRepresentativeAuthTokenRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// IssueRepresentativeAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// IssueRepresentativeAuthTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueRepresentativeAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueRepresentativeAuthTokenRequestMultiError) AllErrors() []error { return m }

// IssueRepresentativeAuthTokenRequestValidationError is the validation error
// returned by IssueRepresentativeAuthTokenRequest.Validate if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueRepresentativeAuthTokenRequestValidationError) ErrorName() string {
	return "IssueRepresentativeAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueRepresentativeAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueRepresentativeAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueRepresentativeAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueRepresentativeAuthTokenRequestValidationError{}

// Validate checks the field values on IssueRepresentativeAuthTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IssueRepresentativeAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueRepresentativeAuthTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IssueRepresentativeAuthTokenResponseMultiError, or nil if none found.
func (m *IssueRepresentativeAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueRepresentativeAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IssueRepresentativeAuthTokenResponseMultiError(errors)
	}

	return nil
}

// IssueRepresentativeAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// IssueRepresentativeAuthTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueRepresentativeAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueRepresentativeAuthTokenResponseMultiError) AllErrors() []error { return m }

// IssueRepresentativeAuthTokenResponseValidationError is the validation error
// returned by IssueRepresentativeAuthTokenResponse.Validate if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueRepresentativeAuthTokenResponseValidationError) ErrorName() string {
	return "IssueRepresentativeAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueRepresentativeAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueRepresentativeAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueRepresentativeAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueRepresentativeAuthTokenResponseValidationError{}

// Validate checks the field values on RevokeServiceAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeServiceAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeServiceAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeServiceAuthTokenRequestMultiError, or nil if none found.
func (m *RevokeServiceAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeServiceAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return RevokeServiceAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeServiceAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeServiceAuthTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type RevokeServiceAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeServiceAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeServiceAuthTokenRequestMultiError) AllErrors() []error { return m }

// RevokeServiceAuthTokenRequestValidationError is the validation error
// returned by RevokeServiceAuthTokenRequest.Validate if the designated
// constraints aren't met.
type RevokeServiceAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeServiceAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeServiceAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeServiceAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeServiceAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeServiceAuthTokenRequestValidationError) ErrorName() string {
	return "RevokeServiceAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeServiceAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeServiceAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeServiceAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeServiceAuthTokenRequestValidationError{}

// Validate checks the field values on RevokeServiceAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeServiceAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeServiceAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeServiceAuthTokenResponseMultiError, or nil if none found.
func (m *RevokeServiceAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeServiceAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeServiceAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeServiceAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeServiceAuthTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type RevokeServiceAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeServiceAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeServiceAuthTokenResponseMultiError) AllErrors() []error { return m }

// RevokeServiceAuthTokenResponseValidationError is the validation error
// returned by RevokeServiceAuthTokenResponse.Validate if the designated
// constraints aren't met.
type RevokeServiceAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeServiceAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeServiceAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeServiceAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeServiceAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeServiceAuthTokenResponseValidationError) ErrorName() string {
	return "RevokeServiceAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeServiceAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeServiceAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeServiceAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeServiceAuthTokenResponseValidationError{}

// Validate checks the field values on IssueServiceAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueServiceAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueServiceAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueServiceAuthTokenRequestMultiError, or nil if none found.
func (m *IssueServiceAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueServiceAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := IssueServiceAuthTokenRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return IssueServiceAuthTokenRequestMultiError(errors)
	}

	return nil
}

// IssueServiceAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by IssueServiceAuthTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type IssueServiceAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueServiceAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueServiceAuthTokenRequestMultiError) AllErrors() []error { return m }

// IssueServiceAuthTokenRequestValidationError is the validation error returned
// by IssueServiceAuthTokenRequest.Validate if the designated constraints
// aren't met.
type IssueServiceAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueServiceAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueServiceAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueServiceAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueServiceAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueServiceAuthTokenRequestValidationError) ErrorName() string {
	return "IssueServiceAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueServiceAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueServiceAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueServiceAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueServiceAuthTokenRequestValidationError{}

// Validate checks the field values on IssueServiceAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueServiceAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueServiceAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IssueServiceAuthTokenResponseMultiError, or nil if none found.
func (m *IssueServiceAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueServiceAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IssueServiceAuthTokenResponseMultiError(errors)
	}

	return nil
}

// IssueServiceAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by IssueServiceAuthTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type IssueServiceAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueServiceAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueServiceAuthTokenResponseMultiError) AllErrors() []error { return m }

// IssueServiceAuthTokenResponseValidationError is the validation error
// returned by IssueServiceAuthTokenResponse.Validate if the designated
// constraints aren't met.
type IssueServiceAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueServiceAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueServiceAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueServiceAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueServiceAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueServiceAuthTokenResponseValidationError) ErrorName() string {
	return "IssueServiceAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueServiceAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueServiceAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueServiceAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueServiceAuthTokenResponseValidationError{}

// Validate checks the field values on ListServiceAuthTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceAuthTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceAuthTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceAuthTokensRequestMultiError, or nil if none found.
func (m *ListServiceAuthTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceAuthTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := ListServiceAuthTokensRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return ListServiceAuthTokensRequestMultiError(errors)
	}

	return nil
}

// ListServiceAuthTokensRequestMultiError is an error wrapping multiple
// validation errors returned by ListServiceAuthTokensRequest.ValidateAll() if
// the designated constraints aren't met.
type ListServiceAuthTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceAuthTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceAuthTokensRequestMultiError) AllErrors() []error { return m }

// ListServiceAuthTokensRequestValidationError is the validation error returned
// by ListServiceAuthTokensRequest.Validate if the designated constraints
// aren't met.
type ListServiceAuthTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceAuthTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceAuthTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceAuthTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceAuthTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceAuthTokensRequestValidationError) ErrorName() string {
	return "ListServiceAuthTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceAuthTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceAuthTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceAuthTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceAuthTokensRequestValidationError{}

// Validate checks the field values on ListServiceAuthTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceAuthTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceAuthTokensResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServiceAuthTokensResponseMultiError, or nil if none found.
func (m *ListServiceAuthTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceAuthTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceAuthTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceAuthTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceAuthTokensResponseValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceAuthTokensResponseMultiError(errors)
	}

	return nil
}

// ListServiceAuthTokensResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceAuthTokensResponse.ValidateAll()
// if the designated constraints aren't met.
type ListServiceAuthTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceAuthTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceAuthTokensResponseMultiError) AllErrors() []error { return m }

// ListServiceAuthTokensResponseValidationError is the validation error
// returned by ListServiceAuthTokensResponse.Validate if the designated
// constraints aren't met.
type ListServiceAuthTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceAuthTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceAuthTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceAuthTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceAuthTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceAuthTokensResponseValidationError) ErrorName() string {
	return "ListServiceAuthTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceAuthTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceAuthTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceAuthTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceAuthTokensResponseValidationError{}

// Validate checks the field values on IssueMagicAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueMagicAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueMagicAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueMagicAuthTokenRequestMultiError, or nil if none found.
func (m *IssueMagicAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueMagicAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := IssueMagicAuthTokenRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := IssueMagicAuthTokenRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TtlMinutes

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueMagicAuthTokenRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueMagicAuthTokenRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueMagicAuthTokenRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return IssueMagicAuthTokenRequestMultiError(errors)
	}

	return nil
}

// IssueMagicAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by IssueMagicAuthTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type IssueMagicAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueMagicAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueMagicAuthTokenRequestMultiError) AllErrors() []error { return m }

// IssueMagicAuthTokenRequestValidationError is the validation error returned
// by IssueMagicAuthTokenRequest.Validate if the designated constraints aren't met.
type IssueMagicAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueMagicAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueMagicAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueMagicAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueMagicAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueMagicAuthTokenRequestValidationError) ErrorName() string {
	return "IssueMagicAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueMagicAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueMagicAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueMagicAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueMagicAuthTokenRequestValidationError{}

// Validate checks the field values on IssueMagicAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueMagicAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueMagicAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueMagicAuthTokenResponseMultiError, or nil if none found.
func (m *IssueMagicAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueMagicAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Url

	if len(errors) > 0 {
		return IssueMagicAuthTokenResponseMultiError(errors)
	}

	return nil
}

// IssueMagicAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by IssueMagicAuthTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type IssueMagicAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueMagicAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueMagicAuthTokenResponseMultiError) AllErrors() []error { return m }

// IssueMagicAuthTokenResponseValidationError is the validation error returned
// by IssueMagicAuthTokenResponse.Validate if the designated constraints
// aren't met.
type IssueMagicAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueMagicAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueMagicAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueMagicAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueMagicAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueMagicAuthTokenResponseValidationError) ErrorName() string {
	return "IssueMagicAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueMagicAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueMagicAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueMagicAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueMagicAuthTokenResponseValidationError{}

// Validate checks the field values on ListMagicAuthTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMagicAuthTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMagicAuthTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMagicAuthTokensRequestMultiError, or nil if none found.
func (m *ListMagicAuthTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMagicAuthTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListMagicAuthTokensRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListMagicAuthTokensRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListMagicAuthTokensRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListMagicAuthTokensRequestMultiError(errors)
	}

	return nil
}

// ListMagicAuthTokensRequestMultiError is an error wrapping multiple
// validation errors returned by ListMagicAuthTokensRequest.ValidateAll() if
// the designated constraints aren't met.
type ListMagicAuthTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMagicAuthTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMagicAuthTokensRequestMultiError) AllErrors() []error { return m }

// ListMagicAuthTokensRequestValidationError is the validation error returned
// by ListMagicAuthTokensRequest.Validate if the designated constraints aren't met.
type ListMagicAuthTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMagicAuthTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMagicAuthTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMagicAuthTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMagicAuthTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMagicAuthTokensRequestValidationError) ErrorName() string {
	return "ListMagicAuthTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMagicAuthTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMagicAuthTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMagicAuthTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMagicAuthTokensRequestValidationError{}

// Validate checks the field values on ListMagicAuthTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMagicAuthTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMagicAuthTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMagicAuthTokensResponseMultiError, or nil if none found.
func (m *ListMagicAuthTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMagicAuthTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMagicAuthTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMagicAuthTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMagicAuthTokensResponseValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMagicAuthTokensResponseMultiError(errors)
	}

	return nil
}

// ListMagicAuthTokensResponseMultiError is an error wrapping multiple
// validation errors returned by ListMagicAuthTokensResponse.ValidateAll() if
// the designated constraints aren't met.
type ListMagicAuthTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMagicAuthTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMagicAuthTokensResponseMultiError) AllErrors() []error { return m }

// ListMagicAuthTokensResponseValidationError is the validation error returned
// by ListMagicAuthTokensResponse.Validate if the designated constraints
// aren't met.
type ListMagicAuthTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMagicAuthTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMagicAuthTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMagicAuthTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMagicAuthTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMagicAuthTokensResponseValidationError) ErrorName() string {
	return "ListMagicAuthTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMagicAuthTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMagicAuthTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMagicAuthTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMagicAuthTokensResponseValidationError{}

// Validate checks the field values on GetCurrentMagicAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentMagicAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentMagicAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCurrentMagicAuthTokenRequestMultiError, or nil if none found.
func (m *GetCurrentMagicAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentMagicAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentMagicAuthTokenRequestMultiError(errors)
	}

	return nil
}

// GetCurrentMagicAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GetCurrentMagicAuthTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCurrentMagicAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentMagicAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentMagicAuthTokenRequestMultiError) AllErrors() []error { return m }

// GetCurrentMagicAuthTokenRequestValidationError is the validation error
// returned by GetCurrentMagicAuthTokenRequest.Validate if the designated
// constraints aren't met.
type GetCurrentMagicAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentMagicAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentMagicAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentMagicAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentMagicAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentMagicAuthTokenRequestValidationError) ErrorName() string {
	return "GetCurrentMagicAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentMagicAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentMagicAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentMagicAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentMagicAuthTokenRequestValidationError{}

// Validate checks the field values on GetCurrentMagicAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCurrentMagicAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentMagicAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCurrentMagicAuthTokenResponseMultiError, or nil if none found.
func (m *GetCurrentMagicAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentMagicAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentMagicAuthTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentMagicAuthTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentMagicAuthTokenResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentMagicAuthTokenResponseMultiError(errors)
	}

	return nil
}

// GetCurrentMagicAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentMagicAuthTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentMagicAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentMagicAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentMagicAuthTokenResponseMultiError) AllErrors() []error { return m }

// GetCurrentMagicAuthTokenResponseValidationError is the validation error
// returned by GetCurrentMagicAuthTokenResponse.Validate if the designated
// constraints aren't met.
type GetCurrentMagicAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentMagicAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentMagicAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentMagicAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentMagicAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentMagicAuthTokenResponseValidationError) ErrorName() string {
	return "GetCurrentMagicAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentMagicAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentMagicAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentMagicAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentMagicAuthTokenResponseValidationError{}

// Validate checks the field values on RevokeMagicAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeMagicAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeMagicAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeMagicAuthTokenRequestMultiError, or nil if none found.
func (m *RevokeMagicAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeMagicAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return RevokeMagicAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeMagicAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeMagicAuthTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type RevokeMagicAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeMagicAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeMagicAuthTokenRequestMultiError) AllErrors() []error { return m }

// RevokeMagicAuthTokenRequestValidationError is the validation error returned
// by RevokeMagicAuthTokenRequest.Validate if the designated constraints
// aren't met.
type RevokeMagicAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeMagicAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeMagicAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeMagicAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeMagicAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeMagicAuthTokenRequestValidationError) ErrorName() string {
	return "RevokeMagicAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeMagicAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeMagicAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeMagicAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeMagicAuthTokenRequestValidationError{}

// Validate checks the field values on RevokeMagicAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeMagicAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeMagicAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeMagicAuthTokenResponseMultiError, or nil if none found.
func (m *RevokeMagicAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeMagicAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeMagicAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeMagicAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeMagicAuthTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RevokeMagicAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeMagicAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeMagicAuthTokenResponseMultiError) AllErrors() []error { return m }

// RevokeMagicAuthTokenResponseValidationError is the validation error returned
// by RevokeMagicAuthTokenResponse.Validate if the designated constraints
// aren't met.
type RevokeMagicAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeMagicAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeMagicAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeMagicAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeMagicAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeMagicAuthTokenResponseValidationError) ErrorName() string {
	return "RevokeMagicAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeMagicAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeMagicAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeMagicAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeMagicAuthTokenResponseValidationError{}

// Validate checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusRequestMultiError, or nil if none found.
func (m *GetGithubRepoStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GithubUrl

	if len(errors) > 0 {
		return GetGithubRepoStatusRequestMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusRequestMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusRequestValidationError is the validation error returned
// by GetGithubRepoStatusRequest.Validate if the designated constraints aren't met.
type GetGithubRepoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusRequestValidationError) ErrorName() string {
	return "GetGithubRepoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusRequestValidationError{}

// Validate checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusResponseMultiError, or nil if none found.
func (m *GetGithubRepoStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasAccess

	// no validation rules for GrantAccessUrl

	// no validation rules for DefaultBranch

	if len(errors) > 0 {
		return GetGithubRepoStatusResponseMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusResponseMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusResponseValidationError is the validation error returned
// by GetGithubRepoStatusResponse.Validate if the designated constraints
// aren't met.
type GetGithubRepoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusResponseValidationError) ErrorName() string {
	return "GetGithubRepoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusResponseValidationError{}

// Validate checks the field values on GetGithubUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubUserStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubUserStatusRequestMultiError, or nil if none found.
func (m *GetGithubUserStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubUserStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGithubUserStatusRequestMultiError(errors)
	}

	return nil
}

// GetGithubUserStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetGithubUserStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGithubUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubUserStatusRequestMultiError) AllErrors() []error { return m }

// GetGithubUserStatusRequestValidationError is the validation error returned
// by GetGithubUserStatusRequest.Validate if the designated constraints aren't met.
type GetGithubUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubUserStatusRequestValidationError) ErrorName() string {
	return "GetGithubUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubUserStatusRequestValidationError{}

// Validate checks the field values on GetGithubUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubUserStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubUserStatusResponseMultiError, or nil if none found.
func (m *GetGithubUserStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubUserStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasAccess

	// no validation rules for GrantAccessUrl

	// no validation rules for AccessToken

	// no validation rules for Account

	// no validation rules for UserInstallationPermission

	// no validation rules for OrganizationInstallationPermissions

	if len(errors) > 0 {
		return GetGithubUserStatusResponseMultiError(errors)
	}

	return nil
}

// GetGithubUserStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetGithubUserStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGithubUserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubUserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubUserStatusResponseMultiError) AllErrors() []error { return m }

// GetGithubUserStatusResponseValidationError is the validation error returned
// by GetGithubUserStatusResponse.Validate if the designated constraints
// aren't met.
type GetGithubUserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubUserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubUserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubUserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubUserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubUserStatusResponseValidationError) ErrorName() string {
	return "GetGithubUserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubUserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubUserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubUserStatusResponseValidationError{}

// Validate checks the field values on ListGithubUserReposRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubUserReposRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubUserReposRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubUserReposRequestMultiError, or nil if none found.
func (m *ListGithubUserReposRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubUserReposRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListGithubUserReposRequestMultiError(errors)
	}

	return nil
}

// ListGithubUserReposRequestMultiError is an error wrapping multiple
// validation errors returned by ListGithubUserReposRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGithubUserReposRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubUserReposRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubUserReposRequestMultiError) AllErrors() []error { return m }

// ListGithubUserReposRequestValidationError is the validation error returned
// by ListGithubUserReposRequest.Validate if the designated constraints aren't met.
type ListGithubUserReposRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubUserReposRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubUserReposRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubUserReposRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubUserReposRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubUserReposRequestValidationError) ErrorName() string {
	return "ListGithubUserReposRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubUserReposRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubUserReposRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubUserReposRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubUserReposRequestValidationError{}

// Validate checks the field values on ListGithubUserReposResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubUserReposResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubUserReposResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubUserReposResponseMultiError, or nil if none found.
func (m *ListGithubUserReposResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubUserReposResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRepos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubUserReposResponseValidationError{
						field:  fmt.Sprintf("Repos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubUserReposResponseValidationError{
						field:  fmt.Sprintf("Repos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubUserReposResponseValidationError{
					field:  fmt.Sprintf("Repos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubUserReposResponseMultiError(errors)
	}

	return nil
}

// ListGithubUserReposResponseMultiError is an error wrapping multiple
// validation errors returned by ListGithubUserReposResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGithubUserReposResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubUserReposResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubUserReposResponseMultiError) AllErrors() []error { return m }

// ListGithubUserReposResponseValidationError is the validation error returned
// by ListGithubUserReposResponse.Validate if the designated constraints
// aren't met.
type ListGithubUserReposResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubUserReposResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubUserReposResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubUserReposResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubUserReposResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubUserReposResponseValidationError) ErrorName() string {
	return "ListGithubUserReposResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubUserReposResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubUserReposResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubUserReposResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubUserReposResponseValidationError{}

// Validate checks the field values on ConnectProjectToGithubRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectProjectToGithubRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectProjectToGithubRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConnectProjectToGithubRequestMultiError, or nil if none found.
func (m *ConnectProjectToGithubRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectProjectToGithubRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Repo

	// no validation rules for Branch

	// no validation rules for Subpath

	// no validation rules for Force

	if len(errors) > 0 {
		return ConnectProjectToGithubRequestMultiError(errors)
	}

	return nil
}

// ConnectProjectToGithubRequestMultiError is an error wrapping multiple
// validation errors returned by ConnectProjectToGithubRequest.ValidateAll()
// if the designated constraints aren't met.
type ConnectProjectToGithubRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectProjectToGithubRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectProjectToGithubRequestMultiError) AllErrors() []error { return m }

// ConnectProjectToGithubRequestValidationError is the validation error
// returned by ConnectProjectToGithubRequest.Validate if the designated
// constraints aren't met.
type ConnectProjectToGithubRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectProjectToGithubRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectProjectToGithubRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectProjectToGithubRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectProjectToGithubRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectProjectToGithubRequestValidationError) ErrorName() string {
	return "ConnectProjectToGithubRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectProjectToGithubRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectProjectToGithubRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectProjectToGithubRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectProjectToGithubRequestValidationError{}

// Validate checks the field values on ConnectProjectToGithubResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectProjectToGithubResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectProjectToGithubResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConnectProjectToGithubResponseMultiError, or nil if none found.
func (m *ConnectProjectToGithubResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectProjectToGithubResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectProjectToGithubResponseMultiError(errors)
	}

	return nil
}

// ConnectProjectToGithubResponseMultiError is an error wrapping multiple
// validation errors returned by ConnectProjectToGithubResponse.ValidateAll()
// if the designated constraints aren't met.
type ConnectProjectToGithubResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectProjectToGithubResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectProjectToGithubResponseMultiError) AllErrors() []error { return m }

// ConnectProjectToGithubResponseValidationError is the validation error
// returned by ConnectProjectToGithubResponse.Validate if the designated
// constraints aren't met.
type ConnectProjectToGithubResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectProjectToGithubResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectProjectToGithubResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectProjectToGithubResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectProjectToGithubResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectProjectToGithubResponseValidationError) ErrorName() string {
	return "ConnectProjectToGithubResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectProjectToGithubResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectProjectToGithubResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectProjectToGithubResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectProjectToGithubResponseValidationError{}

// Validate checks the field values on UploadProjectAssetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadProjectAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadProjectAssetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadProjectAssetsRequestMultiError, or nil if none found.
func (m *UploadProjectAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadProjectAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if len(errors) > 0 {
		return UploadProjectAssetsRequestMultiError(errors)
	}

	return nil
}

// UploadProjectAssetsRequestMultiError is an error wrapping multiple
// validation errors returned by UploadProjectAssetsRequest.ValidateAll() if
// the designated constraints aren't met.
type UploadProjectAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadProjectAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadProjectAssetsRequestMultiError) AllErrors() []error { return m }

// UploadProjectAssetsRequestValidationError is the validation error returned
// by UploadProjectAssetsRequest.Validate if the designated constraints aren't met.
type UploadProjectAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadProjectAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadProjectAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadProjectAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadProjectAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadProjectAssetsRequestValidationError) ErrorName() string {
	return "UploadProjectAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadProjectAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadProjectAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadProjectAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadProjectAssetsRequestValidationError{}

// Validate checks the field values on UploadProjectAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadProjectAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadProjectAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadProjectAssetsResponseMultiError, or nil if none found.
func (m *UploadProjectAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadProjectAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadProjectAssetsResponseMultiError(errors)
	}

	return nil
}

// UploadProjectAssetsResponseMultiError is an error wrapping multiple
// validation errors returned by UploadProjectAssetsResponse.ValidateAll() if
// the designated constraints aren't met.
type UploadProjectAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadProjectAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadProjectAssetsResponseMultiError) AllErrors() []error { return m }

// UploadProjectAssetsResponseValidationError is the validation error returned
// by UploadProjectAssetsResponse.Validate if the designated constraints
// aren't met.
type UploadProjectAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadProjectAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadProjectAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadProjectAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadProjectAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadProjectAssetsResponseValidationError) ErrorName() string {
	return "UploadProjectAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadProjectAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadProjectAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadProjectAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadProjectAssetsResponseValidationError{}

// Validate checks the field values on GetCloneCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloneCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloneCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloneCredentialsRequestMultiError, or nil if none found.
func (m *GetCloneCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloneCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetCloneCredentialsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := GetCloneCredentialsRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCloneCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetCloneCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by GetCloneCredentialsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCloneCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloneCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloneCredentialsRequestMultiError) AllErrors() []error { return m }

// GetCloneCredentialsRequestValidationError is the validation error returned
// by GetCloneCredentialsRequest.Validate if the designated constraints aren't met.
type GetCloneCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloneCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloneCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloneCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloneCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloneCredentialsRequestValidationError) ErrorName() string {
	return "GetCloneCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloneCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloneCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloneCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloneCredentialsRequestValidationError{}

// Validate checks the field values on GetCloneCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloneCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloneCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloneCredentialsResponseMultiError, or nil if none found.
func (m *GetCloneCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloneCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GitRepoUrl

	// no validation rules for GitUsername

	// no validation rules for GitPassword

	// no validation rules for GitSubpath

	// no validation rules for GitProdBranch

	// no validation rules for ArchiveDownloadUrl

	if len(errors) > 0 {
		return GetCloneCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetCloneCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by GetCloneCredentialsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCloneCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloneCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloneCredentialsResponseMultiError) AllErrors() []error { return m }

// GetCloneCredentialsResponseValidationError is the validation error returned
// by GetCloneCredentialsResponse.Validate if the designated constraints
// aren't met.
type GetCloneCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloneCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloneCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloneCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloneCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloneCredentialsResponseValidationError) ErrorName() string {
	return "GetCloneCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloneCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloneCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloneCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloneCredentialsResponseValidationError{}

// Validate checks the field values on CreateWhitelistedDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistedDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWhitelistedDomainRequestMultiError, or nil if none found.
func (m *CreateWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// CreateWhitelistedDomainRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWhitelistedDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// CreateWhitelistedDomainRequestValidationError is the validation error
// returned by CreateWhitelistedDomainRequest.Validate if the designated
// constraints aren't met.
type CreateWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistedDomainRequestValidationError) ErrorName() string {
	return "CreateWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistedDomainRequestValidationError{}

// Validate checks the field values on CreateWhitelistedDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistedDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWhitelistedDomainResponseMultiError, or nil if none found.
func (m *CreateWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// CreateWhitelistedDomainResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWhitelistedDomainResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// CreateWhitelistedDomainResponseValidationError is the validation error
// returned by CreateWhitelistedDomainResponse.Validate if the designated
// constraints aren't met.
type CreateWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistedDomainResponseValidationError) ErrorName() string {
	return "CreateWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistedDomainResponseValidationError{}

// Validate checks the field values on RemoveWhitelistedDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWhitelistedDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWhitelistedDomainRequestMultiError, or nil if none found.
func (m *RemoveWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := RemoveWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// RemoveWhitelistedDomainRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveWhitelistedDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// RemoveWhitelistedDomainRequestValidationError is the validation error
// returned by RemoveWhitelistedDomainRequest.Validate if the designated
// constraints aren't met.
type RemoveWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWhitelistedDomainRequestValidationError) ErrorName() string {
	return "RemoveWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWhitelistedDomainRequestValidationError{}

// Validate checks the field values on RemoveWhitelistedDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWhitelistedDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWhitelistedDomainResponseMultiError, or nil if none found.
func (m *RemoveWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// RemoveWhitelistedDomainResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveWhitelistedDomainResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// RemoveWhitelistedDomainResponseValidationError is the validation error
// returned by RemoveWhitelistedDomainResponse.Validate if the designated
// constraints aren't met.
type RemoveWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWhitelistedDomainResponseValidationError) ErrorName() string {
	return "RemoveWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWhitelistedDomainResponseValidationError{}

// Validate checks the field values on ListWhitelistedDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistedDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistedDomainsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistedDomainsRequestMultiError, or nil if none found.
func (m *ListWhitelistedDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistedDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListWhitelistedDomainsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWhitelistedDomainsRequestMultiError(errors)
	}

	return nil
}

// ListWhitelistedDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistedDomainsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistedDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistedDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistedDomainsRequestMultiError) AllErrors() []error { return m }

// ListWhitelistedDomainsRequestValidationError is the validation error
// returned by ListWhitelistedDomainsRequest.Validate if the designated
// constraints aren't met.
type ListWhitelistedDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistedDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistedDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistedDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistedDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistedDomainsRequestValidationError) ErrorName() string {
	return "ListWhitelistedDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistedDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistedDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistedDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistedDomainsRequestValidationError{}

// Validate checks the field values on ListWhitelistedDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistedDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistedDomainsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistedDomainsResponseMultiError, or nil if none found.
func (m *ListWhitelistedDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistedDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistedDomainsResponseValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWhitelistedDomainsResponseMultiError(errors)
	}

	return nil
}

// ListWhitelistedDomainsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistedDomainsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistedDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistedDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistedDomainsResponseMultiError) AllErrors() []error { return m }

// ListWhitelistedDomainsResponseValidationError is the validation error
// returned by ListWhitelistedDomainsResponse.Validate if the designated
// constraints aren't met.
type ListWhitelistedDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistedDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistedDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistedDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistedDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistedDomainsResponseValidationError) ErrorName() string {
	return "ListWhitelistedDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistedDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistedDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistedDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistedDomainsResponseValidationError{}

// Validate checks the field values on CreateProjectWhitelistedDomainRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProjectWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectWhitelistedDomainRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProjectWhitelistedDomainRequestMultiError, or nil if none found.
func (m *CreateProjectWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := CreateProjectWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := CreateProjectWhitelistedDomainRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := CreateProjectWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := CreateProjectWhitelistedDomainRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProjectWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// CreateProjectWhitelistedDomainRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectWhitelistedDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// CreateProjectWhitelistedDomainRequestValidationError is the validation error
// returned by CreateProjectWhitelistedDomainRequest.Validate if the
// designated constraints aren't met.
type CreateProjectWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectWhitelistedDomainRequestValidationError) ErrorName() string {
	return "CreateProjectWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectWhitelistedDomainRequestValidationError{}

// Validate checks the field values on CreateProjectWhitelistedDomainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProjectWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateProjectWhitelistedDomainResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateProjectWhitelistedDomainResponseMultiError, or nil if none found.
func (m *CreateProjectWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateProjectWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// CreateProjectWhitelistedDomainResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectWhitelistedDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// CreateProjectWhitelistedDomainResponseValidationError is the validation
// error returned by CreateProjectWhitelistedDomainResponse.Validate if the
// designated constraints aren't met.
type CreateProjectWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectWhitelistedDomainResponseValidationError) ErrorName() string {
	return "CreateProjectWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectWhitelistedDomainResponseValidationError{}

// Validate checks the field values on RemoveProjectWhitelistedDomainRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveProjectWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectWhitelistedDomainRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveProjectWhitelistedDomainRequestMultiError, or nil if none found.
func (m *RemoveProjectWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveProjectWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := RemoveProjectWhitelistedDomainRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := RemoveProjectWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveProjectWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// RemoveProjectWhitelistedDomainRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveProjectWhitelistedDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveProjectWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// RemoveProjectWhitelistedDomainRequestValidationError is the validation error
// returned by RemoveProjectWhitelistedDomainRequest.Validate if the
// designated constraints aren't met.
type RemoveProjectWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectWhitelistedDomainRequestValidationError) ErrorName() string {
	return "RemoveProjectWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectWhitelistedDomainRequestValidationError{}

// Validate checks the field values on RemoveProjectWhitelistedDomainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveProjectWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveProjectWhitelistedDomainResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RemoveProjectWhitelistedDomainResponseMultiError, or nil if none found.
func (m *RemoveProjectWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveProjectWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// RemoveProjectWhitelistedDomainResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveProjectWhitelistedDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveProjectWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// RemoveProjectWhitelistedDomainResponseValidationError is the validation
// error returned by RemoveProjectWhitelistedDomainResponse.Validate if the
// designated constraints aren't met.
type RemoveProjectWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectWhitelistedDomainResponseValidationError) ErrorName() string {
	return "RemoveProjectWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectWhitelistedDomainResponseValidationError{}

// Validate checks the field values on ListProjectWhitelistedDomainsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProjectWhitelistedDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectWhitelistedDomainsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectWhitelistedDomainsRequestMultiError, or nil if none found.
func (m *ListProjectWhitelistedDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectWhitelistedDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectWhitelistedDomainsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectWhitelistedDomainsRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectWhitelistedDomainsRequestMultiError(errors)
	}

	return nil
}

// ListProjectWhitelistedDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectWhitelistedDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectWhitelistedDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectWhitelistedDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectWhitelistedDomainsRequestMultiError) AllErrors() []error { return m }

// ListProjectWhitelistedDomainsRequestValidationError is the validation error
// returned by ListProjectWhitelistedDomainsRequest.Validate if the designated
// constraints aren't met.
type ListProjectWhitelistedDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectWhitelistedDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectWhitelistedDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectWhitelistedDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectWhitelistedDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectWhitelistedDomainsRequestValidationError) ErrorName() string {
	return "ListProjectWhitelistedDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectWhitelistedDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectWhitelistedDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectWhitelistedDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectWhitelistedDomainsRequestValidationError{}

// Validate checks the field values on ListProjectWhitelistedDomainsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProjectWhitelistedDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectWhitelistedDomainsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectWhitelistedDomainsResponseMultiError, or nil if none found.
func (m *ListProjectWhitelistedDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectWhitelistedDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectWhitelistedDomainsResponseValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectWhitelistedDomainsResponseMultiError(errors)
	}

	return nil
}

// ListProjectWhitelistedDomainsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListProjectWhitelistedDomainsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectWhitelistedDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectWhitelistedDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectWhitelistedDomainsResponseMultiError) AllErrors() []error { return m }

// ListProjectWhitelistedDomainsResponseValidationError is the validation error
// returned by ListProjectWhitelistedDomainsResponse.Validate if the
// designated constraints aren't met.
type ListProjectWhitelistedDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectWhitelistedDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectWhitelistedDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectWhitelistedDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectWhitelistedDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectWhitelistedDomainsResponseValidationError) ErrorName() string {
	return "ListProjectWhitelistedDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectWhitelistedDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectWhitelistedDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectWhitelistedDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectWhitelistedDomainsResponseValidationError{}

// Validate checks the field values on GetRepoMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRepoMetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepoMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRepoMetaRequestMultiError, or nil if none found.
func (m *GetRepoMetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepoMetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Branch

	if len(errors) > 0 {
		return GetRepoMetaRequestMultiError(errors)
	}

	return nil
}

// GetRepoMetaRequestMultiError is an error wrapping multiple validation errors
// returned by GetRepoMetaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRepoMetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepoMetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepoMetaRequestMultiError) AllErrors() []error { return m }

// GetRepoMetaRequestValidationError is the validation error returned by
// GetRepoMetaRequest.Validate if the designated constraints aren't met.
type GetRepoMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepoMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepoMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepoMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepoMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepoMetaRequestValidationError) ErrorName() string {
	return "GetRepoMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepoMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepoMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepoMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepoMetaRequestValidationError{}

// Validate checks the field values on GetRepoMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRepoMetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepoMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRepoMetaResponseMultiError, or nil if none found.
func (m *GetRepoMetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepoMetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GitUrl

	if all {
		switch v := interface{}(m.GetGitUrlExpiresOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRepoMetaResponseValidationError{
					field:  "GitUrlExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRepoMetaResponseValidationError{
					field:  "GitUrlExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGitUrlExpiresOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRepoMetaResponseValidationError{
				field:  "GitUrlExpiresOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GitSubpath

	// no validation rules for ArchiveDownloadUrl

	// no validation rules for ArchiveId

	if all {
		switch v := interface{}(m.GetArchiveCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRepoMetaResponseValidationError{
					field:  "ArchiveCreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRepoMetaResponseValidationError{
					field:  "ArchiveCreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArchiveCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRepoMetaResponseValidationError{
				field:  "ArchiveCreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRepoMetaResponseMultiError(errors)
	}

	return nil
}

// GetRepoMetaResponseMultiError is an error wrapping multiple validation
// errors returned by GetRepoMetaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRepoMetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepoMetaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepoMetaResponseMultiError) AllErrors() []error { return m }

// GetRepoMetaResponseValidationError is the validation error returned by
// GetRepoMetaResponse.Validate if the designated constraints aren't met.
type GetRepoMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepoMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepoMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepoMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepoMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepoMetaResponseValidationError) ErrorName() string {
	return "GetRepoMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepoMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepoMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepoMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepoMetaResponseValidationError{}

// Validate checks the field values on PullVirtualRepoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PullVirtualRepoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PullVirtualRepoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PullVirtualRepoRequestMultiError, or nil if none found.
func (m *PullVirtualRepoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PullVirtualRepoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Branch

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := PullVirtualRepoRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return PullVirtualRepoRequestMultiError(errors)
	}

	return nil
}

// PullVirtualRepoRequestMultiError is an error wrapping multiple validation
// errors returned by PullVirtualRepoRequest.ValidateAll() if the designated
// constraints aren't met.
type PullVirtualRepoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PullVirtualRepoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PullVirtualRepoRequestMultiError) AllErrors() []error { return m }

// PullVirtualRepoRequestValidationError is the validation error returned by
// PullVirtualRepoRequest.Validate if the designated constraints aren't met.
type PullVirtualRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullVirtualRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullVirtualRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullVirtualRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullVirtualRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullVirtualRepoRequestValidationError) ErrorName() string {
	return "PullVirtualRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PullVirtualRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullVirtualRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullVirtualRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullVirtualRepoRequestValidationError{}

// Validate checks the field values on PullVirtualRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PullVirtualRepoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PullVirtualRepoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PullVirtualRepoResponseMultiError, or nil if none found.
func (m *PullVirtualRepoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PullVirtualRepoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PullVirtualRepoResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PullVirtualRepoResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PullVirtualRepoResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return PullVirtualRepoResponseMultiError(errors)
	}

	return nil
}

// PullVirtualRepoResponseMultiError is an error wrapping multiple validation
// errors returned by PullVirtualRepoResponse.ValidateAll() if the designated
// constraints aren't met.
type PullVirtualRepoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PullVirtualRepoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PullVirtualRepoResponseMultiError) AllErrors() []error { return m }

// PullVirtualRepoResponseValidationError is the validation error returned by
// PullVirtualRepoResponse.Validate if the designated constraints aren't met.
type PullVirtualRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullVirtualRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullVirtualRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullVirtualRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullVirtualRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullVirtualRepoResponseValidationError) ErrorName() string {
	return "PullVirtualRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PullVirtualRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullVirtualRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullVirtualRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullVirtualRepoResponseValidationError{}

// Validate checks the field values on GetReportMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportMetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportMetaRequestMultiError, or nil if none found.
func (m *GetReportMetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportMetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Branch

	// no validation rules for Report

	// no validation rules for OwnerId

	if all {
		switch v := interface{}(m.GetExecutionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReportMetaRequestValidationError{
					field:  "ExecutionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReportMetaRequestValidationError{
					field:  "ExecutionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportMetaRequestValidationError{
				field:  "ExecutionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReportMetaRequestMultiError(errors)
	}

	return nil
}

// GetReportMetaRequestMultiError is an error wrapping multiple validation
// errors returned by GetReportMetaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReportMetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportMetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportMetaRequestMultiError) AllErrors() []error { return m }

// GetReportMetaRequestValidationError is the validation error returned by
// GetReportMetaRequest.Validate if the designated constraints aren't met.
type GetReportMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportMetaRequestValidationError) ErrorName() string {
	return "GetReportMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportMetaRequestValidationError{}

// Validate checks the field values on GetReportMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportMetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportMetaResponseMultiError, or nil if none found.
func (m *GetReportMetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportMetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseUrls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReportMetaResponseValidationError{
					field:  "BaseUrls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReportMetaResponseValidationError{
					field:  "BaseUrls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseUrls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportMetaResponseValidationError{
				field:  "BaseUrls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetRecipientUrls()))
		i := 0
		for key := range m.GetRecipientUrls() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRecipientUrls()[key]
			_ = val

			// no validation rules for RecipientUrls[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetReportMetaResponseValidationError{
							field:  fmt.Sprintf("RecipientUrls[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetReportMetaResponseValidationError{
							field:  fmt.Sprintf("RecipientUrls[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetReportMetaResponseValidationError{
						field:  fmt.Sprintf("RecipientUrls[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetReportMetaResponseMultiError(errors)
	}

	return nil
}

// GetReportMetaResponseMultiError is an error wrapping multiple validation
// errors returned by GetReportMetaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReportMetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportMetaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportMetaResponseMultiError) AllErrors() []error { return m }

// GetReportMetaResponseValidationError is the validation error returned by
// GetReportMetaResponse.Validate if the designated constraints aren't met.
type GetReportMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportMetaResponseValidationError) ErrorName() string {
	return "GetReportMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportMetaResponseValidationError{}

// Validate checks the field values on GetAlertMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertMetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertMetaRequestMultiError, or nil if none found.
func (m *GetAlertMetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertMetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Branch

	// no validation rules for Alert

	// no validation rules for Annotations

	switch v := m.QueryFor.(type) {
	case *GetAlertMetaRequest_QueryForUserId:
		if v == nil {
			err := GetAlertMetaRequestValidationError{
				field:  "QueryFor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for QueryForUserId
	case *GetAlertMetaRequest_QueryForUserEmail:
		if v == nil {
			err := GetAlertMetaRequestValidationError{
				field:  "QueryFor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for QueryForUserEmail
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAlertMetaRequestMultiError(errors)
	}

	return nil
}

// GetAlertMetaRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertMetaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertMetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertMetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertMetaRequestMultiError) AllErrors() []error { return m }

// GetAlertMetaRequestValidationError is the validation error returned by
// GetAlertMetaRequest.Validate if the designated constraints aren't met.
type GetAlertMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertMetaRequestValidationError) ErrorName() string {
	return "GetAlertMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertMetaRequestValidationError{}

// Validate checks the field values on GetAlertMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertMetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertMetaResponseMultiError, or nil if none found.
func (m *GetAlertMetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertMetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpenUrl

	// no validation rules for EditUrl

	if all {
		switch v := interface{}(m.GetQueryForAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertMetaResponseValidationError{
					field:  "QueryForAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertMetaResponseValidationError{
					field:  "QueryForAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryForAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertMetaResponseValidationError{
				field:  "QueryForAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertMetaResponseMultiError(errors)
	}

	return nil
}

// GetAlertMetaResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertMetaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertMetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertMetaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertMetaResponseMultiError) AllErrors() []error { return m }

// GetAlertMetaResponseValidationError is the validation error returned by
// GetAlertMetaResponse.Validate if the designated constraints aren't met.
type GetAlertMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertMetaResponseValidationError) ErrorName() string {
	return "GetAlertMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertMetaResponseValidationError{}

// Validate checks the field values on CreateReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportRequestMultiError, or nil if none found.
func (m *CreateReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if m.GetOptions() == nil {
		err := CreateReportRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReportRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReportRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReportRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReportRequestMultiError(errors)
	}

	return nil
}

// CreateReportRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReportRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportRequestMultiError) AllErrors() []error { return m }

// CreateReportRequestValidationError is the validation error returned by
// CreateReportRequest.Validate if the designated constraints aren't met.
type CreateReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportRequestValidationError) ErrorName() string {
	return "CreateReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportRequestValidationError{}

// Validate checks the field values on CreateReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportResponseMultiError, or nil if none found.
func (m *CreateReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateReportResponseMultiError(errors)
	}

	return nil
}

// CreateReportResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReportResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportResponseMultiError) AllErrors() []error { return m }

// CreateReportResponseValidationError is the validation error returned by
// CreateReportResponse.Validate if the designated constraints aren't met.
type CreateReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportResponseValidationError) ErrorName() string {
	return "CreateReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportResponseValidationError{}

// Validate checks the field values on EditReportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditReportRequestMultiError, or nil if none found.
func (m *EditReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if m.GetOptions() == nil {
		err := EditReportRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditReportRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditReportRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditReportRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditReportRequestMultiError(errors)
	}

	return nil
}

// EditReportRequestMultiError is an error wrapping multiple validation errors
// returned by EditReportRequest.ValidateAll() if the designated constraints
// aren't met.
type EditReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReportRequestMultiError) AllErrors() []error { return m }

// EditReportRequestValidationError is the validation error returned by
// EditReportRequest.Validate if the designated constraints aren't met.
type EditReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReportRequestValidationError) ErrorName() string {
	return "EditReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReportRequestValidationError{}

// Validate checks the field values on EditReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditReportResponseMultiError, or nil if none found.
func (m *EditReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditReportResponseMultiError(errors)
	}

	return nil
}

// EditReportResponseMultiError is an error wrapping multiple validation errors
// returned by EditReportResponse.ValidateAll() if the designated constraints
// aren't met.
type EditReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReportResponseMultiError) AllErrors() []error { return m }

// EditReportResponseValidationError is the validation error returned by
// EditReportResponse.Validate if the designated constraints aren't met.
type EditReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReportResponseValidationError) ErrorName() string {
	return "EditReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReportResponseValidationError{}

// Validate checks the field values on UnsubscribeReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeReportRequestMultiError, or nil if none found.
func (m *UnsubscribeReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return UnsubscribeReportRequestMultiError(errors)
	}

	return nil
}

// UnsubscribeReportRequestMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeReportRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeReportRequestMultiError) AllErrors() []error { return m }

// UnsubscribeReportRequestValidationError is the validation error returned by
// UnsubscribeReportRequest.Validate if the designated constraints aren't met.
type UnsubscribeReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeReportRequestValidationError) ErrorName() string {
	return "UnsubscribeReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeReportRequestValidationError{}

// Validate checks the field values on UnsubscribeReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeReportResponseMultiError, or nil if none found.
func (m *UnsubscribeReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnsubscribeReportResponseMultiError(errors)
	}

	return nil
}

// UnsubscribeReportResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeReportResponse.ValidateAll() if the
// designated constraints aren't met.
type UnsubscribeReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeReportResponseMultiError) AllErrors() []error { return m }

// UnsubscribeReportResponseValidationError is the validation error returned by
// UnsubscribeReportResponse.Validate if the designated constraints aren't met.
type UnsubscribeReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeReportResponseValidationError) ErrorName() string {
	return "UnsubscribeReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeReportResponseValidationError{}

// Validate checks the field values on DeleteReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReportRequestMultiError, or nil if none found.
func (m *DeleteReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteReportRequestMultiError(errors)
	}

	return nil
}

// DeleteReportRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReportRequestMultiError) AllErrors() []error { return m }

// DeleteReportRequestValidationError is the validation error returned by
// DeleteReportRequest.Validate if the designated constraints aren't met.
type DeleteReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReportRequestValidationError) ErrorName() string {
	return "DeleteReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReportRequestValidationError{}

// Validate checks the field values on DeleteReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReportResponseMultiError, or nil if none found.
func (m *DeleteReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReportResponseMultiError(errors)
	}

	return nil
}

// DeleteReportResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteReportResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReportResponseMultiError) AllErrors() []error { return m }

// DeleteReportResponseValidationError is the validation error returned by
// DeleteReportResponse.Validate if the designated constraints aren't met.
type DeleteReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReportResponseValidationError) ErrorName() string {
	return "DeleteReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReportResponseValidationError{}

// Validate checks the field values on TriggerReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReportRequestMultiError, or nil if none found.
func (m *TriggerReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return TriggerReportRequestMultiError(errors)
	}

	return nil
}

// TriggerReportRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerReportRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReportRequestMultiError) AllErrors() []error { return m }

// TriggerReportRequestValidationError is the validation error returned by
// TriggerReportRequest.Validate if the designated constraints aren't met.
type TriggerReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReportRequestValidationError) ErrorName() string {
	return "TriggerReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReportRequestValidationError{}

// Validate checks the field values on TriggerReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReportResponseMultiError, or nil if none found.
func (m *TriggerReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerReportResponseMultiError(errors)
	}

	return nil
}

// TriggerReportResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerReportResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReportResponseMultiError) AllErrors() []error { return m }

// TriggerReportResponseValidationError is the validation error returned by
// TriggerReportResponse.Validate if the designated constraints aren't met.
type TriggerReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReportResponseValidationError) ErrorName() string {
	return "TriggerReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReportResponseValidationError{}

// Validate checks the field values on GenerateReportYAMLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateReportYAMLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateReportYAMLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateReportYAMLRequestMultiError, or nil if none found.
func (m *GenerateReportYAMLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateReportYAMLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if m.GetOptions() == nil {
		err := GenerateReportYAMLRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateReportYAMLRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateReportYAMLRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateReportYAMLRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateReportYAMLRequestMultiError(errors)
	}

	return nil
}

// GenerateReportYAMLRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateReportYAMLRequest.ValidateAll() if the
// designated constraints aren't met.
type GenerateReportYAMLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateReportYAMLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateReportYAMLRequestMultiError) AllErrors() []error { return m }

// GenerateReportYAMLRequestValidationError is the validation error returned by
// GenerateReportYAMLRequest.Validate if the designated constraints aren't met.
type GenerateReportYAMLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateReportYAMLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateReportYAMLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateReportYAMLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateReportYAMLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateReportYAMLRequestValidationError) ErrorName() string {
	return "GenerateReportYAMLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateReportYAMLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateReportYAMLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateReportYAMLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateReportYAMLRequestValidationError{}

// Validate checks the field values on GenerateReportYAMLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateReportYAMLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateReportYAMLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateReportYAMLResponseMultiError, or nil if none found.
func (m *GenerateReportYAMLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateReportYAMLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yaml

	if len(errors) > 0 {
		return GenerateReportYAMLResponseMultiError(errors)
	}

	return nil
}

// GenerateReportYAMLResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateReportYAMLResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateReportYAMLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateReportYAMLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateReportYAMLResponseMultiError) AllErrors() []error { return m }

// GenerateReportYAMLResponseValidationError is the validation error returned
// by GenerateReportYAMLResponse.Validate if the designated constraints aren't met.
type GenerateReportYAMLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateReportYAMLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateReportYAMLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateReportYAMLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateReportYAMLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateReportYAMLResponseValidationError) ErrorName() string {
	return "GenerateReportYAMLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateReportYAMLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateReportYAMLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateReportYAMLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateReportYAMLResponseValidationError{}

// Validate checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRequestMultiError, or nil if none found.
func (m *CreateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if m.GetOptions() == nil {
		err := CreateAlertRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAlertRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRequestMultiError) AllErrors() []error { return m }

// CreateAlertRequestValidationError is the validation error returned by
// CreateAlertRequest.Validate if the designated constraints aren't met.
type CreateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRequestValidationError) ErrorName() string {
	return "CreateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRequestValidationError{}

// Validate checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertResponseMultiError, or nil if none found.
func (m *CreateAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateAlertResponseMultiError(errors)
	}

	return nil
}

// CreateAlertResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertResponseMultiError) AllErrors() []error { return m }

// CreateAlertResponseValidationError is the validation error returned by
// CreateAlertResponse.Validate if the designated constraints aren't met.
type CreateAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertResponseValidationError) ErrorName() string {
	return "CreateAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertResponseValidationError{}

// Validate checks the field values on EditAlertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditAlertRequestMultiError, or nil if none found.
func (m *EditAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if m.GetOptions() == nil {
		err := EditAlertRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditAlertRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditAlertRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditAlertRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditAlertRequestMultiError(errors)
	}

	return nil
}

// EditAlertRequestMultiError is an error wrapping multiple validation errors
// returned by EditAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type EditAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditAlertRequestMultiError) AllErrors() []error { return m }

// EditAlertRequestValidationError is the validation error returned by
// EditAlertRequest.Validate if the designated constraints aren't met.
type EditAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditAlertRequestValidationError) ErrorName() string { return "EditAlertRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditAlertRequestValidationError{}

// Validate checks the field values on EditAlertResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditAlertResponseMultiError, or nil if none found.
func (m *EditAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditAlertResponseMultiError(errors)
	}

	return nil
}

// EditAlertResponseMultiError is an error wrapping multiple validation errors
// returned by EditAlertResponse.ValidateAll() if the designated constraints
// aren't met.
type EditAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditAlertResponseMultiError) AllErrors() []error { return m }

// EditAlertResponseValidationError is the validation error returned by
// EditAlertResponse.Validate if the designated constraints aren't met.
type EditAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditAlertResponseValidationError) ErrorName() string {
	return "EditAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditAlertResponseValidationError{}

// Validate checks the field values on UnsubscribeAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeAlertRequestMultiError, or nil if none found.
func (m *UnsubscribeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return UnsubscribeAlertRequestMultiError(errors)
	}

	return nil
}

// UnsubscribeAlertRequestMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeAlertRequestMultiError) AllErrors() []error { return m }

// UnsubscribeAlertRequestValidationError is the validation error returned by
// UnsubscribeAlertRequest.Validate if the designated constraints aren't met.
type UnsubscribeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeAlertRequestValidationError) ErrorName() string {
	return "UnsubscribeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeAlertRequestValidationError{}

// Validate checks the field values on UnsubscribeAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeAlertResponseMultiError, or nil if none found.
func (m *UnsubscribeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnsubscribeAlertResponseMultiError(errors)
	}

	return nil
}

// UnsubscribeAlertResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeAlertResponseMultiError) AllErrors() []error { return m }

// UnsubscribeAlertResponseValidationError is the validation error returned by
// UnsubscribeAlertResponse.Validate if the designated constraints aren't met.
type UnsubscribeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeAlertResponseValidationError) ErrorName() string {
	return "UnsubscribeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeAlertResponseValidationError{}

// Validate checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertRequestMultiError, or nil if none found.
func (m *DeleteAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteAlertRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertRequestMultiError) AllErrors() []error { return m }

// DeleteAlertRequestValidationError is the validation error returned by
// DeleteAlertRequest.Validate if the designated constraints aren't met.
type DeleteAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertRequestValidationError) ErrorName() string {
	return "DeleteAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertRequestValidationError{}

// Validate checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertResponseMultiError, or nil if none found.
func (m *DeleteAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteAlertResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertResponseMultiError) AllErrors() []error { return m }

// DeleteAlertResponseValidationError is the validation error returned by
// DeleteAlertResponse.Validate if the designated constraints aren't met.
type DeleteAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertResponseValidationError) ErrorName() string {
	return "DeleteAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertResponseValidationError{}

// Validate checks the field values on GenerateAlertYAMLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAlertYAMLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAlertYAMLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAlertYAMLRequestMultiError, or nil if none found.
func (m *GenerateAlertYAMLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAlertYAMLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if m.GetOptions() == nil {
		err := GenerateAlertYAMLRequestValidationError{
			field:  "Options",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAlertYAMLRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAlertYAMLRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAlertYAMLRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateAlertYAMLRequestMultiError(errors)
	}

	return nil
}

// GenerateAlertYAMLRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateAlertYAMLRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateAlertYAMLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAlertYAMLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAlertYAMLRequestMultiError) AllErrors() []error { return m }

// GenerateAlertYAMLRequestValidationError is the validation error returned by
// GenerateAlertYAMLRequest.Validate if the designated constraints aren't met.
type GenerateAlertYAMLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAlertYAMLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAlertYAMLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAlertYAMLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAlertYAMLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAlertYAMLRequestValidationError) ErrorName() string {
	return "GenerateAlertYAMLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAlertYAMLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAlertYAMLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAlertYAMLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAlertYAMLRequestValidationError{}

// Validate checks the field values on GenerateAlertYAMLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAlertYAMLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAlertYAMLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAlertYAMLResponseMultiError, or nil if none found.
func (m *GenerateAlertYAMLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAlertYAMLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yaml

	if len(errors) > 0 {
		return GenerateAlertYAMLResponseMultiError(errors)
	}

	return nil
}

// GenerateAlertYAMLResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateAlertYAMLResponse.ValidateAll() if the
// designated constraints aren't met.
type GenerateAlertYAMLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAlertYAMLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAlertYAMLResponseMultiError) AllErrors() []error { return m }

// GenerateAlertYAMLResponseValidationError is the validation error returned by
// GenerateAlertYAMLResponse.Validate if the designated constraints aren't met.
type GenerateAlertYAMLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAlertYAMLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAlertYAMLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAlertYAMLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAlertYAMLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAlertYAMLResponseValidationError) ErrorName() string {
	return "GenerateAlertYAMLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAlertYAMLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAlertYAMLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAlertYAMLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAlertYAMLResponseValidationError{}

// Validate checks the field values on GetAlertYAMLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertYAMLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertYAMLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertYAMLRequestMultiError, or nil if none found.
func (m *GetAlertYAMLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertYAMLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return GetAlertYAMLRequestMultiError(errors)
	}

	return nil
}

// GetAlertYAMLRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertYAMLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertYAMLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertYAMLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertYAMLRequestMultiError) AllErrors() []error { return m }

// GetAlertYAMLRequestValidationError is the validation error returned by
// GetAlertYAMLRequest.Validate if the designated constraints aren't met.
type GetAlertYAMLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertYAMLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertYAMLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertYAMLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertYAMLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertYAMLRequestValidationError) ErrorName() string {
	return "GetAlertYAMLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertYAMLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertYAMLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertYAMLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertYAMLRequestValidationError{}

// Validate checks the field values on GetAlertYAMLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertYAMLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertYAMLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertYAMLResponseMultiError, or nil if none found.
func (m *GetAlertYAMLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertYAMLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yaml

	if len(errors) > 0 {
		return GetAlertYAMLResponseMultiError(errors)
	}

	return nil
}

// GetAlertYAMLResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertYAMLResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertYAMLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertYAMLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertYAMLResponseMultiError) AllErrors() []error { return m }

// GetAlertYAMLResponseValidationError is the validation error returned by
// GetAlertYAMLResponse.Validate if the designated constraints aren't met.
type GetAlertYAMLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertYAMLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertYAMLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertYAMLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertYAMLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertYAMLResponseValidationError) ErrorName() string {
	return "GetAlertYAMLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertYAMLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertYAMLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertYAMLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertYAMLResponseValidationError{}

// Validate checks the field values on GetBillingSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBillingSubscriptionRequestMultiError, or nil if none found.
func (m *GetBillingSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetBillingSubscriptionRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillingSubscriptionRequestMultiError(errors)
	}

	return nil
}

// GetBillingSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by GetBillingSubscriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBillingSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingSubscriptionRequestMultiError) AllErrors() []error { return m }

// GetBillingSubscriptionRequestValidationError is the validation error
// returned by GetBillingSubscriptionRequest.Validate if the designated
// constraints aren't met.
type GetBillingSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingSubscriptionRequestValidationError) ErrorName() string {
	return "GetBillingSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingSubscriptionRequestValidationError{}

// Validate checks the field values on GetBillingSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBillingSubscriptionResponseMultiError, or nil if none found.
func (m *GetBillingSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillingSubscriptionResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillingSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BillingPortalUrl

	if len(errors) > 0 {
		return GetBillingSubscriptionResponseMultiError(errors)
	}

	return nil
}

// GetBillingSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by GetBillingSubscriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetBillingSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingSubscriptionResponseMultiError) AllErrors() []error { return m }

// GetBillingSubscriptionResponseValidationError is the validation error
// returned by GetBillingSubscriptionResponse.Validate if the designated
// constraints aren't met.
type GetBillingSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingSubscriptionResponseValidationError) ErrorName() string {
	return "GetBillingSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingSubscriptionResponseValidationError{}

// Validate checks the field values on UpdateBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBillingSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBillingSubscriptionRequestMultiError, or nil if none found.
func (m *UpdateBillingSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := UpdateBillingSubscriptionRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlanName()) < 1 {
		err := UpdateBillingSubscriptionRequestValidationError{
			field:  "PlanName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SuperuserForceAccess

	if len(errors) > 0 {
		return UpdateBillingSubscriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateBillingSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBillingSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillingSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingSubscriptionRequestMultiError) AllErrors() []error { return m }

// UpdateBillingSubscriptionRequestValidationError is the validation error
// returned by UpdateBillingSubscriptionRequest.Validate if the designated
// constraints aren't met.
type UpdateBillingSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateBillingSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingSubscriptionRequestValidationError{}

// Validate checks the field values on UpdateBillingSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBillingSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingSubscriptionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBillingSubscriptionResponseMultiError, or nil if none found.
func (m *UpdateBillingSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillingSubscriptionResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillingSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillingSubscriptionResponseMultiError(errors)
	}

	return nil
}

// UpdateBillingSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBillingSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillingSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingSubscriptionResponseMultiError) AllErrors() []error { return m }

// UpdateBillingSubscriptionResponseValidationError is the validation error
// returned by UpdateBillingSubscriptionResponse.Validate if the designated
// constraints aren't met.
type UpdateBillingSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingSubscriptionResponseValidationError) ErrorName() string {
	return "UpdateBillingSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingSubscriptionResponseValidationError{}

// Validate checks the field values on CancelBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelBillingSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelBillingSubscriptionRequestMultiError, or nil if none found.
func (m *CancelBillingSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBillingSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := CancelBillingSubscriptionRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelBillingSubscriptionRequestMultiError(errors)
	}

	return nil
}

// CancelBillingSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CancelBillingSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelBillingSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBillingSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBillingSubscriptionRequestMultiError) AllErrors() []error { return m }

// CancelBillingSubscriptionRequestValidationError is the validation error
// returned by CancelBillingSubscriptionRequest.Validate if the designated
// constraints aren't met.
type CancelBillingSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBillingSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBillingSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBillingSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBillingSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBillingSubscriptionRequestValidationError) ErrorName() string {
	return "CancelBillingSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBillingSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBillingSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBillingSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBillingSubscriptionRequestValidationError{}

// Validate checks the field values on CancelBillingSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelBillingSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBillingSubscriptionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CancelBillingSubscriptionResponseMultiError, or nil if none found.
func (m *CancelBillingSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBillingSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelBillingSubscriptionResponseMultiError(errors)
	}

	return nil
}

// CancelBillingSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CancelBillingSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelBillingSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBillingSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBillingSubscriptionResponseMultiError) AllErrors() []error { return m }

// CancelBillingSubscriptionResponseValidationError is the validation error
// returned by CancelBillingSubscriptionResponse.Validate if the designated
// constraints aren't met.
type CancelBillingSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBillingSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBillingSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBillingSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBillingSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBillingSubscriptionResponseValidationError) ErrorName() string {
	return "CancelBillingSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBillingSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBillingSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBillingSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBillingSubscriptionResponseValidationError{}

// Validate checks the field values on RenewBillingSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewBillingSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewBillingSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenewBillingSubscriptionRequestMultiError, or nil if none found.
func (m *RenewBillingSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewBillingSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RenewBillingSubscriptionRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlanName()) < 1 {
		err := RenewBillingSubscriptionRequestValidationError{
			field:  "PlanName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SuperuserForceAccess

	if len(errors) > 0 {
		return RenewBillingSubscriptionRequestMultiError(errors)
	}

	return nil
}

// RenewBillingSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by RenewBillingSubscriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type RenewBillingSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewBillingSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewBillingSubscriptionRequestMultiError) AllErrors() []error { return m }

// RenewBillingSubscriptionRequestValidationError is the validation error
// returned by RenewBillingSubscriptionRequest.Validate if the designated
// constraints aren't met.
type RenewBillingSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewBillingSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewBillingSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewBillingSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewBillingSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewBillingSubscriptionRequestValidationError) ErrorName() string {
	return "RenewBillingSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenewBillingSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewBillingSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewBillingSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewBillingSubscriptionRequestValidationError{}

// Validate checks the field values on RenewBillingSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenewBillingSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewBillingSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenewBillingSubscriptionResponseMultiError, or nil if none found.
func (m *RenewBillingSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewBillingSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenewBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenewBillingSubscriptionResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenewBillingSubscriptionResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenewBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenewBillingSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenewBillingSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenewBillingSubscriptionResponseMultiError(errors)
	}

	return nil
}

// RenewBillingSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by
// RenewBillingSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type RenewBillingSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewBillingSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewBillingSubscriptionResponseMultiError) AllErrors() []error { return m }

// RenewBillingSubscriptionResponseValidationError is the validation error
// returned by RenewBillingSubscriptionResponse.Validate if the designated
// constraints aren't met.
type RenewBillingSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewBillingSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewBillingSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewBillingSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewBillingSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewBillingSubscriptionResponseValidationError) ErrorName() string {
	return "RenewBillingSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenewBillingSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewBillingSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewBillingSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewBillingSubscriptionResponseValidationError{}

// Validate checks the field values on GetPaymentsPortalURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentsPortalURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsPortalURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentsPortalURLRequestMultiError, or nil if none found.
func (m *GetPaymentsPortalURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsPortalURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetPaymentsPortalURLRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReturnUrl()) < 1 {
		err := GetPaymentsPortalURLRequestValidationError{
			field:  "ReturnUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPaymentsPortalURLRequestMultiError(errors)
	}

	return nil
}

// GetPaymentsPortalURLRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentsPortalURLRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentsPortalURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsPortalURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsPortalURLRequestMultiError) AllErrors() []error { return m }

// GetPaymentsPortalURLRequestValidationError is the validation error returned
// by GetPaymentsPortalURLRequest.Validate if the designated constraints
// aren't met.
type GetPaymentsPortalURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsPortalURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsPortalURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsPortalURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsPortalURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsPortalURLRequestValidationError) ErrorName() string {
	return "GetPaymentsPortalURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsPortalURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsPortalURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsPortalURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsPortalURLRequestValidationError{}

// Validate checks the field values on GetPaymentsPortalURLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentsPortalURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsPortalURLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentsPortalURLResponseMultiError, or nil if none found.
func (m *GetPaymentsPortalURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsPortalURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetPaymentsPortalURLResponseMultiError(errors)
	}

	return nil
}

// GetPaymentsPortalURLResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentsPortalURLResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentsPortalURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsPortalURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsPortalURLResponseMultiError) AllErrors() []error { return m }

// GetPaymentsPortalURLResponseValidationError is the validation error returned
// by GetPaymentsPortalURLResponse.Validate if the designated constraints
// aren't met.
type GetPaymentsPortalURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsPortalURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsPortalURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsPortalURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsPortalURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsPortalURLResponseValidationError) ErrorName() string {
	return "GetPaymentsPortalURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsPortalURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsPortalURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsPortalURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsPortalURLResponseValidationError{}

// Validate checks the field values on ListPublicBillingPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicBillingPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicBillingPlansRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPublicBillingPlansRequestMultiError, or nil if none found.
func (m *ListPublicBillingPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicBillingPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPublicBillingPlansRequestMultiError(errors)
	}

	return nil
}

// ListPublicBillingPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListPublicBillingPlansRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPublicBillingPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicBillingPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicBillingPlansRequestMultiError) AllErrors() []error { return m }

// ListPublicBillingPlansRequestValidationError is the validation error
// returned by ListPublicBillingPlansRequest.Validate if the designated
// constraints aren't met.
type ListPublicBillingPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicBillingPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicBillingPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicBillingPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicBillingPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicBillingPlansRequestValidationError) ErrorName() string {
	return "ListPublicBillingPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicBillingPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicBillingPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicBillingPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicBillingPlansRequestValidationError{}

// Validate checks the field values on ListPublicBillingPlansResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicBillingPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicBillingPlansResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPublicBillingPlansResponseMultiError, or nil if none found.
func (m *ListPublicBillingPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicBillingPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicBillingPlansResponseValidationError{
						field:  fmt.Sprintf("Plans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicBillingPlansResponseValidationError{
						field:  fmt.Sprintf("Plans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicBillingPlansResponseValidationError{
					field:  fmt.Sprintf("Plans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPublicBillingPlansResponseMultiError(errors)
	}

	return nil
}

// ListPublicBillingPlansResponseMultiError is an error wrapping multiple
// validation errors returned by ListPublicBillingPlansResponse.ValidateAll()
// if the designated constraints aren't met.
type ListPublicBillingPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicBillingPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicBillingPlansResponseMultiError) AllErrors() []error { return m }

// ListPublicBillingPlansResponseValidationError is the validation error
// returned by ListPublicBillingPlansResponse.Validate if the designated
// constraints aren't met.
type ListPublicBillingPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicBillingPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicBillingPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicBillingPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicBillingPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicBillingPlansResponseValidationError) ErrorName() string {
	return "ListPublicBillingPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicBillingPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicBillingPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicBillingPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicBillingPlansResponseValidationError{}

// Validate checks the field values on GetBillingProjectCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBillingProjectCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingProjectCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBillingProjectCredentialsRequestMultiError, or nil if none found.
func (m *GetBillingProjectCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingProjectCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetBillingProjectCredentialsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillingProjectCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetBillingProjectCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBillingProjectCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBillingProjectCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingProjectCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingProjectCredentialsRequestMultiError) AllErrors() []error { return m }

// GetBillingProjectCredentialsRequestValidationError is the validation error
// returned by GetBillingProjectCredentialsRequest.Validate if the designated
// constraints aren't met.
type GetBillingProjectCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingProjectCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingProjectCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingProjectCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingProjectCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingProjectCredentialsRequestValidationError) ErrorName() string {
	return "GetBillingProjectCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingProjectCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingProjectCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingProjectCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingProjectCredentialsRequestValidationError{}

// Validate checks the field values on GetBillingProjectCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBillingProjectCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingProjectCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBillingProjectCredentialsResponseMultiError, or nil if none found.
func (m *GetBillingProjectCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingProjectCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeHost

	// no validation rules for InstanceId

	// no validation rules for AccessToken

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return GetBillingProjectCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetBillingProjectCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBillingProjectCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBillingProjectCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingProjectCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingProjectCredentialsResponseMultiError) AllErrors() []error { return m }

// GetBillingProjectCredentialsResponseValidationError is the validation error
// returned by GetBillingProjectCredentialsResponse.Validate if the designated
// constraints aren't met.
type GetBillingProjectCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingProjectCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingProjectCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingProjectCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingProjectCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingProjectCredentialsResponseValidationError) ErrorName() string {
	return "GetBillingProjectCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingProjectCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingProjectCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingProjectCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingProjectCredentialsResponseValidationError{}

// Validate checks the field values on TelemetryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TelemetryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryRequestMultiError, or nil if none found.
func (m *TelemetryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TelemetryRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TelemetryRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelemetryRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TelemetryRequestMultiError(errors)
	}

	return nil
}

// TelemetryRequestMultiError is an error wrapping multiple validation errors
// returned by TelemetryRequest.ValidateAll() if the designated constraints
// aren't met.
type TelemetryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryRequestMultiError) AllErrors() []error { return m }

// TelemetryRequestValidationError is the validation error returned by
// TelemetryRequest.Validate if the designated constraints aren't met.
type TelemetryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryRequestValidationError) ErrorName() string { return "TelemetryRequestValidationError" }

// Error satisfies the builtin error interface
func (e TelemetryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryRequestValidationError{}

// Validate checks the field values on TelemetryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TelemetryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryResponseMultiError, or nil if none found.
func (m *TelemetryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TelemetryResponseMultiError(errors)
	}

	return nil
}

// TelemetryResponseMultiError is an error wrapping multiple validation errors
// returned by TelemetryResponse.ValidateAll() if the designated constraints
// aren't met.
type TelemetryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryResponseMultiError) AllErrors() []error { return m }

// TelemetryResponseValidationError is the validation error returned by
// TelemetryResponse.Validate if the designated constraints aren't met.
type TelemetryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryResponseValidationError) ErrorName() string {
	return "TelemetryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TelemetryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryResponseValidationError{}

// Validate checks the field values on RequestProjectAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestProjectAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestProjectAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestProjectAccessRequestMultiError, or nil if none found.
func (m *RequestProjectAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestProjectAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	if len(errors) > 0 {
		return RequestProjectAccessRequestMultiError(errors)
	}

	return nil
}

// RequestProjectAccessRequestMultiError is an error wrapping multiple
// validation errors returned by RequestProjectAccessRequest.ValidateAll() if
// the designated constraints aren't met.
type RequestProjectAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestProjectAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestProjectAccessRequestMultiError) AllErrors() []error { return m }

// RequestProjectAccessRequestValidationError is the validation error returned
// by RequestProjectAccessRequest.Validate if the designated constraints
// aren't met.
type RequestProjectAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestProjectAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestProjectAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestProjectAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestProjectAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestProjectAccessRequestValidationError) ErrorName() string {
	return "RequestProjectAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestProjectAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestProjectAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestProjectAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestProjectAccessRequestValidationError{}

// Validate checks the field values on RequestProjectAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestProjectAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestProjectAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestProjectAccessResponseMultiError, or nil if none found.
func (m *RequestProjectAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestProjectAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestProjectAccessResponseMultiError(errors)
	}

	return nil
}

// RequestProjectAccessResponseMultiError is an error wrapping multiple
// validation errors returned by RequestProjectAccessResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestProjectAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestProjectAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestProjectAccessResponseMultiError) AllErrors() []error { return m }

// RequestProjectAccessResponseValidationError is the validation error returned
// by RequestProjectAccessResponse.Validate if the designated constraints
// aren't met.
type RequestProjectAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestProjectAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestProjectAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestProjectAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestProjectAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestProjectAccessResponseValidationError) ErrorName() string {
	return "RequestProjectAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestProjectAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestProjectAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestProjectAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestProjectAccessResponseValidationError{}

// Validate checks the field values on GetProjectAccessRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectAccessRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectAccessRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProjectAccessRequestRequestMultiError, or nil if none found.
func (m *GetProjectAccessRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectAccessRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProjectAccessRequestRequestMultiError(errors)
	}

	return nil
}

// GetProjectAccessRequestRequestMultiError is an error wrapping multiple
// validation errors returned by GetProjectAccessRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProjectAccessRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectAccessRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectAccessRequestRequestMultiError) AllErrors() []error { return m }

// GetProjectAccessRequestRequestValidationError is the validation error
// returned by GetProjectAccessRequestRequest.Validate if the designated
// constraints aren't met.
type GetProjectAccessRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectAccessRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectAccessRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectAccessRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectAccessRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectAccessRequestRequestValidationError) ErrorName() string {
	return "GetProjectAccessRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectAccessRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectAccessRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectAccessRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectAccessRequestRequestValidationError{}

// Validate checks the field values on GetProjectAccessRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectAccessRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectAccessRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProjectAccessRequestResponseMultiError, or nil if none found.
func (m *GetProjectAccessRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectAccessRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetProjectAccessRequestResponseMultiError(errors)
	}

	return nil
}

// GetProjectAccessRequestResponseMultiError is an error wrapping multiple
// validation errors returned by GetProjectAccessRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type GetProjectAccessRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectAccessRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectAccessRequestResponseMultiError) AllErrors() []error { return m }

// GetProjectAccessRequestResponseValidationError is the validation error
// returned by GetProjectAccessRequestResponse.Validate if the designated
// constraints aren't met.
type GetProjectAccessRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectAccessRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectAccessRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectAccessRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectAccessRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectAccessRequestResponseValidationError) ErrorName() string {
	return "GetProjectAccessRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectAccessRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectAccessRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectAccessRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectAccessRequestResponseValidationError{}

// Validate checks the field values on ApproveProjectAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveProjectAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveProjectAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveProjectAccessRequestMultiError, or nil if none found.
func (m *ApproveProjectAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveProjectAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	if len(errors) > 0 {
		return ApproveProjectAccessRequestMultiError(errors)
	}

	return nil
}

// ApproveProjectAccessRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveProjectAccessRequest.ValidateAll() if
// the designated constraints aren't met.
type ApproveProjectAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveProjectAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveProjectAccessRequestMultiError) AllErrors() []error { return m }

// ApproveProjectAccessRequestValidationError is the validation error returned
// by ApproveProjectAccessRequest.Validate if the designated constraints
// aren't met.
type ApproveProjectAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveProjectAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveProjectAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveProjectAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveProjectAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveProjectAccessRequestValidationError) ErrorName() string {
	return "ApproveProjectAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveProjectAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveProjectAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveProjectAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveProjectAccessRequestValidationError{}

// Validate checks the field values on ApproveProjectAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveProjectAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveProjectAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveProjectAccessResponseMultiError, or nil if none found.
func (m *ApproveProjectAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveProjectAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveProjectAccessResponseMultiError(errors)
	}

	return nil
}

// ApproveProjectAccessResponseMultiError is an error wrapping multiple
// validation errors returned by ApproveProjectAccessResponse.ValidateAll() if
// the designated constraints aren't met.
type ApproveProjectAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveProjectAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveProjectAccessResponseMultiError) AllErrors() []error { return m }

// ApproveProjectAccessResponseValidationError is the validation error returned
// by ApproveProjectAccessResponse.Validate if the designated constraints
// aren't met.
type ApproveProjectAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveProjectAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveProjectAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveProjectAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveProjectAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveProjectAccessResponseValidationError) ErrorName() string {
	return "ApproveProjectAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveProjectAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveProjectAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveProjectAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveProjectAccessResponseValidationError{}

// Validate checks the field values on DenyProjectAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DenyProjectAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyProjectAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyProjectAccessRequestMultiError, or nil if none found.
func (m *DenyProjectAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyProjectAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DenyProjectAccessRequestMultiError(errors)
	}

	return nil
}

// DenyProjectAccessRequestMultiError is an error wrapping multiple validation
// errors returned by DenyProjectAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type DenyProjectAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyProjectAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyProjectAccessRequestMultiError) AllErrors() []error { return m }

// DenyProjectAccessRequestValidationError is the validation error returned by
// DenyProjectAccessRequest.Validate if the designated constraints aren't met.
type DenyProjectAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyProjectAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyProjectAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyProjectAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyProjectAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyProjectAccessRequestValidationError) ErrorName() string {
	return "DenyProjectAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DenyProjectAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyProjectAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyProjectAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyProjectAccessRequestValidationError{}

// Validate checks the field values on DenyProjectAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DenyProjectAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyProjectAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyProjectAccessResponseMultiError, or nil if none found.
func (m *DenyProjectAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyProjectAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DenyProjectAccessResponseMultiError(errors)
	}

	return nil
}

// DenyProjectAccessResponseMultiError is an error wrapping multiple validation
// errors returned by DenyProjectAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type DenyProjectAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyProjectAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyProjectAccessResponseMultiError) AllErrors() []error { return m }

// DenyProjectAccessResponseValidationError is the validation error returned by
// DenyProjectAccessResponse.Validate if the designated constraints aren't met.
type DenyProjectAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyProjectAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyProjectAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyProjectAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyProjectAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyProjectAccessResponseValidationError) ErrorName() string {
	return "DenyProjectAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DenyProjectAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyProjectAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyProjectAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyProjectAccessResponseValidationError{}

// Validate checks the field values on ListOrganizationBillingIssuesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationBillingIssuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationBillingIssuesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationBillingIssuesRequestMultiError, or nil if none found.
func (m *ListOrganizationBillingIssuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationBillingIssuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if len(errors) > 0 {
		return ListOrganizationBillingIssuesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationBillingIssuesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationBillingIssuesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationBillingIssuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationBillingIssuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationBillingIssuesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationBillingIssuesRequestValidationError is the validation error
// returned by ListOrganizationBillingIssuesRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationBillingIssuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationBillingIssuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationBillingIssuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationBillingIssuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationBillingIssuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationBillingIssuesRequestValidationError) ErrorName() string {
	return "ListOrganizationBillingIssuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationBillingIssuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationBillingIssuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationBillingIssuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationBillingIssuesRequestValidationError{}

// Validate checks the field values on ListOrganizationBillingIssuesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationBillingIssuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationBillingIssuesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationBillingIssuesResponseMultiError, or nil if none found.
func (m *ListOrganizationBillingIssuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationBillingIssuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationBillingIssuesResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationBillingIssuesResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationBillingIssuesResponseValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationBillingIssuesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationBillingIssuesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationBillingIssuesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationBillingIssuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationBillingIssuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationBillingIssuesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationBillingIssuesResponseValidationError is the validation error
// returned by ListOrganizationBillingIssuesResponse.Validate if the
// designated constraints aren't met.
type ListOrganizationBillingIssuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationBillingIssuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationBillingIssuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationBillingIssuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationBillingIssuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationBillingIssuesResponseValidationError) ErrorName() string {
	return "ListOrganizationBillingIssuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationBillingIssuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationBillingIssuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationBillingIssuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationBillingIssuesResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for DisplayName

	// no validation rules for PhotoUrl

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OrgId

	// no validation rules for OrgName

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for LogoUrl

	// no validation rules for FaviconUrl

	// no validation rules for CustomDomain

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BillingCustomerId

	// no validation rules for PaymentCustomerId

	// no validation rules for BillingEmail

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.BillingPlanName != nil {
		// no validation rules for BillingPlanName
	}

	if m.BillingPlanDisplayName != nil {
		// no validation rules for BillingPlanDisplayName
	}

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscriptionMultiError, or
// nil if none found.
func (m *Subscription) ValidateAll() error {
	return m.validate(true)
}

func (m *Subscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentBillingCycleStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CurrentBillingCycleStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CurrentBillingCycleStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentBillingCycleStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "CurrentBillingCycleStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentBillingCycleEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CurrentBillingCycleEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "CurrentBillingCycleEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentBillingCycleEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "CurrentBillingCycleEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrialEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "TrialEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "TrialEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrialEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "TrialEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscriptionMultiError(errors)
	}

	return nil
}

// SubscriptionMultiError is an error wrapping multiple validation errors
// returned by Subscription.ValidateAll() if the designated constraints aren't met.
type SubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionMultiError) AllErrors() []error { return m }

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

// Validate checks the field values on UserQuotas with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserQuotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserQuotas with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserQuotasMultiError, or
// nil if none found.
func (m *UserQuotas) ValidateAll() error {
	return m.validate(true)
}

func (m *UserQuotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SingleuserOrgs

	// no validation rules for TrialOrgs

	if len(errors) > 0 {
		return UserQuotasMultiError(errors)
	}

	return nil
}

// UserQuotasMultiError is an error wrapping multiple validation errors
// returned by UserQuotas.ValidateAll() if the designated constraints aren't met.
type UserQuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserQuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserQuotasMultiError) AllErrors() []error { return m }

// UserQuotasValidationError is the validation error returned by
// UserQuotas.Validate if the designated constraints aren't met.
type UserQuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQuotasValidationError) ErrorName() string { return "UserQuotasValidationError" }

// Error satisfies the builtin error interface
func (e UserQuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQuotasValidationError{}

// Validate checks the field values on OrganizationQuotas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationQuotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationQuotas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationQuotasMultiError, or nil if none found.
func (m *OrganizationQuotas) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationQuotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Projects

	// no validation rules for Deployments

	// no validation rules for SlotsTotal

	// no validation rules for SlotsPerDeployment

	// no validation rules for OutstandingInvites

	// no validation rules for StorageLimitBytesPerDeployment

	if len(errors) > 0 {
		return OrganizationQuotasMultiError(errors)
	}

	return nil
}

// OrganizationQuotasMultiError is an error wrapping multiple validation errors
// returned by OrganizationQuotas.ValidateAll() if the designated constraints
// aren't met.
type OrganizationQuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationQuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationQuotasMultiError) AllErrors() []error { return m }

// OrganizationQuotasValidationError is the validation error returned by
// OrganizationQuotas.Validate if the designated constraints aren't met.
type OrganizationQuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationQuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationQuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationQuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationQuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationQuotasValidationError) ErrorName() string {
	return "OrganizationQuotasValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationQuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationQuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationQuotasValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for CreatedByUserId

	// no validation rules for Provisioner

	// no validation rules for GithubUrl

	// no validation rules for Subpath

	// no validation rules for ProdBranch

	// no validation rules for ArchiveAssetId

	// no validation rules for ProdOlapDriver

	// no validation rules for ProdOlapDsn

	// no validation rules for ProdSlots

	// no validation rules for ProdDeploymentId

	// no validation rules for FrontendUrl

	// no validation rules for ProdTtlSeconds

	// no validation rules for Annotations

	// no validation rules for ProdVersion

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deployment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentMultiError, or
// nil if none found.
func (m *Deployment) ValidateAll() error {
	return m.validate(true)
}

func (m *Deployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Branch

	// no validation rules for RuntimeHost

	// no validation rules for RuntimeInstanceId

	// no validation rules for Status

	// no validation rules for StatusMessage

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeploymentMultiError(errors)
	}

	return nil
}

// DeploymentMultiError is an error wrapping multiple validation errors
// returned by Deployment.ValidateAll() if the designated constraints aren't met.
type DeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentMultiError) AllErrors() []error { return m }

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on ProvisionerResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProvisionerResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionerResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvisionerResourceMultiError, or nil if none found.
func (m *ProvisionerResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionerResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeploymentId

	// no validation rules for Type

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionerResourceValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionerResourceValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionerResourceValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionerResourceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionerResourceValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionerResourceValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProvisionerResourceMultiError(errors)
	}

	return nil
}

// ProvisionerResourceMultiError is an error wrapping multiple validation
// errors returned by ProvisionerResource.ValidateAll() if the designated
// constraints aren't met.
type ProvisionerResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionerResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionerResourceMultiError) AllErrors() []error { return m }

// ProvisionerResourceValidationError is the validation error returned by
// ProvisionerResource.Validate if the designated constraints aren't met.
type ProvisionerResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionerResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionerResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionerResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionerResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionerResourceValidationError) ErrorName() string {
	return "ProvisionerResourceValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionerResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionerResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionerResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionerResourceValidationError{}

// Validate checks the field values on OrganizationPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationPermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationPermissions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationPermissionsMultiError, or nil if none found.
func (m *OrganizationPermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationPermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadOrg

	// no validation rules for ManageOrg

	// no validation rules for ReadProjects

	// no validation rules for CreateProjects

	// no validation rules for ManageProjects

	// no validation rules for ReadOrgMembers

	// no validation rules for ManageOrgMembers

	if len(errors) > 0 {
		return OrganizationPermissionsMultiError(errors)
	}

	return nil
}

// OrganizationPermissionsMultiError is an error wrapping multiple validation
// errors returned by OrganizationPermissions.ValidateAll() if the designated
// constraints aren't met.
type OrganizationPermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationPermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationPermissionsMultiError) AllErrors() []error { return m }

// OrganizationPermissionsValidationError is the validation error returned by
// OrganizationPermissions.Validate if the designated constraints aren't met.
type OrganizationPermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationPermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationPermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationPermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationPermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationPermissionsValidationError) ErrorName() string {
	return "OrganizationPermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationPermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationPermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationPermissionsValidationError{}

// Validate checks the field values on ProjectPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPermissionsMultiError, or nil if none found.
func (m *ProjectPermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadProject

	// no validation rules for ManageProject

	// no validation rules for ReadProd

	// no validation rules for ReadProdStatus

	// no validation rules for ManageProd

	// no validation rules for ReadDev

	// no validation rules for ReadDevStatus

	// no validation rules for ManageDev

	// no validation rules for ReadProvisionerResources

	// no validation rules for ManageProvisionerResources

	// no validation rules for ReadProjectMembers

	// no validation rules for ManageProjectMembers

	// no validation rules for CreateMagicAuthTokens

	// no validation rules for ManageMagicAuthTokens

	// no validation rules for CreateReports

	// no validation rules for ManageReports

	// no validation rules for CreateAlerts

	// no validation rules for ManageAlerts

	// no validation rules for CreateBookmarks

	// no validation rules for ManageBookmarks

	if len(errors) > 0 {
		return ProjectPermissionsMultiError(errors)
	}

	return nil
}

// ProjectPermissionsMultiError is an error wrapping multiple validation errors
// returned by ProjectPermissions.ValidateAll() if the designated constraints
// aren't met.
type ProjectPermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPermissionsMultiError) AllErrors() []error { return m }

// ProjectPermissionsValidationError is the validation error returned by
// ProjectPermissions.Validate if the designated constraints aren't met.
type ProjectPermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPermissionsValidationError) ErrorName() string {
	return "ProjectPermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPermissionsValidationError{}

// Validate checks the field values on MemberUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberUserMultiError, or
// nil if none found.
func (m *MemberUser) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for UserName

	// no validation rules for UserPhotoUrl

	// no validation rules for RoleName

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUserValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUserValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberUserMultiError(errors)
	}

	return nil
}

// MemberUserMultiError is an error wrapping multiple validation errors
// returned by MemberUser.ValidateAll() if the designated constraints aren't met.
type MemberUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUserMultiError) AllErrors() []error { return m }

// MemberUserValidationError is the validation error returned by
// MemberUser.Validate if the designated constraints aren't met.
type MemberUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUserValidationError) ErrorName() string { return "MemberUserValidationError" }

// Error satisfies the builtin error interface
func (e MemberUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUserValidationError{}

// Validate checks the field values on UserInvite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInvite with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInviteMultiError, or
// nil if none found.
func (m *UserInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for InvitedBy

	if len(errors) > 0 {
		return UserInviteMultiError(errors)
	}

	return nil
}

// UserInviteMultiError is an error wrapping multiple validation errors
// returned by UserInvite.ValidateAll() if the designated constraints aren't met.
type UserInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInviteMultiError) AllErrors() []error { return m }

// UserInviteValidationError is the validation error returned by
// UserInvite.Validate if the designated constraints aren't met.
type UserInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInviteValidationError) ErrorName() string { return "UserInviteValidationError" }

// Error satisfies the builtin error interface
func (e UserInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInviteValidationError{}

// Validate checks the field values on WhitelistedDomain with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WhitelistedDomain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhitelistedDomain with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhitelistedDomainMultiError, or nil if none found.
func (m *WhitelistedDomain) ValidateAll() error {
	return m.validate(true)
}

func (m *WhitelistedDomain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Role

	if len(errors) > 0 {
		return WhitelistedDomainMultiError(errors)
	}

	return nil
}

// WhitelistedDomainMultiError is an error wrapping multiple validation errors
// returned by WhitelistedDomain.ValidateAll() if the designated constraints
// aren't met.
type WhitelistedDomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhitelistedDomainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhitelistedDomainMultiError) AllErrors() []error { return m }

// WhitelistedDomainValidationError is the validation error returned by
// WhitelistedDomain.Validate if the designated constraints aren't met.
type WhitelistedDomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhitelistedDomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhitelistedDomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhitelistedDomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhitelistedDomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhitelistedDomainValidationError) ErrorName() string {
	return "WhitelistedDomainValidationError"
}

// Error satisfies the builtin error interface
func (e WhitelistedDomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhitelistedDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhitelistedDomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhitelistedDomainValidationError{}

// Validate checks the field values on Bookmark with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bookmark) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bookmark with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookmarkMultiError, or nil
// if none found.
func (m *Bookmark) ValidateAll() error {
	return m.validate(true)
}

func (m *Bookmark) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Data

	// no validation rules for ResourceKind

	// no validation rules for ResourceName

	// no validation rules for ProjectId

	// no validation rules for UserId

	// no validation rules for Default

	// no validation rules for Shared

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookmarkValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookmarkValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookmarkMultiError(errors)
	}

	return nil
}

// BookmarkMultiError is an error wrapping multiple validation errors returned
// by Bookmark.ValidateAll() if the designated constraints aren't met.
type BookmarkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookmarkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookmarkMultiError) AllErrors() []error { return m }

// BookmarkValidationError is the validation error returned by
// Bookmark.Validate if the designated constraints aren't met.
type BookmarkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookmarkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookmarkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookmarkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookmarkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookmarkValidationError) ErrorName() string { return "BookmarkValidationError" }

// Error satisfies the builtin error interface
func (e BookmarkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookmark.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookmarkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookmarkValidationError{}

// Validate checks the field values on ServiceToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceTokenMultiError, or
// nil if none found.
func (m *ServiceToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceTokenValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceTokenValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceTokenValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceTokenValidationError{
				field:  "ExpiresOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceTokenMultiError(errors)
	}

	return nil
}

// ServiceTokenMultiError is an error wrapping multiple validation errors
// returned by ServiceToken.ValidateAll() if the designated constraints aren't met.
type ServiceTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceTokenMultiError) AllErrors() []error { return m }

// ServiceTokenValidationError is the validation error returned by
// ServiceToken.Validate if the designated constraints aren't met.
type ServiceTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTokenValidationError) ErrorName() string { return "ServiceTokenValidationError" }

// Error satisfies the builtin error interface
func (e ServiceTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTokenValidationError{}

// Validate checks the field values on MagicAuthToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MagicAuthToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MagicAuthToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MagicAuthTokenMultiError,
// or nil if none found.
func (m *MagicAuthToken) ValidateAll() error {
	return m.validate(true)
}

func (m *MagicAuthToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Url

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MagicAuthTokenValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MagicAuthTokenValidationError{
				field:  "ExpiresOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "UsedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "UsedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MagicAuthTokenValidationError{
				field:  "UsedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedByUserId

	// no validation rules for CreatedByUserEmail

	if all {
		switch v := interface{}(m.GetAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MagicAuthTokenValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MagicAuthTokenValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MagicAuthTokenValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return MagicAuthTokenMultiError(errors)
	}

	return nil
}

// MagicAuthTokenMultiError is an error wrapping multiple validation errors
// returned by MagicAuthToken.ValidateAll() if the designated constraints
// aren't met.
type MagicAuthTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MagicAuthTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MagicAuthTokenMultiError) AllErrors() []error { return m }

// MagicAuthTokenValidationError is the validation error returned by
// MagicAuthToken.Validate if the designated constraints aren't met.
type MagicAuthTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MagicAuthTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MagicAuthTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MagicAuthTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MagicAuthTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MagicAuthTokenValidationError) ErrorName() string { return "MagicAuthTokenValidationError" }

// Error satisfies the builtin error interface
func (e MagicAuthTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMagicAuthToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MagicAuthTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MagicAuthTokenValidationError{}

// Validate checks the field values on VirtualFile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VirtualFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VirtualFileMultiError, or
// nil if none found.
func (m *VirtualFile) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Data

	// no validation rules for Deleted

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualFileValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualFileValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualFileValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VirtualFileMultiError(errors)
	}

	return nil
}

// VirtualFileMultiError is an error wrapping multiple validation errors
// returned by VirtualFile.ValidateAll() if the designated constraints aren't met.
type VirtualFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualFileMultiError) AllErrors() []error { return m }

// VirtualFileValidationError is the validation error returned by
// VirtualFile.Validate if the designated constraints aren't met.
type VirtualFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualFileValidationError) ErrorName() string { return "VirtualFileValidationError" }

// Error satisfies the builtin error interface
func (e VirtualFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualFileValidationError{}

// Validate checks the field values on ReportOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportOptionsMultiError, or
// nil if none found.
func (m *ReportOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for RefreshCron

	// no validation rules for RefreshTimeZone

	// no validation rules for IntervalDuration

	// no validation rules for QueryName

	// no validation rules for QueryArgsJson

	// no validation rules for ExportLimit

	// no validation rules for ExportFormat

	// no validation rules for WebOpenPath

	// no validation rules for WebOpenState

	if len(errors) > 0 {
		return ReportOptionsMultiError(errors)
	}

	return nil
}

// ReportOptionsMultiError is an error wrapping multiple validation errors
// returned by ReportOptions.ValidateAll() if the designated constraints
// aren't met.
type ReportOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportOptionsMultiError) AllErrors() []error { return m }

// ReportOptionsValidationError is the validation error returned by
// ReportOptions.Validate if the designated constraints aren't met.
type ReportOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportOptionsValidationError) ErrorName() string { return "ReportOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ReportOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportOptionsValidationError{}

// Validate checks the field values on AlertOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertOptionsMultiError, or
// nil if none found.
func (m *AlertOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for IntervalDuration

	// no validation rules for Resolver

	if all {
		switch v := interface{}(m.GetResolverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlertOptionsValidationError{
					field:  "ResolverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlertOptionsValidationError{
					field:  "ResolverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResolverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlertOptionsValidationError{
				field:  "ResolverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for QueryName

	// no validation rules for QueryArgsJson

	// no validation rules for MetricsViewName

	// no validation rules for Renotify

	// no validation rules for RenotifyAfterSeconds

	// no validation rules for WebOpenPath

	// no validation rules for WebOpenState

	if len(errors) > 0 {
		return AlertOptionsMultiError(errors)
	}

	return nil
}

// AlertOptionsMultiError is an error wrapping multiple validation errors
// returned by AlertOptions.ValidateAll() if the designated constraints aren't met.
type AlertOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertOptionsMultiError) AllErrors() []error { return m }

// AlertOptionsValidationError is the validation error returned by
// AlertOptions.Validate if the designated constraints aren't met.
type AlertOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertOptionsValidationError) ErrorName() string { return "AlertOptionsValidationError" }

// Error satisfies the builtin error interface
func (e AlertOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertOptionsValidationError{}

// Validate checks the field values on BillingPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BillingPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BillingPlanMultiError, or
// nil if none found.
func (m *BillingPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for PlanType

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for TrialPeriodDays

	// no validation rules for Default

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingPlanValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingPlanValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingPlanValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Public

	if len(errors) > 0 {
		return BillingPlanMultiError(errors)
	}

	return nil
}

// BillingPlanMultiError is an error wrapping multiple validation errors
// returned by BillingPlan.ValidateAll() if the designated constraints aren't met.
type BillingPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingPlanMultiError) AllErrors() []error { return m }

// BillingPlanValidationError is the validation error returned by
// BillingPlan.Validate if the designated constraints aren't met.
type BillingPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingPlanValidationError) ErrorName() string { return "BillingPlanValidationError" }

// Error satisfies the builtin error interface
func (e BillingPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingPlanValidationError{}

// Validate checks the field values on Quotas with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quotas with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuotasMultiError, or nil if none found.
func (m *Quotas) ValidateAll() error {
	return m.validate(true)
}

func (m *Quotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Projects

	// no validation rules for Deployments

	// no validation rules for SlotsTotal

	// no validation rules for SlotsPerDeployment

	// no validation rules for OutstandingInvites

	// no validation rules for StorageLimitBytesPerDeployment

	if len(errors) > 0 {
		return QuotasMultiError(errors)
	}

	return nil
}

// QuotasMultiError is an error wrapping multiple validation errors returned by
// Quotas.ValidateAll() if the designated constraints aren't met.
type QuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotasMultiError) AllErrors() []error { return m }

// QuotasValidationError is the validation error returned by Quotas.Validate if
// the designated constraints aren't met.
type QuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotasValidationError) ErrorName() string { return "QuotasValidationError" }

// Error satisfies the builtin error interface
func (e QuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotasValidationError{}

// Validate checks the field values on Usergroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Usergroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Usergroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsergroupMultiError, or nil
// if none found.
func (m *Usergroup) ValidateAll() error {
	return m.validate(true)
}

func (m *Usergroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for GroupDescription

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsergroupValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsergroupValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsergroupValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsergroupValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsergroupValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsergroupValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UsergroupMultiError(errors)
	}

	return nil
}

// UsergroupMultiError is an error wrapping multiple validation errors returned
// by Usergroup.ValidateAll() if the designated constraints aren't met.
type UsergroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsergroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsergroupMultiError) AllErrors() []error { return m }

// UsergroupValidationError is the validation error returned by
// Usergroup.Validate if the designated constraints aren't met.
type UsergroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsergroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsergroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsergroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsergroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsergroupValidationError) ErrorName() string { return "UsergroupValidationError" }

// Error satisfies the builtin error interface
func (e UsergroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsergroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsergroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsergroupValidationError{}

// Validate checks the field values on MemberUsergroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberUsergroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUsergroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberUsergroupMultiError, or nil if none found.
func (m *MemberUsergroup) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUsergroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for RoleName

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUsergroupValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUsergroupValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUsergroupValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUsergroupValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUsergroupValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUsergroupValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberUsergroupMultiError(errors)
	}

	return nil
}

// MemberUsergroupMultiError is an error wrapping multiple validation errors
// returned by MemberUsergroup.ValidateAll() if the designated constraints
// aren't met.
type MemberUsergroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUsergroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUsergroupMultiError) AllErrors() []error { return m }

// MemberUsergroupValidationError is the validation error returned by
// MemberUsergroup.Validate if the designated constraints aren't met.
type MemberUsergroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUsergroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUsergroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUsergroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUsergroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUsergroupValidationError) ErrorName() string { return "MemberUsergroupValidationError" }

// Error satisfies the builtin error interface
func (e MemberUsergroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUsergroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUsergroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUsergroupValidationError{}

// Validate checks the field values on BillingIssue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BillingIssue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BillingIssueMultiError, or
// nil if none found.
func (m *BillingIssue) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Type

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingIssueMultiError(errors)
	}

	return nil
}

// BillingIssueMultiError is an error wrapping multiple validation errors
// returned by BillingIssue.ValidateAll() if the designated constraints aren't met.
type BillingIssueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMultiError) AllErrors() []error { return m }

// BillingIssueValidationError is the validation error returned by
// BillingIssue.Validate if the designated constraints aren't met.
type BillingIssueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueValidationError) ErrorName() string { return "BillingIssueValidationError" }

// Error satisfies the builtin error interface
func (e BillingIssueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueValidationError{}

// Validate checks the field values on BillingIssueMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingIssueMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataMultiError, or nil if none found.
func (m *BillingIssueMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Metadata.(type) {
	case *BillingIssueMetadata_OnTrial:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOnTrial()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "OnTrial",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "OnTrial",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOnTrial()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "OnTrial",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_TrialEnded:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTrialEnded()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "TrialEnded",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "TrialEnded",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrialEnded()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "TrialEnded",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_NoPaymentMethod:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNoPaymentMethod()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NoPaymentMethod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NoPaymentMethod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNoPaymentMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "NoPaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_NoBillableAddress:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNoBillableAddress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NoBillableAddress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NoBillableAddress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNoBillableAddress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "NoBillableAddress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_PaymentFailed:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPaymentFailed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "PaymentFailed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "PaymentFailed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPaymentFailed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "PaymentFailed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_SubscriptionCancelled:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSubscriptionCancelled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "SubscriptionCancelled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "SubscriptionCancelled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscriptionCancelled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "SubscriptionCancelled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BillingIssueMetadata_NeverSubscribed:
		if v == nil {
			err := BillingIssueMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNeverSubscribed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NeverSubscribed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataValidationError{
						field:  "NeverSubscribed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNeverSubscribed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataValidationError{
					field:  "NeverSubscribed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return BillingIssueMetadataMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataMultiError is an error wrapping multiple validation
// errors returned by BillingIssueMetadata.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataMultiError) AllErrors() []error { return m }

// BillingIssueMetadataValidationError is the validation error returned by
// BillingIssueMetadata.Validate if the designated constraints aren't met.
type BillingIssueMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataValidationError) ErrorName() string {
	return "BillingIssueMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataValidationError{}

// Validate checks the field values on BillingIssueMetadataOnTrial with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingIssueMetadataOnTrial) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataOnTrial with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataOnTrialMultiError, or nil if none found.
func (m *BillingIssueMetadataOnTrial) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataOnTrial) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataOnTrialValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataOnTrialValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataOnTrialValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGracePeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataOnTrialValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataOnTrialValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGracePeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataOnTrialValidationError{
				field:  "GracePeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingIssueMetadataOnTrialMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataOnTrialMultiError is an error wrapping multiple
// validation errors returned by BillingIssueMetadataOnTrial.ValidateAll() if
// the designated constraints aren't met.
type BillingIssueMetadataOnTrialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataOnTrialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataOnTrialMultiError) AllErrors() []error { return m }

// BillingIssueMetadataOnTrialValidationError is the validation error returned
// by BillingIssueMetadataOnTrial.Validate if the designated constraints
// aren't met.
type BillingIssueMetadataOnTrialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataOnTrialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataOnTrialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataOnTrialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataOnTrialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataOnTrialValidationError) ErrorName() string {
	return "BillingIssueMetadataOnTrialValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataOnTrialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataOnTrial.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataOnTrialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataOnTrialValidationError{}

// Validate checks the field values on BillingIssueMetadataTrialEnded with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingIssueMetadataTrialEnded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataTrialEnded with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataTrialEndedMultiError, or nil if none found.
func (m *BillingIssueMetadataTrialEnded) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataTrialEnded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataTrialEndedValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataTrialEndedValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataTrialEndedValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGracePeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataTrialEndedValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataTrialEndedValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGracePeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataTrialEndedValidationError{
				field:  "GracePeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingIssueMetadataTrialEndedMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataTrialEndedMultiError is an error wrapping multiple
// validation errors returned by BillingIssueMetadataTrialEnded.ValidateAll()
// if the designated constraints aren't met.
type BillingIssueMetadataTrialEndedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataTrialEndedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataTrialEndedMultiError) AllErrors() []error { return m }

// BillingIssueMetadataTrialEndedValidationError is the validation error
// returned by BillingIssueMetadataTrialEnded.Validate if the designated
// constraints aren't met.
type BillingIssueMetadataTrialEndedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataTrialEndedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataTrialEndedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataTrialEndedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataTrialEndedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataTrialEndedValidationError) ErrorName() string {
	return "BillingIssueMetadataTrialEndedValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataTrialEndedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataTrialEnded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataTrialEndedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataTrialEndedValidationError{}

// Validate checks the field values on BillingIssueMetadataNoPaymentMethod with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BillingIssueMetadataNoPaymentMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataNoPaymentMethod
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataNoPaymentMethodMultiError, or nil if none found.
func (m *BillingIssueMetadataNoPaymentMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataNoPaymentMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BillingIssueMetadataNoPaymentMethodMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataNoPaymentMethodMultiError is an error wrapping multiple
// validation errors returned by
// BillingIssueMetadataNoPaymentMethod.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataNoPaymentMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataNoPaymentMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataNoPaymentMethodMultiError) AllErrors() []error { return m }

// BillingIssueMetadataNoPaymentMethodValidationError is the validation error
// returned by BillingIssueMetadataNoPaymentMethod.Validate if the designated
// constraints aren't met.
type BillingIssueMetadataNoPaymentMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataNoPaymentMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataNoPaymentMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataNoPaymentMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataNoPaymentMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataNoPaymentMethodValidationError) ErrorName() string {
	return "BillingIssueMetadataNoPaymentMethodValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataNoPaymentMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataNoPaymentMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataNoPaymentMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataNoPaymentMethodValidationError{}

// Validate checks the field values on BillingIssueMetadataNoBillableAddress
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BillingIssueMetadataNoBillableAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataNoBillableAddress
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataNoBillableAddressMultiError, or nil if none found.
func (m *BillingIssueMetadataNoBillableAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataNoBillableAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BillingIssueMetadataNoBillableAddressMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataNoBillableAddressMultiError is an error wrapping
// multiple validation errors returned by
// BillingIssueMetadataNoBillableAddress.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataNoBillableAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataNoBillableAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataNoBillableAddressMultiError) AllErrors() []error { return m }

// BillingIssueMetadataNoBillableAddressValidationError is the validation error
// returned by BillingIssueMetadataNoBillableAddress.Validate if the
// designated constraints aren't met.
type BillingIssueMetadataNoBillableAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataNoBillableAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataNoBillableAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataNoBillableAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataNoBillableAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataNoBillableAddressValidationError) ErrorName() string {
	return "BillingIssueMetadataNoBillableAddressValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataNoBillableAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataNoBillableAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataNoBillableAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataNoBillableAddressValidationError{}

// Validate checks the field values on BillingIssueMetadataPaymentFailed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BillingIssueMetadataPaymentFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataPaymentFailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataPaymentFailedMultiError, or nil if none found.
func (m *BillingIssueMetadataPaymentFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataPaymentFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingIssueMetadataPaymentFailedValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingIssueMetadataPaymentFailedValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingIssueMetadataPaymentFailedValidationError{
					field:  fmt.Sprintf("Invoices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BillingIssueMetadataPaymentFailedMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataPaymentFailedMultiError is an error wrapping multiple
// validation errors returned by
// BillingIssueMetadataPaymentFailed.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataPaymentFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataPaymentFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataPaymentFailedMultiError) AllErrors() []error { return m }

// BillingIssueMetadataPaymentFailedValidationError is the validation error
// returned by BillingIssueMetadataPaymentFailed.Validate if the designated
// constraints aren't met.
type BillingIssueMetadataPaymentFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataPaymentFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataPaymentFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataPaymentFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataPaymentFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataPaymentFailedValidationError) ErrorName() string {
	return "BillingIssueMetadataPaymentFailedValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataPaymentFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataPaymentFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataPaymentFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataPaymentFailedValidationError{}

// Validate checks the field values on BillingIssueMetadataPaymentFailedMeta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BillingIssueMetadataPaymentFailedMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataPaymentFailedMeta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataPaymentFailedMetaMultiError, or nil if none found.
func (m *BillingIssueMetadataPaymentFailedMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataPaymentFailedMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvoiceId

	// no validation rules for InvoiceNumber

	// no validation rules for InvoiceUrl

	// no validation rules for AmountDue

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataPaymentFailedMetaValidationError{
				field:  "DueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFailedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "FailedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "FailedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataPaymentFailedMetaValidationError{
				field:  "FailedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGracePeriodEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataPaymentFailedMetaValidationError{
					field:  "GracePeriodEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGracePeriodEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataPaymentFailedMetaValidationError{
				field:  "GracePeriodEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingIssueMetadataPaymentFailedMetaMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataPaymentFailedMetaMultiError is an error wrapping
// multiple validation errors returned by
// BillingIssueMetadataPaymentFailedMeta.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataPaymentFailedMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataPaymentFailedMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataPaymentFailedMetaMultiError) AllErrors() []error { return m }

// BillingIssueMetadataPaymentFailedMetaValidationError is the validation error
// returned by BillingIssueMetadataPaymentFailedMeta.Validate if the
// designated constraints aren't met.
type BillingIssueMetadataPaymentFailedMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataPaymentFailedMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataPaymentFailedMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataPaymentFailedMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataPaymentFailedMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataPaymentFailedMetaValidationError) ErrorName() string {
	return "BillingIssueMetadataPaymentFailedMetaValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataPaymentFailedMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataPaymentFailedMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataPaymentFailedMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataPaymentFailedMetaValidationError{}

// Validate checks the field values on
// BillingIssueMetadataSubscriptionCancelled with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BillingIssueMetadataSubscriptionCancelled) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BillingIssueMetadataSubscriptionCancelled with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BillingIssueMetadataSubscriptionCancelledMultiError, or nil if none found.
func (m *BillingIssueMetadataSubscriptionCancelled) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataSubscriptionCancelled) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingIssueMetadataSubscriptionCancelledValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingIssueMetadataSubscriptionCancelledValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingIssueMetadataSubscriptionCancelledValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingIssueMetadataSubscriptionCancelledMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataSubscriptionCancelledMultiError is an error wrapping
// multiple validation errors returned by
// BillingIssueMetadataSubscriptionCancelled.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataSubscriptionCancelledMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataSubscriptionCancelledMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataSubscriptionCancelledMultiError) AllErrors() []error { return m }

// BillingIssueMetadataSubscriptionCancelledValidationError is the validation
// error returned by BillingIssueMetadataSubscriptionCancelled.Validate if the
// designated constraints aren't met.
type BillingIssueMetadataSubscriptionCancelledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataSubscriptionCancelledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataSubscriptionCancelledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataSubscriptionCancelledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataSubscriptionCancelledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataSubscriptionCancelledValidationError) ErrorName() string {
	return "BillingIssueMetadataSubscriptionCancelledValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataSubscriptionCancelledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataSubscriptionCancelled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataSubscriptionCancelledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataSubscriptionCancelledValidationError{}

// Validate checks the field values on BillingIssueMetadataNeverSubscribed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BillingIssueMetadataNeverSubscribed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingIssueMetadataNeverSubscribed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BillingIssueMetadataNeverSubscribedMultiError, or nil if none found.
func (m *BillingIssueMetadataNeverSubscribed) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingIssueMetadataNeverSubscribed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BillingIssueMetadataNeverSubscribedMultiError(errors)
	}

	return nil
}

// BillingIssueMetadataNeverSubscribedMultiError is an error wrapping multiple
// validation errors returned by
// BillingIssueMetadataNeverSubscribed.ValidateAll() if the designated
// constraints aren't met.
type BillingIssueMetadataNeverSubscribedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingIssueMetadataNeverSubscribedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingIssueMetadataNeverSubscribedMultiError) AllErrors() []error { return m }

// BillingIssueMetadataNeverSubscribedValidationError is the validation error
// returned by BillingIssueMetadataNeverSubscribed.Validate if the designated
// constraints aren't met.
type BillingIssueMetadataNeverSubscribedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingIssueMetadataNeverSubscribedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingIssueMetadataNeverSubscribedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingIssueMetadataNeverSubscribedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingIssueMetadataNeverSubscribedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingIssueMetadataNeverSubscribedValidationError) ErrorName() string {
	return "BillingIssueMetadataNeverSubscribedValidationError"
}

// Error satisfies the builtin error interface
func (e BillingIssueMetadataNeverSubscribedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingIssueMetadataNeverSubscribed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingIssueMetadataNeverSubscribedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingIssueMetadataNeverSubscribedValidationError{}

// Validate checks the field values on ListGithubUserReposResponse_Repo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGithubUserReposResponse_Repo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubUserReposResponse_Repo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGithubUserReposResponse_RepoMultiError, or nil if none found.
func (m *ListGithubUserReposResponse_Repo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubUserReposResponse_Repo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for Description

	// no validation rules for Url

	// no validation rules for DefaultBranch

	if len(errors) > 0 {
		return ListGithubUserReposResponse_RepoMultiError(errors)
	}

	return nil
}

// ListGithubUserReposResponse_RepoMultiError is an error wrapping multiple
// validation errors returned by
// ListGithubUserReposResponse_Repo.ValidateAll() if the designated
// constraints aren't met.
type ListGithubUserReposResponse_RepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubUserReposResponse_RepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubUserReposResponse_RepoMultiError) AllErrors() []error { return m }

// ListGithubUserReposResponse_RepoValidationError is the validation error
// returned by ListGithubUserReposResponse_Repo.Validate if the designated
// constraints aren't met.
type ListGithubUserReposResponse_RepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubUserReposResponse_RepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubUserReposResponse_RepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubUserReposResponse_RepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubUserReposResponse_RepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubUserReposResponse_RepoValidationError) ErrorName() string {
	return "ListGithubUserReposResponse_RepoValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubUserReposResponse_RepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubUserReposResponse_Repo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubUserReposResponse_RepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubUserReposResponse_RepoValidationError{}

// Validate checks the field values on GetReportMetaResponse_URLs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportMetaResponse_URLs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportMetaResponse_URLs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportMetaResponse_URLsMultiError, or nil if none found.
func (m *GetReportMetaResponse_URLs) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportMetaResponse_URLs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpenUrl

	// no validation rules for ExportUrl

	// no validation rules for EditUrl

	if len(errors) > 0 {
		return GetReportMetaResponse_URLsMultiError(errors)
	}

	return nil
}

// GetReportMetaResponse_URLsMultiError is an error wrapping multiple
// validation errors returned by GetReportMetaResponse_URLs.ValidateAll() if
// the designated constraints aren't met.
type GetReportMetaResponse_URLsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportMetaResponse_URLsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportMetaResponse_URLsMultiError) AllErrors() []error { return m }

// GetReportMetaResponse_URLsValidationError is the validation error returned
// by GetReportMetaResponse_URLs.Validate if the designated constraints aren't met.
type GetReportMetaResponse_URLsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportMetaResponse_URLsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportMetaResponse_URLsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportMetaResponse_URLsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportMetaResponse_URLsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportMetaResponse_URLsValidationError) ErrorName() string {
	return "GetReportMetaResponse_URLsValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportMetaResponse_URLsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportMetaResponse_URLs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportMetaResponse_URLsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportMetaResponse_URLsValidationError{}
