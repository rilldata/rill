// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rill/admin/v1/api.proto

package adminv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_Ping_FullMethodName                                  = "/rill.admin.v1.AdminService/Ping"
	AdminService_ListOrganizations_FullMethodName                     = "/rill.admin.v1.AdminService/ListOrganizations"
	AdminService_GetOrganization_FullMethodName                       = "/rill.admin.v1.AdminService/GetOrganization"
	AdminService_GetOrganizationNameForDomain_FullMethodName          = "/rill.admin.v1.AdminService/GetOrganizationNameForDomain"
	AdminService_CreateOrganization_FullMethodName                    = "/rill.admin.v1.AdminService/CreateOrganization"
	AdminService_DeleteOrganization_FullMethodName                    = "/rill.admin.v1.AdminService/DeleteOrganization"
	AdminService_UpdateOrganization_FullMethodName                    = "/rill.admin.v1.AdminService/UpdateOrganization"
	AdminService_ListProjectsForOrganization_FullMethodName           = "/rill.admin.v1.AdminService/ListProjectsForOrganization"
	AdminService_GetProject_FullMethodName                            = "/rill.admin.v1.AdminService/GetProject"
	AdminService_GetProjectByID_FullMethodName                        = "/rill.admin.v1.AdminService/GetProjectByID"
	AdminService_SearchProjectNames_FullMethodName                    = "/rill.admin.v1.AdminService/SearchProjectNames"
	AdminService_CreateProject_FullMethodName                         = "/rill.admin.v1.AdminService/CreateProject"
	AdminService_DeleteProject_FullMethodName                         = "/rill.admin.v1.AdminService/DeleteProject"
	AdminService_UpdateProject_FullMethodName                         = "/rill.admin.v1.AdminService/UpdateProject"
	AdminService_GetProjectVariables_FullMethodName                   = "/rill.admin.v1.AdminService/GetProjectVariables"
	AdminService_UpdateProjectVariables_FullMethodName                = "/rill.admin.v1.AdminService/UpdateProjectVariables"
	AdminService_CreateAsset_FullMethodName                           = "/rill.admin.v1.AdminService/CreateAsset"
	AdminService_RedeployProject_FullMethodName                       = "/rill.admin.v1.AdminService/RedeployProject"
	AdminService_HibernateProject_FullMethodName                      = "/rill.admin.v1.AdminService/HibernateProject"
	AdminService_TriggerReconcile_FullMethodName                      = "/rill.admin.v1.AdminService/TriggerReconcile"
	AdminService_TriggerRefreshSources_FullMethodName                 = "/rill.admin.v1.AdminService/TriggerRefreshSources"
	AdminService_TriggerRedeploy_FullMethodName                       = "/rill.admin.v1.AdminService/TriggerRedeploy"
	AdminService_Provision_FullMethodName                             = "/rill.admin.v1.AdminService/Provision"
	AdminService_ListOrganizationMemberUsers_FullMethodName           = "/rill.admin.v1.AdminService/ListOrganizationMemberUsers"
	AdminService_ListOrganizationInvites_FullMethodName               = "/rill.admin.v1.AdminService/ListOrganizationInvites"
	AdminService_AddOrganizationMemberUser_FullMethodName             = "/rill.admin.v1.AdminService/AddOrganizationMemberUser"
	AdminService_RemoveOrganizationMemberUser_FullMethodName          = "/rill.admin.v1.AdminService/RemoveOrganizationMemberUser"
	AdminService_LeaveOrganization_FullMethodName                     = "/rill.admin.v1.AdminService/LeaveOrganization"
	AdminService_SetOrganizationMemberUserRole_FullMethodName         = "/rill.admin.v1.AdminService/SetOrganizationMemberUserRole"
	AdminService_ListProjectMemberUsers_FullMethodName                = "/rill.admin.v1.AdminService/ListProjectMemberUsers"
	AdminService_ListProjectInvites_FullMethodName                    = "/rill.admin.v1.AdminService/ListProjectInvites"
	AdminService_AddProjectMemberUser_FullMethodName                  = "/rill.admin.v1.AdminService/AddProjectMemberUser"
	AdminService_RemoveProjectMemberUser_FullMethodName               = "/rill.admin.v1.AdminService/RemoveProjectMemberUser"
	AdminService_SetProjectMemberUserRole_FullMethodName              = "/rill.admin.v1.AdminService/SetProjectMemberUserRole"
	AdminService_CreateUsergroup_FullMethodName                       = "/rill.admin.v1.AdminService/CreateUsergroup"
	AdminService_GetUsergroup_FullMethodName                          = "/rill.admin.v1.AdminService/GetUsergroup"
	AdminService_RenameUsergroup_FullMethodName                       = "/rill.admin.v1.AdminService/RenameUsergroup"
	AdminService_EditUsergroup_FullMethodName                         = "/rill.admin.v1.AdminService/EditUsergroup"
	AdminService_ListOrganizationMemberUsergroups_FullMethodName      = "/rill.admin.v1.AdminService/ListOrganizationMemberUsergroups"
	AdminService_ListProjectMemberUsergroups_FullMethodName           = "/rill.admin.v1.AdminService/ListProjectMemberUsergroups"
	AdminService_DeleteUsergroup_FullMethodName                       = "/rill.admin.v1.AdminService/DeleteUsergroup"
	AdminService_AddOrganizationMemberUsergroup_FullMethodName        = "/rill.admin.v1.AdminService/AddOrganizationMemberUsergroup"
	AdminService_SetOrganizationMemberUsergroupRole_FullMethodName    = "/rill.admin.v1.AdminService/SetOrganizationMemberUsergroupRole"
	AdminService_RemoveOrganizationMemberUsergroup_FullMethodName     = "/rill.admin.v1.AdminService/RemoveOrganizationMemberUsergroup"
	AdminService_AddProjectMemberUsergroup_FullMethodName             = "/rill.admin.v1.AdminService/AddProjectMemberUsergroup"
	AdminService_SetProjectMemberUsergroupRole_FullMethodName         = "/rill.admin.v1.AdminService/SetProjectMemberUsergroupRole"
	AdminService_RemoveProjectMemberUsergroup_FullMethodName          = "/rill.admin.v1.AdminService/RemoveProjectMemberUsergroup"
	AdminService_AddUsergroupMemberUser_FullMethodName                = "/rill.admin.v1.AdminService/AddUsergroupMemberUser"
	AdminService_ListUsergroupMemberUsers_FullMethodName              = "/rill.admin.v1.AdminService/ListUsergroupMemberUsers"
	AdminService_RemoveUsergroupMemberUser_FullMethodName             = "/rill.admin.v1.AdminService/RemoveUsergroupMemberUser"
	AdminService_GetCurrentUser_FullMethodName                        = "/rill.admin.v1.AdminService/GetCurrentUser"
	AdminService_DeleteUser_FullMethodName                            = "/rill.admin.v1.AdminService/DeleteUser"
	AdminService_IssueRepresentativeAuthToken_FullMethodName          = "/rill.admin.v1.AdminService/IssueRepresentativeAuthToken"
	AdminService_RevokeCurrentAuthToken_FullMethodName                = "/rill.admin.v1.AdminService/RevokeCurrentAuthToken"
	AdminService_GetGithubRepoStatus_FullMethodName                   = "/rill.admin.v1.AdminService/GetGithubRepoStatus"
	AdminService_GetGithubUserStatus_FullMethodName                   = "/rill.admin.v1.AdminService/GetGithubUserStatus"
	AdminService_ListGithubUserRepos_FullMethodName                   = "/rill.admin.v1.AdminService/ListGithubUserRepos"
	AdminService_ConnectProjectToGithub_FullMethodName                = "/rill.admin.v1.AdminService/ConnectProjectToGithub"
	AdminService_UploadProjectAssets_FullMethodName                   = "/rill.admin.v1.AdminService/UploadProjectAssets"
	AdminService_GetCloneCredentials_FullMethodName                   = "/rill.admin.v1.AdminService/GetCloneCredentials"
	AdminService_CreateWhitelistedDomain_FullMethodName               = "/rill.admin.v1.AdminService/CreateWhitelistedDomain"
	AdminService_RemoveWhitelistedDomain_FullMethodName               = "/rill.admin.v1.AdminService/RemoveWhitelistedDomain"
	AdminService_ListWhitelistedDomains_FullMethodName                = "/rill.admin.v1.AdminService/ListWhitelistedDomains"
	AdminService_GetUser_FullMethodName                               = "/rill.admin.v1.AdminService/GetUser"
	AdminService_SearchUsers_FullMethodName                           = "/rill.admin.v1.AdminService/SearchUsers"
	AdminService_SearchProjectUsers_FullMethodName                    = "/rill.admin.v1.AdminService/SearchProjectUsers"
	AdminService_ListSuperusers_FullMethodName                        = "/rill.admin.v1.AdminService/ListSuperusers"
	AdminService_GetDeploymentCredentials_FullMethodName              = "/rill.admin.v1.AdminService/GetDeploymentCredentials"
	AdminService_GetIFrame_FullMethodName                             = "/rill.admin.v1.AdminService/GetIFrame"
	AdminService_SetSuperuser_FullMethodName                          = "/rill.admin.v1.AdminService/SetSuperuser"
	AdminService_SudoGetResource_FullMethodName                       = "/rill.admin.v1.AdminService/SudoGetResource"
	AdminService_SudoUpdateUserQuotas_FullMethodName                  = "/rill.admin.v1.AdminService/SudoUpdateUserQuotas"
	AdminService_SudoUpdateOrganizationQuotas_FullMethodName          = "/rill.admin.v1.AdminService/SudoUpdateOrganizationQuotas"
	AdminService_SudoUpdateOrganizationBillingCustomer_FullMethodName = "/rill.admin.v1.AdminService/SudoUpdateOrganizationBillingCustomer"
	AdminService_SudoExtendTrial_FullMethodName                       = "/rill.admin.v1.AdminService/SudoExtendTrial"
	AdminService_SudoUpdateOrganizationCustomDomain_FullMethodName    = "/rill.admin.v1.AdminService/SudoUpdateOrganizationCustomDomain"
	AdminService_SudoUpdateAnnotations_FullMethodName                 = "/rill.admin.v1.AdminService/SudoUpdateAnnotations"
	AdminService_SudoIssueRuntimeManagerToken_FullMethodName          = "/rill.admin.v1.AdminService/SudoIssueRuntimeManagerToken"
	AdminService_SudoDeleteOrganizationBillingIssue_FullMethodName    = "/rill.admin.v1.AdminService/SudoDeleteOrganizationBillingIssue"
	AdminService_SudoTriggerBillingRepair_FullMethodName              = "/rill.admin.v1.AdminService/SudoTriggerBillingRepair"
	AdminService_CreateProjectWhitelistedDomain_FullMethodName        = "/rill.admin.v1.AdminService/CreateProjectWhitelistedDomain"
	AdminService_RemoveProjectWhitelistedDomain_FullMethodName        = "/rill.admin.v1.AdminService/RemoveProjectWhitelistedDomain"
	AdminService_ListProjectWhitelistedDomains_FullMethodName         = "/rill.admin.v1.AdminService/ListProjectWhitelistedDomains"
	AdminService_ListServices_FullMethodName                          = "/rill.admin.v1.AdminService/ListServices"
	AdminService_CreateService_FullMethodName                         = "/rill.admin.v1.AdminService/CreateService"
	AdminService_UpdateService_FullMethodName                         = "/rill.admin.v1.AdminService/UpdateService"
	AdminService_DeleteService_FullMethodName                         = "/rill.admin.v1.AdminService/DeleteService"
	AdminService_ListServiceAuthTokens_FullMethodName                 = "/rill.admin.v1.AdminService/ListServiceAuthTokens"
	AdminService_IssueServiceAuthToken_FullMethodName                 = "/rill.admin.v1.AdminService/IssueServiceAuthToken"
	AdminService_RevokeServiceAuthToken_FullMethodName                = "/rill.admin.v1.AdminService/RevokeServiceAuthToken"
	AdminService_IssueMagicAuthToken_FullMethodName                   = "/rill.admin.v1.AdminService/IssueMagicAuthToken"
	AdminService_ListMagicAuthTokens_FullMethodName                   = "/rill.admin.v1.AdminService/ListMagicAuthTokens"
	AdminService_GetCurrentMagicAuthToken_FullMethodName              = "/rill.admin.v1.AdminService/GetCurrentMagicAuthToken"
	AdminService_RevokeMagicAuthToken_FullMethodName                  = "/rill.admin.v1.AdminService/RevokeMagicAuthToken"
	AdminService_UpdateUserPreferences_FullMethodName                 = "/rill.admin.v1.AdminService/UpdateUserPreferences"
	AdminService_ListBookmarks_FullMethodName                         = "/rill.admin.v1.AdminService/ListBookmarks"
	AdminService_GetBookmark_FullMethodName                           = "/rill.admin.v1.AdminService/GetBookmark"
	AdminService_CreateBookmark_FullMethodName                        = "/rill.admin.v1.AdminService/CreateBookmark"
	AdminService_UpdateBookmark_FullMethodName                        = "/rill.admin.v1.AdminService/UpdateBookmark"
	AdminService_RemoveBookmark_FullMethodName                        = "/rill.admin.v1.AdminService/RemoveBookmark"
	AdminService_GetRepoMeta_FullMethodName                           = "/rill.admin.v1.AdminService/GetRepoMeta"
	AdminService_PullVirtualRepo_FullMethodName                       = "/rill.admin.v1.AdminService/PullVirtualRepo"
	AdminService_GetReportMeta_FullMethodName                         = "/rill.admin.v1.AdminService/GetReportMeta"
	AdminService_GetAlertMeta_FullMethodName                          = "/rill.admin.v1.AdminService/GetAlertMeta"
	AdminService_CreateReport_FullMethodName                          = "/rill.admin.v1.AdminService/CreateReport"
	AdminService_EditReport_FullMethodName                            = "/rill.admin.v1.AdminService/EditReport"
	AdminService_UnsubscribeReport_FullMethodName                     = "/rill.admin.v1.AdminService/UnsubscribeReport"
	AdminService_DeleteReport_FullMethodName                          = "/rill.admin.v1.AdminService/DeleteReport"
	AdminService_TriggerReport_FullMethodName                         = "/rill.admin.v1.AdminService/TriggerReport"
	AdminService_GenerateReportYAML_FullMethodName                    = "/rill.admin.v1.AdminService/GenerateReportYAML"
	AdminService_CreateAlert_FullMethodName                           = "/rill.admin.v1.AdminService/CreateAlert"
	AdminService_EditAlert_FullMethodName                             = "/rill.admin.v1.AdminService/EditAlert"
	AdminService_UnsubscribeAlert_FullMethodName                      = "/rill.admin.v1.AdminService/UnsubscribeAlert"
	AdminService_DeleteAlert_FullMethodName                           = "/rill.admin.v1.AdminService/DeleteAlert"
	AdminService_GenerateAlertYAML_FullMethodName                     = "/rill.admin.v1.AdminService/GenerateAlertYAML"
	AdminService_GetAlertYAML_FullMethodName                          = "/rill.admin.v1.AdminService/GetAlertYAML"
	AdminService_GetBillingSubscription_FullMethodName                = "/rill.admin.v1.AdminService/GetBillingSubscription"
	AdminService_UpdateBillingSubscription_FullMethodName             = "/rill.admin.v1.AdminService/UpdateBillingSubscription"
	AdminService_CancelBillingSubscription_FullMethodName             = "/rill.admin.v1.AdminService/CancelBillingSubscription"
	AdminService_RenewBillingSubscription_FullMethodName              = "/rill.admin.v1.AdminService/RenewBillingSubscription"
	AdminService_GetPaymentsPortalURL_FullMethodName                  = "/rill.admin.v1.AdminService/GetPaymentsPortalURL"
	AdminService_ListPublicBillingPlans_FullMethodName                = "/rill.admin.v1.AdminService/ListPublicBillingPlans"
	AdminService_GetBillingProjectCredentials_FullMethodName          = "/rill.admin.v1.AdminService/GetBillingProjectCredentials"
	AdminService_RequestProjectAccess_FullMethodName                  = "/rill.admin.v1.AdminService/RequestProjectAccess"
	AdminService_GetProjectAccessRequest_FullMethodName               = "/rill.admin.v1.AdminService/GetProjectAccessRequest"
	AdminService_ApproveProjectAccess_FullMethodName                  = "/rill.admin.v1.AdminService/ApproveProjectAccess"
	AdminService_DenyProjectAccess_FullMethodName                     = "/rill.admin.v1.AdminService/DenyProjectAccess"
	AdminService_ListOrganizationBillingIssues_FullMethodName         = "/rill.admin.v1.AdminService/ListOrganizationBillingIssues"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Ping returns information about the server
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// ListOrganizations lists all the organizations currently managed by the admin
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// GetOrganization returns information about a specific organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// GetOrganizationNameForDomain finds the org name for a custom domain.
	// If the application detects it is running on a non-default domain, it can use this to find the org to present.
	// It can be called without being authenticated.
	GetOrganizationNameForDomain(ctx context.Context, in *GetOrganizationNameForDomainRequest, opts ...grpc.CallOption) (*GetOrganizationNameForDomainResponse, error)
	// CreateOrganization creates a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// DeleteOrganization deletes an organizations
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// UpdateOrganization deletes an organizations
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// ListProjectsForOrganization lists all the projects currently available for given organizations
	ListProjectsForOrganization(ctx context.Context, in *ListProjectsForOrganizationRequest, opts ...grpc.CallOption) (*ListProjectsForOrganizationResponse, error)
	// GetProject returns information about a specific project
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// GetProject returns information about a specific project
	GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error)
	// SearchProjectNames returns project names matching the pattern
	SearchProjectNames(ctx context.Context, in *SearchProjectNamesRequest, opts ...grpc.CallOption) (*SearchProjectNamesResponse, error)
	// CreateProject creates a new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// DeleteProject deletes an project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// UpdateProject updates a project
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// GetProjectVariables returns project variables.
	GetProjectVariables(ctx context.Context, in *GetProjectVariablesRequest, opts ...grpc.CallOption) (*GetProjectVariablesResponse, error)
	// UpdateProjectVariables updates variables for a project.
	UpdateProjectVariables(ctx context.Context, in *UpdateProjectVariablesRequest, opts ...grpc.CallOption) (*UpdateProjectVariablesResponse, error)
	// CreateAsset returns a one time signed URL using which any asset can be uploaded.
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error)
	// RedeployProject creates a new production deployment for a project.
	// If the project currently has another production deployment, the old deployment will be deprovisioned.
	// This RPC can be used to redeploy a project that has been hibernated.
	RedeployProject(ctx context.Context, in *RedeployProjectRequest, opts ...grpc.CallOption) (*RedeployProjectResponse, error)
	// HibernateProject hibernates a project by tearing down its deployments.
	HibernateProject(ctx context.Context, in *HibernateProjectRequest, opts ...grpc.CallOption) (*HibernateProjectResponse, error)
	// TriggerReconcile triggers reconcile for the project's prod deployment.
	// DEPRECATED: Clients should call CreateTrigger directly on the deployed runtime instead.
	TriggerReconcile(ctx context.Context, in *TriggerReconcileRequest, opts ...grpc.CallOption) (*TriggerReconcileResponse, error)
	// TriggerRefreshSources refresh the source for production deployment.
	// DEPRECATED: Clients should call CreateTrigger directly on the deployed runtime instead.
	TriggerRefreshSources(ctx context.Context, in *TriggerRefreshSourcesRequest, opts ...grpc.CallOption) (*TriggerRefreshSourcesResponse, error)
	// TriggerRedeploy is similar to RedeployProject.
	// DEPRECATED: Use RedeployProject instead.
	TriggerRedeploy(ctx context.Context, in *TriggerRedeployRequest, opts ...grpc.CallOption) (*TriggerRedeployResponse, error)
	// Provision provisions a new resource for a deployment.
	// If an existing resource matches the request, it will be returned without provisioning a new resource.
	Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
	// ListOrganizationMemberUsers lists all the org members
	ListOrganizationMemberUsers(ctx context.Context, in *ListOrganizationMemberUsersRequest, opts ...grpc.CallOption) (*ListOrganizationMemberUsersResponse, error)
	// ListOrganizationInvites lists all the org invites
	ListOrganizationInvites(ctx context.Context, in *ListOrganizationInvitesRequest, opts ...grpc.CallOption) (*ListOrganizationInvitesResponse, error)
	// AddOrganizationMemberUser adds a user to the organization
	AddOrganizationMemberUser(ctx context.Context, in *AddOrganizationMemberUserRequest, opts ...grpc.CallOption) (*AddOrganizationMemberUserResponse, error)
	// RemoveOrganizationMemberUser removes member from the organization
	RemoveOrganizationMemberUser(ctx context.Context, in *RemoveOrganizationMemberUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberUserResponse, error)
	// LeaveOrganization removes the current user from the organization
	LeaveOrganization(ctx context.Context, in *LeaveOrganizationRequest, opts ...grpc.CallOption) (*LeaveOrganizationResponse, error)
	// SetOrganizationMemberUserRole sets the role for the member
	SetOrganizationMemberUserRole(ctx context.Context, in *SetOrganizationMemberUserRoleRequest, opts ...grpc.CallOption) (*SetOrganizationMemberUserRoleResponse, error)
	// ListProjectMemberUsers lists all the project members
	ListProjectMemberUsers(ctx context.Context, in *ListProjectMemberUsersRequest, opts ...grpc.CallOption) (*ListProjectMemberUsersResponse, error)
	// ListProjectInvites lists all the project invites
	ListProjectInvites(ctx context.Context, in *ListProjectInvitesRequest, opts ...grpc.CallOption) (*ListProjectInvitesResponse, error)
	// AddProjectMemberUser adds a member to the project
	AddProjectMemberUser(ctx context.Context, in *AddProjectMemberUserRequest, opts ...grpc.CallOption) (*AddProjectMemberUserResponse, error)
	// RemoveProjectMemberUser removes member from the project
	RemoveProjectMemberUser(ctx context.Context, in *RemoveProjectMemberUserRequest, opts ...grpc.CallOption) (*RemoveProjectMemberUserResponse, error)
	// SetProjectMemberUserRole sets the role for the member
	SetProjectMemberUserRole(ctx context.Context, in *SetProjectMemberUserRoleRequest, opts ...grpc.CallOption) (*SetProjectMemberUserRoleResponse, error)
	// CreateUsergroup creates a user group in the organization
	CreateUsergroup(ctx context.Context, in *CreateUsergroupRequest, opts ...grpc.CallOption) (*CreateUsergroupResponse, error)
	// GetUsergroups returns the user group details
	GetUsergroup(ctx context.Context, in *GetUsergroupRequest, opts ...grpc.CallOption) (*GetUsergroupResponse, error)
	// RenameUsergroup renames the user group
	RenameUsergroup(ctx context.Context, in *RenameUsergroupRequest, opts ...grpc.CallOption) (*RenameUsergroupResponse, error)
	// EditUsergroup renames the user group
	EditUsergroup(ctx context.Context, in *EditUsergroupRequest, opts ...grpc.CallOption) (*EditUsergroupResponse, error)
	// ListOrganizationMemberUsergroups lists the org's user groups
	ListOrganizationMemberUsergroups(ctx context.Context, in *ListOrganizationMemberUsergroupsRequest, opts ...grpc.CallOption) (*ListOrganizationMemberUsergroupsResponse, error)
	// ListProjectMemberUsergroups lists the org's user groups
	ListProjectMemberUsergroups(ctx context.Context, in *ListProjectMemberUsergroupsRequest, opts ...grpc.CallOption) (*ListProjectMemberUsergroupsResponse, error)
	// DeleteUsergroup deletes the user group from the organization
	DeleteUsergroup(ctx context.Context, in *DeleteUsergroupRequest, opts ...grpc.CallOption) (*DeleteUsergroupResponse, error)
	// AddOrganizationMemberUsergroupRole adds the role for the user group
	AddOrganizationMemberUsergroup(ctx context.Context, in *AddOrganizationMemberUsergroupRequest, opts ...grpc.CallOption) (*AddOrganizationMemberUsergroupResponse, error)
	// SetOrganizationMemberUsergroupRole sets the role for the user group
	SetOrganizationMemberUsergroupRole(ctx context.Context, in *SetOrganizationMemberUsergroupRoleRequest, opts ...grpc.CallOption) (*SetOrganizationMemberUsergroupRoleResponse, error)
	// RemoveOrganizationMemberUsergroup revokes the organization-level role for the user group
	RemoveOrganizationMemberUsergroup(ctx context.Context, in *RemoveOrganizationMemberUsergroupRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberUsergroupResponse, error)
	// AddProjectMemberUsergroupRole adds the role for the user group
	AddProjectMemberUsergroup(ctx context.Context, in *AddProjectMemberUsergroupRequest, opts ...grpc.CallOption) (*AddProjectMemberUsergroupResponse, error)
	// SetProjectMemberUsergroupRole sets the role for the user group
	SetProjectMemberUsergroupRole(ctx context.Context, in *SetProjectMemberUsergroupRoleRequest, opts ...grpc.CallOption) (*SetProjectMemberUsergroupRoleResponse, error)
	// RemoveProjectMemberUsergroup revokes the project-level role for the user group
	RemoveProjectMemberUsergroup(ctx context.Context, in *RemoveProjectMemberUsergroupRequest, opts ...grpc.CallOption) (*RemoveProjectMemberUsergroupResponse, error)
	// AddUsergroupMemberUser adds a member to the user group
	AddUsergroupMemberUser(ctx context.Context, in *AddUsergroupMemberUserRequest, opts ...grpc.CallOption) (*AddUsergroupMemberUserResponse, error)
	// ListUsergroupMemberUsers lists all the user group members
	ListUsergroupMemberUsers(ctx context.Context, in *ListUsergroupMemberUsersRequest, opts ...grpc.CallOption) (*ListUsergroupMemberUsersResponse, error)
	// RemoveUsergroupMemberUser removes member from the user group
	RemoveUsergroupMemberUser(ctx context.Context, in *RemoveUsergroupMemberUserRequest, opts ...grpc.CallOption) (*RemoveUsergroupMemberUserResponse, error)
	// GetCurrentUser returns the currently authenticated user (if any)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error)
	// DeleteUser deletes the user from the organization by email
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// IssueRepresentativeAuthToken returns the temporary token for given email
	IssueRepresentativeAuthToken(ctx context.Context, in *IssueRepresentativeAuthTokenRequest, opts ...grpc.CallOption) (*IssueRepresentativeAuthTokenResponse, error)
	// RevokeCurrentAuthToken revoke the current auth token
	RevokeCurrentAuthToken(ctx context.Context, in *RevokeCurrentAuthTokenRequest, opts ...grpc.CallOption) (*RevokeCurrentAuthTokenResponse, error)
	// GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
	// If the caller has not granted access to the repository, instructions for granting access are returned.
	GetGithubRepoStatus(ctx context.Context, in *GetGithubRepoStatusRequest, opts ...grpc.CallOption) (*GetGithubRepoStatusResponse, error)
	// GetGithubUserStatus returns info about a Github user account based on the caller's installations.
	// If we don't have access to user's personal account tokens or it is expired, instructions for granting access are returned.
	GetGithubUserStatus(ctx context.Context, in *GetGithubUserStatusRequest, opts ...grpc.CallOption) (*GetGithubUserStatusResponse, error)
	ListGithubUserRepos(ctx context.Context, in *ListGithubUserReposRequest, opts ...grpc.CallOption) (*ListGithubUserReposResponse, error)
	// Connects a rill managed project to github.
	// Replaces the contents of the remote repo with the contents of the project.
	ConnectProjectToGithub(ctx context.Context, in *ConnectProjectToGithubRequest, opts ...grpc.CallOption) (*ConnectProjectToGithubResponse, error)
	// Converts a project connected to github to a rill managed project.
	// Uploads the current project to assets.
	UploadProjectAssets(ctx context.Context, in *UploadProjectAssetsRequest, opts ...grpc.CallOption) (*UploadProjectAssetsResponse, error)
	// GetCloneCredentials returns credentials and other details for a project's Git repository or archive path if git repo is not configured.
	GetCloneCredentials(ctx context.Context, in *GetCloneCredentialsRequest, opts ...grpc.CallOption) (*GetCloneCredentialsResponse, error)
	// CreateWhitelistedDomain adds a domain to the whitelist
	CreateWhitelistedDomain(ctx context.Context, in *CreateWhitelistedDomainRequest, opts ...grpc.CallOption) (*CreateWhitelistedDomainResponse, error)
	// RemoveWhitelistedDomain removes a domain from the whitelist list
	RemoveWhitelistedDomain(ctx context.Context, in *RemoveWhitelistedDomainRequest, opts ...grpc.CallOption) (*RemoveWhitelistedDomainResponse, error)
	// ListWhitelistedDomains lists all the whitelisted domains for the organization
	ListWhitelistedDomains(ctx context.Context, in *ListWhitelistedDomainsRequest, opts ...grpc.CallOption) (*ListWhitelistedDomainsResponse, error)
	// GetUser returns user by email
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUsersByEmail returns users by email
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// SearchProjectUsers returns users who has access to to a project (including org members that have access through a usergroup)
	SearchProjectUsers(ctx context.Context, in *SearchProjectUsersRequest, opts ...grpc.CallOption) (*SearchProjectUsersResponse, error)
	// ListSuperusers lists all the superusers
	ListSuperusers(ctx context.Context, in *ListSuperusersRequest, opts ...grpc.CallOption) (*ListSuperusersResponse, error)
	// GetDeploymentCredentials returns runtime info and access token on behalf of a specific user, or alternatively for a raw set of JWT attributes
	GetDeploymentCredentials(ctx context.Context, in *GetDeploymentCredentialsRequest, opts ...grpc.CallOption) (*GetDeploymentCredentialsResponse, error)
	// GetIFrame returns the iframe URL for the given project
	GetIFrame(ctx context.Context, in *GetIFrameRequest, opts ...grpc.CallOption) (*GetIFrameResponse, error)
	// SetSuperuser adds/remove a superuser
	SetSuperuser(ctx context.Context, in *SetSuperuserRequest, opts ...grpc.CallOption) (*SetSuperuserResponse, error)
	// SudoGetResource returns details about a resource by ID lookup
	SudoGetResource(ctx context.Context, in *SudoGetResourceRequest, opts ...grpc.CallOption) (*SudoGetResourceResponse, error)
	// SudoUpdateUserQuotas update the quotas for users
	SudoUpdateUserQuotas(ctx context.Context, in *SudoUpdateUserQuotasRequest, opts ...grpc.CallOption) (*SudoUpdateUserQuotasResponse, error)
	// SudoUpdateOrganizationQuotas update the quotas available for orgs
	SudoUpdateOrganizationQuotas(ctx context.Context, in *SudoUpdateOrganizationQuotasRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationQuotasResponse, error)
	// SudoUpdateOrganizationBillingCustomer update the billing customer for the organization
	SudoUpdateOrganizationBillingCustomer(ctx context.Context, in *SudoUpdateOrganizationBillingCustomerRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationBillingCustomerResponse, error)
	// SudoExtendTrial extends the trial period for an organization
	SudoExtendTrial(ctx context.Context, in *SudoExtendTrialRequest, opts ...grpc.CallOption) (*SudoExtendTrialResponse, error)
	// SudoUpdateOrganizationCustomDomain updates the custom domain for an organization.
	// It only updates the custom domain in the database, which is used to ensure correct redirects.
	// The DNS records and ingress TLS must be configured separately.
	SudoUpdateOrganizationCustomDomain(ctx context.Context, in *SudoUpdateOrganizationCustomDomainRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationCustomDomainResponse, error)
	// SudoUpdateAnnotations endpoint for superusers to update project annotations
	SudoUpdateAnnotations(ctx context.Context, in *SudoUpdateAnnotationsRequest, opts ...grpc.CallOption) (*SudoUpdateAnnotationsResponse, error)
	// SudoIssueRuntimeManagerToken returns a runtime JWT with full manager permissions for a runtime.
	SudoIssueRuntimeManagerToken(ctx context.Context, in *SudoIssueRuntimeManagerTokenRequest, opts ...grpc.CallOption) (*SudoIssueRuntimeManagerTokenResponse, error)
	// SudoDeleteOrganizationBillingIssue deletes a billing issue of a type for the organization
	SudoDeleteOrganizationBillingIssue(ctx context.Context, in *SudoDeleteOrganizationBillingIssueRequest, opts ...grpc.CallOption) (*SudoDeleteOrganizationBillingIssueResponse, error)
	// SudoTriggerBillingRepair triggers billing repair jobs for orgs that doesn't have billing info and puts them on trial
	SudoTriggerBillingRepair(ctx context.Context, in *SudoTriggerBillingRepairRequest, opts ...grpc.CallOption) (*SudoTriggerBillingRepairResponse, error)
	// CreateProjectWhitelistedDomain adds a domain to the project's whitelisted
	CreateProjectWhitelistedDomain(ctx context.Context, in *CreateProjectWhitelistedDomainRequest, opts ...grpc.CallOption) (*CreateProjectWhitelistedDomainResponse, error)
	// RemoveProjectWhitelistedDomain removes a domain from the project's whitelisted
	RemoveProjectWhitelistedDomain(ctx context.Context, in *RemoveProjectWhitelistedDomainRequest, opts ...grpc.CallOption) (*RemoveProjectWhitelistedDomainResponse, error)
	// ListWhitelistedDomains lists all the whitelisted domains of the project
	ListProjectWhitelistedDomains(ctx context.Context, in *ListProjectWhitelistedDomainsRequest, opts ...grpc.CallOption) (*ListProjectWhitelistedDomainsResponse, error)
	// ListService returns all the services per organization
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// CreateService creates a new service per organization
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	// UpdateService updates a service per organization
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	// DeleteService deletes a service per organization
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	// ListServiceAuthTokens lists all the service auth tokens
	ListServiceAuthTokens(ctx context.Context, in *ListServiceAuthTokensRequest, opts ...grpc.CallOption) (*ListServiceAuthTokensResponse, error)
	// IssueServiceAuthToken returns the temporary token for given service account
	IssueServiceAuthToken(ctx context.Context, in *IssueServiceAuthTokenRequest, opts ...grpc.CallOption) (*IssueServiceAuthTokenResponse, error)
	// RevokeServiceAuthToken revoke the service auth token
	RevokeServiceAuthToken(ctx context.Context, in *RevokeServiceAuthTokenRequest, opts ...grpc.CallOption) (*RevokeServiceAuthTokenResponse, error)
	// IssueMagicAuthToken creates a "magic" auth token that provides limited access to a specific filtered dashboard in a specific project.
	IssueMagicAuthToken(ctx context.Context, in *IssueMagicAuthTokenRequest, opts ...grpc.CallOption) (*IssueMagicAuthTokenResponse, error)
	// ListMagicAuthTokens lists all the magic auth tokens for a specific project.
	ListMagicAuthTokens(ctx context.Context, in *ListMagicAuthTokensRequest, opts ...grpc.CallOption) (*ListMagicAuthTokensResponse, error)
	// GetCurrentMagicAuthToken returns information about the current magic auth token.
	GetCurrentMagicAuthToken(ctx context.Context, in *GetCurrentMagicAuthTokenRequest, opts ...grpc.CallOption) (*GetCurrentMagicAuthTokenResponse, error)
	// RevokeMagicAuthToken revokes a magic auth token.
	RevokeMagicAuthToken(ctx context.Context, in *RevokeMagicAuthTokenRequest, opts ...grpc.CallOption) (*RevokeMagicAuthTokenResponse, error)
	// UpdateUserPreferences updates the preferences for the user
	UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error)
	// ListBookmarks lists all the bookmarks for the user and global ones for dashboard
	ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error)
	// GetBookmark returns the bookmark for the given user for the given project
	GetBookmark(ctx context.Context, in *GetBookmarkRequest, opts ...grpc.CallOption) (*GetBookmarkResponse, error)
	// CreateBookmark creates a bookmark for the given user or for all users for the dashboard
	CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error)
	// UpdateBookmark updates a bookmark for the given user for the given project
	UpdateBookmark(ctx context.Context, in *UpdateBookmarkRequest, opts ...grpc.CallOption) (*UpdateBookmarkResponse, error)
	// RemoveBookmark removes the bookmark for the given user or all users
	RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*RemoveBookmarkResponse, error)
	// GetRepoMeta returns credentials and other metadata for accessing a project's repo
	GetRepoMeta(ctx context.Context, in *GetRepoMetaRequest, opts ...grpc.CallOption) (*GetRepoMetaResponse, error)
	// PullVirtualRepo fetches files from a project's virtual repo
	PullVirtualRepo(ctx context.Context, in *PullVirtualRepoRequest, opts ...grpc.CallOption) (*PullVirtualRepoResponse, error)
	// GetReportMeta returns metadata for generating a report. It's currently only called by the report reconciler in the runtime.
	GetReportMeta(ctx context.Context, in *GetReportMetaRequest, opts ...grpc.CallOption) (*GetReportMetaResponse, error)
	// GetAlertMeta returns metadata for checking an alert. It's currently only called by the alert reconciler in the runtime.
	GetAlertMeta(ctx context.Context, in *GetAlertMetaRequest, opts ...grpc.CallOption) (*GetAlertMetaResponse, error)
	// CreateReport adds a virtual file for a report, triggers a reconcile, and waits for the report to be added to the runtime catalog
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	// EditReport edits a virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be updated in the runtime
	EditReport(ctx context.Context, in *EditReportRequest, opts ...grpc.CallOption) (*EditReportResponse, error)
	// UnsubscribeReport removes the calling user from a reports recipients list
	UnsubscribeReport(ctx context.Context, in *UnsubscribeReportRequest, opts ...grpc.CallOption) (*UnsubscribeReportResponse, error)
	// DeleteReport deletes the virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be deleted in the runtime
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error)
	// TriggerReport triggers an ad-hoc report run
	TriggerReport(ctx context.Context, in *TriggerReportRequest, opts ...grpc.CallOption) (*TriggerReportResponse, error)
	// GenerateReportYAML generates YAML for a scheduled report to be copied into a project's Git repository
	GenerateReportYAML(ctx context.Context, in *GenerateReportYAMLRequest, opts ...grpc.CallOption) (*GenerateReportYAMLResponse, error)
	// CreateAlert adds a virtual file for an alert, triggers a reconcile, and waits for the alert to be added to the runtime catalog
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	// EditAlert edits a virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be updated in the runtime
	EditAlert(ctx context.Context, in *EditAlertRequest, opts ...grpc.CallOption) (*EditAlertResponse, error)
	// UnsubscribeAlert removes the calling user from a alert's recipients list
	UnsubscribeAlert(ctx context.Context, in *UnsubscribeAlertRequest, opts ...grpc.CallOption) (*UnsubscribeAlertResponse, error)
	// DeleteAlert deletes the virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be deleted in the runtime
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	// GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
	GenerateAlertYAML(ctx context.Context, in *GenerateAlertYAMLRequest, opts ...grpc.CallOption) (*GenerateAlertYAMLResponse, error)
	// GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
	GetAlertYAML(ctx context.Context, in *GetAlertYAMLRequest, opts ...grpc.CallOption) (*GetAlertYAMLResponse, error)
	// GetBillingSubscription lists the subscription for the organization
	GetBillingSubscription(ctx context.Context, in *GetBillingSubscriptionRequest, opts ...grpc.CallOption) (*GetBillingSubscriptionResponse, error)
	// UpdateBillingSubscription updates the billing plan for the organization
	UpdateBillingSubscription(ctx context.Context, in *UpdateBillingSubscriptionRequest, opts ...grpc.CallOption) (*UpdateBillingSubscriptionResponse, error)
	// CancelBillingSubscription cancels the billing subscription for the organization
	CancelBillingSubscription(ctx context.Context, in *CancelBillingSubscriptionRequest, opts ...grpc.CallOption) (*CancelBillingSubscriptionResponse, error)
	// RenewBillingSubscription renews the billing plan for the organization once cancelled
	RenewBillingSubscription(ctx context.Context, in *RenewBillingSubscriptionRequest, opts ...grpc.CallOption) (*RenewBillingSubscriptionResponse, error)
	// GetPaymentsPortalURL returns the URL for the billing session to collect payment method
	GetPaymentsPortalURL(ctx context.Context, in *GetPaymentsPortalURLRequest, opts ...grpc.CallOption) (*GetPaymentsPortalURLResponse, error)
	// ListPublicBillingPlans lists all public billing plans
	ListPublicBillingPlans(ctx context.Context, in *ListPublicBillingPlansRequest, opts ...grpc.CallOption) (*ListPublicBillingPlansResponse, error)
	// GetBillingProjectCredentials returns credentials for the configured cloud metrics project filtered by request organization
	GetBillingProjectCredentials(ctx context.Context, in *GetBillingProjectCredentialsRequest, opts ...grpc.CallOption) (*GetBillingProjectCredentialsResponse, error)
	RequestProjectAccess(ctx context.Context, in *RequestProjectAccessRequest, opts ...grpc.CallOption) (*RequestProjectAccessResponse, error)
	GetProjectAccessRequest(ctx context.Context, in *GetProjectAccessRequestRequest, opts ...grpc.CallOption) (*GetProjectAccessRequestResponse, error)
	ApproveProjectAccess(ctx context.Context, in *ApproveProjectAccessRequest, opts ...grpc.CallOption) (*ApproveProjectAccessResponse, error)
	DenyProjectAccess(ctx context.Context, in *DenyProjectAccessRequest, opts ...grpc.CallOption) (*DenyProjectAccessResponse, error)
	// ListOrganizationBillingIssues lists all the billing issues for the organization
	ListOrganizationBillingIssues(ctx context.Context, in *ListOrganizationBillingIssuesRequest, opts ...grpc.CallOption) (*ListOrganizationBillingIssuesResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AdminService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrganizationNameForDomain(ctx context.Context, in *GetOrganizationNameForDomainRequest, opts ...grpc.CallOption) (*GetOrganizationNameForDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationNameForDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOrganizationNameForDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjectsForOrganization(ctx context.Context, in *ListProjectsForOrganizationRequest, opts ...grpc.CallOption) (*ListProjectsForOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsForOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProjectsForOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectByID(ctx context.Context, in *GetProjectByIDRequest, opts ...grpc.CallOption) (*GetProjectByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectByIDResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProjectByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SearchProjectNames(ctx context.Context, in *SearchProjectNamesRequest, opts ...grpc.CallOption) (*SearchProjectNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProjectNamesResponse)
	err := c.cc.Invoke(ctx, AdminService_SearchProjectNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectVariables(ctx context.Context, in *GetProjectVariablesRequest, opts ...grpc.CallOption) (*GetProjectVariablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectVariablesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProjectVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProjectVariables(ctx context.Context, in *UpdateProjectVariablesRequest, opts ...grpc.CallOption) (*UpdateProjectVariablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectVariablesResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateProjectVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAssetResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RedeployProject(ctx context.Context, in *RedeployProjectRequest, opts ...grpc.CallOption) (*RedeployProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeployProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_RedeployProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HibernateProject(ctx context.Context, in *HibernateProjectRequest, opts ...grpc.CallOption) (*HibernateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HibernateProjectResponse)
	err := c.cc.Invoke(ctx, AdminService_HibernateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TriggerReconcile(ctx context.Context, in *TriggerReconcileRequest, opts ...grpc.CallOption) (*TriggerReconcileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerReconcileResponse)
	err := c.cc.Invoke(ctx, AdminService_TriggerReconcile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TriggerRefreshSources(ctx context.Context, in *TriggerRefreshSourcesRequest, opts ...grpc.CallOption) (*TriggerRefreshSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRefreshSourcesResponse)
	err := c.cc.Invoke(ctx, AdminService_TriggerRefreshSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TriggerRedeploy(ctx context.Context, in *TriggerRedeployRequest, opts ...grpc.CallOption) (*TriggerRedeployResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRedeployResponse)
	err := c.cc.Invoke(ctx, AdminService_TriggerRedeploy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionResponse)
	err := c.cc.Invoke(ctx, AdminService_Provision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationMemberUsers(ctx context.Context, in *ListOrganizationMemberUsersRequest, opts ...grpc.CallOption) (*ListOrganizationMemberUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationMemberUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationMemberUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationInvites(ctx context.Context, in *ListOrganizationInvitesRequest, opts ...grpc.CallOption) (*ListOrganizationInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationInvitesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOrganizationMemberUser(ctx context.Context, in *AddOrganizationMemberUserRequest, opts ...grpc.CallOption) (*AddOrganizationMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_AddOrganizationMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveOrganizationMemberUser(ctx context.Context, in *RemoveOrganizationMemberUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveOrganizationMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LeaveOrganization(ctx context.Context, in *LeaveOrganizationRequest, opts ...grpc.CallOption) (*LeaveOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveOrganizationResponse)
	err := c.cc.Invoke(ctx, AdminService_LeaveOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetOrganizationMemberUserRole(ctx context.Context, in *SetOrganizationMemberUserRoleRequest, opts ...grpc.CallOption) (*SetOrganizationMemberUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrganizationMemberUserRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_SetOrganizationMemberUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjectMemberUsers(ctx context.Context, in *ListProjectMemberUsersRequest, opts ...grpc.CallOption) (*ListProjectMemberUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectMemberUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProjectMemberUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjectInvites(ctx context.Context, in *ListProjectInvitesRequest, opts ...grpc.CallOption) (*ListProjectInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectInvitesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProjectInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddProjectMemberUser(ctx context.Context, in *AddProjectMemberUserRequest, opts ...grpc.CallOption) (*AddProjectMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProjectMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_AddProjectMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveProjectMemberUser(ctx context.Context, in *RemoveProjectMemberUserRequest, opts ...grpc.CallOption) (*RemoveProjectMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProjectMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveProjectMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetProjectMemberUserRole(ctx context.Context, in *SetProjectMemberUserRoleRequest, opts ...grpc.CallOption) (*SetProjectMemberUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProjectMemberUserRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_SetProjectMemberUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateUsergroup(ctx context.Context, in *CreateUsergroupRequest, opts ...grpc.CallOption) (*CreateUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUsergroup(ctx context.Context, in *GetUsergroupRequest, opts ...grpc.CallOption) (*GetUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RenameUsergroup(ctx context.Context, in *RenameUsergroupRequest, opts ...grpc.CallOption) (*RenameUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_RenameUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditUsergroup(ctx context.Context, in *EditUsergroupRequest, opts ...grpc.CallOption) (*EditUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_EditUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationMemberUsergroups(ctx context.Context, in *ListOrganizationMemberUsergroupsRequest, opts ...grpc.CallOption) (*ListOrganizationMemberUsergroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationMemberUsergroupsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationMemberUsergroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjectMemberUsergroups(ctx context.Context, in *ListProjectMemberUsergroupsRequest, opts ...grpc.CallOption) (*ListProjectMemberUsergroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectMemberUsergroupsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProjectMemberUsergroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUsergroup(ctx context.Context, in *DeleteUsergroupRequest, opts ...grpc.CallOption) (*DeleteUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOrganizationMemberUsergroup(ctx context.Context, in *AddOrganizationMemberUsergroupRequest, opts ...grpc.CallOption) (*AddOrganizationMemberUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationMemberUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_AddOrganizationMemberUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetOrganizationMemberUsergroupRole(ctx context.Context, in *SetOrganizationMemberUsergroupRoleRequest, opts ...grpc.CallOption) (*SetOrganizationMemberUsergroupRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrganizationMemberUsergroupRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_SetOrganizationMemberUsergroupRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveOrganizationMemberUsergroup(ctx context.Context, in *RemoveOrganizationMemberUsergroupRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationMemberUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveOrganizationMemberUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddProjectMemberUsergroup(ctx context.Context, in *AddProjectMemberUsergroupRequest, opts ...grpc.CallOption) (*AddProjectMemberUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProjectMemberUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_AddProjectMemberUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetProjectMemberUsergroupRole(ctx context.Context, in *SetProjectMemberUsergroupRoleRequest, opts ...grpc.CallOption) (*SetProjectMemberUsergroupRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProjectMemberUsergroupRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_SetProjectMemberUsergroupRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveProjectMemberUsergroup(ctx context.Context, in *RemoveProjectMemberUsergroupRequest, opts ...grpc.CallOption) (*RemoveProjectMemberUsergroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProjectMemberUsergroupResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveProjectMemberUsergroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddUsergroupMemberUser(ctx context.Context, in *AddUsergroupMemberUserRequest, opts ...grpc.CallOption) (*AddUsergroupMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUsergroupMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_AddUsergroupMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUsergroupMemberUsers(ctx context.Context, in *ListUsergroupMemberUsersRequest, opts ...grpc.CallOption) (*ListUsergroupMemberUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsergroupMemberUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUsergroupMemberUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveUsergroupMemberUser(ctx context.Context, in *RemoveUsergroupMemberUserRequest, opts ...grpc.CallOption) (*RemoveUsergroupMemberUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUsergroupMemberUserResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveUsergroupMemberUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IssueRepresentativeAuthToken(ctx context.Context, in *IssueRepresentativeAuthTokenRequest, opts ...grpc.CallOption) (*IssueRepresentativeAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueRepresentativeAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_IssueRepresentativeAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RevokeCurrentAuthToken(ctx context.Context, in *RevokeCurrentAuthTokenRequest, opts ...grpc.CallOption) (*RevokeCurrentAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCurrentAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_RevokeCurrentAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetGithubRepoStatus(ctx context.Context, in *GetGithubRepoStatusRequest, opts ...grpc.CallOption) (*GetGithubRepoStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGithubRepoStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_GetGithubRepoStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetGithubUserStatus(ctx context.Context, in *GetGithubUserStatusRequest, opts ...grpc.CallOption) (*GetGithubUserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGithubUserStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_GetGithubUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListGithubUserRepos(ctx context.Context, in *ListGithubUserReposRequest, opts ...grpc.CallOption) (*ListGithubUserReposResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGithubUserReposResponse)
	err := c.cc.Invoke(ctx, AdminService_ListGithubUserRepos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ConnectProjectToGithub(ctx context.Context, in *ConnectProjectToGithubRequest, opts ...grpc.CallOption) (*ConnectProjectToGithubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectProjectToGithubResponse)
	err := c.cc.Invoke(ctx, AdminService_ConnectProjectToGithub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UploadProjectAssets(ctx context.Context, in *UploadProjectAssetsRequest, opts ...grpc.CallOption) (*UploadProjectAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadProjectAssetsResponse)
	err := c.cc.Invoke(ctx, AdminService_UploadProjectAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCloneCredentials(ctx context.Context, in *GetCloneCredentialsRequest, opts ...grpc.CallOption) (*GetCloneCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCloneCredentialsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCloneCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWhitelistedDomain(ctx context.Context, in *CreateWhitelistedDomainRequest, opts ...grpc.CallOption) (*CreateWhitelistedDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWhitelistedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateWhitelistedDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveWhitelistedDomain(ctx context.Context, in *RemoveWhitelistedDomainRequest, opts ...grpc.CallOption) (*RemoveWhitelistedDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveWhitelistedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveWhitelistedDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWhitelistedDomains(ctx context.Context, in *ListWhitelistedDomainsRequest, opts ...grpc.CallOption) (*ListWhitelistedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWhitelistedDomainsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListWhitelistedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SearchProjectUsers(ctx context.Context, in *SearchProjectUsersRequest, opts ...grpc.CallOption) (*SearchProjectUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProjectUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_SearchProjectUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSuperusers(ctx context.Context, in *ListSuperusersRequest, opts ...grpc.CallOption) (*ListSuperusersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuperusersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListSuperusers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDeploymentCredentials(ctx context.Context, in *GetDeploymentCredentialsRequest, opts ...grpc.CallOption) (*GetDeploymentCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentCredentialsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDeploymentCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetIFrame(ctx context.Context, in *GetIFrameRequest, opts ...grpc.CallOption) (*GetIFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIFrameResponse)
	err := c.cc.Invoke(ctx, AdminService_GetIFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetSuperuser(ctx context.Context, in *SetSuperuserRequest, opts ...grpc.CallOption) (*SetSuperuserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSuperuserResponse)
	err := c.cc.Invoke(ctx, AdminService_SetSuperuser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoGetResource(ctx context.Context, in *SudoGetResourceRequest, opts ...grpc.CallOption) (*SudoGetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoGetResourceResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoGetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoUpdateUserQuotas(ctx context.Context, in *SudoUpdateUserQuotasRequest, opts ...grpc.CallOption) (*SudoUpdateUserQuotasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoUpdateUserQuotasResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoUpdateUserQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoUpdateOrganizationQuotas(ctx context.Context, in *SudoUpdateOrganizationQuotasRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationQuotasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoUpdateOrganizationQuotasResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoUpdateOrganizationQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoUpdateOrganizationBillingCustomer(ctx context.Context, in *SudoUpdateOrganizationBillingCustomerRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationBillingCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoUpdateOrganizationBillingCustomerResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoUpdateOrganizationBillingCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoExtendTrial(ctx context.Context, in *SudoExtendTrialRequest, opts ...grpc.CallOption) (*SudoExtendTrialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoExtendTrialResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoExtendTrial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoUpdateOrganizationCustomDomain(ctx context.Context, in *SudoUpdateOrganizationCustomDomainRequest, opts ...grpc.CallOption) (*SudoUpdateOrganizationCustomDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoUpdateOrganizationCustomDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoUpdateOrganizationCustomDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoUpdateAnnotations(ctx context.Context, in *SudoUpdateAnnotationsRequest, opts ...grpc.CallOption) (*SudoUpdateAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoUpdateAnnotationsResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoUpdateAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoIssueRuntimeManagerToken(ctx context.Context, in *SudoIssueRuntimeManagerTokenRequest, opts ...grpc.CallOption) (*SudoIssueRuntimeManagerTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoIssueRuntimeManagerTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoIssueRuntimeManagerToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoDeleteOrganizationBillingIssue(ctx context.Context, in *SudoDeleteOrganizationBillingIssueRequest, opts ...grpc.CallOption) (*SudoDeleteOrganizationBillingIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoDeleteOrganizationBillingIssueResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoDeleteOrganizationBillingIssue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SudoTriggerBillingRepair(ctx context.Context, in *SudoTriggerBillingRepairRequest, opts ...grpc.CallOption) (*SudoTriggerBillingRepairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoTriggerBillingRepairResponse)
	err := c.cc.Invoke(ctx, AdminService_SudoTriggerBillingRepair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateProjectWhitelistedDomain(ctx context.Context, in *CreateProjectWhitelistedDomainRequest, opts ...grpc.CallOption) (*CreateProjectWhitelistedDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectWhitelistedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateProjectWhitelistedDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveProjectWhitelistedDomain(ctx context.Context, in *RemoveProjectWhitelistedDomainRequest, opts ...grpc.CallOption) (*RemoveProjectWhitelistedDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProjectWhitelistedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveProjectWhitelistedDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjectWhitelistedDomains(ctx context.Context, in *ListProjectWhitelistedDomainsRequest, opts ...grpc.CallOption) (*ListProjectWhitelistedDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectWhitelistedDomainsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProjectWhitelistedDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListServiceAuthTokens(ctx context.Context, in *ListServiceAuthTokensRequest, opts ...grpc.CallOption) (*ListServiceAuthTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceAuthTokensResponse)
	err := c.cc.Invoke(ctx, AdminService_ListServiceAuthTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IssueServiceAuthToken(ctx context.Context, in *IssueServiceAuthTokenRequest, opts ...grpc.CallOption) (*IssueServiceAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueServiceAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_IssueServiceAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RevokeServiceAuthToken(ctx context.Context, in *RevokeServiceAuthTokenRequest, opts ...grpc.CallOption) (*RevokeServiceAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeServiceAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_RevokeServiceAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IssueMagicAuthToken(ctx context.Context, in *IssueMagicAuthTokenRequest, opts ...grpc.CallOption) (*IssueMagicAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueMagicAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_IssueMagicAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMagicAuthTokens(ctx context.Context, in *ListMagicAuthTokensRequest, opts ...grpc.CallOption) (*ListMagicAuthTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMagicAuthTokensResponse)
	err := c.cc.Invoke(ctx, AdminService_ListMagicAuthTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCurrentMagicAuthToken(ctx context.Context, in *GetCurrentMagicAuthTokenRequest, opts ...grpc.CallOption) (*GetCurrentMagicAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentMagicAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCurrentMagicAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RevokeMagicAuthToken(ctx context.Context, in *RevokeMagicAuthTokenRequest, opts ...grpc.CallOption) (*RevokeMagicAuthTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeMagicAuthTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_RevokeMagicAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPreferencesResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookmarksResponse)
	err := c.cc.Invoke(ctx, AdminService_ListBookmarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBookmark(ctx context.Context, in *GetBookmarkRequest, opts ...grpc.CallOption) (*GetBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookmarkResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookmarkResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateBookmark(ctx context.Context, in *UpdateBookmarkRequest, opts ...grpc.CallOption) (*UpdateBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookmarkResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*RemoveBookmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBookmarkResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRepoMeta(ctx context.Context, in *GetRepoMetaRequest, opts ...grpc.CallOption) (*GetRepoMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepoMetaResponse)
	err := c.cc.Invoke(ctx, AdminService_GetRepoMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PullVirtualRepo(ctx context.Context, in *PullVirtualRepoRequest, opts ...grpc.CallOption) (*PullVirtualRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullVirtualRepoResponse)
	err := c.cc.Invoke(ctx, AdminService_PullVirtualRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetReportMeta(ctx context.Context, in *GetReportMetaRequest, opts ...grpc.CallOption) (*GetReportMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportMetaResponse)
	err := c.cc.Invoke(ctx, AdminService_GetReportMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAlertMeta(ctx context.Context, in *GetAlertMetaRequest, opts ...grpc.CallOption) (*GetAlertMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertMetaResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAlertMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditReport(ctx context.Context, in *EditReportRequest, opts ...grpc.CallOption) (*EditReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditReportResponse)
	err := c.cc.Invoke(ctx, AdminService_EditReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnsubscribeReport(ctx context.Context, in *UnsubscribeReportRequest, opts ...grpc.CallOption) (*UnsubscribeReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeReportResponse)
	err := c.cc.Invoke(ctx, AdminService_UnsubscribeReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReportResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TriggerReport(ctx context.Context, in *TriggerReportRequest, opts ...grpc.CallOption) (*TriggerReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerReportResponse)
	err := c.cc.Invoke(ctx, AdminService_TriggerReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GenerateReportYAML(ctx context.Context, in *GenerateReportYAMLRequest, opts ...grpc.CallOption) (*GenerateReportYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateReportYAMLResponse)
	err := c.cc.Invoke(ctx, AdminService_GenerateReportYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditAlert(ctx context.Context, in *EditAlertRequest, opts ...grpc.CallOption) (*EditAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditAlertResponse)
	err := c.cc.Invoke(ctx, AdminService_EditAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnsubscribeAlert(ctx context.Context, in *UnsubscribeAlertRequest, opts ...grpc.CallOption) (*UnsubscribeAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeAlertResponse)
	err := c.cc.Invoke(ctx, AdminService_UnsubscribeAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GenerateAlertYAML(ctx context.Context, in *GenerateAlertYAMLRequest, opts ...grpc.CallOption) (*GenerateAlertYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAlertYAMLResponse)
	err := c.cc.Invoke(ctx, AdminService_GenerateAlertYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAlertYAML(ctx context.Context, in *GetAlertYAMLRequest, opts ...grpc.CallOption) (*GetAlertYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertYAMLResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAlertYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBillingSubscription(ctx context.Context, in *GetBillingSubscriptionRequest, opts ...grpc.CallOption) (*GetBillingSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingSubscriptionResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBillingSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateBillingSubscription(ctx context.Context, in *UpdateBillingSubscriptionRequest, opts ...grpc.CallOption) (*UpdateBillingSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBillingSubscriptionResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateBillingSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CancelBillingSubscription(ctx context.Context, in *CancelBillingSubscriptionRequest, opts ...grpc.CallOption) (*CancelBillingSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBillingSubscriptionResponse)
	err := c.cc.Invoke(ctx, AdminService_CancelBillingSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RenewBillingSubscription(ctx context.Context, in *RenewBillingSubscriptionRequest, opts ...grpc.CallOption) (*RenewBillingSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewBillingSubscriptionResponse)
	err := c.cc.Invoke(ctx, AdminService_RenewBillingSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPaymentsPortalURL(ctx context.Context, in *GetPaymentsPortalURLRequest, opts ...grpc.CallOption) (*GetPaymentsPortalURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentsPortalURLResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPaymentsPortalURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPublicBillingPlans(ctx context.Context, in *ListPublicBillingPlansRequest, opts ...grpc.CallOption) (*ListPublicBillingPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicBillingPlansResponse)
	err := c.cc.Invoke(ctx, AdminService_ListPublicBillingPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBillingProjectCredentials(ctx context.Context, in *GetBillingProjectCredentialsRequest, opts ...grpc.CallOption) (*GetBillingProjectCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingProjectCredentialsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBillingProjectCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RequestProjectAccess(ctx context.Context, in *RequestProjectAccessRequest, opts ...grpc.CallOption) (*RequestProjectAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestProjectAccessResponse)
	err := c.cc.Invoke(ctx, AdminService_RequestProjectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectAccessRequest(ctx context.Context, in *GetProjectAccessRequestRequest, opts ...grpc.CallOption) (*GetProjectAccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectAccessRequestResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProjectAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ApproveProjectAccess(ctx context.Context, in *ApproveProjectAccessRequest, opts ...grpc.CallOption) (*ApproveProjectAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveProjectAccessResponse)
	err := c.cc.Invoke(ctx, AdminService_ApproveProjectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DenyProjectAccess(ctx context.Context, in *DenyProjectAccessRequest, opts ...grpc.CallOption) (*DenyProjectAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DenyProjectAccessResponse)
	err := c.cc.Invoke(ctx, AdminService_DenyProjectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrganizationBillingIssues(ctx context.Context, in *ListOrganizationBillingIssuesRequest, opts ...grpc.CallOption) (*ListOrganizationBillingIssuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationBillingIssuesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrganizationBillingIssues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	// Ping returns information about the server
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// ListOrganizations lists all the organizations currently managed by the admin
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// GetOrganization returns information about a specific organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// GetOrganizationNameForDomain finds the org name for a custom domain.
	// If the application detects it is running on a non-default domain, it can use this to find the org to present.
	// It can be called without being authenticated.
	GetOrganizationNameForDomain(context.Context, *GetOrganizationNameForDomainRequest) (*GetOrganizationNameForDomainResponse, error)
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// DeleteOrganization deletes an organizations
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// UpdateOrganization deletes an organizations
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// ListProjectsForOrganization lists all the projects currently available for given organizations
	ListProjectsForOrganization(context.Context, *ListProjectsForOrganizationRequest) (*ListProjectsForOrganizationResponse, error)
	// GetProject returns information about a specific project
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// GetProject returns information about a specific project
	GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error)
	// SearchProjectNames returns project names matching the pattern
	SearchProjectNames(context.Context, *SearchProjectNamesRequest) (*SearchProjectNamesResponse, error)
	// CreateProject creates a new project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// DeleteProject deletes an project
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// UpdateProject updates a project
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// GetProjectVariables returns project variables.
	GetProjectVariables(context.Context, *GetProjectVariablesRequest) (*GetProjectVariablesResponse, error)
	// UpdateProjectVariables updates variables for a project.
	UpdateProjectVariables(context.Context, *UpdateProjectVariablesRequest) (*UpdateProjectVariablesResponse, error)
	// CreateAsset returns a one time signed URL using which any asset can be uploaded.
	CreateAsset(context.Context, *CreateAssetRequest) (*CreateAssetResponse, error)
	// RedeployProject creates a new production deployment for a project.
	// If the project currently has another production deployment, the old deployment will be deprovisioned.
	// This RPC can be used to redeploy a project that has been hibernated.
	RedeployProject(context.Context, *RedeployProjectRequest) (*RedeployProjectResponse, error)
	// HibernateProject hibernates a project by tearing down its deployments.
	HibernateProject(context.Context, *HibernateProjectRequest) (*HibernateProjectResponse, error)
	// TriggerReconcile triggers reconcile for the project's prod deployment.
	// DEPRECATED: Clients should call CreateTrigger directly on the deployed runtime instead.
	TriggerReconcile(context.Context, *TriggerReconcileRequest) (*TriggerReconcileResponse, error)
	// TriggerRefreshSources refresh the source for production deployment.
	// DEPRECATED: Clients should call CreateTrigger directly on the deployed runtime instead.
	TriggerRefreshSources(context.Context, *TriggerRefreshSourcesRequest) (*TriggerRefreshSourcesResponse, error)
	// TriggerRedeploy is similar to RedeployProject.
	// DEPRECATED: Use RedeployProject instead.
	TriggerRedeploy(context.Context, *TriggerRedeployRequest) (*TriggerRedeployResponse, error)
	// Provision provisions a new resource for a deployment.
	// If an existing resource matches the request, it will be returned without provisioning a new resource.
	Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	// ListOrganizationMemberUsers lists all the org members
	ListOrganizationMemberUsers(context.Context, *ListOrganizationMemberUsersRequest) (*ListOrganizationMemberUsersResponse, error)
	// ListOrganizationInvites lists all the org invites
	ListOrganizationInvites(context.Context, *ListOrganizationInvitesRequest) (*ListOrganizationInvitesResponse, error)
	// AddOrganizationMemberUser adds a user to the organization
	AddOrganizationMemberUser(context.Context, *AddOrganizationMemberUserRequest) (*AddOrganizationMemberUserResponse, error)
	// RemoveOrganizationMemberUser removes member from the organization
	RemoveOrganizationMemberUser(context.Context, *RemoveOrganizationMemberUserRequest) (*RemoveOrganizationMemberUserResponse, error)
	// LeaveOrganization removes the current user from the organization
	LeaveOrganization(context.Context, *LeaveOrganizationRequest) (*LeaveOrganizationResponse, error)
	// SetOrganizationMemberUserRole sets the role for the member
	SetOrganizationMemberUserRole(context.Context, *SetOrganizationMemberUserRoleRequest) (*SetOrganizationMemberUserRoleResponse, error)
	// ListProjectMemberUsers lists all the project members
	ListProjectMemberUsers(context.Context, *ListProjectMemberUsersRequest) (*ListProjectMemberUsersResponse, error)
	// ListProjectInvites lists all the project invites
	ListProjectInvites(context.Context, *ListProjectInvitesRequest) (*ListProjectInvitesResponse, error)
	// AddProjectMemberUser adds a member to the project
	AddProjectMemberUser(context.Context, *AddProjectMemberUserRequest) (*AddProjectMemberUserResponse, error)
	// RemoveProjectMemberUser removes member from the project
	RemoveProjectMemberUser(context.Context, *RemoveProjectMemberUserRequest) (*RemoveProjectMemberUserResponse, error)
	// SetProjectMemberUserRole sets the role for the member
	SetProjectMemberUserRole(context.Context, *SetProjectMemberUserRoleRequest) (*SetProjectMemberUserRoleResponse, error)
	// CreateUsergroup creates a user group in the organization
	CreateUsergroup(context.Context, *CreateUsergroupRequest) (*CreateUsergroupResponse, error)
	// GetUsergroups returns the user group details
	GetUsergroup(context.Context, *GetUsergroupRequest) (*GetUsergroupResponse, error)
	// RenameUsergroup renames the user group
	RenameUsergroup(context.Context, *RenameUsergroupRequest) (*RenameUsergroupResponse, error)
	// EditUsergroup renames the user group
	EditUsergroup(context.Context, *EditUsergroupRequest) (*EditUsergroupResponse, error)
	// ListOrganizationMemberUsergroups lists the org's user groups
	ListOrganizationMemberUsergroups(context.Context, *ListOrganizationMemberUsergroupsRequest) (*ListOrganizationMemberUsergroupsResponse, error)
	// ListProjectMemberUsergroups lists the org's user groups
	ListProjectMemberUsergroups(context.Context, *ListProjectMemberUsergroupsRequest) (*ListProjectMemberUsergroupsResponse, error)
	// DeleteUsergroup deletes the user group from the organization
	DeleteUsergroup(context.Context, *DeleteUsergroupRequest) (*DeleteUsergroupResponse, error)
	// AddOrganizationMemberUsergroupRole adds the role for the user group
	AddOrganizationMemberUsergroup(context.Context, *AddOrganizationMemberUsergroupRequest) (*AddOrganizationMemberUsergroupResponse, error)
	// SetOrganizationMemberUsergroupRole sets the role for the user group
	SetOrganizationMemberUsergroupRole(context.Context, *SetOrganizationMemberUsergroupRoleRequest) (*SetOrganizationMemberUsergroupRoleResponse, error)
	// RemoveOrganizationMemberUsergroup revokes the organization-level role for the user group
	RemoveOrganizationMemberUsergroup(context.Context, *RemoveOrganizationMemberUsergroupRequest) (*RemoveOrganizationMemberUsergroupResponse, error)
	// AddProjectMemberUsergroupRole adds the role for the user group
	AddProjectMemberUsergroup(context.Context, *AddProjectMemberUsergroupRequest) (*AddProjectMemberUsergroupResponse, error)
	// SetProjectMemberUsergroupRole sets the role for the user group
	SetProjectMemberUsergroupRole(context.Context, *SetProjectMemberUsergroupRoleRequest) (*SetProjectMemberUsergroupRoleResponse, error)
	// RemoveProjectMemberUsergroup revokes the project-level role for the user group
	RemoveProjectMemberUsergroup(context.Context, *RemoveProjectMemberUsergroupRequest) (*RemoveProjectMemberUsergroupResponse, error)
	// AddUsergroupMemberUser adds a member to the user group
	AddUsergroupMemberUser(context.Context, *AddUsergroupMemberUserRequest) (*AddUsergroupMemberUserResponse, error)
	// ListUsergroupMemberUsers lists all the user group members
	ListUsergroupMemberUsers(context.Context, *ListUsergroupMemberUsersRequest) (*ListUsergroupMemberUsersResponse, error)
	// RemoveUsergroupMemberUser removes member from the user group
	RemoveUsergroupMemberUser(context.Context, *RemoveUsergroupMemberUserRequest) (*RemoveUsergroupMemberUserResponse, error)
	// GetCurrentUser returns the currently authenticated user (if any)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error)
	// DeleteUser deletes the user from the organization by email
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// IssueRepresentativeAuthToken returns the temporary token for given email
	IssueRepresentativeAuthToken(context.Context, *IssueRepresentativeAuthTokenRequest) (*IssueRepresentativeAuthTokenResponse, error)
	// RevokeCurrentAuthToken revoke the current auth token
	RevokeCurrentAuthToken(context.Context, *RevokeCurrentAuthTokenRequest) (*RevokeCurrentAuthTokenResponse, error)
	// GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
	// If the caller has not granted access to the repository, instructions for granting access are returned.
	GetGithubRepoStatus(context.Context, *GetGithubRepoStatusRequest) (*GetGithubRepoStatusResponse, error)
	// GetGithubUserStatus returns info about a Github user account based on the caller's installations.
	// If we don't have access to user's personal account tokens or it is expired, instructions for granting access are returned.
	GetGithubUserStatus(context.Context, *GetGithubUserStatusRequest) (*GetGithubUserStatusResponse, error)
	ListGithubUserRepos(context.Context, *ListGithubUserReposRequest) (*ListGithubUserReposResponse, error)
	// Connects a rill managed project to github.
	// Replaces the contents of the remote repo with the contents of the project.
	ConnectProjectToGithub(context.Context, *ConnectProjectToGithubRequest) (*ConnectProjectToGithubResponse, error)
	// Converts a project connected to github to a rill managed project.
	// Uploads the current project to assets.
	UploadProjectAssets(context.Context, *UploadProjectAssetsRequest) (*UploadProjectAssetsResponse, error)
	// GetCloneCredentials returns credentials and other details for a project's Git repository or archive path if git repo is not configured.
	GetCloneCredentials(context.Context, *GetCloneCredentialsRequest) (*GetCloneCredentialsResponse, error)
	// CreateWhitelistedDomain adds a domain to the whitelist
	CreateWhitelistedDomain(context.Context, *CreateWhitelistedDomainRequest) (*CreateWhitelistedDomainResponse, error)
	// RemoveWhitelistedDomain removes a domain from the whitelist list
	RemoveWhitelistedDomain(context.Context, *RemoveWhitelistedDomainRequest) (*RemoveWhitelistedDomainResponse, error)
	// ListWhitelistedDomains lists all the whitelisted domains for the organization
	ListWhitelistedDomains(context.Context, *ListWhitelistedDomainsRequest) (*ListWhitelistedDomainsResponse, error)
	// GetUser returns user by email
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUsersByEmail returns users by email
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// SearchProjectUsers returns users who has access to to a project (including org members that have access through a usergroup)
	SearchProjectUsers(context.Context, *SearchProjectUsersRequest) (*SearchProjectUsersResponse, error)
	// ListSuperusers lists all the superusers
	ListSuperusers(context.Context, *ListSuperusersRequest) (*ListSuperusersResponse, error)
	// GetDeploymentCredentials returns runtime info and access token on behalf of a specific user, or alternatively for a raw set of JWT attributes
	GetDeploymentCredentials(context.Context, *GetDeploymentCredentialsRequest) (*GetDeploymentCredentialsResponse, error)
	// GetIFrame returns the iframe URL for the given project
	GetIFrame(context.Context, *GetIFrameRequest) (*GetIFrameResponse, error)
	// SetSuperuser adds/remove a superuser
	SetSuperuser(context.Context, *SetSuperuserRequest) (*SetSuperuserResponse, error)
	// SudoGetResource returns details about a resource by ID lookup
	SudoGetResource(context.Context, *SudoGetResourceRequest) (*SudoGetResourceResponse, error)
	// SudoUpdateUserQuotas update the quotas for users
	SudoUpdateUserQuotas(context.Context, *SudoUpdateUserQuotasRequest) (*SudoUpdateUserQuotasResponse, error)
	// SudoUpdateOrganizationQuotas update the quotas available for orgs
	SudoUpdateOrganizationQuotas(context.Context, *SudoUpdateOrganizationQuotasRequest) (*SudoUpdateOrganizationQuotasResponse, error)
	// SudoUpdateOrganizationBillingCustomer update the billing customer for the organization
	SudoUpdateOrganizationBillingCustomer(context.Context, *SudoUpdateOrganizationBillingCustomerRequest) (*SudoUpdateOrganizationBillingCustomerResponse, error)
	// SudoExtendTrial extends the trial period for an organization
	SudoExtendTrial(context.Context, *SudoExtendTrialRequest) (*SudoExtendTrialResponse, error)
	// SudoUpdateOrganizationCustomDomain updates the custom domain for an organization.
	// It only updates the custom domain in the database, which is used to ensure correct redirects.
	// The DNS records and ingress TLS must be configured separately.
	SudoUpdateOrganizationCustomDomain(context.Context, *SudoUpdateOrganizationCustomDomainRequest) (*SudoUpdateOrganizationCustomDomainResponse, error)
	// SudoUpdateAnnotations endpoint for superusers to update project annotations
	SudoUpdateAnnotations(context.Context, *SudoUpdateAnnotationsRequest) (*SudoUpdateAnnotationsResponse, error)
	// SudoIssueRuntimeManagerToken returns a runtime JWT with full manager permissions for a runtime.
	SudoIssueRuntimeManagerToken(context.Context, *SudoIssueRuntimeManagerTokenRequest) (*SudoIssueRuntimeManagerTokenResponse, error)
	// SudoDeleteOrganizationBillingIssue deletes a billing issue of a type for the organization
	SudoDeleteOrganizationBillingIssue(context.Context, *SudoDeleteOrganizationBillingIssueRequest) (*SudoDeleteOrganizationBillingIssueResponse, error)
	// SudoTriggerBillingRepair triggers billing repair jobs for orgs that doesn't have billing info and puts them on trial
	SudoTriggerBillingRepair(context.Context, *SudoTriggerBillingRepairRequest) (*SudoTriggerBillingRepairResponse, error)
	// CreateProjectWhitelistedDomain adds a domain to the project's whitelisted
	CreateProjectWhitelistedDomain(context.Context, *CreateProjectWhitelistedDomainRequest) (*CreateProjectWhitelistedDomainResponse, error)
	// RemoveProjectWhitelistedDomain removes a domain from the project's whitelisted
	RemoveProjectWhitelistedDomain(context.Context, *RemoveProjectWhitelistedDomainRequest) (*RemoveProjectWhitelistedDomainResponse, error)
	// ListWhitelistedDomains lists all the whitelisted domains of the project
	ListProjectWhitelistedDomains(context.Context, *ListProjectWhitelistedDomainsRequest) (*ListProjectWhitelistedDomainsResponse, error)
	// ListService returns all the services per organization
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// CreateService creates a new service per organization
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	// UpdateService updates a service per organization
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	// DeleteService deletes a service per organization
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	// ListServiceAuthTokens lists all the service auth tokens
	ListServiceAuthTokens(context.Context, *ListServiceAuthTokensRequest) (*ListServiceAuthTokensResponse, error)
	// IssueServiceAuthToken returns the temporary token for given service account
	IssueServiceAuthToken(context.Context, *IssueServiceAuthTokenRequest) (*IssueServiceAuthTokenResponse, error)
	// RevokeServiceAuthToken revoke the service auth token
	RevokeServiceAuthToken(context.Context, *RevokeServiceAuthTokenRequest) (*RevokeServiceAuthTokenResponse, error)
	// IssueMagicAuthToken creates a "magic" auth token that provides limited access to a specific filtered dashboard in a specific project.
	IssueMagicAuthToken(context.Context, *IssueMagicAuthTokenRequest) (*IssueMagicAuthTokenResponse, error)
	// ListMagicAuthTokens lists all the magic auth tokens for a specific project.
	ListMagicAuthTokens(context.Context, *ListMagicAuthTokensRequest) (*ListMagicAuthTokensResponse, error)
	// GetCurrentMagicAuthToken returns information about the current magic auth token.
	GetCurrentMagicAuthToken(context.Context, *GetCurrentMagicAuthTokenRequest) (*GetCurrentMagicAuthTokenResponse, error)
	// RevokeMagicAuthToken revokes a magic auth token.
	RevokeMagicAuthToken(context.Context, *RevokeMagicAuthTokenRequest) (*RevokeMagicAuthTokenResponse, error)
	// UpdateUserPreferences updates the preferences for the user
	UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error)
	// ListBookmarks lists all the bookmarks for the user and global ones for dashboard
	ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error)
	// GetBookmark returns the bookmark for the given user for the given project
	GetBookmark(context.Context, *GetBookmarkRequest) (*GetBookmarkResponse, error)
	// CreateBookmark creates a bookmark for the given user or for all users for the dashboard
	CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error)
	// UpdateBookmark updates a bookmark for the given user for the given project
	UpdateBookmark(context.Context, *UpdateBookmarkRequest) (*UpdateBookmarkResponse, error)
	// RemoveBookmark removes the bookmark for the given user or all users
	RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*RemoveBookmarkResponse, error)
	// GetRepoMeta returns credentials and other metadata for accessing a project's repo
	GetRepoMeta(context.Context, *GetRepoMetaRequest) (*GetRepoMetaResponse, error)
	// PullVirtualRepo fetches files from a project's virtual repo
	PullVirtualRepo(context.Context, *PullVirtualRepoRequest) (*PullVirtualRepoResponse, error)
	// GetReportMeta returns metadata for generating a report. It's currently only called by the report reconciler in the runtime.
	GetReportMeta(context.Context, *GetReportMetaRequest) (*GetReportMetaResponse, error)
	// GetAlertMeta returns metadata for checking an alert. It's currently only called by the alert reconciler in the runtime.
	GetAlertMeta(context.Context, *GetAlertMetaRequest) (*GetAlertMetaResponse, error)
	// CreateReport adds a virtual file for a report, triggers a reconcile, and waits for the report to be added to the runtime catalog
	CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error)
	// EditReport edits a virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be updated in the runtime
	EditReport(context.Context, *EditReportRequest) (*EditReportResponse, error)
	// UnsubscribeReport removes the calling user from a reports recipients list
	UnsubscribeReport(context.Context, *UnsubscribeReportRequest) (*UnsubscribeReportResponse, error)
	// DeleteReport deletes the virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be deleted in the runtime
	DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error)
	// TriggerReport triggers an ad-hoc report run
	TriggerReport(context.Context, *TriggerReportRequest) (*TriggerReportResponse, error)
	// GenerateReportYAML generates YAML for a scheduled report to be copied into a project's Git repository
	GenerateReportYAML(context.Context, *GenerateReportYAMLRequest) (*GenerateReportYAMLResponse, error)
	// CreateAlert adds a virtual file for an alert, triggers a reconcile, and waits for the alert to be added to the runtime catalog
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	// EditAlert edits a virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be updated in the runtime
	EditAlert(context.Context, *EditAlertRequest) (*EditAlertResponse, error)
	// UnsubscribeAlert removes the calling user from a alert's recipients list
	UnsubscribeAlert(context.Context, *UnsubscribeAlertRequest) (*UnsubscribeAlertResponse, error)
	// DeleteAlert deletes the virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be deleted in the runtime
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	// GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
	GenerateAlertYAML(context.Context, *GenerateAlertYAMLRequest) (*GenerateAlertYAMLResponse, error)
	// GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
	GetAlertYAML(context.Context, *GetAlertYAMLRequest) (*GetAlertYAMLResponse, error)
	// GetBillingSubscription lists the subscription for the organization
	GetBillingSubscription(context.Context, *GetBillingSubscriptionRequest) (*GetBillingSubscriptionResponse, error)
	// UpdateBillingSubscription updates the billing plan for the organization
	UpdateBillingSubscription(context.Context, *UpdateBillingSubscriptionRequest) (*UpdateBillingSubscriptionResponse, error)
	// CancelBillingSubscription cancels the billing subscription for the organization
	CancelBillingSubscription(context.Context, *CancelBillingSubscriptionRequest) (*CancelBillingSubscriptionResponse, error)
	// RenewBillingSubscription renews the billing plan for the organization once cancelled
	RenewBillingSubscription(context.Context, *RenewBillingSubscriptionRequest) (*RenewBillingSubscriptionResponse, error)
	// GetPaymentsPortalURL returns the URL for the billing session to collect payment method
	GetPaymentsPortalURL(context.Context, *GetPaymentsPortalURLRequest) (*GetPaymentsPortalURLResponse, error)
	// ListPublicBillingPlans lists all public billing plans
	ListPublicBillingPlans(context.Context, *ListPublicBillingPlansRequest) (*ListPublicBillingPlansResponse, error)
	// GetBillingProjectCredentials returns credentials for the configured cloud metrics project filtered by request organization
	GetBillingProjectCredentials(context.Context, *GetBillingProjectCredentialsRequest) (*GetBillingProjectCredentialsResponse, error)
	RequestProjectAccess(context.Context, *RequestProjectAccessRequest) (*RequestProjectAccessResponse, error)
	GetProjectAccessRequest(context.Context, *GetProjectAccessRequestRequest) (*GetProjectAccessRequestResponse, error)
	ApproveProjectAccess(context.Context, *ApproveProjectAccessRequest) (*ApproveProjectAccessResponse, error)
	DenyProjectAccess(context.Context, *DenyProjectAccessRequest) (*DenyProjectAccessResponse, error)
	// ListOrganizationBillingIssues lists all the billing issues for the organization
	ListOrganizationBillingIssues(context.Context, *ListOrganizationBillingIssuesRequest) (*ListOrganizationBillingIssuesResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedAdminServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedAdminServiceServer) GetOrganizationNameForDomain(context.Context, *GetOrganizationNameForDomainRequest) (*GetOrganizationNameForDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationNameForDomain not implemented")
}
func (UnimplementedAdminServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedAdminServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedAdminServiceServer) ListProjectsForOrganization(context.Context, *ListProjectsForOrganizationRequest) (*ListProjectsForOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsForOrganization not implemented")
}
func (UnimplementedAdminServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedAdminServiceServer) GetProjectByID(context.Context, *GetProjectByIDRequest) (*GetProjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedAdminServiceServer) SearchProjectNames(context.Context, *SearchProjectNamesRequest) (*SearchProjectNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProjectNames not implemented")
}
func (UnimplementedAdminServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedAdminServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedAdminServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedAdminServiceServer) GetProjectVariables(context.Context, *GetProjectVariablesRequest) (*GetProjectVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectVariables not implemented")
}
func (UnimplementedAdminServiceServer) UpdateProjectVariables(context.Context, *UpdateProjectVariablesRequest) (*UpdateProjectVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectVariables not implemented")
}
func (UnimplementedAdminServiceServer) CreateAsset(context.Context, *CreateAssetRequest) (*CreateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedAdminServiceServer) RedeployProject(context.Context, *RedeployProjectRequest) (*RedeployProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeployProject not implemented")
}
func (UnimplementedAdminServiceServer) HibernateProject(context.Context, *HibernateProjectRequest) (*HibernateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HibernateProject not implemented")
}
func (UnimplementedAdminServiceServer) TriggerReconcile(context.Context, *TriggerReconcileRequest) (*TriggerReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReconcile not implemented")
}
func (UnimplementedAdminServiceServer) TriggerRefreshSources(context.Context, *TriggerRefreshSourcesRequest) (*TriggerRefreshSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRefreshSources not implemented")
}
func (UnimplementedAdminServiceServer) TriggerRedeploy(context.Context, *TriggerRedeployRequest) (*TriggerRedeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRedeploy not implemented")
}
func (UnimplementedAdminServiceServer) Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationMemberUsers(context.Context, *ListOrganizationMemberUsersRequest) (*ListOrganizationMemberUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMemberUsers not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationInvites(context.Context, *ListOrganizationInvitesRequest) (*ListOrganizationInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInvites not implemented")
}
func (UnimplementedAdminServiceServer) AddOrganizationMemberUser(context.Context, *AddOrganizationMemberUserRequest) (*AddOrganizationMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) RemoveOrganizationMemberUser(context.Context, *RemoveOrganizationMemberUserRequest) (*RemoveOrganizationMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) LeaveOrganization(context.Context, *LeaveOrganizationRequest) (*LeaveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveOrganization not implemented")
}
func (UnimplementedAdminServiceServer) SetOrganizationMemberUserRole(context.Context, *SetOrganizationMemberUserRoleRequest) (*SetOrganizationMemberUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationMemberUserRole not implemented")
}
func (UnimplementedAdminServiceServer) ListProjectMemberUsers(context.Context, *ListProjectMemberUsersRequest) (*ListProjectMemberUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMemberUsers not implemented")
}
func (UnimplementedAdminServiceServer) ListProjectInvites(context.Context, *ListProjectInvitesRequest) (*ListProjectInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectInvites not implemented")
}
func (UnimplementedAdminServiceServer) AddProjectMemberUser(context.Context, *AddProjectMemberUserRequest) (*AddProjectMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) RemoveProjectMemberUser(context.Context, *RemoveProjectMemberUserRequest) (*RemoveProjectMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) SetProjectMemberUserRole(context.Context, *SetProjectMemberUserRoleRequest) (*SetProjectMemberUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProjectMemberUserRole not implemented")
}
func (UnimplementedAdminServiceServer) CreateUsergroup(context.Context, *CreateUsergroupRequest) (*CreateUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) GetUsergroup(context.Context, *GetUsergroupRequest) (*GetUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) RenameUsergroup(context.Context, *RenameUsergroupRequest) (*RenameUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) EditUsergroup(context.Context, *EditUsergroupRequest) (*EditUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationMemberUsergroups(context.Context, *ListOrganizationMemberUsergroupsRequest) (*ListOrganizationMemberUsergroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMemberUsergroups not implemented")
}
func (UnimplementedAdminServiceServer) ListProjectMemberUsergroups(context.Context, *ListProjectMemberUsergroupsRequest) (*ListProjectMemberUsergroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectMemberUsergroups not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUsergroup(context.Context, *DeleteUsergroupRequest) (*DeleteUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) AddOrganizationMemberUsergroup(context.Context, *AddOrganizationMemberUsergroupRequest) (*AddOrganizationMemberUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationMemberUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) SetOrganizationMemberUsergroupRole(context.Context, *SetOrganizationMemberUsergroupRoleRequest) (*SetOrganizationMemberUsergroupRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationMemberUsergroupRole not implemented")
}
func (UnimplementedAdminServiceServer) RemoveOrganizationMemberUsergroup(context.Context, *RemoveOrganizationMemberUsergroupRequest) (*RemoveOrganizationMemberUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationMemberUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) AddProjectMemberUsergroup(context.Context, *AddProjectMemberUsergroupRequest) (*AddProjectMemberUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectMemberUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) SetProjectMemberUsergroupRole(context.Context, *SetProjectMemberUsergroupRoleRequest) (*SetProjectMemberUsergroupRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProjectMemberUsergroupRole not implemented")
}
func (UnimplementedAdminServiceServer) RemoveProjectMemberUsergroup(context.Context, *RemoveProjectMemberUsergroupRequest) (*RemoveProjectMemberUsergroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectMemberUsergroup not implemented")
}
func (UnimplementedAdminServiceServer) AddUsergroupMemberUser(context.Context, *AddUsergroupMemberUserRequest) (*AddUsergroupMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsergroupMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) ListUsergroupMemberUsers(context.Context, *ListUsergroupMemberUsersRequest) (*ListUsergroupMemberUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsergroupMemberUsers not implemented")
}
func (UnimplementedAdminServiceServer) RemoveUsergroupMemberUser(context.Context, *RemoveUsergroupMemberUserRequest) (*RemoveUsergroupMemberUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsergroupMemberUser not implemented")
}
func (UnimplementedAdminServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) IssueRepresentativeAuthToken(context.Context, *IssueRepresentativeAuthTokenRequest) (*IssueRepresentativeAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueRepresentativeAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) RevokeCurrentAuthToken(context.Context, *RevokeCurrentAuthTokenRequest) (*RevokeCurrentAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCurrentAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) GetGithubRepoStatus(context.Context, *GetGithubRepoStatusRequest) (*GetGithubRepoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubRepoStatus not implemented")
}
func (UnimplementedAdminServiceServer) GetGithubUserStatus(context.Context, *GetGithubUserStatusRequest) (*GetGithubUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubUserStatus not implemented")
}
func (UnimplementedAdminServiceServer) ListGithubUserRepos(context.Context, *ListGithubUserReposRequest) (*ListGithubUserReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubUserRepos not implemented")
}
func (UnimplementedAdminServiceServer) ConnectProjectToGithub(context.Context, *ConnectProjectToGithubRequest) (*ConnectProjectToGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectProjectToGithub not implemented")
}
func (UnimplementedAdminServiceServer) UploadProjectAssets(context.Context, *UploadProjectAssetsRequest) (*UploadProjectAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProjectAssets not implemented")
}
func (UnimplementedAdminServiceServer) GetCloneCredentials(context.Context, *GetCloneCredentialsRequest) (*GetCloneCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloneCredentials not implemented")
}
func (UnimplementedAdminServiceServer) CreateWhitelistedDomain(context.Context, *CreateWhitelistedDomainRequest) (*CreateWhitelistedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhitelistedDomain not implemented")
}
func (UnimplementedAdminServiceServer) RemoveWhitelistedDomain(context.Context, *RemoveWhitelistedDomainRequest) (*RemoveWhitelistedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelistedDomain not implemented")
}
func (UnimplementedAdminServiceServer) ListWhitelistedDomains(context.Context, *ListWhitelistedDomainsRequest) (*ListWhitelistedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhitelistedDomains not implemented")
}
func (UnimplementedAdminServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAdminServiceServer) SearchProjectUsers(context.Context, *SearchProjectUsersRequest) (*SearchProjectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProjectUsers not implemented")
}
func (UnimplementedAdminServiceServer) ListSuperusers(context.Context, *ListSuperusersRequest) (*ListSuperusersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuperusers not implemented")
}
func (UnimplementedAdminServiceServer) GetDeploymentCredentials(context.Context, *GetDeploymentCredentialsRequest) (*GetDeploymentCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentCredentials not implemented")
}
func (UnimplementedAdminServiceServer) GetIFrame(context.Context, *GetIFrameRequest) (*GetIFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIFrame not implemented")
}
func (UnimplementedAdminServiceServer) SetSuperuser(context.Context, *SetSuperuserRequest) (*SetSuperuserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuperuser not implemented")
}
func (UnimplementedAdminServiceServer) SudoGetResource(context.Context, *SudoGetResourceRequest) (*SudoGetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoGetResource not implemented")
}
func (UnimplementedAdminServiceServer) SudoUpdateUserQuotas(context.Context, *SudoUpdateUserQuotasRequest) (*SudoUpdateUserQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoUpdateUserQuotas not implemented")
}
func (UnimplementedAdminServiceServer) SudoUpdateOrganizationQuotas(context.Context, *SudoUpdateOrganizationQuotasRequest) (*SudoUpdateOrganizationQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoUpdateOrganizationQuotas not implemented")
}
func (UnimplementedAdminServiceServer) SudoUpdateOrganizationBillingCustomer(context.Context, *SudoUpdateOrganizationBillingCustomerRequest) (*SudoUpdateOrganizationBillingCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoUpdateOrganizationBillingCustomer not implemented")
}
func (UnimplementedAdminServiceServer) SudoExtendTrial(context.Context, *SudoExtendTrialRequest) (*SudoExtendTrialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoExtendTrial not implemented")
}
func (UnimplementedAdminServiceServer) SudoUpdateOrganizationCustomDomain(context.Context, *SudoUpdateOrganizationCustomDomainRequest) (*SudoUpdateOrganizationCustomDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoUpdateOrganizationCustomDomain not implemented")
}
func (UnimplementedAdminServiceServer) SudoUpdateAnnotations(context.Context, *SudoUpdateAnnotationsRequest) (*SudoUpdateAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoUpdateAnnotations not implemented")
}
func (UnimplementedAdminServiceServer) SudoIssueRuntimeManagerToken(context.Context, *SudoIssueRuntimeManagerTokenRequest) (*SudoIssueRuntimeManagerTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoIssueRuntimeManagerToken not implemented")
}
func (UnimplementedAdminServiceServer) SudoDeleteOrganizationBillingIssue(context.Context, *SudoDeleteOrganizationBillingIssueRequest) (*SudoDeleteOrganizationBillingIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoDeleteOrganizationBillingIssue not implemented")
}
func (UnimplementedAdminServiceServer) SudoTriggerBillingRepair(context.Context, *SudoTriggerBillingRepairRequest) (*SudoTriggerBillingRepairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoTriggerBillingRepair not implemented")
}
func (UnimplementedAdminServiceServer) CreateProjectWhitelistedDomain(context.Context, *CreateProjectWhitelistedDomainRequest) (*CreateProjectWhitelistedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectWhitelistedDomain not implemented")
}
func (UnimplementedAdminServiceServer) RemoveProjectWhitelistedDomain(context.Context, *RemoveProjectWhitelistedDomainRequest) (*RemoveProjectWhitelistedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectWhitelistedDomain not implemented")
}
func (UnimplementedAdminServiceServer) ListProjectWhitelistedDomains(context.Context, *ListProjectWhitelistedDomainsRequest) (*ListProjectWhitelistedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectWhitelistedDomains not implemented")
}
func (UnimplementedAdminServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedAdminServiceServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedAdminServiceServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedAdminServiceServer) DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedAdminServiceServer) ListServiceAuthTokens(context.Context, *ListServiceAuthTokensRequest) (*ListServiceAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAuthTokens not implemented")
}
func (UnimplementedAdminServiceServer) IssueServiceAuthToken(context.Context, *IssueServiceAuthTokenRequest) (*IssueServiceAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueServiceAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) RevokeServiceAuthToken(context.Context, *RevokeServiceAuthTokenRequest) (*RevokeServiceAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeServiceAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) IssueMagicAuthToken(context.Context, *IssueMagicAuthTokenRequest) (*IssueMagicAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueMagicAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) ListMagicAuthTokens(context.Context, *ListMagicAuthTokensRequest) (*ListMagicAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMagicAuthTokens not implemented")
}
func (UnimplementedAdminServiceServer) GetCurrentMagicAuthToken(context.Context, *GetCurrentMagicAuthTokenRequest) (*GetCurrentMagicAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMagicAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) RevokeMagicAuthToken(context.Context, *RevokeMagicAuthTokenRequest) (*RevokeMagicAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeMagicAuthToken not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPreferences not implemented")
}
func (UnimplementedAdminServiceServer) ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarks not implemented")
}
func (UnimplementedAdminServiceServer) GetBookmark(context.Context, *GetBookmarkRequest) (*GetBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmark not implemented")
}
func (UnimplementedAdminServiceServer) CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookmark not implemented")
}
func (UnimplementedAdminServiceServer) UpdateBookmark(context.Context, *UpdateBookmarkRequest) (*UpdateBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookmark not implemented")
}
func (UnimplementedAdminServiceServer) RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*RemoveBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBookmark not implemented")
}
func (UnimplementedAdminServiceServer) GetRepoMeta(context.Context, *GetRepoMetaRequest) (*GetRepoMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoMeta not implemented")
}
func (UnimplementedAdminServiceServer) PullVirtualRepo(context.Context, *PullVirtualRepoRequest) (*PullVirtualRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullVirtualRepo not implemented")
}
func (UnimplementedAdminServiceServer) GetReportMeta(context.Context, *GetReportMetaRequest) (*GetReportMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportMeta not implemented")
}
func (UnimplementedAdminServiceServer) GetAlertMeta(context.Context, *GetAlertMetaRequest) (*GetAlertMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertMeta not implemented")
}
func (UnimplementedAdminServiceServer) CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedAdminServiceServer) EditReport(context.Context, *EditReportRequest) (*EditReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditReport not implemented")
}
func (UnimplementedAdminServiceServer) UnsubscribeReport(context.Context, *UnsubscribeReportRequest) (*UnsubscribeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeReport not implemented")
}
func (UnimplementedAdminServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (UnimplementedAdminServiceServer) TriggerReport(context.Context, *TriggerReportRequest) (*TriggerReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReport not implemented")
}
func (UnimplementedAdminServiceServer) GenerateReportYAML(context.Context, *GenerateReportYAMLRequest) (*GenerateReportYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReportYAML not implemented")
}
func (UnimplementedAdminServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedAdminServiceServer) EditAlert(context.Context, *EditAlertRequest) (*EditAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAlert not implemented")
}
func (UnimplementedAdminServiceServer) UnsubscribeAlert(context.Context, *UnsubscribeAlertRequest) (*UnsubscribeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeAlert not implemented")
}
func (UnimplementedAdminServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedAdminServiceServer) GenerateAlertYAML(context.Context, *GenerateAlertYAMLRequest) (*GenerateAlertYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAlertYAML not implemented")
}
func (UnimplementedAdminServiceServer) GetAlertYAML(context.Context, *GetAlertYAMLRequest) (*GetAlertYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertYAML not implemented")
}
func (UnimplementedAdminServiceServer) GetBillingSubscription(context.Context, *GetBillingSubscriptionRequest) (*GetBillingSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSubscription not implemented")
}
func (UnimplementedAdminServiceServer) UpdateBillingSubscription(context.Context, *UpdateBillingSubscriptionRequest) (*UpdateBillingSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingSubscription not implemented")
}
func (UnimplementedAdminServiceServer) CancelBillingSubscription(context.Context, *CancelBillingSubscriptionRequest) (*CancelBillingSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBillingSubscription not implemented")
}
func (UnimplementedAdminServiceServer) RenewBillingSubscription(context.Context, *RenewBillingSubscriptionRequest) (*RenewBillingSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewBillingSubscription not implemented")
}
func (UnimplementedAdminServiceServer) GetPaymentsPortalURL(context.Context, *GetPaymentsPortalURLRequest) (*GetPaymentsPortalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsPortalURL not implemented")
}
func (UnimplementedAdminServiceServer) ListPublicBillingPlans(context.Context, *ListPublicBillingPlansRequest) (*ListPublicBillingPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicBillingPlans not implemented")
}
func (UnimplementedAdminServiceServer) GetBillingProjectCredentials(context.Context, *GetBillingProjectCredentialsRequest) (*GetBillingProjectCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingProjectCredentials not implemented")
}
func (UnimplementedAdminServiceServer) RequestProjectAccess(context.Context, *RequestProjectAccessRequest) (*RequestProjectAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestProjectAccess not implemented")
}
func (UnimplementedAdminServiceServer) GetProjectAccessRequest(context.Context, *GetProjectAccessRequestRequest) (*GetProjectAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAccessRequest not implemented")
}
func (UnimplementedAdminServiceServer) ApproveProjectAccess(context.Context, *ApproveProjectAccessRequest) (*ApproveProjectAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveProjectAccess not implemented")
}
func (UnimplementedAdminServiceServer) DenyProjectAccess(context.Context, *DenyProjectAccessRequest) (*DenyProjectAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyProjectAccess not implemented")
}
func (UnimplementedAdminServiceServer) ListOrganizationBillingIssues(context.Context, *ListOrganizationBillingIssuesRequest) (*ListOrganizationBillingIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationBillingIssues not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrganizationNameForDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationNameForDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrganizationNameForDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOrganizationNameForDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrganizationNameForDomain(ctx, req.(*GetOrganizationNameForDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjectsForOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsForOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjectsForOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProjectsForOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjectsForOrganization(ctx, req.(*ListProjectsForOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProjectByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectByID(ctx, req.(*GetProjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SearchProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SearchProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SearchProjectNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SearchProjectNames(ctx, req.(*SearchProjectNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProjectVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectVariables(ctx, req.(*GetProjectVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProjectVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProjectVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateProjectVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProjectVariables(ctx, req.(*UpdateProjectVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RedeployProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeployProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RedeployProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RedeployProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RedeployProject(ctx, req.(*RedeployProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HibernateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HibernateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HibernateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HibernateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HibernateProject(ctx, req.(*HibernateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TriggerReconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TriggerReconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TriggerReconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TriggerReconcile(ctx, req.(*TriggerReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TriggerRefreshSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRefreshSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TriggerRefreshSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TriggerRefreshSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TriggerRefreshSources(ctx, req.(*TriggerRefreshSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TriggerRedeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRedeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TriggerRedeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TriggerRedeploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TriggerRedeploy(ctx, req.(*TriggerRedeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Provision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Provision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationMemberUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMemberUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationMemberUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationMemberUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationMemberUsers(ctx, req.(*ListOrganizationMemberUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationInvites(ctx, req.(*ListOrganizationInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOrganizationMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOrganizationMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddOrganizationMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOrganizationMemberUser(ctx, req.(*AddOrganizationMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveOrganizationMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveOrganizationMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveOrganizationMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveOrganizationMemberUser(ctx, req.(*RemoveOrganizationMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LeaveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LeaveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_LeaveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LeaveOrganization(ctx, req.(*LeaveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetOrganizationMemberUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationMemberUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetOrganizationMemberUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetOrganizationMemberUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetOrganizationMemberUserRole(ctx, req.(*SetOrganizationMemberUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjectMemberUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMemberUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjectMemberUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProjectMemberUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjectMemberUsers(ctx, req.(*ListProjectMemberUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjectInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjectInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProjectInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjectInvites(ctx, req.(*ListProjectInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddProjectMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddProjectMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddProjectMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddProjectMemberUser(ctx, req.(*AddProjectMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveProjectMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveProjectMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveProjectMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveProjectMemberUser(ctx, req.(*RemoveProjectMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetProjectMemberUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectMemberUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetProjectMemberUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetProjectMemberUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetProjectMemberUserRole(ctx, req.(*SetProjectMemberUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateUsergroup(ctx, req.(*CreateUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUsergroup(ctx, req.(*GetUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RenameUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RenameUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RenameUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RenameUsergroup(ctx, req.(*RenameUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EditUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditUsergroup(ctx, req.(*EditUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationMemberUsergroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMemberUsergroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationMemberUsergroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationMemberUsergroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationMemberUsergroups(ctx, req.(*ListOrganizationMemberUsergroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjectMemberUsergroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectMemberUsergroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjectMemberUsergroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProjectMemberUsergroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjectMemberUsergroups(ctx, req.(*ListProjectMemberUsergroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUsergroup(ctx, req.(*DeleteUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOrganizationMemberUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationMemberUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOrganizationMemberUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddOrganizationMemberUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOrganizationMemberUsergroup(ctx, req.(*AddOrganizationMemberUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetOrganizationMemberUsergroupRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationMemberUsergroupRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetOrganizationMemberUsergroupRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetOrganizationMemberUsergroupRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetOrganizationMemberUsergroupRole(ctx, req.(*SetOrganizationMemberUsergroupRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveOrganizationMemberUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationMemberUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveOrganizationMemberUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveOrganizationMemberUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveOrganizationMemberUsergroup(ctx, req.(*RemoveOrganizationMemberUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddProjectMemberUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectMemberUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddProjectMemberUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddProjectMemberUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddProjectMemberUsergroup(ctx, req.(*AddProjectMemberUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetProjectMemberUsergroupRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectMemberUsergroupRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetProjectMemberUsergroupRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetProjectMemberUsergroupRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetProjectMemberUsergroupRole(ctx, req.(*SetProjectMemberUsergroupRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveProjectMemberUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectMemberUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveProjectMemberUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveProjectMemberUsergroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveProjectMemberUsergroup(ctx, req.(*RemoveProjectMemberUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddUsergroupMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsergroupMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddUsergroupMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddUsergroupMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddUsergroupMemberUser(ctx, req.(*AddUsergroupMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUsergroupMemberUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsergroupMemberUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUsergroupMemberUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUsergroupMemberUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUsergroupMemberUsers(ctx, req.(*ListUsergroupMemberUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveUsergroupMemberUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsergroupMemberUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveUsergroupMemberUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveUsergroupMemberUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveUsergroupMemberUser(ctx, req.(*RemoveUsergroupMemberUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IssueRepresentativeAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRepresentativeAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IssueRepresentativeAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_IssueRepresentativeAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IssueRepresentativeAuthToken(ctx, req.(*IssueRepresentativeAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RevokeCurrentAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCurrentAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RevokeCurrentAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RevokeCurrentAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RevokeCurrentAuthToken(ctx, req.(*RevokeCurrentAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetGithubRepoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubRepoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetGithubRepoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetGithubRepoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetGithubRepoStatus(ctx, req.(*GetGithubRepoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetGithubUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetGithubUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetGithubUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetGithubUserStatus(ctx, req.(*GetGithubUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListGithubUserRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubUserReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListGithubUserRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListGithubUserRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListGithubUserRepos(ctx, req.(*ListGithubUserReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ConnectProjectToGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectProjectToGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ConnectProjectToGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ConnectProjectToGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ConnectProjectToGithub(ctx, req.(*ConnectProjectToGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UploadProjectAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProjectAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UploadProjectAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UploadProjectAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UploadProjectAssets(ctx, req.(*UploadProjectAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCloneCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloneCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCloneCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCloneCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCloneCredentials(ctx, req.(*GetCloneCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWhitelistedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWhitelistedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWhitelistedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateWhitelistedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWhitelistedDomain(ctx, req.(*CreateWhitelistedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveWhitelistedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWhitelistedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveWhitelistedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveWhitelistedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveWhitelistedDomain(ctx, req.(*RemoveWhitelistedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWhitelistedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWhitelistedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWhitelistedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListWhitelistedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWhitelistedDomains(ctx, req.(*ListWhitelistedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SearchProjectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SearchProjectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SearchProjectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SearchProjectUsers(ctx, req.(*SearchProjectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSuperusers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuperusersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSuperusers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListSuperusers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSuperusers(ctx, req.(*ListSuperusersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDeploymentCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDeploymentCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDeploymentCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDeploymentCredentials(ctx, req.(*GetDeploymentCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetIFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetIFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetIFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetIFrame(ctx, req.(*GetIFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetSuperuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSuperuserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetSuperuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetSuperuser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetSuperuser(ctx, req.(*SetSuperuserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoGetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoGetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoGetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoGetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoGetResource(ctx, req.(*SudoGetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoUpdateUserQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoUpdateUserQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoUpdateUserQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoUpdateUserQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoUpdateUserQuotas(ctx, req.(*SudoUpdateUserQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoUpdateOrganizationQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoUpdateOrganizationQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoUpdateOrganizationQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoUpdateOrganizationQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoUpdateOrganizationQuotas(ctx, req.(*SudoUpdateOrganizationQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoUpdateOrganizationBillingCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoUpdateOrganizationBillingCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoUpdateOrganizationBillingCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoUpdateOrganizationBillingCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoUpdateOrganizationBillingCustomer(ctx, req.(*SudoUpdateOrganizationBillingCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoExtendTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoExtendTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoExtendTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoExtendTrial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoExtendTrial(ctx, req.(*SudoExtendTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoUpdateOrganizationCustomDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoUpdateOrganizationCustomDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoUpdateOrganizationCustomDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoUpdateOrganizationCustomDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoUpdateOrganizationCustomDomain(ctx, req.(*SudoUpdateOrganizationCustomDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoUpdateAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoUpdateAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoUpdateAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoUpdateAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoUpdateAnnotations(ctx, req.(*SudoUpdateAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoIssueRuntimeManagerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoIssueRuntimeManagerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoIssueRuntimeManagerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoIssueRuntimeManagerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoIssueRuntimeManagerToken(ctx, req.(*SudoIssueRuntimeManagerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoDeleteOrganizationBillingIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoDeleteOrganizationBillingIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoDeleteOrganizationBillingIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoDeleteOrganizationBillingIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoDeleteOrganizationBillingIssue(ctx, req.(*SudoDeleteOrganizationBillingIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SudoTriggerBillingRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoTriggerBillingRepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SudoTriggerBillingRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SudoTriggerBillingRepair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SudoTriggerBillingRepair(ctx, req.(*SudoTriggerBillingRepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateProjectWhitelistedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectWhitelistedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateProjectWhitelistedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateProjectWhitelistedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateProjectWhitelistedDomain(ctx, req.(*CreateProjectWhitelistedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveProjectWhitelistedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectWhitelistedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveProjectWhitelistedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveProjectWhitelistedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveProjectWhitelistedDomain(ctx, req.(*RemoveProjectWhitelistedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjectWhitelistedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectWhitelistedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjectWhitelistedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProjectWhitelistedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjectWhitelistedDomains(ctx, req.(*ListProjectWhitelistedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListServiceAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListServiceAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListServiceAuthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListServiceAuthTokens(ctx, req.(*ListServiceAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IssueServiceAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueServiceAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IssueServiceAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_IssueServiceAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IssueServiceAuthToken(ctx, req.(*IssueServiceAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RevokeServiceAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeServiceAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RevokeServiceAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RevokeServiceAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RevokeServiceAuthToken(ctx, req.(*RevokeServiceAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IssueMagicAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueMagicAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IssueMagicAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_IssueMagicAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IssueMagicAuthToken(ctx, req.(*IssueMagicAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMagicAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMagicAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMagicAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMagicAuthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMagicAuthTokens(ctx, req.(*ListMagicAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCurrentMagicAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMagicAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCurrentMagicAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCurrentMagicAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCurrentMagicAuthToken(ctx, req.(*GetCurrentMagicAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RevokeMagicAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeMagicAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RevokeMagicAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RevokeMagicAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RevokeMagicAuthToken(ctx, req.(*RevokeMagicAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserPreferences(ctx, req.(*UpdateUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListBookmarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListBookmarks(ctx, req.(*ListBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBookmark(ctx, req.(*GetBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateBookmark(ctx, req.(*CreateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateBookmark(ctx, req.(*UpdateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveBookmark(ctx, req.(*RemoveBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRepoMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRepoMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRepoMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRepoMeta(ctx, req.(*GetRepoMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PullVirtualRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullVirtualRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PullVirtualRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_PullVirtualRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PullVirtualRepo(ctx, req.(*PullVirtualRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetReportMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetReportMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetReportMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetReportMeta(ctx, req.(*GetReportMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAlertMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAlertMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAlertMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAlertMeta(ctx, req.(*GetAlertMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EditReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditReport(ctx, req.(*EditReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnsubscribeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnsubscribeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UnsubscribeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnsubscribeReport(ctx, req.(*UnsubscribeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TriggerReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TriggerReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TriggerReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TriggerReport(ctx, req.(*TriggerReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GenerateReportYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GenerateReportYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GenerateReportYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GenerateReportYAML(ctx, req.(*GenerateReportYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EditAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditAlert(ctx, req.(*EditAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnsubscribeAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnsubscribeAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UnsubscribeAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnsubscribeAlert(ctx, req.(*UnsubscribeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GenerateAlertYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAlertYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GenerateAlertYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GenerateAlertYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GenerateAlertYAML(ctx, req.(*GenerateAlertYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAlertYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAlertYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAlertYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAlertYAML(ctx, req.(*GetAlertYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBillingSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBillingSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBillingSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBillingSubscription(ctx, req.(*GetBillingSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateBillingSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateBillingSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateBillingSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateBillingSubscription(ctx, req.(*UpdateBillingSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CancelBillingSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBillingSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CancelBillingSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CancelBillingSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CancelBillingSubscription(ctx, req.(*CancelBillingSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RenewBillingSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewBillingSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RenewBillingSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RenewBillingSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RenewBillingSubscription(ctx, req.(*RenewBillingSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPaymentsPortalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsPortalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPaymentsPortalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPaymentsPortalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPaymentsPortalURL(ctx, req.(*GetPaymentsPortalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPublicBillingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicBillingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPublicBillingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListPublicBillingPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPublicBillingPlans(ctx, req.(*ListPublicBillingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBillingProjectCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingProjectCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBillingProjectCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBillingProjectCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBillingProjectCredentials(ctx, req.(*GetBillingProjectCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RequestProjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestProjectAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RequestProjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RequestProjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RequestProjectAccess(ctx, req.(*RequestProjectAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProjectAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectAccessRequest(ctx, req.(*GetProjectAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ApproveProjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveProjectAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ApproveProjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ApproveProjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ApproveProjectAccess(ctx, req.(*ApproveProjectAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DenyProjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyProjectAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DenyProjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DenyProjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DenyProjectAccess(ctx, req.(*DenyProjectAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrganizationBillingIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationBillingIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrganizationBillingIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrganizationBillingIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrganizationBillingIssues(ctx, req.(*ListOrganizationBillingIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AdminService_Ping_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _AdminService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _AdminService_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationNameForDomain",
			Handler:    _AdminService_GetOrganizationNameForDomain_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _AdminService_CreateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _AdminService_DeleteOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _AdminService_UpdateOrganization_Handler,
		},
		{
			MethodName: "ListProjectsForOrganization",
			Handler:    _AdminService_ListProjectsForOrganization_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _AdminService_GetProject_Handler,
		},
		{
			MethodName: "GetProjectByID",
			Handler:    _AdminService_GetProjectByID_Handler,
		},
		{
			MethodName: "SearchProjectNames",
			Handler:    _AdminService_SearchProjectNames_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _AdminService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _AdminService_DeleteProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _AdminService_UpdateProject_Handler,
		},
		{
			MethodName: "GetProjectVariables",
			Handler:    _AdminService_GetProjectVariables_Handler,
		},
		{
			MethodName: "UpdateProjectVariables",
			Handler:    _AdminService_UpdateProjectVariables_Handler,
		},
		{
			MethodName: "CreateAsset",
			Handler:    _AdminService_CreateAsset_Handler,
		},
		{
			MethodName: "RedeployProject",
			Handler:    _AdminService_RedeployProject_Handler,
		},
		{
			MethodName: "HibernateProject",
			Handler:    _AdminService_HibernateProject_Handler,
		},
		{
			MethodName: "TriggerReconcile",
			Handler:    _AdminService_TriggerReconcile_Handler,
		},
		{
			MethodName: "TriggerRefreshSources",
			Handler:    _AdminService_TriggerRefreshSources_Handler,
		},
		{
			MethodName: "TriggerRedeploy",
			Handler:    _AdminService_TriggerRedeploy_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _AdminService_Provision_Handler,
		},
		{
			MethodName: "ListOrganizationMemberUsers",
			Handler:    _AdminService_ListOrganizationMemberUsers_Handler,
		},
		{
			MethodName: "ListOrganizationInvites",
			Handler:    _AdminService_ListOrganizationInvites_Handler,
		},
		{
			MethodName: "AddOrganizationMemberUser",
			Handler:    _AdminService_AddOrganizationMemberUser_Handler,
		},
		{
			MethodName: "RemoveOrganizationMemberUser",
			Handler:    _AdminService_RemoveOrganizationMemberUser_Handler,
		},
		{
			MethodName: "LeaveOrganization",
			Handler:    _AdminService_LeaveOrganization_Handler,
		},
		{
			MethodName: "SetOrganizationMemberUserRole",
			Handler:    _AdminService_SetOrganizationMemberUserRole_Handler,
		},
		{
			MethodName: "ListProjectMemberUsers",
			Handler:    _AdminService_ListProjectMemberUsers_Handler,
		},
		{
			MethodName: "ListProjectInvites",
			Handler:    _AdminService_ListProjectInvites_Handler,
		},
		{
			MethodName: "AddProjectMemberUser",
			Handler:    _AdminService_AddProjectMemberUser_Handler,
		},
		{
			MethodName: "RemoveProjectMemberUser",
			Handler:    _AdminService_RemoveProjectMemberUser_Handler,
		},
		{
			MethodName: "SetProjectMemberUserRole",
			Handler:    _AdminService_SetProjectMemberUserRole_Handler,
		},
		{
			MethodName: "CreateUsergroup",
			Handler:    _AdminService_CreateUsergroup_Handler,
		},
		{
			MethodName: "GetUsergroup",
			Handler:    _AdminService_GetUsergroup_Handler,
		},
		{
			MethodName: "RenameUsergroup",
			Handler:    _AdminService_RenameUsergroup_Handler,
		},
		{
			MethodName: "EditUsergroup",
			Handler:    _AdminService_EditUsergroup_Handler,
		},
		{
			MethodName: "ListOrganizationMemberUsergroups",
			Handler:    _AdminService_ListOrganizationMemberUsergroups_Handler,
		},
		{
			MethodName: "ListProjectMemberUsergroups",
			Handler:    _AdminService_ListProjectMemberUsergroups_Handler,
		},
		{
			MethodName: "DeleteUsergroup",
			Handler:    _AdminService_DeleteUsergroup_Handler,
		},
		{
			MethodName: "AddOrganizationMemberUsergroup",
			Handler:    _AdminService_AddOrganizationMemberUsergroup_Handler,
		},
		{
			MethodName: "SetOrganizationMemberUsergroupRole",
			Handler:    _AdminService_SetOrganizationMemberUsergroupRole_Handler,
		},
		{
			MethodName: "RemoveOrganizationMemberUsergroup",
			Handler:    _AdminService_RemoveOrganizationMemberUsergroup_Handler,
		},
		{
			MethodName: "AddProjectMemberUsergroup",
			Handler:    _AdminService_AddProjectMemberUsergroup_Handler,
		},
		{
			MethodName: "SetProjectMemberUsergroupRole",
			Handler:    _AdminService_SetProjectMemberUsergroupRole_Handler,
		},
		{
			MethodName: "RemoveProjectMemberUsergroup",
			Handler:    _AdminService_RemoveProjectMemberUsergroup_Handler,
		},
		{
			MethodName: "AddUsergroupMemberUser",
			Handler:    _AdminService_AddUsergroupMemberUser_Handler,
		},
		{
			MethodName: "ListUsergroupMemberUsers",
			Handler:    _AdminService_ListUsergroupMemberUsers_Handler,
		},
		{
			MethodName: "RemoveUsergroupMemberUser",
			Handler:    _AdminService_RemoveUsergroupMemberUser_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _AdminService_GetCurrentUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminService_DeleteUser_Handler,
		},
		{
			MethodName: "IssueRepresentativeAuthToken",
			Handler:    _AdminService_IssueRepresentativeAuthToken_Handler,
		},
		{
			MethodName: "RevokeCurrentAuthToken",
			Handler:    _AdminService_RevokeCurrentAuthToken_Handler,
		},
		{
			MethodName: "GetGithubRepoStatus",
			Handler:    _AdminService_GetGithubRepoStatus_Handler,
		},
		{
			MethodName: "GetGithubUserStatus",
			Handler:    _AdminService_GetGithubUserStatus_Handler,
		},
		{
			MethodName: "ListGithubUserRepos",
			Handler:    _AdminService_ListGithubUserRepos_Handler,
		},
		{
			MethodName: "ConnectProjectToGithub",
			Handler:    _AdminService_ConnectProjectToGithub_Handler,
		},
		{
			MethodName: "UploadProjectAssets",
			Handler:    _AdminService_UploadProjectAssets_Handler,
		},
		{
			MethodName: "GetCloneCredentials",
			Handler:    _AdminService_GetCloneCredentials_Handler,
		},
		{
			MethodName: "CreateWhitelistedDomain",
			Handler:    _AdminService_CreateWhitelistedDomain_Handler,
		},
		{
			MethodName: "RemoveWhitelistedDomain",
			Handler:    _AdminService_RemoveWhitelistedDomain_Handler,
		},
		{
			MethodName: "ListWhitelistedDomains",
			Handler:    _AdminService_ListWhitelistedDomains_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AdminService_GetUser_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _AdminService_SearchUsers_Handler,
		},
		{
			MethodName: "SearchProjectUsers",
			Handler:    _AdminService_SearchProjectUsers_Handler,
		},
		{
			MethodName: "ListSuperusers",
			Handler:    _AdminService_ListSuperusers_Handler,
		},
		{
			MethodName: "GetDeploymentCredentials",
			Handler:    _AdminService_GetDeploymentCredentials_Handler,
		},
		{
			MethodName: "GetIFrame",
			Handler:    _AdminService_GetIFrame_Handler,
		},
		{
			MethodName: "SetSuperuser",
			Handler:    _AdminService_SetSuperuser_Handler,
		},
		{
			MethodName: "SudoGetResource",
			Handler:    _AdminService_SudoGetResource_Handler,
		},
		{
			MethodName: "SudoUpdateUserQuotas",
			Handler:    _AdminService_SudoUpdateUserQuotas_Handler,
		},
		{
			MethodName: "SudoUpdateOrganizationQuotas",
			Handler:    _AdminService_SudoUpdateOrganizationQuotas_Handler,
		},
		{
			MethodName: "SudoUpdateOrganizationBillingCustomer",
			Handler:    _AdminService_SudoUpdateOrganizationBillingCustomer_Handler,
		},
		{
			MethodName: "SudoExtendTrial",
			Handler:    _AdminService_SudoExtendTrial_Handler,
		},
		{
			MethodName: "SudoUpdateOrganizationCustomDomain",
			Handler:    _AdminService_SudoUpdateOrganizationCustomDomain_Handler,
		},
		{
			MethodName: "SudoUpdateAnnotations",
			Handler:    _AdminService_SudoUpdateAnnotations_Handler,
		},
		{
			MethodName: "SudoIssueRuntimeManagerToken",
			Handler:    _AdminService_SudoIssueRuntimeManagerToken_Handler,
		},
		{
			MethodName: "SudoDeleteOrganizationBillingIssue",
			Handler:    _AdminService_SudoDeleteOrganizationBillingIssue_Handler,
		},
		{
			MethodName: "SudoTriggerBillingRepair",
			Handler:    _AdminService_SudoTriggerBillingRepair_Handler,
		},
		{
			MethodName: "CreateProjectWhitelistedDomain",
			Handler:    _AdminService_CreateProjectWhitelistedDomain_Handler,
		},
		{
			MethodName: "RemoveProjectWhitelistedDomain",
			Handler:    _AdminService_RemoveProjectWhitelistedDomain_Handler,
		},
		{
			MethodName: "ListProjectWhitelistedDomains",
			Handler:    _AdminService_ListProjectWhitelistedDomains_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _AdminService_ListServices_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _AdminService_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _AdminService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _AdminService_DeleteService_Handler,
		},
		{
			MethodName: "ListServiceAuthTokens",
			Handler:    _AdminService_ListServiceAuthTokens_Handler,
		},
		{
			MethodName: "IssueServiceAuthToken",
			Handler:    _AdminService_IssueServiceAuthToken_Handler,
		},
		{
			MethodName: "RevokeServiceAuthToken",
			Handler:    _AdminService_RevokeServiceAuthToken_Handler,
		},
		{
			MethodName: "IssueMagicAuthToken",
			Handler:    _AdminService_IssueMagicAuthToken_Handler,
		},
		{
			MethodName: "ListMagicAuthTokens",
			Handler:    _AdminService_ListMagicAuthTokens_Handler,
		},
		{
			MethodName: "GetCurrentMagicAuthToken",
			Handler:    _AdminService_GetCurrentMagicAuthToken_Handler,
		},
		{
			MethodName: "RevokeMagicAuthToken",
			Handler:    _AdminService_RevokeMagicAuthToken_Handler,
		},
		{
			MethodName: "UpdateUserPreferences",
			Handler:    _AdminService_UpdateUserPreferences_Handler,
		},
		{
			MethodName: "ListBookmarks",
			Handler:    _AdminService_ListBookmarks_Handler,
		},
		{
			MethodName: "GetBookmark",
			Handler:    _AdminService_GetBookmark_Handler,
		},
		{
			MethodName: "CreateBookmark",
			Handler:    _AdminService_CreateBookmark_Handler,
		},
		{
			MethodName: "UpdateBookmark",
			Handler:    _AdminService_UpdateBookmark_Handler,
		},
		{
			MethodName: "RemoveBookmark",
			Handler:    _AdminService_RemoveBookmark_Handler,
		},
		{
			MethodName: "GetRepoMeta",
			Handler:    _AdminService_GetRepoMeta_Handler,
		},
		{
			MethodName: "PullVirtualRepo",
			Handler:    _AdminService_PullVirtualRepo_Handler,
		},
		{
			MethodName: "GetReportMeta",
			Handler:    _AdminService_GetReportMeta_Handler,
		},
		{
			MethodName: "GetAlertMeta",
			Handler:    _AdminService_GetAlertMeta_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _AdminService_CreateReport_Handler,
		},
		{
			MethodName: "EditReport",
			Handler:    _AdminService_EditReport_Handler,
		},
		{
			MethodName: "UnsubscribeReport",
			Handler:    _AdminService_UnsubscribeReport_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _AdminService_DeleteReport_Handler,
		},
		{
			MethodName: "TriggerReport",
			Handler:    _AdminService_TriggerReport_Handler,
		},
		{
			MethodName: "GenerateReportYAML",
			Handler:    _AdminService_GenerateReportYAML_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _AdminService_CreateAlert_Handler,
		},
		{
			MethodName: "EditAlert",
			Handler:    _AdminService_EditAlert_Handler,
		},
		{
			MethodName: "UnsubscribeAlert",
			Handler:    _AdminService_UnsubscribeAlert_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _AdminService_DeleteAlert_Handler,
		},
		{
			MethodName: "GenerateAlertYAML",
			Handler:    _AdminService_GenerateAlertYAML_Handler,
		},
		{
			MethodName: "GetAlertYAML",
			Handler:    _AdminService_GetAlertYAML_Handler,
		},
		{
			MethodName: "GetBillingSubscription",
			Handler:    _AdminService_GetBillingSubscription_Handler,
		},
		{
			MethodName: "UpdateBillingSubscription",
			Handler:    _AdminService_UpdateBillingSubscription_Handler,
		},
		{
			MethodName: "CancelBillingSubscription",
			Handler:    _AdminService_CancelBillingSubscription_Handler,
		},
		{
			MethodName: "RenewBillingSubscription",
			Handler:    _AdminService_RenewBillingSubscription_Handler,
		},
		{
			MethodName: "GetPaymentsPortalURL",
			Handler:    _AdminService_GetPaymentsPortalURL_Handler,
		},
		{
			MethodName: "ListPublicBillingPlans",
			Handler:    _AdminService_ListPublicBillingPlans_Handler,
		},
		{
			MethodName: "GetBillingProjectCredentials",
			Handler:    _AdminService_GetBillingProjectCredentials_Handler,
		},
		{
			MethodName: "RequestProjectAccess",
			Handler:    _AdminService_RequestProjectAccess_Handler,
		},
		{
			MethodName: "GetProjectAccessRequest",
			Handler:    _AdminService_GetProjectAccessRequest_Handler,
		},
		{
			MethodName: "ApproveProjectAccess",
			Handler:    _AdminService_ApproveProjectAccess_Handler,
		},
		{
			MethodName: "DenyProjectAccess",
			Handler:    _AdminService_DenyProjectAccess_Handler,
		},
		{
			MethodName: "ListOrganizationBillingIssues",
			Handler:    _AdminService_ListOrganizationBillingIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rill/admin/v1/api.proto",
}
