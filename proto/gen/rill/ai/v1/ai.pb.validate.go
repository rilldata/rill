// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/ai/v1/ai.proto

package aiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tool with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tool with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ToolMultiError, or nil if none found.
func (m *Tool) ValidateAll() error {
	return m.validate(true)
}

func (m *Tool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for InputSchema

	if len(errors) > 0 {
		return ToolMultiError(errors)
	}

	return nil
}

// ToolMultiError is an error wrapping multiple validation errors returned by
// Tool.ValidateAll() if the designated constraints aren't met.
type ToolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToolMultiError) AllErrors() []error { return m }

// ToolValidationError is the validation error returned by Tool.Validate if the
// designated constraints aren't met.
type ToolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToolValidationError) ErrorName() string { return "ToolValidationError" }

// Error satisfies the builtin error interface
func (e ToolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToolValidationError{}

// Validate checks the field values on ToolCall with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ToolCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToolCall with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ToolCallMultiError, or nil
// if none found.
func (m *ToolCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ToolCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ToolCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ToolCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ToolCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ToolCallMultiError(errors)
	}

	return nil
}

// ToolCallMultiError is an error wrapping multiple validation errors returned
// by ToolCall.ValidateAll() if the designated constraints aren't met.
type ToolCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToolCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToolCallMultiError) AllErrors() []error { return m }

// ToolCallValidationError is the validation error returned by
// ToolCall.Validate if the designated constraints aren't met.
type ToolCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToolCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToolCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToolCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToolCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToolCallValidationError) ErrorName() string { return "ToolCallValidationError" }

// Error satisfies the builtin error interface
func (e ToolCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToolCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToolCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToolCallValidationError{}

// Validate checks the field values on ToolResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ToolResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToolResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ToolResultMultiError, or
// nil if none found.
func (m *ToolResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ToolResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	// no validation rules for IsError

	if len(errors) > 0 {
		return ToolResultMultiError(errors)
	}

	return nil
}

// ToolResultMultiError is an error wrapping multiple validation errors
// returned by ToolResult.ValidateAll() if the designated constraints aren't met.
type ToolResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToolResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToolResultMultiError) AllErrors() []error { return m }

// ToolResultValidationError is the validation error returned by
// ToolResult.Validate if the designated constraints aren't met.
type ToolResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToolResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToolResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToolResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToolResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToolResultValidationError) ErrorName() string { return "ToolResultValidationError" }

// Error satisfies the builtin error interface
func (e ToolResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToolResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToolResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToolResultValidationError{}

// Validate checks the field values on ContentBlock with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContentBlock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContentBlock with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContentBlockMultiError, or
// nil if none found.
func (m *ContentBlock) ValidateAll() error {
	return m.validate(true)
}

func (m *ContentBlock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.BlockType.(type) {
	case *ContentBlock_Text:
		if v == nil {
			err := ContentBlockValidationError{
				field:  "BlockType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Text
	case *ContentBlock_ToolCall:
		if v == nil {
			err := ContentBlockValidationError{
				field:  "BlockType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToolCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentBlockValidationError{
						field:  "ToolCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentBlockValidationError{
						field:  "ToolCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToolCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentBlockValidationError{
					field:  "ToolCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ContentBlock_ToolResult:
		if v == nil {
			err := ContentBlockValidationError{
				field:  "BlockType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToolResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentBlockValidationError{
						field:  "ToolResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentBlockValidationError{
						field:  "ToolResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToolResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentBlockValidationError{
					field:  "ToolResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ContentBlockMultiError(errors)
	}

	return nil
}

// ContentBlockMultiError is an error wrapping multiple validation errors
// returned by ContentBlock.ValidateAll() if the designated constraints aren't met.
type ContentBlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentBlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentBlockMultiError) AllErrors() []error { return m }

// ContentBlockValidationError is the validation error returned by
// ContentBlock.Validate if the designated constraints aren't met.
type ContentBlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentBlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentBlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentBlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentBlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentBlockValidationError) ErrorName() string { return "ContentBlockValidationError" }

// Error satisfies the builtin error interface
func (e ContentBlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContentBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentBlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentBlockValidationError{}

// Validate checks the field values on CompletionMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompletionMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionMessageMultiError, or nil if none found.
func (m *CompletionMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Data

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompletionMessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompletionMessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompletionMessageValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompletionMessageMultiError(errors)
	}

	return nil
}

// CompletionMessageMultiError is an error wrapping multiple validation errors
// returned by CompletionMessage.ValidateAll() if the designated constraints
// aren't met.
type CompletionMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionMessageMultiError) AllErrors() []error { return m }

// CompletionMessageValidationError is the validation error returned by
// CompletionMessage.Validate if the designated constraints aren't met.
type CompletionMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionMessageValidationError) ErrorName() string {
	return "CompletionMessageValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionMessageValidationError{}
