// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: rill/ui/v1/dashboard.proto

package uiv1

import (
	v1 "github.com/rilldata/rill/proto/gen/rill/runtime/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DashboardState_LeaderboardContextColumn int32

const (
	DashboardState_LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED    DashboardState_LeaderboardContextColumn = 0
	DashboardState_LEADERBOARD_CONTEXT_COLUMN_PERCENT        DashboardState_LeaderboardContextColumn = 1
	DashboardState_LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT  DashboardState_LeaderboardContextColumn = 2
	DashboardState_LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE DashboardState_LeaderboardContextColumn = 3
	DashboardState_LEADERBOARD_CONTEXT_COLUMN_HIDDEN         DashboardState_LeaderboardContextColumn = 4
)

// Enum value maps for DashboardState_LeaderboardContextColumn.
var (
	DashboardState_LeaderboardContextColumn_name = map[int32]string{
		0: "LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED",
		1: "LEADERBOARD_CONTEXT_COLUMN_PERCENT",
		2: "LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT",
		3: "LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE",
		4: "LEADERBOARD_CONTEXT_COLUMN_HIDDEN",
	}
	DashboardState_LeaderboardContextColumn_value = map[string]int32{
		"LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED":    0,
		"LEADERBOARD_CONTEXT_COLUMN_PERCENT":        1,
		"LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT":  2,
		"LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE": 3,
		"LEADERBOARD_CONTEXT_COLUMN_HIDDEN":         4,
	}
)

func (x DashboardState_LeaderboardContextColumn) Enum() *DashboardState_LeaderboardContextColumn {
	p := new(DashboardState_LeaderboardContextColumn)
	*p = x
	return p
}

func (x DashboardState_LeaderboardContextColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardState_LeaderboardContextColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_ui_v1_dashboard_proto_enumTypes[0].Descriptor()
}

func (DashboardState_LeaderboardContextColumn) Type() protoreflect.EnumType {
	return &file_rill_ui_v1_dashboard_proto_enumTypes[0]
}

func (x DashboardState_LeaderboardContextColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardState_LeaderboardContextColumn.Descriptor instead.
func (DashboardState_LeaderboardContextColumn) EnumDescriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0, 0}
}

type DashboardState_LeaderboardSortDirection int32

const (
	DashboardState_LEADERBOARD_SORT_DIRECTION_UNSPECIFIED DashboardState_LeaderboardSortDirection = 0
	DashboardState_LEADERBOARD_SORT_DIRECTION_ASCENDING   DashboardState_LeaderboardSortDirection = 1
	DashboardState_LEADERBOARD_SORT_DIRECTION_DESCENDING  DashboardState_LeaderboardSortDirection = 2
)

// Enum value maps for DashboardState_LeaderboardSortDirection.
var (
	DashboardState_LeaderboardSortDirection_name = map[int32]string{
		0: "LEADERBOARD_SORT_DIRECTION_UNSPECIFIED",
		1: "LEADERBOARD_SORT_DIRECTION_ASCENDING",
		2: "LEADERBOARD_SORT_DIRECTION_DESCENDING",
	}
	DashboardState_LeaderboardSortDirection_value = map[string]int32{
		"LEADERBOARD_SORT_DIRECTION_UNSPECIFIED": 0,
		"LEADERBOARD_SORT_DIRECTION_ASCENDING":   1,
		"LEADERBOARD_SORT_DIRECTION_DESCENDING":  2,
	}
)

func (x DashboardState_LeaderboardSortDirection) Enum() *DashboardState_LeaderboardSortDirection {
	p := new(DashboardState_LeaderboardSortDirection)
	*p = x
	return p
}

func (x DashboardState_LeaderboardSortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardState_LeaderboardSortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_ui_v1_dashboard_proto_enumTypes[1].Descriptor()
}

func (DashboardState_LeaderboardSortDirection) Type() protoreflect.EnumType {
	return &file_rill_ui_v1_dashboard_proto_enumTypes[1]
}

func (x DashboardState_LeaderboardSortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardState_LeaderboardSortDirection.Descriptor instead.
func (DashboardState_LeaderboardSortDirection) EnumDescriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0, 1}
}

// *
// SortType is used to determine how to sort the leaderboard
// and dimension detail table, as well as where to place the
// sort arrow.
//
// By default, the leaderboards+table will be sorted by VALUE,
// using the value of the currently selected dashboard measure.
//
// If DELTA_ABSOLUTE or DELTA_PERCENT is selected, the
// leaderboards+table will be sorted by the absolute or percentage
// delta change of the currently selected dashboard measure.
//
// If PERCENT is selected, the table will be sorted by the value
// of the currently selected dashboard measure, which will return
// the same ordering as the percent-of-total sort for measures
// with valid percent-of-total. However, the sort arrow will be
// placed next to the percent-of-total icon.
//
// As of 2023-08, DIMENSION is not implemented, but at that time
// the plan was to only apply DIMENSTION sort to the dimension
// detail table, and not the leaderboards.
type DashboardState_LeaderboardSortType int32

const (
	DashboardState_LEADERBOARD_SORT_TYPE_UNSPECIFIED    DashboardState_LeaderboardSortType = 0
	DashboardState_LEADERBOARD_SORT_TYPE_VALUE          DashboardState_LeaderboardSortType = 1
	DashboardState_LEADERBOARD_SORT_TYPE_DIMENSION      DashboardState_LeaderboardSortType = 2
	DashboardState_LEADERBOARD_SORT_TYPE_PERCENT        DashboardState_LeaderboardSortType = 3
	DashboardState_LEADERBOARD_SORT_TYPE_DELTA_PERCENT  DashboardState_LeaderboardSortType = 4
	DashboardState_LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE DashboardState_LeaderboardSortType = 5
)

// Enum value maps for DashboardState_LeaderboardSortType.
var (
	DashboardState_LeaderboardSortType_name = map[int32]string{
		0: "LEADERBOARD_SORT_TYPE_UNSPECIFIED",
		1: "LEADERBOARD_SORT_TYPE_VALUE",
		2: "LEADERBOARD_SORT_TYPE_DIMENSION",
		3: "LEADERBOARD_SORT_TYPE_PERCENT",
		4: "LEADERBOARD_SORT_TYPE_DELTA_PERCENT",
		5: "LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE",
	}
	DashboardState_LeaderboardSortType_value = map[string]int32{
		"LEADERBOARD_SORT_TYPE_UNSPECIFIED":    0,
		"LEADERBOARD_SORT_TYPE_VALUE":          1,
		"LEADERBOARD_SORT_TYPE_DIMENSION":      2,
		"LEADERBOARD_SORT_TYPE_PERCENT":        3,
		"LEADERBOARD_SORT_TYPE_DELTA_PERCENT":  4,
		"LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE": 5,
	}
)

func (x DashboardState_LeaderboardSortType) Enum() *DashboardState_LeaderboardSortType {
	p := new(DashboardState_LeaderboardSortType)
	*p = x
	return p
}

func (x DashboardState_LeaderboardSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardState_LeaderboardSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_ui_v1_dashboard_proto_enumTypes[2].Descriptor()
}

func (DashboardState_LeaderboardSortType) Type() protoreflect.EnumType {
	return &file_rill_ui_v1_dashboard_proto_enumTypes[2]
}

func (x DashboardState_LeaderboardSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardState_LeaderboardSortType.Descriptor instead.
func (DashboardState_LeaderboardSortType) EnumDescriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0, 2}
}

type DashboardState_PivotTableMode int32

const (
	DashboardState_PIVOT_TABLE_MODE_UNSPECIFIED DashboardState_PivotTableMode = 0
	DashboardState_PIVOT_TABLE_MODE_FLAT        DashboardState_PivotTableMode = 1
	DashboardState_PIVOT_TABLE_MODE_NEST        DashboardState_PivotTableMode = 2
)

// Enum value maps for DashboardState_PivotTableMode.
var (
	DashboardState_PivotTableMode_name = map[int32]string{
		0: "PIVOT_TABLE_MODE_UNSPECIFIED",
		1: "PIVOT_TABLE_MODE_FLAT",
		2: "PIVOT_TABLE_MODE_NEST",
	}
	DashboardState_PivotTableMode_value = map[string]int32{
		"PIVOT_TABLE_MODE_UNSPECIFIED": 0,
		"PIVOT_TABLE_MODE_FLAT":        1,
		"PIVOT_TABLE_MODE_NEST":        2,
	}
)

func (x DashboardState_PivotTableMode) Enum() *DashboardState_PivotTableMode {
	p := new(DashboardState_PivotTableMode)
	*p = x
	return p
}

func (x DashboardState_PivotTableMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardState_PivotTableMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_ui_v1_dashboard_proto_enumTypes[3].Descriptor()
}

func (DashboardState_PivotTableMode) Type() protoreflect.EnumType {
	return &file_rill_ui_v1_dashboard_proto_enumTypes[3]
}

func (x DashboardState_PivotTableMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardState_PivotTableMode.Descriptor instead.
func (DashboardState_PivotTableMode) EnumDescriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0, 3}
}

type DashboardState_ActivePage int32

const (
	DashboardState_ACTIVE_PAGE_UNSPECIFIED             DashboardState_ActivePage = 0
	DashboardState_ACTIVE_PAGE_DEFAULT                 DashboardState_ActivePage = 1
	DashboardState_ACTIVE_PAGE_DIMENSION_TABLE         DashboardState_ActivePage = 2
	DashboardState_ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL DashboardState_ActivePage = 3
	DashboardState_ACTIVE_PAGE_PIVOT                   DashboardState_ActivePage = 4
)

// Enum value maps for DashboardState_ActivePage.
var (
	DashboardState_ActivePage_name = map[int32]string{
		0: "ACTIVE_PAGE_UNSPECIFIED",
		1: "ACTIVE_PAGE_DEFAULT",
		2: "ACTIVE_PAGE_DIMENSION_TABLE",
		3: "ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL",
		4: "ACTIVE_PAGE_PIVOT",
	}
	DashboardState_ActivePage_value = map[string]int32{
		"ACTIVE_PAGE_UNSPECIFIED":             0,
		"ACTIVE_PAGE_DEFAULT":                 1,
		"ACTIVE_PAGE_DIMENSION_TABLE":         2,
		"ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL": 3,
		"ACTIVE_PAGE_PIVOT":                   4,
	}
)

func (x DashboardState_ActivePage) Enum() *DashboardState_ActivePage {
	p := new(DashboardState_ActivePage)
	*p = x
	return p
}

func (x DashboardState_ActivePage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardState_ActivePage) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_ui_v1_dashboard_proto_enumTypes[4].Descriptor()
}

func (DashboardState_ActivePage) Type() protoreflect.EnumType {
	return &file_rill_ui_v1_dashboard_proto_enumTypes[4]
}

func (x DashboardState_ActivePage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardState_ActivePage.Descriptor instead.
func (DashboardState_ActivePage) EnumDescriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0, 4}
}

// DashboardState represents the dashboard as seen by the user
type DashboardState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected time range
	TimeRange *DashboardTimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Dimension filters applied
	Filters *v1.MetricsViewFilter `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	// Expression format for dimension filters
	Where *v1.Expression `protobuf:"bytes,20,opt,name=where,proto3" json:"where,omitempty"`
	// Temporary to differentiate between "select" and "in list" modes. Expression will be replaced with UI specific state in the future.
	DimensionsWithInlistFilter []string `protobuf:"bytes,37,rep,name=dimensions_with_inlist_filter,json=dimensionsWithInlistFilter,proto3" json:"dimensions_with_inlist_filter,omitempty"`
	// Expression format for measure filters
	Having []*DashboardDimensionFilter `protobuf:"bytes,21,rep,name=having,proto3" json:"having,omitempty"`
	// Selected time granularity
	TimeGrain        v1.TimeGrain        `protobuf:"varint,3,opt,name=time_grain,json=timeGrain,proto3,enum=rill.runtime.v1.TimeGrain" json:"time_grain,omitempty"`
	CompareTimeRange *DashboardTimeRange `protobuf:"bytes,4,opt,name=compare_time_range,json=compareTimeRange,proto3" json:"compare_time_range,omitempty"`
	// Determines the active page. This is cleaner than using setting `selected_dimension` or `expanded_measure`
	ActivePage DashboardState_ActivePage `protobuf:"varint,32,opt,name=active_page,json=activePage,proto3,enum=rill.ui.v1.DashboardState_ActivePage" json:"active_page,omitempty"`
	// Selected measure for the leaderboard
	LeaderboardMeasure *string `protobuf:"bytes,5,opt,name=leaderboard_measure,json=leaderboardMeasure,proto3,oneof" json:"leaderboard_measure,omitempty"`
	// Focused dimension
	SelectedDimension  *string `protobuf:"bytes,6,opt,name=selected_dimension,json=selectedDimension,proto3,oneof" json:"selected_dimension,omitempty"`
	ShowTimeComparison *bool   `protobuf:"varint,7,opt,name=show_time_comparison,json=showTimeComparison,proto3,oneof" json:"show_time_comparison,omitempty"`
	// Selected measures and dimensions to be shown
	VisibleMeasures          []string                                 `protobuf:"bytes,8,rep,name=visible_measures,json=visibleMeasures,proto3" json:"visible_measures,omitempty"`
	AllMeasuresVisible       *bool                                    `protobuf:"varint,9,opt,name=all_measures_visible,json=allMeasuresVisible,proto3,oneof" json:"all_measures_visible,omitempty"`
	VisibleDimensions        []string                                 `protobuf:"bytes,10,rep,name=visible_dimensions,json=visibleDimensions,proto3" json:"visible_dimensions,omitempty"`
	AllDimensionsVisible     *bool                                    `protobuf:"varint,11,opt,name=all_dimensions_visible,json=allDimensionsVisible,proto3,oneof" json:"all_dimensions_visible,omitempty"`
	LeaderboardContextColumn *DashboardState_LeaderboardContextColumn `protobuf:"varint,12,opt,name=leaderboard_context_column,json=leaderboardContextColumn,proto3,enum=rill.ui.v1.DashboardState_LeaderboardContextColumn,oneof" json:"leaderboard_context_column,omitempty"`
	// Selected timezone for the dashboard
	SelectedTimezone *string `protobuf:"bytes,13,opt,name=selected_timezone,json=selectedTimezone,proto3,oneof" json:"selected_timezone,omitempty"`
	// Scrub time range
	ScrubRange               *DashboardTimeRange                      `protobuf:"bytes,14,opt,name=scrub_range,json=scrubRange,proto3,oneof" json:"scrub_range,omitempty"`
	LeaderboardSortDirection *DashboardState_LeaderboardSortDirection `protobuf:"varint,15,opt,name=leaderboard_sort_direction,json=leaderboardSortDirection,proto3,enum=rill.ui.v1.DashboardState_LeaderboardSortDirection,oneof" json:"leaderboard_sort_direction,omitempty"`
	LeaderboardSortType      *DashboardState_LeaderboardSortType      `protobuf:"varint,16,opt,name=leaderboard_sort_type,json=leaderboardSortType,proto3,enum=rill.ui.v1.DashboardState_LeaderboardSortType,oneof" json:"leaderboard_sort_type,omitempty"`
	// Deprecated
	LeaderboardMeasureCount              *uint32  `protobuf:"varint,38,opt,name=leaderboard_measure_count,json=leaderboardMeasureCount,proto3,oneof" json:"leaderboard_measure_count,omitempty"`
	LeaderboardMeasures                  []string `protobuf:"bytes,39,rep,name=leaderboard_measures,json=leaderboardMeasures,proto3" json:"leaderboard_measures,omitempty"`
	LeaderboardShowContextForAllMeasures *bool    `protobuf:"varint,40,opt,name=leaderboard_show_context_for_all_measures,json=leaderboardShowContextForAllMeasures,proto3,oneof" json:"leaderboard_show_context_for_all_measures,omitempty"`
	ComparisonDimension                  *string  `protobuf:"bytes,17,opt,name=comparison_dimension,json=comparisonDimension,proto3,oneof" json:"comparison_dimension,omitempty"`
	// Expanded measure for TDD view
	ExpandedMeasure *string `protobuf:"bytes,18,opt,name=expanded_measure,json=expandedMeasure,proto3,oneof" json:"expanded_measure,omitempty"`
	// Pin index for TDD table selected values
	PinIndex *int32 `protobuf:"varint,19,opt,name=pin_index,json=pinIndex,proto3,oneof" json:"pin_index,omitempty"`
	// Type of visualization for TDD view
	ChartType *string `protobuf:"bytes,33,opt,name=chart_type,json=chartType,proto3,oneof" json:"chart_type,omitempty"`
	// These pivot fields are preserved to support backward
	// compatibility with existing URLs
	PivotRowTimeDimensions    []v1.TimeGrain `protobuf:"varint,23,rep,packed,name=pivot_row_time_dimensions,json=pivotRowTimeDimensions,proto3,enum=rill.runtime.v1.TimeGrain" json:"pivot_row_time_dimensions,omitempty"`
	PivotRowDimensions        []string       `protobuf:"bytes,24,rep,name=pivot_row_dimensions,json=pivotRowDimensions,proto3" json:"pivot_row_dimensions,omitempty"`
	PivotColumnTimeDimensions []v1.TimeGrain `protobuf:"varint,25,rep,packed,name=pivot_column_time_dimensions,json=pivotColumnTimeDimensions,proto3,enum=rill.runtime.v1.TimeGrain" json:"pivot_column_time_dimensions,omitempty"`
	PivotColumnDimensions     []string       `protobuf:"bytes,26,rep,name=pivot_column_dimensions,json=pivotColumnDimensions,proto3" json:"pivot_column_dimensions,omitempty"`
	// List of time measures selected for columns
	PivotColumnMeasures []string `protobuf:"bytes,27,rep,name=pivot_column_measures,json=pivotColumnMeasures,proto3" json:"pivot_column_measures,omitempty"`
	// Map of dimensions that are expanded
	PivotExpanded map[string]bool `protobuf:"bytes,28,rep,name=pivot_expanded,json=pivotExpanded,proto3" json:"pivot_expanded,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Sort settings
	PivotSort []*PivotColumnSort `protobuf:"bytes,29,rep,name=pivot_sort,json=pivotSort,proto3" json:"pivot_sort,omitempty"`
	// Pagination data
	PivotColumnPage *int32                         `protobuf:"varint,30,opt,name=pivot_column_page,json=pivotColumnPage,proto3,oneof" json:"pivot_column_page,omitempty"`
	PivotTableMode  *DashboardState_PivotTableMode `protobuf:"varint,31,opt,name=pivot_table_mode,json=pivotTableMode,proto3,enum=rill.ui.v1.DashboardState_PivotTableMode,oneof" json:"pivot_table_mode,omitempty"`
	// Enable comparison for pivot
	PivotEnableComparison *bool `protobuf:"varint,34,opt,name=pivot_enable_comparison,json=pivotEnableComparison,proto3,oneof" json:"pivot_enable_comparison,omitempty"`
	// List of all dimensions selected for rows
	PivotRowAllDimensions []*PivotElement `protobuf:"bytes,35,rep,name=pivot_row_all_dimensions,json=pivotRowAllDimensions,proto3" json:"pivot_row_all_dimensions,omitempty"`
	// List of all dimensions selected for columns
	PivotColumnAllDimensions []*PivotElement `protobuf:"bytes,36,rep,name=pivot_column_all_dimensions,json=pivotColumnAllDimensions,proto3" json:"pivot_column_all_dimensions,omitempty"`
}

func (x *DashboardState) Reset() {
	*x = DashboardState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_ui_v1_dashboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardState) ProtoMessage() {}

func (x *DashboardState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_ui_v1_dashboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardState.ProtoReflect.Descriptor instead.
func (*DashboardState) Descriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *DashboardState) GetTimeRange() *DashboardTimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DashboardState) GetFilters() *v1.MetricsViewFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *DashboardState) GetWhere() *v1.Expression {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *DashboardState) GetDimensionsWithInlistFilter() []string {
	if x != nil {
		return x.DimensionsWithInlistFilter
	}
	return nil
}

func (x *DashboardState) GetHaving() []*DashboardDimensionFilter {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *DashboardState) GetTimeGrain() v1.TimeGrain {
	if x != nil {
		return x.TimeGrain
	}
	return v1.TimeGrain(0)
}

func (x *DashboardState) GetCompareTimeRange() *DashboardTimeRange {
	if x != nil {
		return x.CompareTimeRange
	}
	return nil
}

func (x *DashboardState) GetActivePage() DashboardState_ActivePage {
	if x != nil {
		return x.ActivePage
	}
	return DashboardState_ACTIVE_PAGE_UNSPECIFIED
}

func (x *DashboardState) GetLeaderboardMeasure() string {
	if x != nil && x.LeaderboardMeasure != nil {
		return *x.LeaderboardMeasure
	}
	return ""
}

func (x *DashboardState) GetSelectedDimension() string {
	if x != nil && x.SelectedDimension != nil {
		return *x.SelectedDimension
	}
	return ""
}

func (x *DashboardState) GetShowTimeComparison() bool {
	if x != nil && x.ShowTimeComparison != nil {
		return *x.ShowTimeComparison
	}
	return false
}

func (x *DashboardState) GetVisibleMeasures() []string {
	if x != nil {
		return x.VisibleMeasures
	}
	return nil
}

func (x *DashboardState) GetAllMeasuresVisible() bool {
	if x != nil && x.AllMeasuresVisible != nil {
		return *x.AllMeasuresVisible
	}
	return false
}

func (x *DashboardState) GetVisibleDimensions() []string {
	if x != nil {
		return x.VisibleDimensions
	}
	return nil
}

func (x *DashboardState) GetAllDimensionsVisible() bool {
	if x != nil && x.AllDimensionsVisible != nil {
		return *x.AllDimensionsVisible
	}
	return false
}

func (x *DashboardState) GetLeaderboardContextColumn() DashboardState_LeaderboardContextColumn {
	if x != nil && x.LeaderboardContextColumn != nil {
		return *x.LeaderboardContextColumn
	}
	return DashboardState_LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED
}

func (x *DashboardState) GetSelectedTimezone() string {
	if x != nil && x.SelectedTimezone != nil {
		return *x.SelectedTimezone
	}
	return ""
}

func (x *DashboardState) GetScrubRange() *DashboardTimeRange {
	if x != nil {
		return x.ScrubRange
	}
	return nil
}

func (x *DashboardState) GetLeaderboardSortDirection() DashboardState_LeaderboardSortDirection {
	if x != nil && x.LeaderboardSortDirection != nil {
		return *x.LeaderboardSortDirection
	}
	return DashboardState_LEADERBOARD_SORT_DIRECTION_UNSPECIFIED
}

func (x *DashboardState) GetLeaderboardSortType() DashboardState_LeaderboardSortType {
	if x != nil && x.LeaderboardSortType != nil {
		return *x.LeaderboardSortType
	}
	return DashboardState_LEADERBOARD_SORT_TYPE_UNSPECIFIED
}

func (x *DashboardState) GetLeaderboardMeasureCount() uint32 {
	if x != nil && x.LeaderboardMeasureCount != nil {
		return *x.LeaderboardMeasureCount
	}
	return 0
}

func (x *DashboardState) GetLeaderboardMeasures() []string {
	if x != nil {
		return x.LeaderboardMeasures
	}
	return nil
}

func (x *DashboardState) GetLeaderboardShowContextForAllMeasures() bool {
	if x != nil && x.LeaderboardShowContextForAllMeasures != nil {
		return *x.LeaderboardShowContextForAllMeasures
	}
	return false
}

func (x *DashboardState) GetComparisonDimension() string {
	if x != nil && x.ComparisonDimension != nil {
		return *x.ComparisonDimension
	}
	return ""
}

func (x *DashboardState) GetExpandedMeasure() string {
	if x != nil && x.ExpandedMeasure != nil {
		return *x.ExpandedMeasure
	}
	return ""
}

func (x *DashboardState) GetPinIndex() int32 {
	if x != nil && x.PinIndex != nil {
		return *x.PinIndex
	}
	return 0
}

func (x *DashboardState) GetChartType() string {
	if x != nil && x.ChartType != nil {
		return *x.ChartType
	}
	return ""
}

func (x *DashboardState) GetPivotRowTimeDimensions() []v1.TimeGrain {
	if x != nil {
		return x.PivotRowTimeDimensions
	}
	return nil
}

func (x *DashboardState) GetPivotRowDimensions() []string {
	if x != nil {
		return x.PivotRowDimensions
	}
	return nil
}

func (x *DashboardState) GetPivotColumnTimeDimensions() []v1.TimeGrain {
	if x != nil {
		return x.PivotColumnTimeDimensions
	}
	return nil
}

func (x *DashboardState) GetPivotColumnDimensions() []string {
	if x != nil {
		return x.PivotColumnDimensions
	}
	return nil
}

func (x *DashboardState) GetPivotColumnMeasures() []string {
	if x != nil {
		return x.PivotColumnMeasures
	}
	return nil
}

func (x *DashboardState) GetPivotExpanded() map[string]bool {
	if x != nil {
		return x.PivotExpanded
	}
	return nil
}

func (x *DashboardState) GetPivotSort() []*PivotColumnSort {
	if x != nil {
		return x.PivotSort
	}
	return nil
}

func (x *DashboardState) GetPivotColumnPage() int32 {
	if x != nil && x.PivotColumnPage != nil {
		return *x.PivotColumnPage
	}
	return 0
}

func (x *DashboardState) GetPivotTableMode() DashboardState_PivotTableMode {
	if x != nil && x.PivotTableMode != nil {
		return *x.PivotTableMode
	}
	return DashboardState_PIVOT_TABLE_MODE_UNSPECIFIED
}

func (x *DashboardState) GetPivotEnableComparison() bool {
	if x != nil && x.PivotEnableComparison != nil {
		return *x.PivotEnableComparison
	}
	return false
}

func (x *DashboardState) GetPivotRowAllDimensions() []*PivotElement {
	if x != nil {
		return x.PivotRowAllDimensions
	}
	return nil
}

func (x *DashboardState) GetPivotColumnAllDimensions() []*PivotElement {
	if x != nil {
		return x.PivotColumnAllDimensions
	}
	return nil
}

type DashboardTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	TimeStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_start,json=timeStart,proto3,oneof" json:"time_start,omitempty"`
	TimeEnd   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_end,json=timeEnd,proto3,oneof" json:"time_end,omitempty"`
}

func (x *DashboardTimeRange) Reset() {
	*x = DashboardTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_ui_v1_dashboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardTimeRange) ProtoMessage() {}

func (x *DashboardTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_rill_ui_v1_dashboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardTimeRange.ProtoReflect.Descriptor instead.
func (*DashboardTimeRange) Descriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *DashboardTimeRange) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DashboardTimeRange) GetTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *DashboardTimeRange) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

type DashboardDimensionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Filter *v1.Expression `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *DashboardDimensionFilter) Reset() {
	*x = DashboardDimensionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_ui_v1_dashboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardDimensionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardDimensionFilter) ProtoMessage() {}

func (x *DashboardDimensionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_rill_ui_v1_dashboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardDimensionFilter.ProtoReflect.Descriptor instead.
func (*DashboardDimensionFilter) Descriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *DashboardDimensionFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DashboardDimensionFilter) GetFilter() *v1.Expression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type PivotColumnSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc bool   `protobuf:"varint,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PivotColumnSort) Reset() {
	*x = PivotColumnSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_ui_v1_dashboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotColumnSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotColumnSort) ProtoMessage() {}

func (x *PivotColumnSort) ProtoReflect() protoreflect.Message {
	mi := &file_rill_ui_v1_dashboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotColumnSort.ProtoReflect.Descriptor instead.
func (*PivotColumnSort) Descriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *PivotColumnSort) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *PivotColumnSort) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PivotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Element:
	//
	//	*PivotElement_PivotTimeDimension
	//	*PivotElement_PivotDimension
	Element isPivotElement_Element `protobuf_oneof:"element"`
}

func (x *PivotElement) Reset() {
	*x = PivotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_ui_v1_dashboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotElement) ProtoMessage() {}

func (x *PivotElement) ProtoReflect() protoreflect.Message {
	mi := &file_rill_ui_v1_dashboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotElement.ProtoReflect.Descriptor instead.
func (*PivotElement) Descriptor() ([]byte, []int) {
	return file_rill_ui_v1_dashboard_proto_rawDescGZIP(), []int{4}
}

func (m *PivotElement) GetElement() isPivotElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *PivotElement) GetPivotTimeDimension() v1.TimeGrain {
	if x, ok := x.GetElement().(*PivotElement_PivotTimeDimension); ok {
		return x.PivotTimeDimension
	}
	return v1.TimeGrain(0)
}

func (x *PivotElement) GetPivotDimension() string {
	if x, ok := x.GetElement().(*PivotElement_PivotDimension); ok {
		return x.PivotDimension
	}
	return ""
}

type isPivotElement_Element interface {
	isPivotElement_Element()
}

type PivotElement_PivotTimeDimension struct {
	PivotTimeDimension v1.TimeGrain `protobuf:"varint,1,opt,name=pivot_time_dimension,json=pivotTimeDimension,proto3,enum=rill.runtime.v1.TimeGrain,oneof"`
}

type PivotElement_PivotDimension struct {
	PivotDimension string `protobuf:"bytes,2,opt,name=pivot_dimension,json=pivotDimension,proto3,oneof"`
}

func (*PivotElement_PivotTimeDimension) isPivotElement_Element() {}

func (*PivotElement_PivotDimension) isPivotElement_Element() {}

var File_rill_ui_v1_dashboard_proto protoreflect.FileDescriptor

var file_rill_ui_v1_dashboard_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x75, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x69, 0x6c, 0x6c, 0x2f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x69, 0x6c,
	0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x69, 0x6c, 0x6c,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x1f, 0x0a,
	0x0e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76,
	0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x05, 0x52, 0x18, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x07, 0x52,
	0x0a, 0x73, 0x63, 0x72, 0x75, 0x62, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76,
	0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x18, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x19, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0a, 0x52, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x29, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x24, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x08,
	0x70, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x19, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x16,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x1c, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x19, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10,
	0x52, 0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x10, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x11, 0x52, 0x0e, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x17, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x12, 0x52, 0x15, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x18, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f,
	0x77, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57,
	0x0a, 0x1b, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41, 0x42, 0x53,
	0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x04, 0x22, 0x9b,
	0x01, 0x0a, 0x18, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x4c,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xf8, 0x01, 0x0a,
	0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x54, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x28, 0x0a,
	0x24, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41, 0x42, 0x53,
	0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x05, 0x22, 0x68, 0x0a, 0x0e, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x49, 0x56,
	0x4f, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x49, 0x56, 0x4f, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x49, 0x56, 0x4f, 0x54, 0x10, 0x04, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x72,
	0x75, 0x62, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x2c, 0x0a, 0x2a, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22,
	0xce, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x22, 0x63, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x0c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a,
	0x14, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x9e, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x75, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x69, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x69,
	0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x69, 0x6c,
	0x6c, 0x2f, 0x75, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52,
	0x55, 0x58, 0xaa, 0x02, 0x0a, 0x52, 0x69, 0x6c, 0x6c, 0x2e, 0x55, 0x69, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0a, 0x52, 0x69, 0x6c, 0x6c, 0x5c, 0x55, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x52,
	0x69, 0x6c, 0x6c, 0x5c, 0x55, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x52, 0x69, 0x6c, 0x6c, 0x3a, 0x3a, 0x55, 0x69,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rill_ui_v1_dashboard_proto_rawDescOnce sync.Once
	file_rill_ui_v1_dashboard_proto_rawDescData = file_rill_ui_v1_dashboard_proto_rawDesc
)

func file_rill_ui_v1_dashboard_proto_rawDescGZIP() []byte {
	file_rill_ui_v1_dashboard_proto_rawDescOnce.Do(func() {
		file_rill_ui_v1_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_rill_ui_v1_dashboard_proto_rawDescData)
	})
	return file_rill_ui_v1_dashboard_proto_rawDescData
}

var file_rill_ui_v1_dashboard_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_rill_ui_v1_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rill_ui_v1_dashboard_proto_goTypes = []any{
	(DashboardState_LeaderboardContextColumn)(0), // 0: rill.ui.v1.DashboardState.LeaderboardContextColumn
	(DashboardState_LeaderboardSortDirection)(0), // 1: rill.ui.v1.DashboardState.LeaderboardSortDirection
	(DashboardState_LeaderboardSortType)(0),      // 2: rill.ui.v1.DashboardState.LeaderboardSortType
	(DashboardState_PivotTableMode)(0),           // 3: rill.ui.v1.DashboardState.PivotTableMode
	(DashboardState_ActivePage)(0),               // 4: rill.ui.v1.DashboardState.ActivePage
	(*DashboardState)(nil),                       // 5: rill.ui.v1.DashboardState
	(*DashboardTimeRange)(nil),                   // 6: rill.ui.v1.DashboardTimeRange
	(*DashboardDimensionFilter)(nil),             // 7: rill.ui.v1.DashboardDimensionFilter
	(*PivotColumnSort)(nil),                      // 8: rill.ui.v1.PivotColumnSort
	(*PivotElement)(nil),                         // 9: rill.ui.v1.PivotElement
	nil,                                          // 10: rill.ui.v1.DashboardState.PivotExpandedEntry
	(*v1.MetricsViewFilter)(nil),                 // 11: rill.runtime.v1.MetricsViewFilter
	(*v1.Expression)(nil),                        // 12: rill.runtime.v1.Expression
	(v1.TimeGrain)(0),                            // 13: rill.runtime.v1.TimeGrain
	(*timestamppb.Timestamp)(nil),                // 14: google.protobuf.Timestamp
}
var file_rill_ui_v1_dashboard_proto_depIdxs = []int32{
	6,  // 0: rill.ui.v1.DashboardState.time_range:type_name -> rill.ui.v1.DashboardTimeRange
	11, // 1: rill.ui.v1.DashboardState.filters:type_name -> rill.runtime.v1.MetricsViewFilter
	12, // 2: rill.ui.v1.DashboardState.where:type_name -> rill.runtime.v1.Expression
	7,  // 3: rill.ui.v1.DashboardState.having:type_name -> rill.ui.v1.DashboardDimensionFilter
	13, // 4: rill.ui.v1.DashboardState.time_grain:type_name -> rill.runtime.v1.TimeGrain
	6,  // 5: rill.ui.v1.DashboardState.compare_time_range:type_name -> rill.ui.v1.DashboardTimeRange
	4,  // 6: rill.ui.v1.DashboardState.active_page:type_name -> rill.ui.v1.DashboardState.ActivePage
	0,  // 7: rill.ui.v1.DashboardState.leaderboard_context_column:type_name -> rill.ui.v1.DashboardState.LeaderboardContextColumn
	6,  // 8: rill.ui.v1.DashboardState.scrub_range:type_name -> rill.ui.v1.DashboardTimeRange
	1,  // 9: rill.ui.v1.DashboardState.leaderboard_sort_direction:type_name -> rill.ui.v1.DashboardState.LeaderboardSortDirection
	2,  // 10: rill.ui.v1.DashboardState.leaderboard_sort_type:type_name -> rill.ui.v1.DashboardState.LeaderboardSortType
	13, // 11: rill.ui.v1.DashboardState.pivot_row_time_dimensions:type_name -> rill.runtime.v1.TimeGrain
	13, // 12: rill.ui.v1.DashboardState.pivot_column_time_dimensions:type_name -> rill.runtime.v1.TimeGrain
	10, // 13: rill.ui.v1.DashboardState.pivot_expanded:type_name -> rill.ui.v1.DashboardState.PivotExpandedEntry
	8,  // 14: rill.ui.v1.DashboardState.pivot_sort:type_name -> rill.ui.v1.PivotColumnSort
	3,  // 15: rill.ui.v1.DashboardState.pivot_table_mode:type_name -> rill.ui.v1.DashboardState.PivotTableMode
	9,  // 16: rill.ui.v1.DashboardState.pivot_row_all_dimensions:type_name -> rill.ui.v1.PivotElement
	9,  // 17: rill.ui.v1.DashboardState.pivot_column_all_dimensions:type_name -> rill.ui.v1.PivotElement
	14, // 18: rill.ui.v1.DashboardTimeRange.time_start:type_name -> google.protobuf.Timestamp
	14, // 19: rill.ui.v1.DashboardTimeRange.time_end:type_name -> google.protobuf.Timestamp
	12, // 20: rill.ui.v1.DashboardDimensionFilter.filter:type_name -> rill.runtime.v1.Expression
	13, // 21: rill.ui.v1.PivotElement.pivot_time_dimension:type_name -> rill.runtime.v1.TimeGrain
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_rill_ui_v1_dashboard_proto_init() }
func file_rill_ui_v1_dashboard_proto_init() {
	if File_rill_ui_v1_dashboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rill_ui_v1_dashboard_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_ui_v1_dashboard_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_ui_v1_dashboard_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DashboardDimensionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_ui_v1_dashboard_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PivotColumnSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_ui_v1_dashboard_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PivotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rill_ui_v1_dashboard_proto_msgTypes[0].OneofWrappers = []any{}
	file_rill_ui_v1_dashboard_proto_msgTypes[1].OneofWrappers = []any{}
	file_rill_ui_v1_dashboard_proto_msgTypes[4].OneofWrappers = []any{
		(*PivotElement_PivotTimeDimension)(nil),
		(*PivotElement_PivotDimension)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rill_ui_v1_dashboard_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rill_ui_v1_dashboard_proto_goTypes,
		DependencyIndexes: file_rill_ui_v1_dashboard_proto_depIdxs,
		EnumInfos:         file_rill_ui_v1_dashboard_proto_enumTypes,
		MessageInfos:      file_rill_ui_v1_dashboard_proto_msgTypes,
	}.Build()
	File_rill_ui_v1_dashboard_proto = out.File
	file_rill_ui_v1_dashboard_proto_rawDesc = nil
	file_rill_ui_v1_dashboard_proto_goTypes = nil
	file_rill_ui_v1_dashboard_proto_depIdxs = nil
}
