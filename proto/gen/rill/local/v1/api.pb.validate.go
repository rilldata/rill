// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/local/v1/api.proto

package localv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataRequestMultiError, or nil if none found.
func (m *GetMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMetadataRequestMultiError(errors)
	}

	return nil
}

// GetMetadataRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetadataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataRequestMultiError) AllErrors() []error { return m }

// GetMetadataRequestValidationError is the validation error returned by
// GetMetadataRequest.Validate if the designated constraints aren't met.
type GetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataRequestValidationError) ErrorName() string {
	return "GetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataRequestValidationError{}

// Validate checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataResponseMultiError, or nil if none found.
func (m *GetMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for ProjectPath

	// no validation rules for InstallId

	// no validation rules for UserId

	// no validation rules for Version

	// no validation rules for BuildCommit

	// no validation rules for BuildTime

	// no validation rules for IsDev

	// no validation rules for AnalyticsEnabled

	// no validation rules for Readonly

	// no validation rules for GrpcPort

	// no validation rules for LoginUrl

	// no validation rules for AdminUrl

	if len(errors) > 0 {
		return GetMetadataResponseMultiError(errors)
	}

	return nil
}

// GetMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataResponseMultiError) AllErrors() []error { return m }

// GetMetadataResponseValidationError is the validation error returned by
// GetMetadataResponse.Validate if the designated constraints aren't met.
type GetMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataResponseValidationError) ErrorName() string {
	return "GetMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataResponseValidationError{}

// Validate checks the field values on GetVersionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionRequestMultiError, or nil if none found.
func (m *GetVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVersionRequestMultiError(errors)
	}

	return nil
}

// GetVersionRequestMultiError is an error wrapping multiple validation errors
// returned by GetVersionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionRequestMultiError) AllErrors() []error { return m }

// GetVersionRequestValidationError is the validation error returned by
// GetVersionRequest.Validate if the designated constraints aren't met.
type GetVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionRequestValidationError) ErrorName() string {
	return "GetVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionRequestValidationError{}

// Validate checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionResponseMultiError, or nil if none found.
func (m *GetVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Current

	// no validation rules for Latest

	if len(errors) > 0 {
		return GetVersionResponseMultiError(errors)
	}

	return nil
}

// GetVersionResponseMultiError is an error wrapping multiple validation errors
// returned by GetVersionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionResponseMultiError) AllErrors() []error { return m }

// GetVersionResponseValidationError is the validation error returned by
// GetVersionResponse.Validate if the designated constraints aren't met.
type GetVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionResponseValidationError) ErrorName() string {
	return "GetVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionResponseValidationError{}

// Validate checks the field values on PushToGithubRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushToGithubRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushToGithubRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushToGithubRequestMultiError, or nil if none found.
func (m *PushToGithubRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushToGithubRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Repo

	if len(errors) > 0 {
		return PushToGithubRequestMultiError(errors)
	}

	return nil
}

// PushToGithubRequestMultiError is an error wrapping multiple validation
// errors returned by PushToGithubRequest.ValidateAll() if the designated
// constraints aren't met.
type PushToGithubRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushToGithubRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushToGithubRequestMultiError) AllErrors() []error { return m }

// PushToGithubRequestValidationError is the validation error returned by
// PushToGithubRequest.Validate if the designated constraints aren't met.
type PushToGithubRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushToGithubRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushToGithubRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushToGithubRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushToGithubRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushToGithubRequestValidationError) ErrorName() string {
	return "PushToGithubRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushToGithubRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushToGithubRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushToGithubRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushToGithubRequestValidationError{}

// Validate checks the field values on PushToGithubResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushToGithubResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushToGithubResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushToGithubResponseMultiError, or nil if none found.
func (m *PushToGithubResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushToGithubResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GithubUrl

	// no validation rules for Account

	// no validation rules for Repo

	if len(errors) > 0 {
		return PushToGithubResponseMultiError(errors)
	}

	return nil
}

// PushToGithubResponseMultiError is an error wrapping multiple validation
// errors returned by PushToGithubResponse.ValidateAll() if the designated
// constraints aren't met.
type PushToGithubResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushToGithubResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushToGithubResponseMultiError) AllErrors() []error { return m }

// PushToGithubResponseValidationError is the validation error returned by
// PushToGithubResponse.Validate if the designated constraints aren't met.
type PushToGithubResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushToGithubResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushToGithubResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushToGithubResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushToGithubResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushToGithubResponseValidationError) ErrorName() string {
	return "PushToGithubResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushToGithubResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushToGithubResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushToGithubResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushToGithubResponseValidationError{}

// Validate checks the field values on DeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployProjectRequestMultiError, or nil if none found.
func (m *DeployProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Org

	// no validation rules for ProjectName

	// no validation rules for Upload

	if len(errors) > 0 {
		return DeployProjectRequestMultiError(errors)
	}

	return nil
}

// DeployProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeployProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployProjectRequestMultiError) AllErrors() []error { return m }

// DeployProjectRequestValidationError is the validation error returned by
// DeployProjectRequest.Validate if the designated constraints aren't met.
type DeployProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployProjectRequestValidationError) ErrorName() string {
	return "DeployProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployProjectRequestValidationError{}

// Validate checks the field values on DeployProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployProjectResponseMultiError, or nil if none found.
func (m *DeployProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeployId

	// no validation rules for Org

	// no validation rules for Project

	// no validation rules for FrontendUrl

	if len(errors) > 0 {
		return DeployProjectResponseMultiError(errors)
	}

	return nil
}

// DeployProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeployProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeployProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployProjectResponseMultiError) AllErrors() []error { return m }

// DeployProjectResponseValidationError is the validation error returned by
// DeployProjectResponse.Validate if the designated constraints aren't met.
type DeployProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployProjectResponseValidationError) ErrorName() string {
	return "DeployProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployProjectResponseValidationError{}

// Validate checks the field values on RedeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeployProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeployProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeployProjectRequestMultiError, or nil if none found.
func (m *RedeployProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeployProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Reupload

	if len(errors) > 0 {
		return RedeployProjectRequestMultiError(errors)
	}

	return nil
}

// RedeployProjectRequestMultiError is an error wrapping multiple validation
// errors returned by RedeployProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type RedeployProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeployProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeployProjectRequestMultiError) AllErrors() []error { return m }

// RedeployProjectRequestValidationError is the validation error returned by
// RedeployProjectRequest.Validate if the designated constraints aren't met.
type RedeployProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeployProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeployProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeployProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeployProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeployProjectRequestValidationError) ErrorName() string {
	return "RedeployProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RedeployProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeployProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeployProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeployProjectRequestValidationError{}

// Validate checks the field values on RedeployProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeployProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeployProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeployProjectResponseMultiError, or nil if none found.
func (m *RedeployProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeployProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrontendUrl

	if len(errors) > 0 {
		return RedeployProjectResponseMultiError(errors)
	}

	return nil
}

// RedeployProjectResponseMultiError is an error wrapping multiple validation
// errors returned by RedeployProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type RedeployProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeployProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeployProjectResponseMultiError) AllErrors() []error { return m }

// RedeployProjectResponseValidationError is the validation error returned by
// RedeployProjectResponse.Validate if the designated constraints aren't met.
type RedeployProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeployProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeployProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeployProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeployProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeployProjectResponseValidationError) ErrorName() string {
	return "RedeployProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RedeployProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeployProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeployProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeployProjectResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsRepresentingUser

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on GetCurrentProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentProjectRequestMultiError, or nil if none found.
func (m *GetCurrentProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentProjectRequestMultiError(errors)
	}

	return nil
}

// GetCurrentProjectRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentProjectRequestMultiError) AllErrors() []error { return m }

// GetCurrentProjectRequestValidationError is the validation error returned by
// GetCurrentProjectRequest.Validate if the designated constraints aren't met.
type GetCurrentProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentProjectRequestValidationError) ErrorName() string {
	return "GetCurrentProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentProjectRequestValidationError{}

// Validate checks the field values on GetCurrentProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentProjectResponseMultiError, or nil if none found.
func (m *GetCurrentProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocalProjectName

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentProjectResponseMultiError(errors)
	}

	return nil
}

// GetCurrentProjectResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentProjectResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCurrentProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentProjectResponseMultiError) AllErrors() []error { return m }

// GetCurrentProjectResponseValidationError is the validation error returned by
// GetCurrentProjectResponse.Validate if the designated constraints aren't met.
type GetCurrentProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentProjectResponseValidationError) ErrorName() string {
	return "GetCurrentProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentProjectResponseValidationError{}

// Validate checks the field values on
// ListOrganizationsAndBillingMetadataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsAndBillingMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationsAndBillingMetadataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOrganizationsAndBillingMetadataRequestMultiError, or nil if none found.
func (m *ListOrganizationsAndBillingMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsAndBillingMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrganizationsAndBillingMetadataRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsAndBillingMetadataRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationsAndBillingMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsAndBillingMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsAndBillingMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsAndBillingMetadataRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsAndBillingMetadataRequestValidationError is the validation
// error returned by ListOrganizationsAndBillingMetadataRequest.Validate if
// the designated constraints aren't met.
type ListOrganizationsAndBillingMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsAndBillingMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsAndBillingMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsAndBillingMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsAndBillingMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsAndBillingMetadataRequestValidationError) ErrorName() string {
	return "ListOrganizationsAndBillingMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsAndBillingMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsAndBillingMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsAndBillingMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsAndBillingMetadataRequestValidationError{}

// Validate checks the field values on
// ListOrganizationsAndBillingMetadataResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsAndBillingMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationsAndBillingMetadataResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOrganizationsAndBillingMetadataResponseMultiError, or nil if none found.
func (m *ListOrganizationsAndBillingMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsAndBillingMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsAndBillingMetadataResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsAndBillingMetadataResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsAndBillingMetadataResponseValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsAndBillingMetadataResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsAndBillingMetadataResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationsAndBillingMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsAndBillingMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsAndBillingMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsAndBillingMetadataResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsAndBillingMetadataResponseValidationError is the validation
// error returned by ListOrganizationsAndBillingMetadataResponse.Validate if
// the designated constraints aren't met.
type ListOrganizationsAndBillingMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsAndBillingMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsAndBillingMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsAndBillingMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsAndBillingMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsAndBillingMetadataResponseValidationError) ErrorName() string {
	return "ListOrganizationsAndBillingMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsAndBillingMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsAndBillingMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsAndBillingMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsAndBillingMetadataResponseValidationError{}

// Validate checks the field values on
// ListOrganizationsAndBillingMetadataResponse_OrgMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsAndBillingMetadataResponse_OrgMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationsAndBillingMetadataResponse_OrgMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError, or nil
// if none found.
func (m *ListOrganizationsAndBillingMetadataResponse_OrgMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsAndBillingMetadataResponse_OrgMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError(errors)
	}

	return nil
}

// ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError is an
// error wrapping multiple validation errors returned by
// ListOrganizationsAndBillingMetadataResponse_OrgMetadata.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsAndBillingMetadataResponse_OrgMetadataMultiError) AllErrors() []error {
	return m
}

// ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError is
// the validation error returned by
// ListOrganizationsAndBillingMetadataResponse_OrgMetadata.Validate if the
// designated constraints aren't met.
type ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) ErrorName() string {
	return "ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsAndBillingMetadataResponse_OrgMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsAndBillingMetadataResponse_OrgMetadataValidationError{}
