// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rill/local/v1/api.proto

package localv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rilldata/rill/proto/gen/rill/local/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocalServiceName is the fully-qualified name of the LocalService service.
	LocalServiceName = "rill.local.v1.LocalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocalServicePingProcedure is the fully-qualified name of the LocalService's Ping RPC.
	LocalServicePingProcedure = "/rill.local.v1.LocalService/Ping"
	// LocalServiceGetMetadataProcedure is the fully-qualified name of the LocalService's GetMetadata
	// RPC.
	LocalServiceGetMetadataProcedure = "/rill.local.v1.LocalService/GetMetadata"
	// LocalServiceGetVersionProcedure is the fully-qualified name of the LocalService's GetVersion RPC.
	LocalServiceGetVersionProcedure = "/rill.local.v1.LocalService/GetVersion"
	// LocalServiceGitStatusProcedure is the fully-qualified name of the LocalService's GitStatus RPC.
	LocalServiceGitStatusProcedure = "/rill.local.v1.LocalService/GitStatus"
	// LocalServiceGithubRepoStatusProcedure is the fully-qualified name of the LocalService's
	// GithubRepoStatus RPC.
	LocalServiceGithubRepoStatusProcedure = "/rill.local.v1.LocalService/GithubRepoStatus"
	// LocalServiceGitPullProcedure is the fully-qualified name of the LocalService's GitPull RPC.
	LocalServiceGitPullProcedure = "/rill.local.v1.LocalService/GitPull"
	// LocalServiceGitPushProcedure is the fully-qualified name of the LocalService's GitPush RPC.
	LocalServiceGitPushProcedure = "/rill.local.v1.LocalService/GitPush"
	// LocalServicePushToGithubProcedure is the fully-qualified name of the LocalService's PushToGithub
	// RPC.
	LocalServicePushToGithubProcedure = "/rill.local.v1.LocalService/PushToGithub"
	// LocalServiceDeployProjectProcedure is the fully-qualified name of the LocalService's
	// DeployProject RPC.
	LocalServiceDeployProjectProcedure = "/rill.local.v1.LocalService/DeployProject"
	// LocalServiceRedeployProjectProcedure is the fully-qualified name of the LocalService's
	// RedeployProject RPC.
	LocalServiceRedeployProjectProcedure = "/rill.local.v1.LocalService/RedeployProject"
	// LocalServiceGetCurrentUserProcedure is the fully-qualified name of the LocalService's
	// GetCurrentUser RPC.
	LocalServiceGetCurrentUserProcedure = "/rill.local.v1.LocalService/GetCurrentUser"
	// LocalServiceGetCurrentProjectProcedure is the fully-qualified name of the LocalService's
	// GetCurrentProject RPC.
	LocalServiceGetCurrentProjectProcedure = "/rill.local.v1.LocalService/GetCurrentProject"
	// LocalServiceListOrganizationsAndBillingMetadataProcedure is the fully-qualified name of the
	// LocalService's ListOrganizationsAndBillingMetadata RPC.
	LocalServiceListOrganizationsAndBillingMetadataProcedure = "/rill.local.v1.LocalService/ListOrganizationsAndBillingMetadata"
	// LocalServiceCreateOrganizationProcedure is the fully-qualified name of the LocalService's
	// CreateOrganization RPC.
	LocalServiceCreateOrganizationProcedure = "/rill.local.v1.LocalService/CreateOrganization"
	// LocalServiceListMatchingProjectsProcedure is the fully-qualified name of the LocalService's
	// ListMatchingProjects RPC.
	LocalServiceListMatchingProjectsProcedure = "/rill.local.v1.LocalService/ListMatchingProjects"
	// LocalServiceListProjectsForOrgProcedure is the fully-qualified name of the LocalService's
	// ListProjectsForOrg RPC.
	LocalServiceListProjectsForOrgProcedure = "/rill.local.v1.LocalService/ListProjectsForOrg"
	// LocalServiceGetProjectProcedure is the fully-qualified name of the LocalService's GetProject RPC.
	LocalServiceGetProjectProcedure = "/rill.local.v1.LocalService/GetProject"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	localServiceServiceDescriptor                                   = v1.File_rill_local_v1_api_proto.Services().ByName("LocalService")
	localServicePingMethodDescriptor                                = localServiceServiceDescriptor.Methods().ByName("Ping")
	localServiceGetMetadataMethodDescriptor                         = localServiceServiceDescriptor.Methods().ByName("GetMetadata")
	localServiceGetVersionMethodDescriptor                          = localServiceServiceDescriptor.Methods().ByName("GetVersion")
	localServiceGitStatusMethodDescriptor                           = localServiceServiceDescriptor.Methods().ByName("GitStatus")
	localServiceGithubRepoStatusMethodDescriptor                    = localServiceServiceDescriptor.Methods().ByName("GithubRepoStatus")
	localServiceGitPullMethodDescriptor                             = localServiceServiceDescriptor.Methods().ByName("GitPull")
	localServiceGitPushMethodDescriptor                             = localServiceServiceDescriptor.Methods().ByName("GitPush")
	localServicePushToGithubMethodDescriptor                        = localServiceServiceDescriptor.Methods().ByName("PushToGithub")
	localServiceDeployProjectMethodDescriptor                       = localServiceServiceDescriptor.Methods().ByName("DeployProject")
	localServiceRedeployProjectMethodDescriptor                     = localServiceServiceDescriptor.Methods().ByName("RedeployProject")
	localServiceGetCurrentUserMethodDescriptor                      = localServiceServiceDescriptor.Methods().ByName("GetCurrentUser")
	localServiceGetCurrentProjectMethodDescriptor                   = localServiceServiceDescriptor.Methods().ByName("GetCurrentProject")
	localServiceListOrganizationsAndBillingMetadataMethodDescriptor = localServiceServiceDescriptor.Methods().ByName("ListOrganizationsAndBillingMetadata")
	localServiceCreateOrganizationMethodDescriptor                  = localServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	localServiceListMatchingProjectsMethodDescriptor                = localServiceServiceDescriptor.Methods().ByName("ListMatchingProjects")
	localServiceListProjectsForOrgMethodDescriptor                  = localServiceServiceDescriptor.Methods().ByName("ListProjectsForOrg")
	localServiceGetProjectMethodDescriptor                          = localServiceServiceDescriptor.Methods().ByName("GetProject")
)

// LocalServiceClient is a client for the rill.local.v1.LocalService service.
type LocalServiceClient interface {
	// Ping returns the current time.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// GetMetadata returns information about the local Rill instance.
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// GetVersion returns details about the current and latest available Rill versions.
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	// GitStatus returns the curren status of the local git repo. This is equivalent to doing a `git fetch` followed by running `git status`.
	GitStatus(context.Context, *connect.Request[v1.GitStatusRequest]) (*connect.Response[v1.GitStatusResponse], error)
	// GithubRepoStatus returns info about a Github user account based on the caller's installations. Forwards to admin API of the same name.
	GithubRepoStatus(context.Context, *connect.Request[v1.GithubRepoStatusRequest]) (*connect.Response[v1.GithubRepoStatusResponse], error)
	// GitPull fetches the latest changes from the remote git repo equivalent to `git pull` command.
	// If there are any merge conflicts the pull is aborted.
	// Force can be set to true to force the pull and overwrite any local changes.
	GitPull(context.Context, *connect.Request[v1.GitPullRequest]) (*connect.Response[v1.GitPullResponse], error)
	// GitPush pushes the local changes to the remote git repo equivalent to `git push` command.
	// The difference between this and PushTiGithub is that this does not create a new repo.
	// It only pushes the changes to the existing remote repo.
	GitPush(context.Context, *connect.Request[v1.GitPushRequest]) (*connect.Response[v1.GitPushResponse], error)
	// PushToGithub create a Git repo from local project and pushed to users git account.
	PushToGithub(context.Context, *connect.Request[v1.PushToGithubRequest]) (*connect.Response[v1.PushToGithubResponse], error)
	// DeployProject deploys the local project to the Rill cloud.
	DeployProject(context.Context, *connect.Request[v1.DeployProjectRequest]) (*connect.Response[v1.DeployProjectResponse], error)
	// RedeployProject updates a deployed project.
	RedeployProject(context.Context, *connect.Request[v1.RedeployProjectRequest]) (*connect.Response[v1.RedeployProjectResponse], error)
	// GetCurrentUser returns the locally logged in user
	GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// GetCurrentProject returns the rill cloud project connected to the local project
	// Deprecated: Use ListMatchingProjects instead.
	GetCurrentProject(context.Context, *connect.Request[v1.GetCurrentProjectRequest]) (*connect.Response[v1.GetCurrentProjectResponse], error)
	// ListOrganizationsAndBillingMetadata returns metadata about the current user's orgs.
	ListOrganizationsAndBillingMetadata(context.Context, *connect.Request[v1.ListOrganizationsAndBillingMetadataRequest]) (*connect.Response[v1.ListOrganizationsAndBillingMetadataResponse], error)
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// ListMatchingProjects returns all remote projects matching the local project name
	ListMatchingProjects(context.Context, *connect.Request[v1.ListMatchingProjectsRequest]) (*connect.Response[v1.ListMatchingProjectsResponse], error)
	// ListProjectsForOrg returns all projects within an org
	ListProjectsForOrg(context.Context, *connect.Request[v1.ListProjectsForOrgRequest]) (*connect.Response[v1.ListProjectsForOrgResponse], error)
	// GetProject returns information about a specific project
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
}

// NewLocalServiceClient constructs a client for the rill.local.v1.LocalService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &localServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+LocalServicePingProcedure,
			connect.WithSchema(localServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMetadata: connect.NewClient[v1.GetMetadataRequest, v1.GetMetadataResponse](
			httpClient,
			baseURL+LocalServiceGetMetadataProcedure,
			connect.WithSchema(localServiceGetMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVersion: connect.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+LocalServiceGetVersionProcedure,
			connect.WithSchema(localServiceGetVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gitStatus: connect.NewClient[v1.GitStatusRequest, v1.GitStatusResponse](
			httpClient,
			baseURL+LocalServiceGitStatusProcedure,
			connect.WithSchema(localServiceGitStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		githubRepoStatus: connect.NewClient[v1.GithubRepoStatusRequest, v1.GithubRepoStatusResponse](
			httpClient,
			baseURL+LocalServiceGithubRepoStatusProcedure,
			connect.WithSchema(localServiceGithubRepoStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gitPull: connect.NewClient[v1.GitPullRequest, v1.GitPullResponse](
			httpClient,
			baseURL+LocalServiceGitPullProcedure,
			connect.WithSchema(localServiceGitPullMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gitPush: connect.NewClient[v1.GitPushRequest, v1.GitPushResponse](
			httpClient,
			baseURL+LocalServiceGitPushProcedure,
			connect.WithSchema(localServiceGitPushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pushToGithub: connect.NewClient[v1.PushToGithubRequest, v1.PushToGithubResponse](
			httpClient,
			baseURL+LocalServicePushToGithubProcedure,
			connect.WithSchema(localServicePushToGithubMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deployProject: connect.NewClient[v1.DeployProjectRequest, v1.DeployProjectResponse](
			httpClient,
			baseURL+LocalServiceDeployProjectProcedure,
			connect.WithSchema(localServiceDeployProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		redeployProject: connect.NewClient[v1.RedeployProjectRequest, v1.RedeployProjectResponse](
			httpClient,
			baseURL+LocalServiceRedeployProjectProcedure,
			connect.WithSchema(localServiceRedeployProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrentUser: connect.NewClient[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse](
			httpClient,
			baseURL+LocalServiceGetCurrentUserProcedure,
			connect.WithSchema(localServiceGetCurrentUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrentProject: connect.NewClient[v1.GetCurrentProjectRequest, v1.GetCurrentProjectResponse](
			httpClient,
			baseURL+LocalServiceGetCurrentProjectProcedure,
			connect.WithSchema(localServiceGetCurrentProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizationsAndBillingMetadata: connect.NewClient[v1.ListOrganizationsAndBillingMetadataRequest, v1.ListOrganizationsAndBillingMetadataResponse](
			httpClient,
			baseURL+LocalServiceListOrganizationsAndBillingMetadataProcedure,
			connect.WithSchema(localServiceListOrganizationsAndBillingMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+LocalServiceCreateOrganizationProcedure,
			connect.WithSchema(localServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMatchingProjects: connect.NewClient[v1.ListMatchingProjectsRequest, v1.ListMatchingProjectsResponse](
			httpClient,
			baseURL+LocalServiceListMatchingProjectsProcedure,
			connect.WithSchema(localServiceListMatchingProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjectsForOrg: connect.NewClient[v1.ListProjectsForOrgRequest, v1.ListProjectsForOrgResponse](
			httpClient,
			baseURL+LocalServiceListProjectsForOrgProcedure,
			connect.WithSchema(localServiceListProjectsForOrgMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+LocalServiceGetProjectProcedure,
			connect.WithSchema(localServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// localServiceClient implements LocalServiceClient.
type localServiceClient struct {
	ping                                *connect.Client[v1.PingRequest, v1.PingResponse]
	getMetadata                         *connect.Client[v1.GetMetadataRequest, v1.GetMetadataResponse]
	getVersion                          *connect.Client[v1.GetVersionRequest, v1.GetVersionResponse]
	gitStatus                           *connect.Client[v1.GitStatusRequest, v1.GitStatusResponse]
	githubRepoStatus                    *connect.Client[v1.GithubRepoStatusRequest, v1.GithubRepoStatusResponse]
	gitPull                             *connect.Client[v1.GitPullRequest, v1.GitPullResponse]
	gitPush                             *connect.Client[v1.GitPushRequest, v1.GitPushResponse]
	pushToGithub                        *connect.Client[v1.PushToGithubRequest, v1.PushToGithubResponse]
	deployProject                       *connect.Client[v1.DeployProjectRequest, v1.DeployProjectResponse]
	redeployProject                     *connect.Client[v1.RedeployProjectRequest, v1.RedeployProjectResponse]
	getCurrentUser                      *connect.Client[v1.GetCurrentUserRequest, v1.GetCurrentUserResponse]
	getCurrentProject                   *connect.Client[v1.GetCurrentProjectRequest, v1.GetCurrentProjectResponse]
	listOrganizationsAndBillingMetadata *connect.Client[v1.ListOrganizationsAndBillingMetadataRequest, v1.ListOrganizationsAndBillingMetadataResponse]
	createOrganization                  *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	listMatchingProjects                *connect.Client[v1.ListMatchingProjectsRequest, v1.ListMatchingProjectsResponse]
	listProjectsForOrg                  *connect.Client[v1.ListProjectsForOrgRequest, v1.ListProjectsForOrgResponse]
	getProject                          *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
}

// Ping calls rill.local.v1.LocalService.Ping.
func (c *localServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetMetadata calls rill.local.v1.LocalService.GetMetadata.
func (c *localServiceClient) GetMetadata(ctx context.Context, req *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// GetVersion calls rill.local.v1.LocalService.GetVersion.
func (c *localServiceClient) GetVersion(ctx context.Context, req *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GitStatus calls rill.local.v1.LocalService.GitStatus.
func (c *localServiceClient) GitStatus(ctx context.Context, req *connect.Request[v1.GitStatusRequest]) (*connect.Response[v1.GitStatusResponse], error) {
	return c.gitStatus.CallUnary(ctx, req)
}

// GithubRepoStatus calls rill.local.v1.LocalService.GithubRepoStatus.
func (c *localServiceClient) GithubRepoStatus(ctx context.Context, req *connect.Request[v1.GithubRepoStatusRequest]) (*connect.Response[v1.GithubRepoStatusResponse], error) {
	return c.githubRepoStatus.CallUnary(ctx, req)
}

// GitPull calls rill.local.v1.LocalService.GitPull.
func (c *localServiceClient) GitPull(ctx context.Context, req *connect.Request[v1.GitPullRequest]) (*connect.Response[v1.GitPullResponse], error) {
	return c.gitPull.CallUnary(ctx, req)
}

// GitPush calls rill.local.v1.LocalService.GitPush.
func (c *localServiceClient) GitPush(ctx context.Context, req *connect.Request[v1.GitPushRequest]) (*connect.Response[v1.GitPushResponse], error) {
	return c.gitPush.CallUnary(ctx, req)
}

// PushToGithub calls rill.local.v1.LocalService.PushToGithub.
func (c *localServiceClient) PushToGithub(ctx context.Context, req *connect.Request[v1.PushToGithubRequest]) (*connect.Response[v1.PushToGithubResponse], error) {
	return c.pushToGithub.CallUnary(ctx, req)
}

// DeployProject calls rill.local.v1.LocalService.DeployProject.
func (c *localServiceClient) DeployProject(ctx context.Context, req *connect.Request[v1.DeployProjectRequest]) (*connect.Response[v1.DeployProjectResponse], error) {
	return c.deployProject.CallUnary(ctx, req)
}

// RedeployProject calls rill.local.v1.LocalService.RedeployProject.
func (c *localServiceClient) RedeployProject(ctx context.Context, req *connect.Request[v1.RedeployProjectRequest]) (*connect.Response[v1.RedeployProjectResponse], error) {
	return c.redeployProject.CallUnary(ctx, req)
}

// GetCurrentUser calls rill.local.v1.LocalService.GetCurrentUser.
func (c *localServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// GetCurrentProject calls rill.local.v1.LocalService.GetCurrentProject.
func (c *localServiceClient) GetCurrentProject(ctx context.Context, req *connect.Request[v1.GetCurrentProjectRequest]) (*connect.Response[v1.GetCurrentProjectResponse], error) {
	return c.getCurrentProject.CallUnary(ctx, req)
}

// ListOrganizationsAndBillingMetadata calls
// rill.local.v1.LocalService.ListOrganizationsAndBillingMetadata.
func (c *localServiceClient) ListOrganizationsAndBillingMetadata(ctx context.Context, req *connect.Request[v1.ListOrganizationsAndBillingMetadataRequest]) (*connect.Response[v1.ListOrganizationsAndBillingMetadataResponse], error) {
	return c.listOrganizationsAndBillingMetadata.CallUnary(ctx, req)
}

// CreateOrganization calls rill.local.v1.LocalService.CreateOrganization.
func (c *localServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// ListMatchingProjects calls rill.local.v1.LocalService.ListMatchingProjects.
func (c *localServiceClient) ListMatchingProjects(ctx context.Context, req *connect.Request[v1.ListMatchingProjectsRequest]) (*connect.Response[v1.ListMatchingProjectsResponse], error) {
	return c.listMatchingProjects.CallUnary(ctx, req)
}

// ListProjectsForOrg calls rill.local.v1.LocalService.ListProjectsForOrg.
func (c *localServiceClient) ListProjectsForOrg(ctx context.Context, req *connect.Request[v1.ListProjectsForOrgRequest]) (*connect.Response[v1.ListProjectsForOrgResponse], error) {
	return c.listProjectsForOrg.CallUnary(ctx, req)
}

// GetProject calls rill.local.v1.LocalService.GetProject.
func (c *localServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// LocalServiceHandler is an implementation of the rill.local.v1.LocalService service.
type LocalServiceHandler interface {
	// Ping returns the current time.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// GetMetadata returns information about the local Rill instance.
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// GetVersion returns details about the current and latest available Rill versions.
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	// GitStatus returns the curren status of the local git repo. This is equivalent to doing a `git fetch` followed by running `git status`.
	GitStatus(context.Context, *connect.Request[v1.GitStatusRequest]) (*connect.Response[v1.GitStatusResponse], error)
	// GithubRepoStatus returns info about a Github user account based on the caller's installations. Forwards to admin API of the same name.
	GithubRepoStatus(context.Context, *connect.Request[v1.GithubRepoStatusRequest]) (*connect.Response[v1.GithubRepoStatusResponse], error)
	// GitPull fetches the latest changes from the remote git repo equivalent to `git pull` command.
	// If there are any merge conflicts the pull is aborted.
	// Force can be set to true to force the pull and overwrite any local changes.
	GitPull(context.Context, *connect.Request[v1.GitPullRequest]) (*connect.Response[v1.GitPullResponse], error)
	// GitPush pushes the local changes to the remote git repo equivalent to `git push` command.
	// The difference between this and PushTiGithub is that this does not create a new repo.
	// It only pushes the changes to the existing remote repo.
	GitPush(context.Context, *connect.Request[v1.GitPushRequest]) (*connect.Response[v1.GitPushResponse], error)
	// PushToGithub create a Git repo from local project and pushed to users git account.
	PushToGithub(context.Context, *connect.Request[v1.PushToGithubRequest]) (*connect.Response[v1.PushToGithubResponse], error)
	// DeployProject deploys the local project to the Rill cloud.
	DeployProject(context.Context, *connect.Request[v1.DeployProjectRequest]) (*connect.Response[v1.DeployProjectResponse], error)
	// RedeployProject updates a deployed project.
	RedeployProject(context.Context, *connect.Request[v1.RedeployProjectRequest]) (*connect.Response[v1.RedeployProjectResponse], error)
	// GetCurrentUser returns the locally logged in user
	GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// GetCurrentProject returns the rill cloud project connected to the local project
	// Deprecated: Use ListMatchingProjects instead.
	GetCurrentProject(context.Context, *connect.Request[v1.GetCurrentProjectRequest]) (*connect.Response[v1.GetCurrentProjectResponse], error)
	// ListOrganizationsAndBillingMetadata returns metadata about the current user's orgs.
	ListOrganizationsAndBillingMetadata(context.Context, *connect.Request[v1.ListOrganizationsAndBillingMetadataRequest]) (*connect.Response[v1.ListOrganizationsAndBillingMetadataResponse], error)
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// ListMatchingProjects returns all remote projects matching the local project name
	ListMatchingProjects(context.Context, *connect.Request[v1.ListMatchingProjectsRequest]) (*connect.Response[v1.ListMatchingProjectsResponse], error)
	// ListProjectsForOrg returns all projects within an org
	ListProjectsForOrg(context.Context, *connect.Request[v1.ListProjectsForOrgRequest]) (*connect.Response[v1.ListProjectsForOrgResponse], error)
	// GetProject returns information about a specific project
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
}

// NewLocalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocalServiceHandler(svc LocalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	localServicePingHandler := connect.NewUnaryHandler(
		LocalServicePingProcedure,
		svc.Ping,
		connect.WithSchema(localServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGetMetadataHandler := connect.NewUnaryHandler(
		LocalServiceGetMetadataProcedure,
		svc.GetMetadata,
		connect.WithSchema(localServiceGetMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGetVersionHandler := connect.NewUnaryHandler(
		LocalServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(localServiceGetVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGitStatusHandler := connect.NewUnaryHandler(
		LocalServiceGitStatusProcedure,
		svc.GitStatus,
		connect.WithSchema(localServiceGitStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGithubRepoStatusHandler := connect.NewUnaryHandler(
		LocalServiceGithubRepoStatusProcedure,
		svc.GithubRepoStatus,
		connect.WithSchema(localServiceGithubRepoStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGitPullHandler := connect.NewUnaryHandler(
		LocalServiceGitPullProcedure,
		svc.GitPull,
		connect.WithSchema(localServiceGitPullMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGitPushHandler := connect.NewUnaryHandler(
		LocalServiceGitPushProcedure,
		svc.GitPush,
		connect.WithSchema(localServiceGitPushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServicePushToGithubHandler := connect.NewUnaryHandler(
		LocalServicePushToGithubProcedure,
		svc.PushToGithub,
		connect.WithSchema(localServicePushToGithubMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceDeployProjectHandler := connect.NewUnaryHandler(
		LocalServiceDeployProjectProcedure,
		svc.DeployProject,
		connect.WithSchema(localServiceDeployProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceRedeployProjectHandler := connect.NewUnaryHandler(
		LocalServiceRedeployProjectProcedure,
		svc.RedeployProject,
		connect.WithSchema(localServiceRedeployProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		LocalServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(localServiceGetCurrentUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGetCurrentProjectHandler := connect.NewUnaryHandler(
		LocalServiceGetCurrentProjectProcedure,
		svc.GetCurrentProject,
		connect.WithSchema(localServiceGetCurrentProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceListOrganizationsAndBillingMetadataHandler := connect.NewUnaryHandler(
		LocalServiceListOrganizationsAndBillingMetadataProcedure,
		svc.ListOrganizationsAndBillingMetadata,
		connect.WithSchema(localServiceListOrganizationsAndBillingMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		LocalServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(localServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceListMatchingProjectsHandler := connect.NewUnaryHandler(
		LocalServiceListMatchingProjectsProcedure,
		svc.ListMatchingProjects,
		connect.WithSchema(localServiceListMatchingProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceListProjectsForOrgHandler := connect.NewUnaryHandler(
		LocalServiceListProjectsForOrgProcedure,
		svc.ListProjectsForOrg,
		connect.WithSchema(localServiceListProjectsForOrgMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	localServiceGetProjectHandler := connect.NewUnaryHandler(
		LocalServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(localServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rill.local.v1.LocalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocalServicePingProcedure:
			localServicePingHandler.ServeHTTP(w, r)
		case LocalServiceGetMetadataProcedure:
			localServiceGetMetadataHandler.ServeHTTP(w, r)
		case LocalServiceGetVersionProcedure:
			localServiceGetVersionHandler.ServeHTTP(w, r)
		case LocalServiceGitStatusProcedure:
			localServiceGitStatusHandler.ServeHTTP(w, r)
		case LocalServiceGithubRepoStatusProcedure:
			localServiceGithubRepoStatusHandler.ServeHTTP(w, r)
		case LocalServiceGitPullProcedure:
			localServiceGitPullHandler.ServeHTTP(w, r)
		case LocalServiceGitPushProcedure:
			localServiceGitPushHandler.ServeHTTP(w, r)
		case LocalServicePushToGithubProcedure:
			localServicePushToGithubHandler.ServeHTTP(w, r)
		case LocalServiceDeployProjectProcedure:
			localServiceDeployProjectHandler.ServeHTTP(w, r)
		case LocalServiceRedeployProjectProcedure:
			localServiceRedeployProjectHandler.ServeHTTP(w, r)
		case LocalServiceGetCurrentUserProcedure:
			localServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case LocalServiceGetCurrentProjectProcedure:
			localServiceGetCurrentProjectHandler.ServeHTTP(w, r)
		case LocalServiceListOrganizationsAndBillingMetadataProcedure:
			localServiceListOrganizationsAndBillingMetadataHandler.ServeHTTP(w, r)
		case LocalServiceCreateOrganizationProcedure:
			localServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case LocalServiceListMatchingProjectsProcedure:
			localServiceListMatchingProjectsHandler.ServeHTTP(w, r)
		case LocalServiceListProjectsForOrgProcedure:
			localServiceListProjectsForOrgHandler.ServeHTTP(w, r)
		case LocalServiceGetProjectProcedure:
			localServiceGetProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLocalServiceHandler struct{}

func (UnimplementedLocalServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.Ping is not implemented"))
}

func (UnimplementedLocalServiceHandler) GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GetMetadata is not implemented"))
}

func (UnimplementedLocalServiceHandler) GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GetVersion is not implemented"))
}

func (UnimplementedLocalServiceHandler) GitStatus(context.Context, *connect.Request[v1.GitStatusRequest]) (*connect.Response[v1.GitStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GitStatus is not implemented"))
}

func (UnimplementedLocalServiceHandler) GithubRepoStatus(context.Context, *connect.Request[v1.GithubRepoStatusRequest]) (*connect.Response[v1.GithubRepoStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GithubRepoStatus is not implemented"))
}

func (UnimplementedLocalServiceHandler) GitPull(context.Context, *connect.Request[v1.GitPullRequest]) (*connect.Response[v1.GitPullResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GitPull is not implemented"))
}

func (UnimplementedLocalServiceHandler) GitPush(context.Context, *connect.Request[v1.GitPushRequest]) (*connect.Response[v1.GitPushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GitPush is not implemented"))
}

func (UnimplementedLocalServiceHandler) PushToGithub(context.Context, *connect.Request[v1.PushToGithubRequest]) (*connect.Response[v1.PushToGithubResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.PushToGithub is not implemented"))
}

func (UnimplementedLocalServiceHandler) DeployProject(context.Context, *connect.Request[v1.DeployProjectRequest]) (*connect.Response[v1.DeployProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.DeployProject is not implemented"))
}

func (UnimplementedLocalServiceHandler) RedeployProject(context.Context, *connect.Request[v1.RedeployProjectRequest]) (*connect.Response[v1.RedeployProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.RedeployProject is not implemented"))
}

func (UnimplementedLocalServiceHandler) GetCurrentUser(context.Context, *connect.Request[v1.GetCurrentUserRequest]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GetCurrentUser is not implemented"))
}

func (UnimplementedLocalServiceHandler) GetCurrentProject(context.Context, *connect.Request[v1.GetCurrentProjectRequest]) (*connect.Response[v1.GetCurrentProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GetCurrentProject is not implemented"))
}

func (UnimplementedLocalServiceHandler) ListOrganizationsAndBillingMetadata(context.Context, *connect.Request[v1.ListOrganizationsAndBillingMetadataRequest]) (*connect.Response[v1.ListOrganizationsAndBillingMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.ListOrganizationsAndBillingMetadata is not implemented"))
}

func (UnimplementedLocalServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.CreateOrganization is not implemented"))
}

func (UnimplementedLocalServiceHandler) ListMatchingProjects(context.Context, *connect.Request[v1.ListMatchingProjectsRequest]) (*connect.Response[v1.ListMatchingProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.ListMatchingProjects is not implemented"))
}

func (UnimplementedLocalServiceHandler) ListProjectsForOrg(context.Context, *connect.Request[v1.ListProjectsForOrgRequest]) (*connect.Response[v1.ListProjectsForOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.ListProjectsForOrg is not implemented"))
}

func (UnimplementedLocalServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rill.local.v1.LocalService.GetProject is not implemented"))
}
