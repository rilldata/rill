// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/runtime/v1/connectors.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on S3Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *S3Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3Object with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in S3ObjectMultiError, or nil
// if none found.
func (m *S3Object) ValidateAll() error {
	return m.validate(true)
}

func (m *S3Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetModifiedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, S3ObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, S3ObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return S3ObjectValidationError{
				field:  "ModifiedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	// no validation rules for IsDir

	if len(errors) > 0 {
		return S3ObjectMultiError(errors)
	}

	return nil
}

// S3ObjectMultiError is an error wrapping multiple validation errors returned
// by S3Object.ValidateAll() if the designated constraints aren't met.
type S3ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ObjectMultiError) AllErrors() []error { return m }

// S3ObjectValidationError is the validation error returned by
// S3Object.Validate if the designated constraints aren't met.
type S3ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ObjectValidationError) ErrorName() string { return "S3ObjectValidationError" }

// Error satisfies the builtin error interface
func (e S3ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ObjectValidationError{}

// Validate checks the field values on S3ListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3ListBucketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3ListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3ListBucketsRequestMultiError, or nil if none found.
func (m *S3ListBucketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *S3ListBucketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return S3ListBucketsRequestMultiError(errors)
	}

	return nil
}

// S3ListBucketsRequestMultiError is an error wrapping multiple validation
// errors returned by S3ListBucketsRequest.ValidateAll() if the designated
// constraints aren't met.
type S3ListBucketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ListBucketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ListBucketsRequestMultiError) AllErrors() []error { return m }

// S3ListBucketsRequestValidationError is the validation error returned by
// S3ListBucketsRequest.Validate if the designated constraints aren't met.
type S3ListBucketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ListBucketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ListBucketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ListBucketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ListBucketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ListBucketsRequestValidationError) ErrorName() string {
	return "S3ListBucketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e S3ListBucketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3ListBucketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ListBucketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ListBucketsRequestValidationError{}

// Validate checks the field values on S3ListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3ListBucketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3ListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3ListBucketsResponseMultiError, or nil if none found.
func (m *S3ListBucketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *S3ListBucketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return S3ListBucketsResponseMultiError(errors)
	}

	return nil
}

// S3ListBucketsResponseMultiError is an error wrapping multiple validation
// errors returned by S3ListBucketsResponse.ValidateAll() if the designated
// constraints aren't met.
type S3ListBucketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ListBucketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ListBucketsResponseMultiError) AllErrors() []error { return m }

// S3ListBucketsResponseValidationError is the validation error returned by
// S3ListBucketsResponse.Validate if the designated constraints aren't met.
type S3ListBucketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ListBucketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ListBucketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ListBucketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ListBucketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ListBucketsResponseValidationError) ErrorName() string {
	return "S3ListBucketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e S3ListBucketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3ListBucketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ListBucketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ListBucketsResponseValidationError{}

// Validate checks the field values on S3ListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3ListObjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3ListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3ListObjectsRequestMultiError, or nil if none found.
func (m *S3ListObjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *S3ListObjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := S3ListObjectsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if utf8.RuneCountInString(m.GetBucket()) < 1 {
		err := S3ListObjectsRequestValidationError{
			field:  "Bucket",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Prefix

	// no validation rules for StartAfter

	// no validation rules for Delimiter

	if len(errors) > 0 {
		return S3ListObjectsRequestMultiError(errors)
	}

	return nil
}

// S3ListObjectsRequestMultiError is an error wrapping multiple validation
// errors returned by S3ListObjectsRequest.ValidateAll() if the designated
// constraints aren't met.
type S3ListObjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ListObjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ListObjectsRequestMultiError) AllErrors() []error { return m }

// S3ListObjectsRequestValidationError is the validation error returned by
// S3ListObjectsRequest.Validate if the designated constraints aren't met.
type S3ListObjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ListObjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ListObjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ListObjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ListObjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ListObjectsRequestValidationError) ErrorName() string {
	return "S3ListObjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e S3ListObjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3ListObjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ListObjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ListObjectsRequestValidationError{}

// Validate checks the field values on S3ListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3ListObjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3ListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3ListObjectsResponseMultiError, or nil if none found.
func (m *S3ListObjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *S3ListObjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, S3ListObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, S3ListObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return S3ListObjectsResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return S3ListObjectsResponseMultiError(errors)
	}

	return nil
}

// S3ListObjectsResponseMultiError is an error wrapping multiple validation
// errors returned by S3ListObjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type S3ListObjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ListObjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ListObjectsResponseMultiError) AllErrors() []error { return m }

// S3ListObjectsResponseValidationError is the validation error returned by
// S3ListObjectsResponse.Validate if the designated constraints aren't met.
type S3ListObjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ListObjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ListObjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ListObjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ListObjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ListObjectsResponseValidationError) ErrorName() string {
	return "S3ListObjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e S3ListObjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3ListObjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ListObjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ListObjectsResponseValidationError{}

// Validate checks the field values on S3GetBucketMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3GetBucketMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3GetBucketMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3GetBucketMetadataRequestMultiError, or nil if none found.
func (m *S3GetBucketMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *S3GetBucketMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if utf8.RuneCountInString(m.GetBucket()) < 1 {
		err := S3GetBucketMetadataRequestValidationError{
			field:  "Bucket",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return S3GetBucketMetadataRequestMultiError(errors)
	}

	return nil
}

// S3GetBucketMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by S3GetBucketMetadataRequest.ValidateAll() if
// the designated constraints aren't met.
type S3GetBucketMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3GetBucketMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3GetBucketMetadataRequestMultiError) AllErrors() []error { return m }

// S3GetBucketMetadataRequestValidationError is the validation error returned
// by S3GetBucketMetadataRequest.Validate if the designated constraints aren't met.
type S3GetBucketMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3GetBucketMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3GetBucketMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3GetBucketMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3GetBucketMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3GetBucketMetadataRequestValidationError) ErrorName() string {
	return "S3GetBucketMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e S3GetBucketMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3GetBucketMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3GetBucketMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3GetBucketMetadataRequestValidationError{}

// Validate checks the field values on S3GetBucketMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3GetBucketMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3GetBucketMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3GetBucketMetadataResponseMultiError, or nil if none found.
func (m *S3GetBucketMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *S3GetBucketMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	if len(errors) > 0 {
		return S3GetBucketMetadataResponseMultiError(errors)
	}

	return nil
}

// S3GetBucketMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by S3GetBucketMetadataResponse.ValidateAll() if
// the designated constraints aren't met.
type S3GetBucketMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3GetBucketMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3GetBucketMetadataResponseMultiError) AllErrors() []error { return m }

// S3GetBucketMetadataResponseValidationError is the validation error returned
// by S3GetBucketMetadataResponse.Validate if the designated constraints
// aren't met.
type S3GetBucketMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3GetBucketMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3GetBucketMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3GetBucketMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3GetBucketMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3GetBucketMetadataResponseValidationError) ErrorName() string {
	return "S3GetBucketMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e S3GetBucketMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3GetBucketMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3GetBucketMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3GetBucketMetadataResponseValidationError{}

// Validate checks the field values on S3GetCredentialsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3GetCredentialsInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3GetCredentialsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3GetCredentialsInfoRequestMultiError, or nil if none found.
func (m *S3GetCredentialsInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *S3GetCredentialsInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if len(errors) > 0 {
		return S3GetCredentialsInfoRequestMultiError(errors)
	}

	return nil
}

// S3GetCredentialsInfoRequestMultiError is an error wrapping multiple
// validation errors returned by S3GetCredentialsInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type S3GetCredentialsInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3GetCredentialsInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3GetCredentialsInfoRequestMultiError) AllErrors() []error { return m }

// S3GetCredentialsInfoRequestValidationError is the validation error returned
// by S3GetCredentialsInfoRequest.Validate if the designated constraints
// aren't met.
type S3GetCredentialsInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3GetCredentialsInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3GetCredentialsInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3GetCredentialsInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3GetCredentialsInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3GetCredentialsInfoRequestValidationError) ErrorName() string {
	return "S3GetCredentialsInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e S3GetCredentialsInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3GetCredentialsInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3GetCredentialsInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3GetCredentialsInfoRequestValidationError{}

// Validate checks the field values on S3GetCredentialsInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *S3GetCredentialsInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3GetCredentialsInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// S3GetCredentialsInfoResponseMultiError, or nil if none found.
func (m *S3GetCredentialsInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *S3GetCredentialsInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exist

	// no validation rules for Provider

	if len(errors) > 0 {
		return S3GetCredentialsInfoResponseMultiError(errors)
	}

	return nil
}

// S3GetCredentialsInfoResponseMultiError is an error wrapping multiple
// validation errors returned by S3GetCredentialsInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type S3GetCredentialsInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3GetCredentialsInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3GetCredentialsInfoResponseMultiError) AllErrors() []error { return m }

// S3GetCredentialsInfoResponseValidationError is the validation error returned
// by S3GetCredentialsInfoResponse.Validate if the designated constraints
// aren't met.
type S3GetCredentialsInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3GetCredentialsInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3GetCredentialsInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3GetCredentialsInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3GetCredentialsInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3GetCredentialsInfoResponseValidationError) ErrorName() string {
	return "S3GetCredentialsInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e S3GetCredentialsInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3GetCredentialsInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3GetCredentialsInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3GetCredentialsInfoResponseValidationError{}

// Validate checks the field values on GCSObject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GCSObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSObject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GCSObjectMultiError, or nil
// if none found.
func (m *GCSObject) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetModifiedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GCSObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GCSObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GCSObjectValidationError{
				field:  "ModifiedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	// no validation rules for IsDir

	if len(errors) > 0 {
		return GCSObjectMultiError(errors)
	}

	return nil
}

// GCSObjectMultiError is an error wrapping multiple validation errors returned
// by GCSObject.ValidateAll() if the designated constraints aren't met.
type GCSObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSObjectMultiError) AllErrors() []error { return m }

// GCSObjectValidationError is the validation error returned by
// GCSObject.Validate if the designated constraints aren't met.
type GCSObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSObjectValidationError) ErrorName() string { return "GCSObjectValidationError" }

// Error satisfies the builtin error interface
func (e GCSObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSObjectValidationError{}

// Validate checks the field values on GCSListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSListBucketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GCSListBucketsRequestMultiError, or nil if none found.
func (m *GCSListBucketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSListBucketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := GCSListBucketsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return GCSListBucketsRequestMultiError(errors)
	}

	return nil
}

// GCSListBucketsRequestMultiError is an error wrapping multiple validation
// errors returned by GCSListBucketsRequest.ValidateAll() if the designated
// constraints aren't met.
type GCSListBucketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSListBucketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSListBucketsRequestMultiError) AllErrors() []error { return m }

// GCSListBucketsRequestValidationError is the validation error returned by
// GCSListBucketsRequest.Validate if the designated constraints aren't met.
type GCSListBucketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSListBucketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSListBucketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSListBucketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSListBucketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSListBucketsRequestValidationError) ErrorName() string {
	return "GCSListBucketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GCSListBucketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSListBucketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSListBucketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSListBucketsRequestValidationError{}

// Validate checks the field values on GCSListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSListBucketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GCSListBucketsResponseMultiError, or nil if none found.
func (m *GCSListBucketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSListBucketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GCSListBucketsResponseMultiError(errors)
	}

	return nil
}

// GCSListBucketsResponseMultiError is an error wrapping multiple validation
// errors returned by GCSListBucketsResponse.ValidateAll() if the designated
// constraints aren't met.
type GCSListBucketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSListBucketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSListBucketsResponseMultiError) AllErrors() []error { return m }

// GCSListBucketsResponseValidationError is the validation error returned by
// GCSListBucketsResponse.Validate if the designated constraints aren't met.
type GCSListBucketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSListBucketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSListBucketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSListBucketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSListBucketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSListBucketsResponseValidationError) ErrorName() string {
	return "GCSListBucketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GCSListBucketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSListBucketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSListBucketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSListBucketsResponseValidationError{}

// Validate checks the field values on GCSListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSListObjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GCSListObjectsRequestMultiError, or nil if none found.
func (m *GCSListObjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSListObjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := GCSListObjectsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if utf8.RuneCountInString(m.GetBucket()) < 1 {
		err := GCSListObjectsRequestValidationError{
			field:  "Bucket",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Prefix

	// no validation rules for StartOffset

	// no validation rules for EndOffset

	// no validation rules for Delimiter

	if len(errors) > 0 {
		return GCSListObjectsRequestMultiError(errors)
	}

	return nil
}

// GCSListObjectsRequestMultiError is an error wrapping multiple validation
// errors returned by GCSListObjectsRequest.ValidateAll() if the designated
// constraints aren't met.
type GCSListObjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSListObjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSListObjectsRequestMultiError) AllErrors() []error { return m }

// GCSListObjectsRequestValidationError is the validation error returned by
// GCSListObjectsRequest.Validate if the designated constraints aren't met.
type GCSListObjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSListObjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSListObjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSListObjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSListObjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSListObjectsRequestValidationError) ErrorName() string {
	return "GCSListObjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GCSListObjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSListObjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSListObjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSListObjectsRequestValidationError{}

// Validate checks the field values on GCSListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSListObjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GCSListObjectsResponseMultiError, or nil if none found.
func (m *GCSListObjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSListObjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GCSListObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GCSListObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GCSListObjectsResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GCSListObjectsResponseMultiError(errors)
	}

	return nil
}

// GCSListObjectsResponseMultiError is an error wrapping multiple validation
// errors returned by GCSListObjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type GCSListObjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSListObjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSListObjectsResponseMultiError) AllErrors() []error { return m }

// GCSListObjectsResponseValidationError is the validation error returned by
// GCSListObjectsResponse.Validate if the designated constraints aren't met.
type GCSListObjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSListObjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSListObjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSListObjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSListObjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSListObjectsResponseValidationError) ErrorName() string {
	return "GCSListObjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GCSListObjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSListObjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSListObjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSListObjectsResponseValidationError{}

// Validate checks the field values on GCSGetCredentialsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSGetCredentialsInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSGetCredentialsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GCSGetCredentialsInfoRequestMultiError, or nil if none found.
func (m *GCSGetCredentialsInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSGetCredentialsInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if len(errors) > 0 {
		return GCSGetCredentialsInfoRequestMultiError(errors)
	}

	return nil
}

// GCSGetCredentialsInfoRequestMultiError is an error wrapping multiple
// validation errors returned by GCSGetCredentialsInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type GCSGetCredentialsInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSGetCredentialsInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSGetCredentialsInfoRequestMultiError) AllErrors() []error { return m }

// GCSGetCredentialsInfoRequestValidationError is the validation error returned
// by GCSGetCredentialsInfoRequest.Validate if the designated constraints
// aren't met.
type GCSGetCredentialsInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSGetCredentialsInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSGetCredentialsInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSGetCredentialsInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSGetCredentialsInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSGetCredentialsInfoRequestValidationError) ErrorName() string {
	return "GCSGetCredentialsInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GCSGetCredentialsInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSGetCredentialsInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSGetCredentialsInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSGetCredentialsInfoRequestValidationError{}

// Validate checks the field values on GCSGetCredentialsInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GCSGetCredentialsInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSGetCredentialsInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GCSGetCredentialsInfoResponseMultiError, or nil if none found.
func (m *GCSGetCredentialsInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSGetCredentialsInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exist

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GCSGetCredentialsInfoResponseMultiError(errors)
	}

	return nil
}

// GCSGetCredentialsInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GCSGetCredentialsInfoResponse.ValidateAll()
// if the designated constraints aren't met.
type GCSGetCredentialsInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSGetCredentialsInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSGetCredentialsInfoResponseMultiError) AllErrors() []error { return m }

// GCSGetCredentialsInfoResponseValidationError is the validation error
// returned by GCSGetCredentialsInfoResponse.Validate if the designated
// constraints aren't met.
type GCSGetCredentialsInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSGetCredentialsInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSGetCredentialsInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSGetCredentialsInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSGetCredentialsInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSGetCredentialsInfoResponseValidationError) ErrorName() string {
	return "GCSGetCredentialsInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GCSGetCredentialsInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSGetCredentialsInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSGetCredentialsInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSGetCredentialsInfoResponseValidationError{}

// Validate checks the field values on OLAPListTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OLAPListTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OLAPListTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OLAPListTablesRequestMultiError, or nil if none found.
func (m *OLAPListTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OLAPListTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for SearchPattern

	if len(errors) > 0 {
		return OLAPListTablesRequestMultiError(errors)
	}

	return nil
}

// OLAPListTablesRequestMultiError is an error wrapping multiple validation
// errors returned by OLAPListTablesRequest.ValidateAll() if the designated
// constraints aren't met.
type OLAPListTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OLAPListTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OLAPListTablesRequestMultiError) AllErrors() []error { return m }

// OLAPListTablesRequestValidationError is the validation error returned by
// OLAPListTablesRequest.Validate if the designated constraints aren't met.
type OLAPListTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OLAPListTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OLAPListTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OLAPListTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OLAPListTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OLAPListTablesRequestValidationError) ErrorName() string {
	return "OLAPListTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OLAPListTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOLAPListTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OLAPListTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OLAPListTablesRequestValidationError{}

// Validate checks the field values on OLAPListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OLAPListTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OLAPListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OLAPListTablesResponseMultiError, or nil if none found.
func (m *OLAPListTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OLAPListTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OLAPListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OLAPListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OLAPListTablesResponseValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OLAPListTablesResponseMultiError(errors)
	}

	return nil
}

// OLAPListTablesResponseMultiError is an error wrapping multiple validation
// errors returned by OLAPListTablesResponse.ValidateAll() if the designated
// constraints aren't met.
type OLAPListTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OLAPListTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OLAPListTablesResponseMultiError) AllErrors() []error { return m }

// OLAPListTablesResponseValidationError is the validation error returned by
// OLAPListTablesResponse.Validate if the designated constraints aren't met.
type OLAPListTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OLAPListTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OLAPListTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OLAPListTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OLAPListTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OLAPListTablesResponseValidationError) ErrorName() string {
	return "OLAPListTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OLAPListTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOLAPListTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OLAPListTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OLAPListTablesResponseValidationError{}

// Validate checks the field values on OlapTableInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OlapTableInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OlapTableInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OlapTableInfoMultiError, or
// nil if none found.
func (m *OlapTableInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OlapTableInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Database

	// no validation rules for DatabaseSchema

	// no validation rules for IsDefaultDatabase

	// no validation rules for IsDefaultDatabaseSchema

	// no validation rules for Name

	// no validation rules for HasUnsupportedDataTypes

	// no validation rules for PhysicalSizeBytes

	if len(errors) > 0 {
		return OlapTableInfoMultiError(errors)
	}

	return nil
}

// OlapTableInfoMultiError is an error wrapping multiple validation errors
// returned by OlapTableInfo.ValidateAll() if the designated constraints
// aren't met.
type OlapTableInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OlapTableInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OlapTableInfoMultiError) AllErrors() []error { return m }

// OlapTableInfoValidationError is the validation error returned by
// OlapTableInfo.Validate if the designated constraints aren't met.
type OlapTableInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OlapTableInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OlapTableInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OlapTableInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OlapTableInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OlapTableInfoValidationError) ErrorName() string { return "OlapTableInfoValidationError" }

// Error satisfies the builtin error interface
func (e OlapTableInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOlapTableInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OlapTableInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OlapTableInfoValidationError{}

// Validate checks the field values on OLAPGetTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OLAPGetTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OLAPGetTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OLAPGetTableRequestMultiError, or nil if none found.
func (m *OLAPGetTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OLAPGetTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for Database

	// no validation rules for DatabaseSchema

	// no validation rules for Table

	if len(errors) > 0 {
		return OLAPGetTableRequestMultiError(errors)
	}

	return nil
}

// OLAPGetTableRequestMultiError is an error wrapping multiple validation
// errors returned by OLAPGetTableRequest.ValidateAll() if the designated
// constraints aren't met.
type OLAPGetTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OLAPGetTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OLAPGetTableRequestMultiError) AllErrors() []error { return m }

// OLAPGetTableRequestValidationError is the validation error returned by
// OLAPGetTableRequest.Validate if the designated constraints aren't met.
type OLAPGetTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OLAPGetTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OLAPGetTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OLAPGetTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OLAPGetTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OLAPGetTableRequestValidationError) ErrorName() string {
	return "OLAPGetTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OLAPGetTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOLAPGetTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OLAPGetTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OLAPGetTableRequestValidationError{}

// Validate checks the field values on OLAPGetTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OLAPGetTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OLAPGetTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OLAPGetTableResponseMultiError, or nil if none found.
func (m *OLAPGetTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OLAPGetTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OLAPGetTableResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OLAPGetTableResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OLAPGetTableResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UnsupportedColumns

	// no validation rules for View

	// no validation rules for PhysicalSizeBytes

	if len(errors) > 0 {
		return OLAPGetTableResponseMultiError(errors)
	}

	return nil
}

// OLAPGetTableResponseMultiError is an error wrapping multiple validation
// errors returned by OLAPGetTableResponse.ValidateAll() if the designated
// constraints aren't met.
type OLAPGetTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OLAPGetTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OLAPGetTableResponseMultiError) AllErrors() []error { return m }

// OLAPGetTableResponseValidationError is the validation error returned by
// OLAPGetTableResponse.Validate if the designated constraints aren't met.
type OLAPGetTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OLAPGetTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OLAPGetTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OLAPGetTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OLAPGetTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OLAPGetTableResponseValidationError) ErrorName() string {
	return "OLAPGetTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OLAPGetTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOLAPGetTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OLAPGetTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OLAPGetTableResponseValidationError{}

// Validate checks the field values on ListDatabaseSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDatabaseSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDatabaseSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDatabaseSchemasRequestMultiError, or nil if none found.
func (m *ListDatabaseSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDatabaseSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if len(errors) > 0 {
		return ListDatabaseSchemasRequestMultiError(errors)
	}

	return nil
}

// ListDatabaseSchemasRequestMultiError is an error wrapping multiple
// validation errors returned by ListDatabaseSchemasRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDatabaseSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDatabaseSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDatabaseSchemasRequestMultiError) AllErrors() []error { return m }

// ListDatabaseSchemasRequestValidationError is the validation error returned
// by ListDatabaseSchemasRequest.Validate if the designated constraints aren't met.
type ListDatabaseSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDatabaseSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDatabaseSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDatabaseSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDatabaseSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDatabaseSchemasRequestValidationError) ErrorName() string {
	return "ListDatabaseSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDatabaseSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDatabaseSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDatabaseSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDatabaseSchemasRequestValidationError{}

// Validate checks the field values on ListDatabaseSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDatabaseSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDatabaseSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDatabaseSchemasResponseMultiError, or nil if none found.
func (m *ListDatabaseSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDatabaseSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDatabaseSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDatabaseSchemasResponseValidationError{
						field:  fmt.Sprintf("DatabaseSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDatabaseSchemasResponseValidationError{
						field:  fmt.Sprintf("DatabaseSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDatabaseSchemasResponseValidationError{
					field:  fmt.Sprintf("DatabaseSchemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDatabaseSchemasResponseMultiError(errors)
	}

	return nil
}

// ListDatabaseSchemasResponseMultiError is an error wrapping multiple
// validation errors returned by ListDatabaseSchemasResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDatabaseSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDatabaseSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDatabaseSchemasResponseMultiError) AllErrors() []error { return m }

// ListDatabaseSchemasResponseValidationError is the validation error returned
// by ListDatabaseSchemasResponse.Validate if the designated constraints
// aren't met.
type ListDatabaseSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDatabaseSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDatabaseSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDatabaseSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDatabaseSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDatabaseSchemasResponseValidationError) ErrorName() string {
	return "ListDatabaseSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDatabaseSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDatabaseSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDatabaseSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDatabaseSchemasResponseValidationError{}

// Validate checks the field values on DatabaseSchemaInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DatabaseSchemaInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseSchemaInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatabaseSchemaInfoMultiError, or nil if none found.
func (m *DatabaseSchemaInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseSchemaInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Database

	// no validation rules for DatabaseSchema

	if len(errors) > 0 {
		return DatabaseSchemaInfoMultiError(errors)
	}

	return nil
}

// DatabaseSchemaInfoMultiError is an error wrapping multiple validation errors
// returned by DatabaseSchemaInfo.ValidateAll() if the designated constraints
// aren't met.
type DatabaseSchemaInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseSchemaInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseSchemaInfoMultiError) AllErrors() []error { return m }

// DatabaseSchemaInfoValidationError is the validation error returned by
// DatabaseSchemaInfo.Validate if the designated constraints aren't met.
type DatabaseSchemaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseSchemaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseSchemaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseSchemaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseSchemaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseSchemaInfoValidationError) ErrorName() string {
	return "DatabaseSchemaInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DatabaseSchemaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseSchemaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseSchemaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseSchemaInfoValidationError{}

// Validate checks the field values on ListTablesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTablesRequestMultiError, or nil if none found.
func (m *ListTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for Database

	// no validation rules for DatabaseSchema

	if len(errors) > 0 {
		return ListTablesRequestMultiError(errors)
	}

	return nil
}

// ListTablesRequestMultiError is an error wrapping multiple validation errors
// returned by ListTablesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTablesRequestMultiError) AllErrors() []error { return m }

// ListTablesRequestValidationError is the validation error returned by
// ListTablesRequest.Validate if the designated constraints aren't met.
type ListTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTablesRequestValidationError) ErrorName() string {
	return "ListTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTablesRequestValidationError{}

// Validate checks the field values on ListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTablesResponseMultiError, or nil if none found.
func (m *ListTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTablesResponseValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTablesResponseMultiError(errors)
	}

	return nil
}

// ListTablesResponseMultiError is an error wrapping multiple validation errors
// returned by ListTablesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTablesResponseMultiError) AllErrors() []error { return m }

// ListTablesResponseValidationError is the validation error returned by
// ListTablesResponse.Validate if the designated constraints aren't met.
type ListTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTablesResponseValidationError) ErrorName() string {
	return "ListTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTablesResponseValidationError{}

// Validate checks the field values on TableInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TableInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TableInfoMultiError, or nil
// if none found.
func (m *TableInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TableInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for View

	if len(errors) > 0 {
		return TableInfoMultiError(errors)
	}

	return nil
}

// TableInfoMultiError is an error wrapping multiple validation errors returned
// by TableInfo.ValidateAll() if the designated constraints aren't met.
type TableInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableInfoMultiError) AllErrors() []error { return m }

// TableInfoValidationError is the validation error returned by
// TableInfo.Validate if the designated constraints aren't met.
type TableInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableInfoValidationError) ErrorName() string { return "TableInfoValidationError" }

// Error satisfies the builtin error interface
func (e TableInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableInfoValidationError{}

// Validate checks the field values on GetTableRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableRequestMultiError, or nil if none found.
func (m *GetTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for Database

	// no validation rules for DatabaseSchema

	// no validation rules for Table

	if len(errors) > 0 {
		return GetTableRequestMultiError(errors)
	}

	return nil
}

// GetTableRequestMultiError is an error wrapping multiple validation errors
// returned by GetTableRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableRequestMultiError) AllErrors() []error { return m }

// GetTableRequestValidationError is the validation error returned by
// GetTableRequest.Validate if the designated constraints aren't met.
type GetTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableRequestValidationError) ErrorName() string { return "GetTableRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableRequestValidationError{}

// Validate checks the field values on GetTableResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableResponseMultiError, or nil if none found.
func (m *GetTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	if len(errors) > 0 {
		return GetTableResponseMultiError(errors)
	}

	return nil
}

// GetTableResponseMultiError is an error wrapping multiple validation errors
// returned by GetTableResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableResponseMultiError) AllErrors() []error { return m }

// GetTableResponseValidationError is the validation error returned by
// GetTableResponse.Validate if the designated constraints aren't met.
type GetTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableResponseValidationError) ErrorName() string { return "GetTableResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableResponseValidationError{}

// Validate checks the field values on BigQueryListDatasetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BigQueryListDatasetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryListDatasetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryListDatasetsRequestMultiError, or nil if none found.
func (m *BigQueryListDatasetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryListDatasetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := BigQueryListDatasetsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return BigQueryListDatasetsRequestMultiError(errors)
	}

	return nil
}

// BigQueryListDatasetsRequestMultiError is an error wrapping multiple
// validation errors returned by BigQueryListDatasetsRequest.ValidateAll() if
// the designated constraints aren't met.
type BigQueryListDatasetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryListDatasetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryListDatasetsRequestMultiError) AllErrors() []error { return m }

// BigQueryListDatasetsRequestValidationError is the validation error returned
// by BigQueryListDatasetsRequest.Validate if the designated constraints
// aren't met.
type BigQueryListDatasetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryListDatasetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryListDatasetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryListDatasetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryListDatasetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryListDatasetsRequestValidationError) ErrorName() string {
	return "BigQueryListDatasetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BigQueryListDatasetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryListDatasetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryListDatasetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryListDatasetsRequestValidationError{}

// Validate checks the field values on BigQueryListDatasetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BigQueryListDatasetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryListDatasetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryListDatasetsResponseMultiError, or nil if none found.
func (m *BigQueryListDatasetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryListDatasetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return BigQueryListDatasetsResponseMultiError(errors)
	}

	return nil
}

// BigQueryListDatasetsResponseMultiError is an error wrapping multiple
// validation errors returned by BigQueryListDatasetsResponse.ValidateAll() if
// the designated constraints aren't met.
type BigQueryListDatasetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryListDatasetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryListDatasetsResponseMultiError) AllErrors() []error { return m }

// BigQueryListDatasetsResponseValidationError is the validation error returned
// by BigQueryListDatasetsResponse.Validate if the designated constraints
// aren't met.
type BigQueryListDatasetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryListDatasetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryListDatasetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryListDatasetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryListDatasetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryListDatasetsResponseValidationError) ErrorName() string {
	return "BigQueryListDatasetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BigQueryListDatasetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryListDatasetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryListDatasetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryListDatasetsResponseValidationError{}

// Validate checks the field values on BigQueryListTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BigQueryListTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryListTablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryListTablesRequestMultiError, or nil if none found.
func (m *BigQueryListTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryListTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Connector

	// no validation rules for Dataset

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 100 {
			err := BigQueryListTablesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 100",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return BigQueryListTablesRequestMultiError(errors)
	}

	return nil
}

// BigQueryListTablesRequestMultiError is an error wrapping multiple validation
// errors returned by BigQueryListTablesRequest.ValidateAll() if the
// designated constraints aren't met.
type BigQueryListTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryListTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryListTablesRequestMultiError) AllErrors() []error { return m }

// BigQueryListTablesRequestValidationError is the validation error returned by
// BigQueryListTablesRequest.Validate if the designated constraints aren't met.
type BigQueryListTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryListTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryListTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryListTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryListTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryListTablesRequestValidationError) ErrorName() string {
	return "BigQueryListTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BigQueryListTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryListTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryListTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryListTablesRequestValidationError{}

// Validate checks the field values on BigQueryListTablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BigQueryListTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryListTablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryListTablesResponseMultiError, or nil if none found.
func (m *BigQueryListTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryListTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return BigQueryListTablesResponseMultiError(errors)
	}

	return nil
}

// BigQueryListTablesResponseMultiError is an error wrapping multiple
// validation errors returned by BigQueryListTablesResponse.ValidateAll() if
// the designated constraints aren't met.
type BigQueryListTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryListTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryListTablesResponseMultiError) AllErrors() []error { return m }

// BigQueryListTablesResponseValidationError is the validation error returned
// by BigQueryListTablesResponse.Validate if the designated constraints aren't met.
type BigQueryListTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryListTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryListTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryListTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryListTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryListTablesResponseValidationError) ErrorName() string {
	return "BigQueryListTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BigQueryListTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryListTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryListTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryListTablesResponseValidationError{}
