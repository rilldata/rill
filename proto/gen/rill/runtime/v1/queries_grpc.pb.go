// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rill/runtime/v1/queries.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_Query_FullMethodName                       = "/rill.runtime.v1.QueryService/Query"
	QueryService_QueryBatch_FullMethodName                  = "/rill.runtime.v1.QueryService/QueryBatch"
	QueryService_Export_FullMethodName                      = "/rill.runtime.v1.QueryService/Export"
	QueryService_ExportReport_FullMethodName                = "/rill.runtime.v1.QueryService/ExportReport"
	QueryService_MetricsViewAggregation_FullMethodName      = "/rill.runtime.v1.QueryService/MetricsViewAggregation"
	QueryService_MetricsViewToplist_FullMethodName          = "/rill.runtime.v1.QueryService/MetricsViewToplist"
	QueryService_MetricsViewComparison_FullMethodName       = "/rill.runtime.v1.QueryService/MetricsViewComparison"
	QueryService_MetricsViewTimeSeries_FullMethodName       = "/rill.runtime.v1.QueryService/MetricsViewTimeSeries"
	QueryService_MetricsViewTotals_FullMethodName           = "/rill.runtime.v1.QueryService/MetricsViewTotals"
	QueryService_MetricsViewRows_FullMethodName             = "/rill.runtime.v1.QueryService/MetricsViewRows"
	QueryService_MetricsViewTimeRange_FullMethodName        = "/rill.runtime.v1.QueryService/MetricsViewTimeRange"
	QueryService_MetricsViewSchema_FullMethodName           = "/rill.runtime.v1.QueryService/MetricsViewSchema"
	QueryService_MetricsViewSearch_FullMethodName           = "/rill.runtime.v1.QueryService/MetricsViewSearch"
	QueryService_MetricsViewTimeRanges_FullMethodName       = "/rill.runtime.v1.QueryService/MetricsViewTimeRanges"
	QueryService_ResolveCanvas_FullMethodName               = "/rill.runtime.v1.QueryService/ResolveCanvas"
	QueryService_ResolveComponent_FullMethodName            = "/rill.runtime.v1.QueryService/ResolveComponent"
	QueryService_ColumnRollupInterval_FullMethodName        = "/rill.runtime.v1.QueryService/ColumnRollupInterval"
	QueryService_ColumnTopK_FullMethodName                  = "/rill.runtime.v1.QueryService/ColumnTopK"
	QueryService_ColumnNullCount_FullMethodName             = "/rill.runtime.v1.QueryService/ColumnNullCount"
	QueryService_ColumnDescriptiveStatistics_FullMethodName = "/rill.runtime.v1.QueryService/ColumnDescriptiveStatistics"
	QueryService_ColumnTimeGrain_FullMethodName             = "/rill.runtime.v1.QueryService/ColumnTimeGrain"
	QueryService_ColumnNumericHistogram_FullMethodName      = "/rill.runtime.v1.QueryService/ColumnNumericHistogram"
	QueryService_ColumnRugHistogram_FullMethodName          = "/rill.runtime.v1.QueryService/ColumnRugHistogram"
	QueryService_ColumnTimeRange_FullMethodName             = "/rill.runtime.v1.QueryService/ColumnTimeRange"
	QueryService_ColumnCardinality_FullMethodName           = "/rill.runtime.v1.QueryService/ColumnCardinality"
	QueryService_ColumnTimeSeries_FullMethodName            = "/rill.runtime.v1.QueryService/ColumnTimeSeries"
	QueryService_TableCardinality_FullMethodName            = "/rill.runtime.v1.QueryService/TableCardinality"
	QueryService_TableColumns_FullMethodName                = "/rill.runtime.v1.QueryService/TableColumns"
	QueryService_TableRows_FullMethodName                   = "/rill.runtime.v1.QueryService/TableRows"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Batch request with different queries
	QueryBatch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryBatchResponse], error)
	// Export builds a URL to download the results of a query as a file.
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	// ExportReport builds a URL to download the results of a query as a file.
	ExportReport(ctx context.Context, in *ExportReportRequest, opts ...grpc.CallOption) (*ExportReportResponse, error)
	// MetricsViewAggregation is a generic API for running group-by/pivot queries against a metrics view.
	MetricsViewAggregation(ctx context.Context, in *MetricsViewAggregationRequest, opts ...grpc.CallOption) (*MetricsViewAggregationResponse, error)
	// Deprecated - use MetricsViewComparison instead.
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error)
	// MetricsViewComparison returns a toplist containing comparison data of another toplist (same dimension/measure but a different time range).
	// Returns a toplist without comparison data if comparison time range is omitted.
	//
	// ie. comparsion toplist:
	// | measure1_base | measure1_previous   | measure1__delta_abs | measure1__delta_rel | dimension |
	// |---------------|---------------------|---------------------|--------------------|-----------|
	// | 2             | 2                   | 0                   | 0                  | Safari    |
	// | 1             | 0                   | 1                   | N/A                | Chrome    |
	// | 0             | 4                   | -4                  | -1.0               | Firefox   |
	//
	// ie. toplist:
	// | measure1 | measure2 | dimension |
	// |----------|----------|-----------|
	// | 2        | 45       | Safari    |
	// | 1        | 350      | Chrome    |
	// | 0        | 25       | Firefox   |
	MetricsViewComparison(ctx context.Context, in *MetricsViewComparisonRequest, opts ...grpc.CallOption) (*MetricsViewComparisonResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error)
	// MetricsViewRows returns the underlying model rows matching a metrics view time range and filter(s).
	//
	// ie. without granularity
	// | column1 | column2 | dimension |
	// |---------|---------|-----------|
	// | 2       | 2       | Safari    |
	// | 1       | 0       | Chrome    |
	// | 0       | 4       | Firefox   |
	//
	// ie. with granularity
	// | timestamp__day0      | column1 | column2 | dimension |
	// |----------------------|---------|---------|-----------|
	// | 2022-01-01T00:00:00Z | 2       | 2       | Safari    |
	// | 2022-01-01T00:00:00Z | 1       | 0       | Chrome    |
	// | 2022-01-01T00:00:00Z | 0       | 4       | Firefox   |
	MetricsViewRows(ctx context.Context, in *MetricsViewRowsRequest, opts ...grpc.CallOption) (*MetricsViewRowsResponse, error)
	// MetricsViewTimeRange Get the time range summaries (min, max) for time column in a metrics view
	MetricsViewTimeRange(ctx context.Context, in *MetricsViewTimeRangeRequest, opts ...grpc.CallOption) (*MetricsViewTimeRangeResponse, error)
	// MetricsViewSchema Get the data types of measures and dimensions
	MetricsViewSchema(ctx context.Context, in *MetricsViewSchemaRequest, opts ...grpc.CallOption) (*MetricsViewSchemaResponse, error)
	// MetricsViewSearch Get the data types of measures and dimensions
	MetricsViewSearch(ctx context.Context, in *MetricsViewSearchRequest, opts ...grpc.CallOption) (*MetricsViewSearchResponse, error)
	MetricsViewTimeRanges(ctx context.Context, in *MetricsViewTimeRangesRequest, opts ...grpc.CallOption) (*MetricsViewTimeRangesResponse, error)
	// ResolveCanvas is a convenience API that returns a canvas and all its referenced components and metrics views.
	ResolveCanvas(ctx context.Context, in *ResolveCanvasRequest, opts ...grpc.CallOption) (*ResolveCanvasResponse, error)
	// ResolveComponent resolves renderer for a Component resource.
	ResolveComponent(ctx context.Context, in *ResolveComponentRequest, opts ...grpc.CallOption) (*ResolveComponentResponse, error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(ctx context.Context, in *ColumnRollupIntervalRequest, opts ...grpc.CallOption) (*ColumnRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(ctx context.Context, in *ColumnTopKRequest, opts ...grpc.CallOption) (*ColumnTopKResponse, error)
	// Get the number of nulls in a column
	ColumnNullCount(ctx context.Context, in *ColumnNullCountRequest, opts ...grpc.CallOption) (*ColumnNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(ctx context.Context, in *ColumnDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*ColumnDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(ctx context.Context, in *ColumnTimeGrainRequest, opts ...grpc.CallOption) (*ColumnTimeGrainResponse, error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(ctx context.Context, in *ColumnNumericHistogramRequest, opts ...grpc.CallOption) (*ColumnNumericHistogramResponse, error)
	// Get outliers for a numeric column
	ColumnRugHistogram(ctx context.Context, in *ColumnRugHistogramRequest, opts ...grpc.CallOption) (*ColumnRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(ctx context.Context, in *ColumnTimeRangeRequest, opts ...grpc.CallOption) (*ColumnTimeRangeResponse, error)
	// Get cardinality for a column
	ColumnCardinality(ctx context.Context, in *ColumnCardinalityRequest, opts ...grpc.CallOption) (*ColumnCardinalityResponse, error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(ctx context.Context, in *ColumnTimeSeriesRequest, opts ...grpc.CallOption) (*ColumnTimeSeriesResponse, error)
	// TableCardinality returns row count
	TableCardinality(ctx context.Context, in *TableCardinalityRequest, opts ...grpc.CallOption) (*TableCardinalityResponse, error)
	// TableColumns returns column profiles
	TableColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error)
	// TableRows returns table rows
	TableRows(ctx context.Context, in *TableRowsRequest, opts ...grpc.CallOption) (*TableRowsResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, QueryService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryBatch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryBatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], QueryService_QueryBatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryBatchRequest, QueryBatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_QueryBatchClient = grpc.ServerStreamingClient[QueryBatchResponse]

func (c *queryServiceClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, QueryService_Export_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ExportReport(ctx context.Context, in *ExportReportRequest, opts ...grpc.CallOption) (*ExportReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportReportResponse)
	err := c.cc.Invoke(ctx, QueryService_ExportReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewAggregation(ctx context.Context, in *MetricsViewAggregationRequest, opts ...grpc.CallOption) (*MetricsViewAggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewAggregationResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewToplistResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewToplist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewComparison(ctx context.Context, in *MetricsViewComparisonRequest, opts ...grpc.CallOption) (*MetricsViewComparisonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewComparisonResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewComparison_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewTimeSeriesResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewTimeSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewTotalsResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewTotals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewRows(ctx context.Context, in *MetricsViewRowsRequest, opts ...grpc.CallOption) (*MetricsViewRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewRowsResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTimeRange(ctx context.Context, in *MetricsViewTimeRangeRequest, opts ...grpc.CallOption) (*MetricsViewTimeRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewTimeRangeResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewTimeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewSchema(ctx context.Context, in *MetricsViewSchemaRequest, opts ...grpc.CallOption) (*MetricsViewSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewSchemaResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewSearch(ctx context.Context, in *MetricsViewSearchRequest, opts ...grpc.CallOption) (*MetricsViewSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewSearchResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTimeRanges(ctx context.Context, in *MetricsViewTimeRangesRequest, opts ...grpc.CallOption) (*MetricsViewTimeRangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsViewTimeRangesResponse)
	err := c.cc.Invoke(ctx, QueryService_MetricsViewTimeRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ResolveCanvas(ctx context.Context, in *ResolveCanvasRequest, opts ...grpc.CallOption) (*ResolveCanvasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveCanvasResponse)
	err := c.cc.Invoke(ctx, QueryService_ResolveCanvas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ResolveComponent(ctx context.Context, in *ResolveComponentRequest, opts ...grpc.CallOption) (*ResolveComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveComponentResponse)
	err := c.cc.Invoke(ctx, QueryService_ResolveComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnRollupInterval(ctx context.Context, in *ColumnRollupIntervalRequest, opts ...grpc.CallOption) (*ColumnRollupIntervalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnRollupIntervalResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnRollupInterval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTopK(ctx context.Context, in *ColumnTopKRequest, opts ...grpc.CallOption) (*ColumnTopKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnTopKResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnTopK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnNullCount(ctx context.Context, in *ColumnNullCountRequest, opts ...grpc.CallOption) (*ColumnNullCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnNullCountResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnNullCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnDescriptiveStatistics(ctx context.Context, in *ColumnDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*ColumnDescriptiveStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnDescriptiveStatisticsResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnDescriptiveStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeGrain(ctx context.Context, in *ColumnTimeGrainRequest, opts ...grpc.CallOption) (*ColumnTimeGrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnTimeGrainResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnTimeGrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnNumericHistogram(ctx context.Context, in *ColumnNumericHistogramRequest, opts ...grpc.CallOption) (*ColumnNumericHistogramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnNumericHistogramResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnNumericHistogram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnRugHistogram(ctx context.Context, in *ColumnRugHistogramRequest, opts ...grpc.CallOption) (*ColumnRugHistogramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnRugHistogramResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnRugHistogram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeRange(ctx context.Context, in *ColumnTimeRangeRequest, opts ...grpc.CallOption) (*ColumnTimeRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnTimeRangeResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnTimeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnCardinality(ctx context.Context, in *ColumnCardinalityRequest, opts ...grpc.CallOption) (*ColumnCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnCardinalityResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeSeries(ctx context.Context, in *ColumnTimeSeriesRequest, opts ...grpc.CallOption) (*ColumnTimeSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnTimeSeriesResponse)
	err := c.cc.Invoke(ctx, QueryService_ColumnTimeSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableCardinality(ctx context.Context, in *TableCardinalityRequest, opts ...grpc.CallOption) (*TableCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableCardinalityResponse)
	err := c.cc.Invoke(ctx, QueryService_TableCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableColumnsResponse)
	err := c.cc.Invoke(ctx, QueryService_TableColumns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableRows(ctx context.Context, in *TableRowsRequest, opts ...grpc.CallOption) (*TableRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableRowsResponse)
	err := c.cc.Invoke(ctx, QueryService_TableRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Batch request with different queries
	QueryBatch(*QueryBatchRequest, grpc.ServerStreamingServer[QueryBatchResponse]) error
	// Export builds a URL to download the results of a query as a file.
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
	// ExportReport builds a URL to download the results of a query as a file.
	ExportReport(context.Context, *ExportReportRequest) (*ExportReportResponse, error)
	// MetricsViewAggregation is a generic API for running group-by/pivot queries against a metrics view.
	MetricsViewAggregation(context.Context, *MetricsViewAggregationRequest) (*MetricsViewAggregationResponse, error)
	// Deprecated - use MetricsViewComparison instead.
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error)
	// MetricsViewComparison returns a toplist containing comparison data of another toplist (same dimension/measure but a different time range).
	// Returns a toplist without comparison data if comparison time range is omitted.
	//
	// ie. comparsion toplist:
	// | measure1_base | measure1_previous   | measure1__delta_abs | measure1__delta_rel | dimension |
	// |---------------|---------------------|---------------------|--------------------|-----------|
	// | 2             | 2                   | 0                   | 0                  | Safari    |
	// | 1             | 0                   | 1                   | N/A                | Chrome    |
	// | 0             | 4                   | -4                  | -1.0               | Firefox   |
	//
	// ie. toplist:
	// | measure1 | measure2 | dimension |
	// |----------|----------|-----------|
	// | 2        | 45       | Safari    |
	// | 1        | 350      | Chrome    |
	// | 0        | 25       | Firefox   |
	MetricsViewComparison(context.Context, *MetricsViewComparisonRequest) (*MetricsViewComparisonResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error)
	// MetricsViewRows returns the underlying model rows matching a metrics view time range and filter(s).
	//
	// ie. without granularity
	// | column1 | column2 | dimension |
	// |---------|---------|-----------|
	// | 2       | 2       | Safari    |
	// | 1       | 0       | Chrome    |
	// | 0       | 4       | Firefox   |
	//
	// ie. with granularity
	// | timestamp__day0      | column1 | column2 | dimension |
	// |----------------------|---------|---------|-----------|
	// | 2022-01-01T00:00:00Z | 2       | 2       | Safari    |
	// | 2022-01-01T00:00:00Z | 1       | 0       | Chrome    |
	// | 2022-01-01T00:00:00Z | 0       | 4       | Firefox   |
	MetricsViewRows(context.Context, *MetricsViewRowsRequest) (*MetricsViewRowsResponse, error)
	// MetricsViewTimeRange Get the time range summaries (min, max) for time column in a metrics view
	MetricsViewTimeRange(context.Context, *MetricsViewTimeRangeRequest) (*MetricsViewTimeRangeResponse, error)
	// MetricsViewSchema Get the data types of measures and dimensions
	MetricsViewSchema(context.Context, *MetricsViewSchemaRequest) (*MetricsViewSchemaResponse, error)
	// MetricsViewSearch Get the data types of measures and dimensions
	MetricsViewSearch(context.Context, *MetricsViewSearchRequest) (*MetricsViewSearchResponse, error)
	MetricsViewTimeRanges(context.Context, *MetricsViewTimeRangesRequest) (*MetricsViewTimeRangesResponse, error)
	// ResolveCanvas is a convenience API that returns a canvas and all its referenced components and metrics views.
	ResolveCanvas(context.Context, *ResolveCanvasRequest) (*ResolveCanvasResponse, error)
	// ResolveComponent resolves renderer for a Component resource.
	ResolveComponent(context.Context, *ResolveComponentRequest) (*ResolveComponentResponse, error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(context.Context, *ColumnRollupIntervalRequest) (*ColumnRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(context.Context, *ColumnTopKRequest) (*ColumnTopKResponse, error)
	// Get the number of nulls in a column
	ColumnNullCount(context.Context, *ColumnNullCountRequest) (*ColumnNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(context.Context, *ColumnDescriptiveStatisticsRequest) (*ColumnDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(context.Context, *ColumnTimeGrainRequest) (*ColumnTimeGrainResponse, error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(context.Context, *ColumnNumericHistogramRequest) (*ColumnNumericHistogramResponse, error)
	// Get outliers for a numeric column
	ColumnRugHistogram(context.Context, *ColumnRugHistogramRequest) (*ColumnRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(context.Context, *ColumnTimeRangeRequest) (*ColumnTimeRangeResponse, error)
	// Get cardinality for a column
	ColumnCardinality(context.Context, *ColumnCardinalityRequest) (*ColumnCardinalityResponse, error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(context.Context, *ColumnTimeSeriesRequest) (*ColumnTimeSeriesResponse, error)
	// TableCardinality returns row count
	TableCardinality(context.Context, *TableCardinalityRequest) (*TableCardinalityResponse, error)
	// TableColumns returns column profiles
	TableColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error)
	// TableRows returns table rows
	TableRows(context.Context, *TableRowsRequest) (*TableRowsResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryServiceServer) QueryBatch(*QueryBatchRequest, grpc.ServerStreamingServer[QueryBatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method QueryBatch not implemented")
}
func (UnimplementedQueryServiceServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedQueryServiceServer) ExportReport(context.Context, *ExportReportRequest) (*ExportReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReport not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewAggregation(context.Context, *MetricsViewAggregationRequest) (*MetricsViewAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewAggregation not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewToplist not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewComparison(context.Context, *MetricsViewComparisonRequest) (*MetricsViewComparisonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewComparison not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTotals not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewRows(context.Context, *MetricsViewRowsRequest) (*MetricsViewRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewRows not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTimeRange(context.Context, *MetricsViewTimeRangeRequest) (*MetricsViewTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeRange not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewSchema(context.Context, *MetricsViewSchemaRequest) (*MetricsViewSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewSchema not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewSearch(context.Context, *MetricsViewSearchRequest) (*MetricsViewSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewSearch not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTimeRanges(context.Context, *MetricsViewTimeRangesRequest) (*MetricsViewTimeRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeRanges not implemented")
}
func (UnimplementedQueryServiceServer) ResolveCanvas(context.Context, *ResolveCanvasRequest) (*ResolveCanvasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCanvas not implemented")
}
func (UnimplementedQueryServiceServer) ResolveComponent(context.Context, *ResolveComponentRequest) (*ResolveComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveComponent not implemented")
}
func (UnimplementedQueryServiceServer) ColumnRollupInterval(context.Context, *ColumnRollupIntervalRequest) (*ColumnRollupIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnRollupInterval not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTopK(context.Context, *ColumnTopKRequest) (*ColumnTopKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTopK not implemented")
}
func (UnimplementedQueryServiceServer) ColumnNullCount(context.Context, *ColumnNullCountRequest) (*ColumnNullCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnNullCount not implemented")
}
func (UnimplementedQueryServiceServer) ColumnDescriptiveStatistics(context.Context, *ColumnDescriptiveStatisticsRequest) (*ColumnDescriptiveStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnDescriptiveStatistics not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeGrain(context.Context, *ColumnTimeGrainRequest) (*ColumnTimeGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeGrain not implemented")
}
func (UnimplementedQueryServiceServer) ColumnNumericHistogram(context.Context, *ColumnNumericHistogramRequest) (*ColumnNumericHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnNumericHistogram not implemented")
}
func (UnimplementedQueryServiceServer) ColumnRugHistogram(context.Context, *ColumnRugHistogramRequest) (*ColumnRugHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnRugHistogram not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeRange(context.Context, *ColumnTimeRangeRequest) (*ColumnTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeRange not implemented")
}
func (UnimplementedQueryServiceServer) ColumnCardinality(context.Context, *ColumnCardinalityRequest) (*ColumnCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnCardinality not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeSeries(context.Context, *ColumnTimeSeriesRequest) (*ColumnTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) TableCardinality(context.Context, *TableCardinalityRequest) (*TableCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCardinality not implemented")
}
func (UnimplementedQueryServiceServer) TableColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableColumns not implemented")
}
func (UnimplementedQueryServiceServer) TableRows(context.Context, *TableRowsRequest) (*TableRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableRows not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryBatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).QueryBatch(m, &grpc.GenericServerStream[QueryBatchRequest, QueryBatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_QueryBatchServer = grpc.ServerStreamingServer[QueryBatchResponse]

func _QueryService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_Export_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ExportReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ExportReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ExportReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ExportReport(ctx, req.(*ExportReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewAggregation(ctx, req.(*MetricsViewAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewToplist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewToplistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewToplist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, req.(*MetricsViewToplistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewComparison_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewComparisonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewComparison(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewComparison_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewComparison(ctx, req.(*MetricsViewComparisonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, req.(*MetricsViewTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTotalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewTotals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, req.(*MetricsViewTotalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewRows(ctx, req.(*MetricsViewRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTimeRange(ctx, req.(*MetricsViewTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewSchema(ctx, req.(*MetricsViewSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewSearch(ctx, req.(*MetricsViewSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTimeRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTimeRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_MetricsViewTimeRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTimeRanges(ctx, req.(*MetricsViewTimeRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ResolveCanvas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCanvasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ResolveCanvas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ResolveCanvas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ResolveCanvas(ctx, req.(*ResolveCanvasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ResolveComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ResolveComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ResolveComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ResolveComponent(ctx, req.(*ResolveComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnRollupInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnRollupIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnRollupInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnRollupInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnRollupInterval(ctx, req.(*ColumnRollupIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnTopK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTopK(ctx, req.(*ColumnTopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnNullCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnNullCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnNullCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnNullCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnNullCount(ctx, req.(*ColumnNullCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnDescriptiveStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnDescriptiveStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnDescriptiveStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnDescriptiveStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnDescriptiveStatistics(ctx, req.(*ColumnDescriptiveStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnTimeGrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeGrain(ctx, req.(*ColumnTimeGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnNumericHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnNumericHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnNumericHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnNumericHistogram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnNumericHistogram(ctx, req.(*ColumnNumericHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnRugHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnRugHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnRugHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnRugHistogram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnRugHistogram(ctx, req.(*ColumnRugHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeRange(ctx, req.(*ColumnTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnCardinality(ctx, req.(*ColumnCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ColumnTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeSeries(ctx, req.(*ColumnTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_TableCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableCardinality(ctx, req.(*TableCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_TableColumns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableColumns(ctx, req.(*TableColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_TableRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableRows(ctx, req.(*TableRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.runtime.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryService_Query_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _QueryService_Export_Handler,
		},
		{
			MethodName: "ExportReport",
			Handler:    _QueryService_ExportReport_Handler,
		},
		{
			MethodName: "MetricsViewAggregation",
			Handler:    _QueryService_MetricsViewAggregation_Handler,
		},
		{
			MethodName: "MetricsViewToplist",
			Handler:    _QueryService_MetricsViewToplist_Handler,
		},
		{
			MethodName: "MetricsViewComparison",
			Handler:    _QueryService_MetricsViewComparison_Handler,
		},
		{
			MethodName: "MetricsViewTimeSeries",
			Handler:    _QueryService_MetricsViewTimeSeries_Handler,
		},
		{
			MethodName: "MetricsViewTotals",
			Handler:    _QueryService_MetricsViewTotals_Handler,
		},
		{
			MethodName: "MetricsViewRows",
			Handler:    _QueryService_MetricsViewRows_Handler,
		},
		{
			MethodName: "MetricsViewTimeRange",
			Handler:    _QueryService_MetricsViewTimeRange_Handler,
		},
		{
			MethodName: "MetricsViewSchema",
			Handler:    _QueryService_MetricsViewSchema_Handler,
		},
		{
			MethodName: "MetricsViewSearch",
			Handler:    _QueryService_MetricsViewSearch_Handler,
		},
		{
			MethodName: "MetricsViewTimeRanges",
			Handler:    _QueryService_MetricsViewTimeRanges_Handler,
		},
		{
			MethodName: "ResolveCanvas",
			Handler:    _QueryService_ResolveCanvas_Handler,
		},
		{
			MethodName: "ResolveComponent",
			Handler:    _QueryService_ResolveComponent_Handler,
		},
		{
			MethodName: "ColumnRollupInterval",
			Handler:    _QueryService_ColumnRollupInterval_Handler,
		},
		{
			MethodName: "ColumnTopK",
			Handler:    _QueryService_ColumnTopK_Handler,
		},
		{
			MethodName: "ColumnNullCount",
			Handler:    _QueryService_ColumnNullCount_Handler,
		},
		{
			MethodName: "ColumnDescriptiveStatistics",
			Handler:    _QueryService_ColumnDescriptiveStatistics_Handler,
		},
		{
			MethodName: "ColumnTimeGrain",
			Handler:    _QueryService_ColumnTimeGrain_Handler,
		},
		{
			MethodName: "ColumnNumericHistogram",
			Handler:    _QueryService_ColumnNumericHistogram_Handler,
		},
		{
			MethodName: "ColumnRugHistogram",
			Handler:    _QueryService_ColumnRugHistogram_Handler,
		},
		{
			MethodName: "ColumnTimeRange",
			Handler:    _QueryService_ColumnTimeRange_Handler,
		},
		{
			MethodName: "ColumnCardinality",
			Handler:    _QueryService_ColumnCardinality_Handler,
		},
		{
			MethodName: "ColumnTimeSeries",
			Handler:    _QueryService_ColumnTimeSeries_Handler,
		},
		{
			MethodName: "TableCardinality",
			Handler:    _QueryService_TableCardinality_Handler,
		},
		{
			MethodName: "TableColumns",
			Handler:    _QueryService_TableColumns_Handler,
		},
		{
			MethodName: "TableRows",
			Handler:    _QueryService_TableRows_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryBatch",
			Handler:       _QueryService_QueryBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rill/runtime/v1/queries.proto",
}
