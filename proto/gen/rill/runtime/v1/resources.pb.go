// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: rill/runtime/v1/resources.proto

package runtimev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReconcileStatus int32

const (
	ReconcileStatus_RECONCILE_STATUS_UNSPECIFIED ReconcileStatus = 0
	ReconcileStatus_RECONCILE_STATUS_IDLE        ReconcileStatus = 1
	ReconcileStatus_RECONCILE_STATUS_PENDING     ReconcileStatus = 2
	ReconcileStatus_RECONCILE_STATUS_RUNNING     ReconcileStatus = 3
)

// Enum value maps for ReconcileStatus.
var (
	ReconcileStatus_name = map[int32]string{
		0: "RECONCILE_STATUS_UNSPECIFIED",
		1: "RECONCILE_STATUS_IDLE",
		2: "RECONCILE_STATUS_PENDING",
		3: "RECONCILE_STATUS_RUNNING",
	}
	ReconcileStatus_value = map[string]int32{
		"RECONCILE_STATUS_UNSPECIFIED": 0,
		"RECONCILE_STATUS_IDLE":        1,
		"RECONCILE_STATUS_PENDING":     2,
		"RECONCILE_STATUS_RUNNING":     3,
	}
)

func (x ReconcileStatus) Enum() *ReconcileStatus {
	p := new(ReconcileStatus)
	*p = x
	return p
}

func (x ReconcileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReconcileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[0].Descriptor()
}

func (ReconcileStatus) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[0]
}

func (x ReconcileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReconcileStatus.Descriptor instead.
func (ReconcileStatus) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{0}
}

type ExploreComparisonMode int32

const (
	ExploreComparisonMode_EXPLORE_COMPARISON_MODE_UNSPECIFIED ExploreComparisonMode = 0
	ExploreComparisonMode_EXPLORE_COMPARISON_MODE_NONE        ExploreComparisonMode = 1
	ExploreComparisonMode_EXPLORE_COMPARISON_MODE_TIME        ExploreComparisonMode = 2
	ExploreComparisonMode_EXPLORE_COMPARISON_MODE_DIMENSION   ExploreComparisonMode = 3
)

// Enum value maps for ExploreComparisonMode.
var (
	ExploreComparisonMode_name = map[int32]string{
		0: "EXPLORE_COMPARISON_MODE_UNSPECIFIED",
		1: "EXPLORE_COMPARISON_MODE_NONE",
		2: "EXPLORE_COMPARISON_MODE_TIME",
		3: "EXPLORE_COMPARISON_MODE_DIMENSION",
	}
	ExploreComparisonMode_value = map[string]int32{
		"EXPLORE_COMPARISON_MODE_UNSPECIFIED": 0,
		"EXPLORE_COMPARISON_MODE_NONE":        1,
		"EXPLORE_COMPARISON_MODE_TIME":        2,
		"EXPLORE_COMPARISON_MODE_DIMENSION":   3,
	}
)

func (x ExploreComparisonMode) Enum() *ExploreComparisonMode {
	p := new(ExploreComparisonMode)
	*p = x
	return p
}

func (x ExploreComparisonMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExploreComparisonMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[1].Descriptor()
}

func (ExploreComparisonMode) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[1]
}

func (x ExploreComparisonMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExploreComparisonMode.Descriptor instead.
func (ExploreComparisonMode) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{1}
}

type ExploreWebView int32

const (
	ExploreWebView_EXPLORE_WEB_VIEW_UNSPECIFIED    ExploreWebView = 0
	ExploreWebView_EXPLORE_WEB_VIEW_EXPLORE        ExploreWebView = 1
	ExploreWebView_EXPLORE_WEB_VIEW_TIME_DIMENSION ExploreWebView = 2
	ExploreWebView_EXPLORE_WEB_VIEW_PIVOT          ExploreWebView = 3
	ExploreWebView_EXPLORE_WEB_VIEW_CANVAS         ExploreWebView = 4
)

// Enum value maps for ExploreWebView.
var (
	ExploreWebView_name = map[int32]string{
		0: "EXPLORE_WEB_VIEW_UNSPECIFIED",
		1: "EXPLORE_WEB_VIEW_EXPLORE",
		2: "EXPLORE_WEB_VIEW_TIME_DIMENSION",
		3: "EXPLORE_WEB_VIEW_PIVOT",
		4: "EXPLORE_WEB_VIEW_CANVAS",
	}
	ExploreWebView_value = map[string]int32{
		"EXPLORE_WEB_VIEW_UNSPECIFIED":    0,
		"EXPLORE_WEB_VIEW_EXPLORE":        1,
		"EXPLORE_WEB_VIEW_TIME_DIMENSION": 2,
		"EXPLORE_WEB_VIEW_PIVOT":          3,
		"EXPLORE_WEB_VIEW_CANVAS":         4,
	}
)

func (x ExploreWebView) Enum() *ExploreWebView {
	p := new(ExploreWebView)
	*p = x
	return p
}

func (x ExploreWebView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExploreWebView) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[2].Descriptor()
}

func (ExploreWebView) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[2]
}

func (x ExploreWebView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExploreWebView.Descriptor instead.
func (ExploreWebView) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{2}
}

type ExploreSortType int32

const (
	ExploreSortType_EXPLORE_SORT_TYPE_UNSPECIFIED    ExploreSortType = 0
	ExploreSortType_EXPLORE_SORT_TYPE_VALUE          ExploreSortType = 1
	ExploreSortType_EXPLORE_SORT_TYPE_PERCENT        ExploreSortType = 2
	ExploreSortType_EXPLORE_SORT_TYPE_DELTA_PERCENT  ExploreSortType = 3
	ExploreSortType_EXPLORE_SORT_TYPE_DELTA_ABSOLUTE ExploreSortType = 4
	ExploreSortType_EXPLORE_SORT_TYPE_DIMENSION      ExploreSortType = 5
)

// Enum value maps for ExploreSortType.
var (
	ExploreSortType_name = map[int32]string{
		0: "EXPLORE_SORT_TYPE_UNSPECIFIED",
		1: "EXPLORE_SORT_TYPE_VALUE",
		2: "EXPLORE_SORT_TYPE_PERCENT",
		3: "EXPLORE_SORT_TYPE_DELTA_PERCENT",
		4: "EXPLORE_SORT_TYPE_DELTA_ABSOLUTE",
		5: "EXPLORE_SORT_TYPE_DIMENSION",
	}
	ExploreSortType_value = map[string]int32{
		"EXPLORE_SORT_TYPE_UNSPECIFIED":    0,
		"EXPLORE_SORT_TYPE_VALUE":          1,
		"EXPLORE_SORT_TYPE_PERCENT":        2,
		"EXPLORE_SORT_TYPE_DELTA_PERCENT":  3,
		"EXPLORE_SORT_TYPE_DELTA_ABSOLUTE": 4,
		"EXPLORE_SORT_TYPE_DIMENSION":      5,
	}
)

func (x ExploreSortType) Enum() *ExploreSortType {
	p := new(ExploreSortType)
	*p = x
	return p
}

func (x ExploreSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExploreSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[3].Descriptor()
}

func (ExploreSortType) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[3]
}

func (x ExploreSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExploreSortType.Descriptor instead.
func (ExploreSortType) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{3}
}

type AssertionStatus int32

const (
	AssertionStatus_ASSERTION_STATUS_UNSPECIFIED AssertionStatus = 0
	AssertionStatus_ASSERTION_STATUS_PASS        AssertionStatus = 1
	AssertionStatus_ASSERTION_STATUS_FAIL        AssertionStatus = 2
	AssertionStatus_ASSERTION_STATUS_ERROR       AssertionStatus = 3
)

// Enum value maps for AssertionStatus.
var (
	AssertionStatus_name = map[int32]string{
		0: "ASSERTION_STATUS_UNSPECIFIED",
		1: "ASSERTION_STATUS_PASS",
		2: "ASSERTION_STATUS_FAIL",
		3: "ASSERTION_STATUS_ERROR",
	}
	AssertionStatus_value = map[string]int32{
		"ASSERTION_STATUS_UNSPECIFIED": 0,
		"ASSERTION_STATUS_PASS":        1,
		"ASSERTION_STATUS_FAIL":        2,
		"ASSERTION_STATUS_ERROR":       3,
	}
)

func (x AssertionStatus) Enum() *AssertionStatus {
	p := new(AssertionStatus)
	*p = x
	return p
}

func (x AssertionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[4].Descriptor()
}

func (AssertionStatus) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[4]
}

func (x AssertionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionStatus.Descriptor instead.
func (AssertionStatus) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{4}
}

// Type of measure query to generate
type MetricsViewSpec_MeasureType int32

const (
	MetricsViewSpec_MEASURE_TYPE_UNSPECIFIED     MetricsViewSpec_MeasureType = 0
	MetricsViewSpec_MEASURE_TYPE_SIMPLE          MetricsViewSpec_MeasureType = 1
	MetricsViewSpec_MEASURE_TYPE_DERIVED         MetricsViewSpec_MeasureType = 2
	MetricsViewSpec_MEASURE_TYPE_TIME_COMPARISON MetricsViewSpec_MeasureType = 3
)

// Enum value maps for MetricsViewSpec_MeasureType.
var (
	MetricsViewSpec_MeasureType_name = map[int32]string{
		0: "MEASURE_TYPE_UNSPECIFIED",
		1: "MEASURE_TYPE_SIMPLE",
		2: "MEASURE_TYPE_DERIVED",
		3: "MEASURE_TYPE_TIME_COMPARISON",
	}
	MetricsViewSpec_MeasureType_value = map[string]int32{
		"MEASURE_TYPE_UNSPECIFIED":     0,
		"MEASURE_TYPE_SIMPLE":          1,
		"MEASURE_TYPE_DERIVED":         2,
		"MEASURE_TYPE_TIME_COMPARISON": 3,
	}
)

func (x MetricsViewSpec_MeasureType) Enum() *MetricsViewSpec_MeasureType {
	p := new(MetricsViewSpec_MeasureType)
	*p = x
	return p
}

func (x MetricsViewSpec_MeasureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsViewSpec_MeasureType) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[5].Descriptor()
}

func (MetricsViewSpec_MeasureType) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[5]
}

func (x MetricsViewSpec_MeasureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsViewSpec_MeasureType.Descriptor instead.
func (MetricsViewSpec_MeasureType) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 0}
}

// DEPRECATED FIELDS
// Deprecated: Now defined in the Explore resource.
type MetricsViewSpec_ComparisonMode int32

const (
	MetricsViewSpec_COMPARISON_MODE_UNSPECIFIED MetricsViewSpec_ComparisonMode = 0
	MetricsViewSpec_COMPARISON_MODE_NONE        MetricsViewSpec_ComparisonMode = 1
	MetricsViewSpec_COMPARISON_MODE_TIME        MetricsViewSpec_ComparisonMode = 2
	MetricsViewSpec_COMPARISON_MODE_DIMENSION   MetricsViewSpec_ComparisonMode = 3
)

// Enum value maps for MetricsViewSpec_ComparisonMode.
var (
	MetricsViewSpec_ComparisonMode_name = map[int32]string{
		0: "COMPARISON_MODE_UNSPECIFIED",
		1: "COMPARISON_MODE_NONE",
		2: "COMPARISON_MODE_TIME",
		3: "COMPARISON_MODE_DIMENSION",
	}
	MetricsViewSpec_ComparisonMode_value = map[string]int32{
		"COMPARISON_MODE_UNSPECIFIED": 0,
		"COMPARISON_MODE_NONE":        1,
		"COMPARISON_MODE_TIME":        2,
		"COMPARISON_MODE_DIMENSION":   3,
	}
)

func (x MetricsViewSpec_ComparisonMode) Enum() *MetricsViewSpec_ComparisonMode {
	p := new(MetricsViewSpec_ComparisonMode)
	*p = x
	return p
}

func (x MetricsViewSpec_ComparisonMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsViewSpec_ComparisonMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[6].Descriptor()
}

func (MetricsViewSpec_ComparisonMode) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[6]
}

func (x MetricsViewSpec_ComparisonMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsViewSpec_ComparisonMode.Descriptor instead.
func (MetricsViewSpec_ComparisonMode) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 1}
}

type BucketExtractPolicy_Strategy int32

const (
	BucketExtractPolicy_STRATEGY_UNSPECIFIED BucketExtractPolicy_Strategy = 0
	BucketExtractPolicy_STRATEGY_HEAD        BucketExtractPolicy_Strategy = 1
	BucketExtractPolicy_STRATEGY_TAIL        BucketExtractPolicy_Strategy = 2
)

// Enum value maps for BucketExtractPolicy_Strategy.
var (
	BucketExtractPolicy_Strategy_name = map[int32]string{
		0: "STRATEGY_UNSPECIFIED",
		1: "STRATEGY_HEAD",
		2: "STRATEGY_TAIL",
	}
	BucketExtractPolicy_Strategy_value = map[string]int32{
		"STRATEGY_UNSPECIFIED": 0,
		"STRATEGY_HEAD":        1,
		"STRATEGY_TAIL":        2,
	}
)

func (x BucketExtractPolicy_Strategy) Enum() *BucketExtractPolicy_Strategy {
	p := new(BucketExtractPolicy_Strategy)
	*p = x
	return p
}

func (x BucketExtractPolicy_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketExtractPolicy_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_rill_runtime_v1_resources_proto_enumTypes[7].Descriptor()
}

func (BucketExtractPolicy_Strategy) Type() protoreflect.EnumType {
	return &file_rill_runtime_v1_resources_proto_enumTypes[7]
}

func (x BucketExtractPolicy_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketExtractPolicy_Strategy.Descriptor instead.
func (BucketExtractPolicy_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{50, 0}
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *ResourceMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Resource:
	//
	//	*Resource_ProjectParser
	//	*Resource_Source
	//	*Resource_Model
	//	*Resource_MetricsView
	//	*Resource_Explore
	//	*Resource_Migration
	//	*Resource_Report
	//	*Resource_Alert
	//	*Resource_PullTrigger
	//	*Resource_RefreshTrigger
	//	*Resource_BucketPlanner
	//	*Resource_Theme
	//	*Resource_Component
	//	*Resource_Canvas
	//	*Resource_Api
	//	*Resource_Connector
	Resource isResource_Resource `protobuf_oneof:"resource"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Resource) GetMeta() *ResourceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Resource) GetProjectParser() *ProjectParser {
	if x, ok := x.GetResource().(*Resource_ProjectParser); ok {
		return x.ProjectParser
	}
	return nil
}

func (x *Resource) GetSource() *SourceV2 {
	if x, ok := x.GetResource().(*Resource_Source); ok {
		return x.Source
	}
	return nil
}

func (x *Resource) GetModel() *ModelV2 {
	if x, ok := x.GetResource().(*Resource_Model); ok {
		return x.Model
	}
	return nil
}

func (x *Resource) GetMetricsView() *MetricsViewV2 {
	if x, ok := x.GetResource().(*Resource_MetricsView); ok {
		return x.MetricsView
	}
	return nil
}

func (x *Resource) GetExplore() *Explore {
	if x, ok := x.GetResource().(*Resource_Explore); ok {
		return x.Explore
	}
	return nil
}

func (x *Resource) GetMigration() *Migration {
	if x, ok := x.GetResource().(*Resource_Migration); ok {
		return x.Migration
	}
	return nil
}

func (x *Resource) GetReport() *Report {
	if x, ok := x.GetResource().(*Resource_Report); ok {
		return x.Report
	}
	return nil
}

func (x *Resource) GetAlert() *Alert {
	if x, ok := x.GetResource().(*Resource_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *Resource) GetPullTrigger() *PullTrigger {
	if x, ok := x.GetResource().(*Resource_PullTrigger); ok {
		return x.PullTrigger
	}
	return nil
}

func (x *Resource) GetRefreshTrigger() *RefreshTrigger {
	if x, ok := x.GetResource().(*Resource_RefreshTrigger); ok {
		return x.RefreshTrigger
	}
	return nil
}

func (x *Resource) GetBucketPlanner() *BucketPlanner {
	if x, ok := x.GetResource().(*Resource_BucketPlanner); ok {
		return x.BucketPlanner
	}
	return nil
}

func (x *Resource) GetTheme() *Theme {
	if x, ok := x.GetResource().(*Resource_Theme); ok {
		return x.Theme
	}
	return nil
}

func (x *Resource) GetComponent() *Component {
	if x, ok := x.GetResource().(*Resource_Component); ok {
		return x.Component
	}
	return nil
}

func (x *Resource) GetCanvas() *Canvas {
	if x, ok := x.GetResource().(*Resource_Canvas); ok {
		return x.Canvas
	}
	return nil
}

func (x *Resource) GetApi() *API {
	if x, ok := x.GetResource().(*Resource_Api); ok {
		return x.Api
	}
	return nil
}

func (x *Resource) GetConnector() *ConnectorV2 {
	if x, ok := x.GetResource().(*Resource_Connector); ok {
		return x.Connector
	}
	return nil
}

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_ProjectParser struct {
	// Well-known types only, for now. If required, we can add support for a google.protobuf.Any later.
	ProjectParser *ProjectParser `protobuf:"bytes,2,opt,name=project_parser,json=projectParser,proto3,oneof"`
}

type Resource_Source struct {
	Source *SourceV2 `protobuf:"bytes,3,opt,name=source,proto3,oneof"`
}

type Resource_Model struct {
	Model *ModelV2 `protobuf:"bytes,4,opt,name=model,proto3,oneof"`
}

type Resource_MetricsView struct {
	MetricsView *MetricsViewV2 `protobuf:"bytes,5,opt,name=metrics_view,json=metricsView,proto3,oneof"`
}

type Resource_Explore struct {
	Explore *Explore `protobuf:"bytes,17,opt,name=explore,proto3,oneof"`
}

type Resource_Migration struct {
	Migration *Migration `protobuf:"bytes,9,opt,name=migration,proto3,oneof"`
}

type Resource_Report struct {
	Report *Report `protobuf:"bytes,10,opt,name=report,proto3,oneof"`
}

type Resource_Alert struct {
	Alert *Alert `protobuf:"bytes,12,opt,name=alert,proto3,oneof"`
}

type Resource_PullTrigger struct {
	PullTrigger *PullTrigger `protobuf:"bytes,6,opt,name=pull_trigger,json=pullTrigger,proto3,oneof"`
}

type Resource_RefreshTrigger struct {
	RefreshTrigger *RefreshTrigger `protobuf:"bytes,7,opt,name=refresh_trigger,json=refreshTrigger,proto3,oneof"`
}

type Resource_BucketPlanner struct {
	BucketPlanner *BucketPlanner `protobuf:"bytes,8,opt,name=bucket_planner,json=bucketPlanner,proto3,oneof"`
}

type Resource_Theme struct {
	Theme *Theme `protobuf:"bytes,11,opt,name=theme,proto3,oneof"`
}

type Resource_Component struct {
	Component *Component `protobuf:"bytes,13,opt,name=component,proto3,oneof"`
}

type Resource_Canvas struct {
	Canvas *Canvas `protobuf:"bytes,14,opt,name=canvas,proto3,oneof"`
}

type Resource_Api struct {
	Api *API `protobuf:"bytes,15,opt,name=api,proto3,oneof"`
}

type Resource_Connector struct {
	Connector *ConnectorV2 `protobuf:"bytes,16,opt,name=connector,proto3,oneof"`
}

func (*Resource_ProjectParser) isResource_Resource() {}

func (*Resource_Source) isResource_Resource() {}

func (*Resource_Model) isResource_Resource() {}

func (*Resource_MetricsView) isResource_Resource() {}

func (*Resource_Explore) isResource_Resource() {}

func (*Resource_Migration) isResource_Resource() {}

func (*Resource_Report) isResource_Resource() {}

func (*Resource_Alert) isResource_Resource() {}

func (*Resource_PullTrigger) isResource_Resource() {}

func (*Resource_RefreshTrigger) isResource_Resource() {}

func (*Resource_BucketPlanner) isResource_Resource() {}

func (*Resource_Theme) isResource_Resource() {}

func (*Resource_Component) isResource_Resource() {}

func (*Resource_Canvas) isResource_Resource() {}

func (*Resource_Api) isResource_Resource() {}

func (*Resource_Connector) isResource_Resource() {}

type ResourceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *ResourceName          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Refs            []*ResourceName        `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
	Owner           *ResourceName          `protobuf:"bytes,3,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	FilePaths       []string               `protobuf:"bytes,4,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty"`
	Hidden          bool                   `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Version         int64                  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	SpecVersion     int64                  `protobuf:"varint,5,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	StateVersion    int64                  `protobuf:"varint,6,opt,name=state_version,json=stateVersion,proto3" json:"state_version,omitempty"`
	CreatedOn       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	SpecUpdatedOn   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=spec_updated_on,json=specUpdatedOn,proto3" json:"spec_updated_on,omitempty"`
	StateUpdatedOn  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=state_updated_on,json=stateUpdatedOn,proto3" json:"state_updated_on,omitempty"`
	DeletedOn       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deleted_on,json=deletedOn,proto3,oneof" json:"deleted_on,omitempty"`
	ReconcileStatus ReconcileStatus        `protobuf:"varint,16,opt,name=reconcile_status,json=reconcileStatus,proto3,enum=rill.runtime.v1.ReconcileStatus" json:"reconcile_status,omitempty"`
	ReconcileError  string                 `protobuf:"bytes,8,opt,name=reconcile_error,json=reconcileError,proto3" json:"reconcile_error,omitempty"`
	ReconcileOn     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reconcile_on,json=reconcileOn,proto3" json:"reconcile_on,omitempty"`
	RenamedFrom     *ResourceName          `protobuf:"bytes,13,opt,name=renamed_from,json=renamedFrom,proto3,oneof" json:"renamed_from,omitempty"`
}

func (x *ResourceMeta) Reset() {
	*x = ResourceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMeta) ProtoMessage() {}

func (x *ResourceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMeta.ProtoReflect.Descriptor instead.
func (*ResourceMeta) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceMeta) GetName() *ResourceName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ResourceMeta) GetRefs() []*ResourceName {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *ResourceMeta) GetOwner() *ResourceName {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ResourceMeta) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *ResourceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ResourceMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ResourceMeta) GetSpecVersion() int64 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *ResourceMeta) GetStateVersion() int64 {
	if x != nil {
		return x.StateVersion
	}
	return 0
}

func (x *ResourceMeta) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *ResourceMeta) GetSpecUpdatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.SpecUpdatedOn
	}
	return nil
}

func (x *ResourceMeta) GetStateUpdatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StateUpdatedOn
	}
	return nil
}

func (x *ResourceMeta) GetDeletedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedOn
	}
	return nil
}

func (x *ResourceMeta) GetReconcileStatus() ReconcileStatus {
	if x != nil {
		return x.ReconcileStatus
	}
	return ReconcileStatus_RECONCILE_STATUS_UNSPECIFIED
}

func (x *ResourceMeta) GetReconcileError() string {
	if x != nil {
		return x.ReconcileError
	}
	return ""
}

func (x *ResourceMeta) GetReconcileOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ReconcileOn
	}
	return nil
}

func (x *ResourceMeta) GetRenamedFrom() *ResourceName {
	if x != nil {
		return x.RenamedFrom
	}
	return nil
}

type ResourceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResourceName) Reset() {
	*x = ResourceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceName) ProtoMessage() {}

func (x *ResourceName) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceName.ProtoReflect.Descriptor instead.
func (*ResourceName) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceName) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProjectParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ProjectParserSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ProjectParserState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ProjectParser) Reset() {
	*x = ProjectParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectParser) ProtoMessage() {}

func (x *ProjectParser) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectParser.ProtoReflect.Descriptor instead.
func (*ProjectParser) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectParser) GetSpec() *ProjectParserSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ProjectParser) GetState() *ProjectParserState {
	if x != nil {
		return x.State
	}
	return nil
}

type ProjectParserSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProjectParserSpec) Reset() {
	*x = ProjectParserSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectParserSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectParserSpec) ProtoMessage() {}

func (x *ProjectParserSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectParserSpec.ProtoReflect.Descriptor instead.
func (*ProjectParserSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{4}
}

type ProjectParserState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParseErrors      []*ParseError          `protobuf:"bytes,1,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
	CurrentCommitSha string                 `protobuf:"bytes,2,opt,name=current_commit_sha,json=currentCommitSha,proto3" json:"current_commit_sha,omitempty"`
	CurrentCommitOn  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=current_commit_on,json=currentCommitOn,proto3" json:"current_commit_on,omitempty"`
	Watching         bool                   `protobuf:"varint,3,opt,name=watching,proto3" json:"watching,omitempty"`
}

func (x *ProjectParserState) Reset() {
	*x = ProjectParserState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectParserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectParserState) ProtoMessage() {}

func (x *ProjectParserState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectParserState.ProtoReflect.Descriptor instead.
func (*ProjectParserState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectParserState) GetParseErrors() []*ParseError {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

func (x *ProjectParserState) GetCurrentCommitSha() string {
	if x != nil {
		return x.CurrentCommitSha
	}
	return ""
}

func (x *ProjectParserState) GetCurrentCommitOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentCommitOn
	}
	return nil
}

func (x *ProjectParserState) GetWatching() bool {
	if x != nil {
		return x.Watching
	}
	return false
}

type SourceV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *SourceSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *SourceState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SourceV2) Reset() {
	*x = SourceV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceV2) ProtoMessage() {}

func (x *SourceV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceV2.ProtoReflect.Descriptor instead.
func (*SourceV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{6}
}

func (x *SourceV2) GetSpec() *SourceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SourceV2) GetState() *SourceState {
	if x != nil {
		return x.State
	}
	return nil
}

type SourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceConnector string           `protobuf:"bytes,1,opt,name=source_connector,json=sourceConnector,proto3" json:"source_connector,omitempty"`
	SinkConnector   string           `protobuf:"bytes,2,opt,name=sink_connector,json=sinkConnector,proto3" json:"sink_connector,omitempty"`
	Properties      *structpb.Struct `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	RefreshSchedule *Schedule        `protobuf:"bytes,5,opt,name=refresh_schedule,json=refreshSchedule,proto3" json:"refresh_schedule,omitempty"`
	TimeoutSeconds  uint32           `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Fields not derived from code files
	StageChanges    bool `protobuf:"varint,7,opt,name=stage_changes,json=stageChanges,proto3" json:"stage_changes,omitempty"`
	StreamIngestion bool `protobuf:"varint,8,opt,name=stream_ingestion,json=streamIngestion,proto3" json:"stream_ingestion,omitempty"`
	Trigger         bool `protobuf:"varint,9,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *SourceSpec) Reset() {
	*x = SourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceSpec) ProtoMessage() {}

func (x *SourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceSpec.ProtoReflect.Descriptor instead.
func (*SourceSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{7}
}

func (x *SourceSpec) GetSourceConnector() string {
	if x != nil {
		return x.SourceConnector
	}
	return ""
}

func (x *SourceSpec) GetSinkConnector() string {
	if x != nil {
		return x.SinkConnector
	}
	return ""
}

func (x *SourceSpec) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SourceSpec) GetRefreshSchedule() *Schedule {
	if x != nil {
		return x.RefreshSchedule
	}
	return nil
}

func (x *SourceSpec) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *SourceSpec) GetStageChanges() bool {
	if x != nil {
		return x.StageChanges
	}
	return false
}

func (x *SourceSpec) GetStreamIngestion() bool {
	if x != nil {
		return x.StreamIngestion
	}
	return false
}

func (x *SourceSpec) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

type SourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connector   string                 `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	Table       string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	SpecHash    string                 `protobuf:"bytes,3,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	RefreshedOn *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=refreshed_on,json=refreshedOn,proto3" json:"refreshed_on,omitempty"`
}

func (x *SourceState) Reset() {
	*x = SourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceState) ProtoMessage() {}

func (x *SourceState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceState.ProtoReflect.Descriptor instead.
func (*SourceState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{8}
}

func (x *SourceState) GetConnector() string {
	if x != nil {
		return x.Connector
	}
	return ""
}

func (x *SourceState) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SourceState) GetSpecHash() string {
	if x != nil {
		return x.SpecHash
	}
	return ""
}

func (x *SourceState) GetRefreshedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshedOn
	}
	return nil
}

type ModelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ModelSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ModelState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ModelV2) Reset() {
	*x = ModelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelV2) ProtoMessage() {}

func (x *ModelV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelV2.ProtoReflect.Descriptor instead.
func (*ModelV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{9}
}

func (x *ModelV2) GetSpec() *ModelSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ModelV2) GetState() *ModelState {
	if x != nil {
		return x.State
	}
	return nil
}

type ModelSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshSchedule                    *Schedule        `protobuf:"bytes,4,opt,name=refresh_schedule,json=refreshSchedule,proto3" json:"refresh_schedule,omitempty"`
	TimeoutSeconds                     uint32           `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Incremental                        bool             `protobuf:"varint,13,opt,name=incremental,proto3" json:"incremental,omitempty"`
	IncrementalStateResolver           string           `protobuf:"bytes,14,opt,name=incremental_state_resolver,json=incrementalStateResolver,proto3" json:"incremental_state_resolver,omitempty"`
	IncrementalStateResolverProperties *structpb.Struct `protobuf:"bytes,15,opt,name=incremental_state_resolver_properties,json=incrementalStateResolverProperties,proto3" json:"incremental_state_resolver_properties,omitempty"`
	PartitionsResolver                 string           `protobuf:"bytes,18,opt,name=partitions_resolver,json=partitionsResolver,proto3" json:"partitions_resolver,omitempty"`
	PartitionsResolverProperties       *structpb.Struct `protobuf:"bytes,19,opt,name=partitions_resolver_properties,json=partitionsResolverProperties,proto3" json:"partitions_resolver_properties,omitempty"`
	PartitionsWatermarkField           string           `protobuf:"bytes,20,opt,name=partitions_watermark_field,json=partitionsWatermarkField,proto3" json:"partitions_watermark_field,omitempty"`
	PartitionsConcurrencyLimit         uint32           `protobuf:"varint,21,opt,name=partitions_concurrency_limit,json=partitionsConcurrencyLimit,proto3" json:"partitions_concurrency_limit,omitempty"`
	InputConnector                     string           `protobuf:"bytes,10,opt,name=input_connector,json=inputConnector,proto3" json:"input_connector,omitempty"`
	InputProperties                    *structpb.Struct `protobuf:"bytes,11,opt,name=input_properties,json=inputProperties,proto3" json:"input_properties,omitempty"`
	// stage_connector is optional.
	StageConnector   string           `protobuf:"bytes,16,opt,name=stage_connector,json=stageConnector,proto3" json:"stage_connector,omitempty"`
	StageProperties  *structpb.Struct `protobuf:"bytes,17,opt,name=stage_properties,json=stageProperties,proto3" json:"stage_properties,omitempty"`
	OutputConnector  string           `protobuf:"bytes,1,opt,name=output_connector,json=outputConnector,proto3" json:"output_connector,omitempty"`
	OutputProperties *structpb.Struct `protobuf:"bytes,12,opt,name=output_properties,json=outputProperties,proto3" json:"output_properties,omitempty"`
	Trigger          bool             `protobuf:"varint,9,opt,name=trigger,proto3" json:"trigger,omitempty"`
	TriggerFull      bool             `protobuf:"varint,22,opt,name=trigger_full,json=triggerFull,proto3" json:"trigger_full,omitempty"`
}

func (x *ModelSpec) Reset() {
	*x = ModelSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSpec) ProtoMessage() {}

func (x *ModelSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSpec.ProtoReflect.Descriptor instead.
func (*ModelSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{10}
}

func (x *ModelSpec) GetRefreshSchedule() *Schedule {
	if x != nil {
		return x.RefreshSchedule
	}
	return nil
}

func (x *ModelSpec) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *ModelSpec) GetIncremental() bool {
	if x != nil {
		return x.Incremental
	}
	return false
}

func (x *ModelSpec) GetIncrementalStateResolver() string {
	if x != nil {
		return x.IncrementalStateResolver
	}
	return ""
}

func (x *ModelSpec) GetIncrementalStateResolverProperties() *structpb.Struct {
	if x != nil {
		return x.IncrementalStateResolverProperties
	}
	return nil
}

func (x *ModelSpec) GetPartitionsResolver() string {
	if x != nil {
		return x.PartitionsResolver
	}
	return ""
}

func (x *ModelSpec) GetPartitionsResolverProperties() *structpb.Struct {
	if x != nil {
		return x.PartitionsResolverProperties
	}
	return nil
}

func (x *ModelSpec) GetPartitionsWatermarkField() string {
	if x != nil {
		return x.PartitionsWatermarkField
	}
	return ""
}

func (x *ModelSpec) GetPartitionsConcurrencyLimit() uint32 {
	if x != nil {
		return x.PartitionsConcurrencyLimit
	}
	return 0
}

func (x *ModelSpec) GetInputConnector() string {
	if x != nil {
		return x.InputConnector
	}
	return ""
}

func (x *ModelSpec) GetInputProperties() *structpb.Struct {
	if x != nil {
		return x.InputProperties
	}
	return nil
}

func (x *ModelSpec) GetStageConnector() string {
	if x != nil {
		return x.StageConnector
	}
	return ""
}

func (x *ModelSpec) GetStageProperties() *structpb.Struct {
	if x != nil {
		return x.StageProperties
	}
	return nil
}

func (x *ModelSpec) GetOutputConnector() string {
	if x != nil {
		return x.OutputConnector
	}
	return ""
}

func (x *ModelSpec) GetOutputProperties() *structpb.Struct {
	if x != nil {
		return x.OutputProperties
	}
	return nil
}

func (x *ModelSpec) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

func (x *ModelSpec) GetTriggerFull() bool {
	if x != nil {
		return x.TriggerFull
	}
	return false
}

type ModelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// executor_connector is the ModelExecutor that produced the model's result.
	ExecutorConnector string `protobuf:"bytes,6,opt,name=executor_connector,json=executorConnector,proto3" json:"executor_connector,omitempty"`
	// result_connector is the connector where the model's result is stored.
	ResultConnector string `protobuf:"bytes,1,opt,name=result_connector,json=resultConnector,proto3" json:"result_connector,omitempty"`
	// result_properties are returned by the executor and contains metadata about the result.
	ResultProperties *structpb.Struct `protobuf:"bytes,5,opt,name=result_properties,json=resultProperties,proto3" json:"result_properties,omitempty"`
	// result_table contains the model's result table for SQL models. It is a convenience field that can also be derived from result_properties.
	ResultTable string `protobuf:"bytes,2,opt,name=result_table,json=resultTable,proto3" json:"result_table,omitempty"`
	// spec_hash is a hash of those parts of the spec that affect the model's result.
	SpecHash string `protobuf:"bytes,3,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	// refs_hash is a hash of the model's refs current state. It is used to determine if the model's refs have changed.
	RefsHash string `protobuf:"bytes,9,opt,name=refs_hash,json=refsHash,proto3" json:"refs_hash,omitempty"`
	// refreshed_on is the time the model was last executed.
	RefreshedOn *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=refreshed_on,json=refreshedOn,proto3" json:"refreshed_on,omitempty"`
	// incremental_state contains the result of the most recent invocation of the model's incremental state resolver.
	IncrementalState *structpb.Struct `protobuf:"bytes,7,opt,name=incremental_state,json=incrementalState,proto3" json:"incremental_state,omitempty"`
	// incremental_state_schema contains a schema for the data in incremental_state.
	IncrementalStateSchema *StructType `protobuf:"bytes,8,opt,name=incremental_state_schema,json=incrementalStateSchema,proto3" json:"incremental_state_schema,omitempty"`
	// partitions_model_id is a randomly generated ID used to store the model's partitions in the CatalogStore.
	PartitionsModelId string `protobuf:"bytes,10,opt,name=partitions_model_id,json=partitionsModelId,proto3" json:"partitions_model_id,omitempty"`
	// partitions_have_errors is true if one or more partitions failed to execute.
	PartitionsHaveErrors bool `protobuf:"varint,11,opt,name=partitions_have_errors,json=partitionsHaveErrors,proto3" json:"partitions_have_errors,omitempty"`
	// total_execution_duration_ms is the time user queries took to execute while refreshing the model.
	// In case of incremental models it is the sum of all successful executions so far.
	// This is not the time it took to refresh the model which also includes other stuff like taking a write lock.
	TotalExecutionDurationMs int64 `protobuf:"varint,12,opt,name=total_execution_duration_ms,json=totalExecutionDurationMs,proto3" json:"total_execution_duration_ms,omitempty"`
	// latest_execution_duration_ms is the time user queries took to execute in the last successful refresh.
	LatestExecutionDurationMs int64 `protobuf:"varint,13,opt,name=latest_execution_duration_ms,json=latestExecutionDurationMs,proto3" json:"latest_execution_duration_ms,omitempty"`
}

func (x *ModelState) Reset() {
	*x = ModelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelState) ProtoMessage() {}

func (x *ModelState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelState.ProtoReflect.Descriptor instead.
func (*ModelState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{11}
}

func (x *ModelState) GetExecutorConnector() string {
	if x != nil {
		return x.ExecutorConnector
	}
	return ""
}

func (x *ModelState) GetResultConnector() string {
	if x != nil {
		return x.ResultConnector
	}
	return ""
}

func (x *ModelState) GetResultProperties() *structpb.Struct {
	if x != nil {
		return x.ResultProperties
	}
	return nil
}

func (x *ModelState) GetResultTable() string {
	if x != nil {
		return x.ResultTable
	}
	return ""
}

func (x *ModelState) GetSpecHash() string {
	if x != nil {
		return x.SpecHash
	}
	return ""
}

func (x *ModelState) GetRefsHash() string {
	if x != nil {
		return x.RefsHash
	}
	return ""
}

func (x *ModelState) GetRefreshedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshedOn
	}
	return nil
}

func (x *ModelState) GetIncrementalState() *structpb.Struct {
	if x != nil {
		return x.IncrementalState
	}
	return nil
}

func (x *ModelState) GetIncrementalStateSchema() *StructType {
	if x != nil {
		return x.IncrementalStateSchema
	}
	return nil
}

func (x *ModelState) GetPartitionsModelId() string {
	if x != nil {
		return x.PartitionsModelId
	}
	return ""
}

func (x *ModelState) GetPartitionsHaveErrors() bool {
	if x != nil {
		return x.PartitionsHaveErrors
	}
	return false
}

func (x *ModelState) GetTotalExecutionDurationMs() int64 {
	if x != nil {
		return x.TotalExecutionDurationMs
	}
	return 0
}

func (x *ModelState) GetLatestExecutionDurationMs() int64 {
	if x != nil {
		return x.LatestExecutionDurationMs
	}
	return 0
}

type MetricsViewV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *MetricsViewSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *MetricsViewState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MetricsViewV2) Reset() {
	*x = MetricsViewV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewV2) ProtoMessage() {}

func (x *MetricsViewV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewV2.ProtoReflect.Descriptor instead.
func (*MetricsViewV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsViewV2) GetSpec() *MetricsViewSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *MetricsViewV2) GetState() *MetricsViewState {
	if x != nil {
		return x.State
	}
	return nil
}

type MetricsViewSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connector containing the table
	Connector string `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	// Name of the database where table is located (optional)
	Database string `protobuf:"bytes,21,opt,name=database,proto3" json:"database,omitempty"`
	// Name of the database schema where table is located (optional)
	DatabaseSchema string `protobuf:"bytes,22,opt,name=database_schema,json=databaseSchema,proto3" json:"database_schema,omitempty"`
	// Name of the table the metrics view is based on
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Name of the model the metrics view is based on. Either table or model should be set.
	Model string `protobuf:"bytes,24,opt,name=model,proto3" json:"model,omitempty"`
	// User-facing name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// User-facing description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the primary time dimension, used for rendering time series
	TimeDimension string `protobuf:"bytes,5,opt,name=time_dimension,json=timeDimension,proto3" json:"time_dimension,omitempty"`
	// The smallest time grain that can be queried for.
	// This can be useful to set if the time_dimension is not available below a certain granularity.
	SmallestTimeGrain TimeGrain `protobuf:"varint,8,opt,name=smallest_time_grain,json=smallestTimeGrain,proto3,enum=rill.runtime.v1.TimeGrain" json:"smallest_time_grain,omitempty"`
	// Expression to evaluate a watermark for the metrics view. If not set, the watermark defaults to max(time_dimension).
	WatermarkExpression string `protobuf:"bytes,20,opt,name=watermark_expression,json=watermarkExpression,proto3" json:"watermark_expression,omitempty"`
	// Dimensions in the metrics view
	Dimensions []*MetricsViewSpec_DimensionV2 `protobuf:"bytes,6,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Measures in the metrics view
	Measures []*MetricsViewSpec_MeasureV2 `protobuf:"bytes,7,rep,name=measures,proto3" json:"measures,omitempty"`
	// Security for the metrics view
	SecurityRules []*SecurityRule `protobuf:"bytes,23,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
	// ISO 8601 weekday number to use as the base for time aggregations by week. Defaults to 1 (Monday).
	FirstDayOfWeek uint32 `protobuf:"varint,12,opt,name=first_day_of_week,json=firstDayOfWeek,proto3" json:"first_day_of_week,omitempty"`
	// Month number to use as the base for time aggregations by year. Defaults to 1 (January).
	FirstMonthOfYear uint32 `protobuf:"varint,13,opt,name=first_month_of_year,json=firstMonthOfYear,proto3" json:"first_month_of_year,omitempty"`
	// List of selected dimensions by defaults.
	// Deprecated: Now defined in the Explore resource.
	DefaultDimensions []string `protobuf:"bytes,18,rep,name=default_dimensions,json=defaultDimensions,proto3" json:"default_dimensions,omitempty"`
	// List of selected measures by defaults.
	// Deprecated: Now defined in the Explore resource.
	DefaultMeasures []string `protobuf:"bytes,19,rep,name=default_measures,json=defaultMeasures,proto3" json:"default_measures,omitempty"`
	// Default time range for the dashboard. It should be a valid ISO 8601 duration string.
	// Deprecated: Now defined in the Explore resource.
	DefaultTimeRange string `protobuf:"bytes,9,opt,name=default_time_range,json=defaultTimeRange,proto3" json:"default_time_range,omitempty"`
	// Selected default comparison mode.
	// Deprecated: Now defined in the Explore resource.
	DefaultComparisonMode MetricsViewSpec_ComparisonMode `protobuf:"varint,14,opt,name=default_comparison_mode,json=defaultComparisonMode,proto3,enum=rill.runtime.v1.MetricsViewSpec_ComparisonMode" json:"default_comparison_mode,omitempty"`
	// If comparison mode is dimension then this determines which is the default dimension.
	// Deprecated: Now defined in the Explore resource.
	DefaultComparisonDimension string `protobuf:"bytes,15,opt,name=default_comparison_dimension,json=defaultComparisonDimension,proto3" json:"default_comparison_dimension,omitempty"`
	// Default theme to apply.
	// Deprecated: Now defined in the Explore resource.
	DefaultTheme string `protobuf:"bytes,17,opt,name=default_theme,json=defaultTheme,proto3" json:"default_theme,omitempty"`
	// List of available time ranges with comparison ranges that would replace the default list.
	// Deprecated: Now defined in the Explore resource.
	AvailableTimeRanges []*MetricsViewSpec_AvailableTimeRange `protobuf:"bytes,16,rep,name=available_time_ranges,json=availableTimeRanges,proto3" json:"available_time_ranges,omitempty"`
	// Available time zones list preferred time zones using IANA location identifiers.
	// Deprecated: Now defined in the Explore resource.
	AvailableTimeZones []string `protobuf:"bytes,10,rep,name=available_time_zones,json=availableTimeZones,proto3" json:"available_time_zones,omitempty"`
	// Cache controls for the metrics view.
	CacheEnabled       *bool  `protobuf:"varint,25,opt,name=cache_enabled,json=cacheEnabled,proto3,oneof" json:"cache_enabled,omitempty"`
	CacheKeySql        string `protobuf:"bytes,26,opt,name=cache_key_sql,json=cacheKeySql,proto3" json:"cache_key_sql,omitempty"`
	CacheKeyTtlSeconds int64  `protobuf:"varint,27,opt,name=cache_key_ttl_seconds,json=cacheKeyTtlSeconds,proto3" json:"cache_key_ttl_seconds,omitempty"`
}

func (x *MetricsViewSpec) Reset() {
	*x = MetricsViewSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec) ProtoMessage() {}

func (x *MetricsViewSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsViewSpec) GetConnector() string {
	if x != nil {
		return x.Connector
	}
	return ""
}

func (x *MetricsViewSpec) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MetricsViewSpec) GetDatabaseSchema() string {
	if x != nil {
		return x.DatabaseSchema
	}
	return ""
}

func (x *MetricsViewSpec) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MetricsViewSpec) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *MetricsViewSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MetricsViewSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricsViewSpec) GetTimeDimension() string {
	if x != nil {
		return x.TimeDimension
	}
	return ""
}

func (x *MetricsViewSpec) GetSmallestTimeGrain() TimeGrain {
	if x != nil {
		return x.SmallestTimeGrain
	}
	return TimeGrain_TIME_GRAIN_UNSPECIFIED
}

func (x *MetricsViewSpec) GetWatermarkExpression() string {
	if x != nil {
		return x.WatermarkExpression
	}
	return ""
}

func (x *MetricsViewSpec) GetDimensions() []*MetricsViewSpec_DimensionV2 {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *MetricsViewSpec) GetMeasures() []*MetricsViewSpec_MeasureV2 {
	if x != nil {
		return x.Measures
	}
	return nil
}

func (x *MetricsViewSpec) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

func (x *MetricsViewSpec) GetFirstDayOfWeek() uint32 {
	if x != nil {
		return x.FirstDayOfWeek
	}
	return 0
}

func (x *MetricsViewSpec) GetFirstMonthOfYear() uint32 {
	if x != nil {
		return x.FirstMonthOfYear
	}
	return 0
}

func (x *MetricsViewSpec) GetDefaultDimensions() []string {
	if x != nil {
		return x.DefaultDimensions
	}
	return nil
}

func (x *MetricsViewSpec) GetDefaultMeasures() []string {
	if x != nil {
		return x.DefaultMeasures
	}
	return nil
}

func (x *MetricsViewSpec) GetDefaultTimeRange() string {
	if x != nil {
		return x.DefaultTimeRange
	}
	return ""
}

func (x *MetricsViewSpec) GetDefaultComparisonMode() MetricsViewSpec_ComparisonMode {
	if x != nil {
		return x.DefaultComparisonMode
	}
	return MetricsViewSpec_COMPARISON_MODE_UNSPECIFIED
}

func (x *MetricsViewSpec) GetDefaultComparisonDimension() string {
	if x != nil {
		return x.DefaultComparisonDimension
	}
	return ""
}

func (x *MetricsViewSpec) GetDefaultTheme() string {
	if x != nil {
		return x.DefaultTheme
	}
	return ""
}

func (x *MetricsViewSpec) GetAvailableTimeRanges() []*MetricsViewSpec_AvailableTimeRange {
	if x != nil {
		return x.AvailableTimeRanges
	}
	return nil
}

func (x *MetricsViewSpec) GetAvailableTimeZones() []string {
	if x != nil {
		return x.AvailableTimeZones
	}
	return nil
}

func (x *MetricsViewSpec) GetCacheEnabled() bool {
	if x != nil && x.CacheEnabled != nil {
		return *x.CacheEnabled
	}
	return false
}

func (x *MetricsViewSpec) GetCacheKeySql() string {
	if x != nil {
		return x.CacheKeySql
	}
	return ""
}

func (x *MetricsViewSpec) GetCacheKeyTtlSeconds() int64 {
	if x != nil {
		return x.CacheKeyTtlSeconds
	}
	return 0
}

type SecurityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//
	//	*SecurityRule_Access
	//	*SecurityRule_FieldAccess
	//	*SecurityRule_RowFilter
	Rule isSecurityRule_Rule `protobuf_oneof:"rule"`
}

func (x *SecurityRule) Reset() {
	*x = SecurityRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRule) ProtoMessage() {}

func (x *SecurityRule) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRule.ProtoReflect.Descriptor instead.
func (*SecurityRule) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{14}
}

func (m *SecurityRule) GetRule() isSecurityRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *SecurityRule) GetAccess() *SecurityRuleAccess {
	if x, ok := x.GetRule().(*SecurityRule_Access); ok {
		return x.Access
	}
	return nil
}

func (x *SecurityRule) GetFieldAccess() *SecurityRuleFieldAccess {
	if x, ok := x.GetRule().(*SecurityRule_FieldAccess); ok {
		return x.FieldAccess
	}
	return nil
}

func (x *SecurityRule) GetRowFilter() *SecurityRuleRowFilter {
	if x, ok := x.GetRule().(*SecurityRule_RowFilter); ok {
		return x.RowFilter
	}
	return nil
}

type isSecurityRule_Rule interface {
	isSecurityRule_Rule()
}

type SecurityRule_Access struct {
	Access *SecurityRuleAccess `protobuf:"bytes,1,opt,name=access,proto3,oneof"`
}

type SecurityRule_FieldAccess struct {
	FieldAccess *SecurityRuleFieldAccess `protobuf:"bytes,2,opt,name=field_access,json=fieldAccess,proto3,oneof"`
}

type SecurityRule_RowFilter struct {
	RowFilter *SecurityRuleRowFilter `protobuf:"bytes,3,opt,name=row_filter,json=rowFilter,proto3,oneof"`
}

func (*SecurityRule_Access) isSecurityRule_Rule() {}

func (*SecurityRule_FieldAccess) isSecurityRule_Rule() {}

func (*SecurityRule_RowFilter) isSecurityRule_Rule() {}

type SecurityRuleAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Allow     bool   `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *SecurityRuleAccess) Reset() {
	*x = SecurityRuleAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRuleAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRuleAccess) ProtoMessage() {}

func (x *SecurityRuleAccess) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRuleAccess.ProtoReflect.Descriptor instead.
func (*SecurityRuleAccess) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{15}
}

func (x *SecurityRuleAccess) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *SecurityRuleAccess) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

type SecurityRuleFieldAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Allow     bool     `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	AllFields bool     `protobuf:"varint,4,opt,name=all_fields,json=allFields,proto3" json:"all_fields,omitempty"`
}

func (x *SecurityRuleFieldAccess) Reset() {
	*x = SecurityRuleFieldAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRuleFieldAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRuleFieldAccess) ProtoMessage() {}

func (x *SecurityRuleFieldAccess) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRuleFieldAccess.ProtoReflect.Descriptor instead.
func (*SecurityRuleFieldAccess) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{16}
}

func (x *SecurityRuleFieldAccess) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *SecurityRuleFieldAccess) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *SecurityRuleFieldAccess) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SecurityRuleFieldAccess) GetAllFields() bool {
	if x != nil {
		return x.AllFields
	}
	return false
}

type SecurityRuleRowFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition  string      `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Sql        string      `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`               // Raw SQL expression to apply to the underlying table
	Expression *Expression `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"` // Regular query expression referencing dimension names
}

func (x *SecurityRuleRowFilter) Reset() {
	*x = SecurityRuleRowFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityRuleRowFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityRuleRowFilter) ProtoMessage() {}

func (x *SecurityRuleRowFilter) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityRuleRowFilter.ProtoReflect.Descriptor instead.
func (*SecurityRuleRowFilter) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{17}
}

func (x *SecurityRuleRowFilter) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *SecurityRuleRowFilter) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SecurityRuleRowFilter) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type MetricsViewState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid spec is a (potentially previous) version of the spec that is known to currently be valid.
	ValidSpec *MetricsViewSpec `protobuf:"bytes,1,opt,name=valid_spec,json=validSpec,proto3" json:"valid_spec,omitempty"`
	// Streaming is true if the underlying data may change without the metrics view's spec/state version changing.
	// It's set to true if the metrics view is based on an externally managed table.
	Streaming bool `protobuf:"varint,2,opt,name=streaming,proto3" json:"streaming,omitempty"`
	// The last time the metrics view's underlying model was refreshed.
	// This may be empty if the metrics view is based on an externally managed table.
	ModelRefreshedOn *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=model_refreshed_on,json=modelRefreshedOn,proto3" json:"model_refreshed_on,omitempty"`
}

func (x *MetricsViewState) Reset() {
	*x = MetricsViewState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewState) ProtoMessage() {}

func (x *MetricsViewState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewState.ProtoReflect.Descriptor instead.
func (*MetricsViewState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{18}
}

func (x *MetricsViewState) GetValidSpec() *MetricsViewSpec {
	if x != nil {
		return x.ValidSpec
	}
	return nil
}

func (x *MetricsViewState) GetStreaming() bool {
	if x != nil {
		return x.Streaming
	}
	return false
}

func (x *MetricsViewState) GetModelRefreshedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ModelRefreshedOn
	}
	return nil
}

type Explore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ExploreSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ExploreState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Explore) Reset() {
	*x = Explore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Explore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explore) ProtoMessage() {}

func (x *Explore) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Explore.ProtoReflect.Descriptor instead.
func (*Explore) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{19}
}

func (x *Explore) GetSpec() *ExploreSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Explore) GetState() *ExploreState {
	if x != nil {
		return x.State
	}
	return nil
}

type ExploreSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-facing name
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// User-facing description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The metrics view the explore is based on
	MetricsView string `protobuf:"bytes,3,opt,name=metrics_view,json=metricsView,proto3" json:"metrics_view,omitempty"`
	// Dimensions to show. If `dimensions_selector` is set, this will only be set in `state.valid_spec`.
	Dimensions []string `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Dynamic selector for `dimensions`. Will be processed during validation, so it will always be empty in `state.valid_spec`.
	DimensionsSelector *FieldSelector `protobuf:"bytes,13,opt,name=dimensions_selector,json=dimensionsSelector,proto3" json:"dimensions_selector,omitempty"`
	// Measures to show. If `measures_selector` is set, this will only be set in `state.valid_spec`.
	Measures []string `protobuf:"bytes,6,rep,name=measures,proto3" json:"measures,omitempty"`
	// Dynamic selector for `measures`. Will be processed during validation, so it will always be empty in `state.valid_spec`.
	MeasuresSelector *FieldSelector `protobuf:"bytes,14,opt,name=measures_selector,json=measuresSelector,proto3" json:"measures_selector,omitempty"`
	// Theme to use
	Theme         string     `protobuf:"bytes,8,opt,name=theme,proto3" json:"theme,omitempty"`
	EmbeddedTheme *ThemeSpec `protobuf:"bytes,17,opt,name=embedded_theme,json=embeddedTheme,proto3" json:"embedded_theme,omitempty"`
	// List of selectable time ranges with comparison time ranges.
	// If the list is empty, a default list should be shown.
	TimeRanges []*ExploreTimeRange `protobuf:"bytes,9,rep,name=time_ranges,json=timeRanges,proto3" json:"time_ranges,omitempty"`
	// List of selectable time zones.
	// If the list is empty, a default list should be shown.
	// The values should be valid IANA location identifiers.
	TimeZones []string `protobuf:"bytes,10,rep,name=time_zones,json=timeZones,proto3" json:"time_zones,omitempty"`
	// Preset UI state to show by default.
	DefaultPreset *ExplorePreset `protobuf:"bytes,15,opt,name=default_preset,json=defaultPreset,proto3" json:"default_preset,omitempty"`
	// If true, the pivot tab will be hidden when the explore is embedded.
	EmbedsHidePivot bool `protobuf:"varint,16,opt,name=embeds_hide_pivot,json=embedsHidePivot,proto3" json:"embeds_hide_pivot,omitempty"`
	// Security for the explore dashboard.
	// These are not currently parsed from YAML, but will be derived from the parent metrics view.
	SecurityRules []*SecurityRule `protobuf:"bytes,12,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
	// Banner text that can be displayed in Rill Cloud.
	Banner string `protobuf:"bytes,18,opt,name=banner,proto3" json:"banner,omitempty"`
}

func (x *ExploreSpec) Reset() {
	*x = ExploreSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExploreSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExploreSpec) ProtoMessage() {}

func (x *ExploreSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExploreSpec.ProtoReflect.Descriptor instead.
func (*ExploreSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{20}
}

func (x *ExploreSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExploreSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExploreSpec) GetMetricsView() string {
	if x != nil {
		return x.MetricsView
	}
	return ""
}

func (x *ExploreSpec) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ExploreSpec) GetDimensionsSelector() *FieldSelector {
	if x != nil {
		return x.DimensionsSelector
	}
	return nil
}

func (x *ExploreSpec) GetMeasures() []string {
	if x != nil {
		return x.Measures
	}
	return nil
}

func (x *ExploreSpec) GetMeasuresSelector() *FieldSelector {
	if x != nil {
		return x.MeasuresSelector
	}
	return nil
}

func (x *ExploreSpec) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *ExploreSpec) GetEmbeddedTheme() *ThemeSpec {
	if x != nil {
		return x.EmbeddedTheme
	}
	return nil
}

func (x *ExploreSpec) GetTimeRanges() []*ExploreTimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *ExploreSpec) GetTimeZones() []string {
	if x != nil {
		return x.TimeZones
	}
	return nil
}

func (x *ExploreSpec) GetDefaultPreset() *ExplorePreset {
	if x != nil {
		return x.DefaultPreset
	}
	return nil
}

func (x *ExploreSpec) GetEmbedsHidePivot() bool {
	if x != nil {
		return x.EmbedsHidePivot
	}
	return false
}

func (x *ExploreSpec) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

func (x *ExploreSpec) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

type ExploreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidSpec *ExploreSpec `protobuf:"bytes,1,opt,name=valid_spec,json=validSpec,proto3" json:"valid_spec,omitempty"`
}

func (x *ExploreState) Reset() {
	*x = ExploreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExploreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExploreState) ProtoMessage() {}

func (x *ExploreState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExploreState.ProtoReflect.Descriptor instead.
func (*ExploreState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{21}
}

func (x *ExploreState) GetValidSpec() *ExploreSpec {
	if x != nil {
		return x.ValidSpec
	}
	return nil
}

type ExploreTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 duration string for the time range
	Range string `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Comparison time ranges available for this time range
	ComparisonTimeRanges []*ExploreComparisonTimeRange `protobuf:"bytes,2,rep,name=comparison_time_ranges,json=comparisonTimeRanges,proto3" json:"comparison_time_ranges,omitempty"`
}

func (x *ExploreTimeRange) Reset() {
	*x = ExploreTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExploreTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExploreTimeRange) ProtoMessage() {}

func (x *ExploreTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExploreTimeRange.ProtoReflect.Descriptor instead.
func (*ExploreTimeRange) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{22}
}

func (x *ExploreTimeRange) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ExploreTimeRange) GetComparisonTimeRanges() []*ExploreComparisonTimeRange {
	if x != nil {
		return x.ComparisonTimeRanges
	}
	return nil
}

type ExploreComparisonTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 duration string to use as an offset from the base time range.
	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// ISO 8601 duration string for the duration of the comparison time range.
	// If not specified, it should fallback to the range of the base time range.
	Range string `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *ExploreComparisonTimeRange) Reset() {
	*x = ExploreComparisonTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExploreComparisonTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExploreComparisonTimeRange) ProtoMessage() {}

func (x *ExploreComparisonTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExploreComparisonTimeRange.ProtoReflect.Descriptor instead.
func (*ExploreComparisonTimeRange) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{23}
}

func (x *ExploreComparisonTimeRange) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *ExploreComparisonTimeRange) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

type ExplorePreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensions to show. If `dimensions_selector` is set, this will only be set in `state.valid_spec`.
	Dimensions []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Dynamic selector for `dimensions`. Will be processed during validation, so it will always be empty in `state.valid_spec`.
	DimensionsSelector *FieldSelector `protobuf:"bytes,9,opt,name=dimensions_selector,json=dimensionsSelector,proto3" json:"dimensions_selector,omitempty"`
	// Measures to show. If `measures_selector` is set, this will only be set in `state.valid_spec`.
	Measures []string `protobuf:"bytes,4,rep,name=measures,proto3" json:"measures,omitempty"`
	// Dynamic selector for `measures`. Will be processed during validation, so it will always be empty in `state.valid_spec`.
	MeasuresSelector *FieldSelector `protobuf:"bytes,10,opt,name=measures_selector,json=measuresSelector,proto3" json:"measures_selector,omitempty"`
	Where            *Expression    `protobuf:"bytes,11,opt,name=where,proto3,oneof" json:"where,omitempty"`
	// Time range for the explore.
	// It corresponds to the `range` property of the explore's `time_ranges`.
	// If not found in `time_ranges`, it should be added to the list.
	TimeRange       *string `protobuf:"bytes,6,opt,name=time_range,json=timeRange,proto3,oneof" json:"time_range,omitempty"`
	Timezone        *string `protobuf:"bytes,12,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	TimeGrain       *string `protobuf:"bytes,13,opt,name=time_grain,json=timeGrain,proto3,oneof" json:"time_grain,omitempty"`
	SelectTimeRange *string `protobuf:"bytes,14,opt,name=select_time_range,json=selectTimeRange,proto3,oneof" json:"select_time_range,omitempty"`
	// Comparison mode.
	ComparisonMode   ExploreComparisonMode `protobuf:"varint,7,opt,name=comparison_mode,json=comparisonMode,proto3,enum=rill.runtime.v1.ExploreComparisonMode" json:"comparison_mode,omitempty"`
	CompareTimeRange *string               `protobuf:"bytes,15,opt,name=compare_time_range,json=compareTimeRange,proto3,oneof" json:"compare_time_range,omitempty"`
	// If comparison_mode is EXPLORE_COMPARISON_MODE_DIMENSION, this indicates the dimension to use.
	ComparisonDimension      *string          `protobuf:"bytes,8,opt,name=comparison_dimension,json=comparisonDimension,proto3,oneof" json:"comparison_dimension,omitempty"`
	View                     *ExploreWebView  `protobuf:"varint,16,opt,name=view,proto3,enum=rill.runtime.v1.ExploreWebView,oneof" json:"view,omitempty"`
	ExploreSortBy            *string          `protobuf:"bytes,17,opt,name=explore_sort_by,json=exploreSortBy,proto3,oneof" json:"explore_sort_by,omitempty"`
	ExploreSortAsc           *bool            `protobuf:"varint,18,opt,name=explore_sort_asc,json=exploreSortAsc,proto3,oneof" json:"explore_sort_asc,omitempty"`
	ExploreSortType          *ExploreSortType `protobuf:"varint,19,opt,name=explore_sort_type,json=exploreSortType,proto3,enum=rill.runtime.v1.ExploreSortType,oneof" json:"explore_sort_type,omitempty"`
	ExploreExpandedDimension *string          `protobuf:"bytes,20,opt,name=explore_expanded_dimension,json=exploreExpandedDimension,proto3,oneof" json:"explore_expanded_dimension,omitempty"`
	TimeDimensionMeasure     *string          `protobuf:"bytes,21,opt,name=time_dimension_measure,json=timeDimensionMeasure,proto3,oneof" json:"time_dimension_measure,omitempty"`
	TimeDimensionChartType   *string          `protobuf:"bytes,22,opt,name=time_dimension_chart_type,json=timeDimensionChartType,proto3,oneof" json:"time_dimension_chart_type,omitempty"`
	TimeDimensionPin         *bool            `protobuf:"varint,23,opt,name=time_dimension_pin,json=timeDimensionPin,proto3,oneof" json:"time_dimension_pin,omitempty"`
	PivotRows                []string         `protobuf:"bytes,24,rep,name=pivot_rows,json=pivotRows,proto3" json:"pivot_rows,omitempty"`
	PivotCols                []string         `protobuf:"bytes,25,rep,name=pivot_cols,json=pivotCols,proto3" json:"pivot_cols,omitempty"`
	PivotSortBy              *string          `protobuf:"bytes,26,opt,name=pivot_sort_by,json=pivotSortBy,proto3,oneof" json:"pivot_sort_by,omitempty"`
	PivotSortAsc             *bool            `protobuf:"varint,27,opt,name=pivot_sort_asc,json=pivotSortAsc,proto3,oneof" json:"pivot_sort_asc,omitempty"`
	PivotTableMode           *string          `protobuf:"bytes,28,opt,name=pivot_table_mode,json=pivotTableMode,proto3,oneof" json:"pivot_table_mode,omitempty"`
}

func (x *ExplorePreset) Reset() {
	*x = ExplorePreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplorePreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplorePreset) ProtoMessage() {}

func (x *ExplorePreset) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplorePreset.ProtoReflect.Descriptor instead.
func (*ExplorePreset) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{24}
}

func (x *ExplorePreset) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ExplorePreset) GetDimensionsSelector() *FieldSelector {
	if x != nil {
		return x.DimensionsSelector
	}
	return nil
}

func (x *ExplorePreset) GetMeasures() []string {
	if x != nil {
		return x.Measures
	}
	return nil
}

func (x *ExplorePreset) GetMeasuresSelector() *FieldSelector {
	if x != nil {
		return x.MeasuresSelector
	}
	return nil
}

func (x *ExplorePreset) GetWhere() *Expression {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *ExplorePreset) GetTimeRange() string {
	if x != nil && x.TimeRange != nil {
		return *x.TimeRange
	}
	return ""
}

func (x *ExplorePreset) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *ExplorePreset) GetTimeGrain() string {
	if x != nil && x.TimeGrain != nil {
		return *x.TimeGrain
	}
	return ""
}

func (x *ExplorePreset) GetSelectTimeRange() string {
	if x != nil && x.SelectTimeRange != nil {
		return *x.SelectTimeRange
	}
	return ""
}

func (x *ExplorePreset) GetComparisonMode() ExploreComparisonMode {
	if x != nil {
		return x.ComparisonMode
	}
	return ExploreComparisonMode_EXPLORE_COMPARISON_MODE_UNSPECIFIED
}

func (x *ExplorePreset) GetCompareTimeRange() string {
	if x != nil && x.CompareTimeRange != nil {
		return *x.CompareTimeRange
	}
	return ""
}

func (x *ExplorePreset) GetComparisonDimension() string {
	if x != nil && x.ComparisonDimension != nil {
		return *x.ComparisonDimension
	}
	return ""
}

func (x *ExplorePreset) GetView() ExploreWebView {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ExploreWebView_EXPLORE_WEB_VIEW_UNSPECIFIED
}

func (x *ExplorePreset) GetExploreSortBy() string {
	if x != nil && x.ExploreSortBy != nil {
		return *x.ExploreSortBy
	}
	return ""
}

func (x *ExplorePreset) GetExploreSortAsc() bool {
	if x != nil && x.ExploreSortAsc != nil {
		return *x.ExploreSortAsc
	}
	return false
}

func (x *ExplorePreset) GetExploreSortType() ExploreSortType {
	if x != nil && x.ExploreSortType != nil {
		return *x.ExploreSortType
	}
	return ExploreSortType_EXPLORE_SORT_TYPE_UNSPECIFIED
}

func (x *ExplorePreset) GetExploreExpandedDimension() string {
	if x != nil && x.ExploreExpandedDimension != nil {
		return *x.ExploreExpandedDimension
	}
	return ""
}

func (x *ExplorePreset) GetTimeDimensionMeasure() string {
	if x != nil && x.TimeDimensionMeasure != nil {
		return *x.TimeDimensionMeasure
	}
	return ""
}

func (x *ExplorePreset) GetTimeDimensionChartType() string {
	if x != nil && x.TimeDimensionChartType != nil {
		return *x.TimeDimensionChartType
	}
	return ""
}

func (x *ExplorePreset) GetTimeDimensionPin() bool {
	if x != nil && x.TimeDimensionPin != nil {
		return *x.TimeDimensionPin
	}
	return false
}

func (x *ExplorePreset) GetPivotRows() []string {
	if x != nil {
		return x.PivotRows
	}
	return nil
}

func (x *ExplorePreset) GetPivotCols() []string {
	if x != nil {
		return x.PivotCols
	}
	return nil
}

func (x *ExplorePreset) GetPivotSortBy() string {
	if x != nil && x.PivotSortBy != nil {
		return *x.PivotSortBy
	}
	return ""
}

func (x *ExplorePreset) GetPivotSortAsc() bool {
	if x != nil && x.PivotSortAsc != nil {
		return *x.PivotSortAsc
	}
	return false
}

func (x *ExplorePreset) GetPivotTableMode() string {
	if x != nil && x.PivotTableMode != nil {
		return *x.PivotTableMode
	}
	return ""
}

// FieldSelector describes logic for selecting a list of fields.
// It is useful for dynamically evaluating fields when the list of potential fields is not known at parse time.
type FieldSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Invert the result such that all fields *except* the selected fields are returned.
	Invert bool `protobuf:"varint,1,opt,name=invert,proto3" json:"invert,omitempty"`
	// Types that are assignable to Selector:
	//
	//	*FieldSelector_All
	//	*FieldSelector_Fields
	//	*FieldSelector_Regex
	//	*FieldSelector_DuckdbExpression
	Selector isFieldSelector_Selector `protobuf_oneof:"selector"`
}

func (x *FieldSelector) Reset() {
	*x = FieldSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSelector) ProtoMessage() {}

func (x *FieldSelector) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSelector.ProtoReflect.Descriptor instead.
func (*FieldSelector) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{25}
}

func (x *FieldSelector) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

func (m *FieldSelector) GetSelector() isFieldSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *FieldSelector) GetAll() bool {
	if x, ok := x.GetSelector().(*FieldSelector_All); ok {
		return x.All
	}
	return false
}

func (x *FieldSelector) GetFields() *StringListValue {
	if x, ok := x.GetSelector().(*FieldSelector_Fields); ok {
		return x.Fields
	}
	return nil
}

func (x *FieldSelector) GetRegex() string {
	if x, ok := x.GetSelector().(*FieldSelector_Regex); ok {
		return x.Regex
	}
	return ""
}

func (x *FieldSelector) GetDuckdbExpression() string {
	if x, ok := x.GetSelector().(*FieldSelector_DuckdbExpression); ok {
		return x.DuckdbExpression
	}
	return ""
}

type isFieldSelector_Selector interface {
	isFieldSelector_Selector()
}

type FieldSelector_All struct {
	// Select all fields.
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type FieldSelector_Fields struct {
	// Select specific fields by name.
	Fields *StringListValue `protobuf:"bytes,3,opt,name=fields,proto3,oneof"`
}

type FieldSelector_Regex struct {
	// Select fields by a regular expression.
	Regex string `protobuf:"bytes,4,opt,name=regex,proto3,oneof"`
}

type FieldSelector_DuckdbExpression struct {
	// Select fields by a DuckDB SQL SELECT expression. For example "* EXCLUDE (city)".
	DuckdbExpression string `protobuf:"bytes,5,opt,name=duckdb_expression,json=duckdbExpression,proto3,oneof"`
}

func (*FieldSelector_All) isFieldSelector_Selector() {}

func (*FieldSelector_Fields) isFieldSelector_Selector() {}

func (*FieldSelector_Regex) isFieldSelector_Selector() {}

func (*FieldSelector_DuckdbExpression) isFieldSelector_Selector() {}

type StringListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringListValue) Reset() {
	*x = StringListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListValue) ProtoMessage() {}

func (x *StringListValue) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringListValue.ProtoReflect.Descriptor instead.
func (*StringListValue) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{26}
}

func (x *StringListValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *MigrationSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *MigrationState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Migration) Reset() {
	*x = Migration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{27}
}

func (x *Migration) GetSpec() *MigrationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Migration) GetState() *MigrationState {
	if x != nil {
		return x.State
	}
	return nil
}

type MigrationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connector string `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	Sql       string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Version   uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MigrationSpec) Reset() {
	*x = MigrationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationSpec) ProtoMessage() {}

func (x *MigrationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationSpec.ProtoReflect.Descriptor instead.
func (*MigrationSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{28}
}

func (x *MigrationSpec) GetConnector() string {
	if x != nil {
		return x.Connector
	}
	return ""
}

func (x *MigrationSpec) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *MigrationSpec) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MigrationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MigrationState) Reset() {
	*x = MigrationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationState) ProtoMessage() {}

func (x *MigrationState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationState.ProtoReflect.Descriptor instead.
func (*MigrationState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{29}
}

func (x *MigrationState) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ReportSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ReportState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{30}
}

func (x *Report) GetSpec() *ReportSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Report) GetState() *ReportState {
	if x != nil {
		return x.State
	}
	return nil
}

type ReportSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName            string            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Trigger                bool              `protobuf:"varint,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	RefreshSchedule        *Schedule         `protobuf:"bytes,3,opt,name=refresh_schedule,json=refreshSchedule,proto3" json:"refresh_schedule,omitempty"`
	TimeoutSeconds         uint32            `protobuf:"varint,4,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	QueryName              string            `protobuf:"bytes,5,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	QueryArgsJson          string            `protobuf:"bytes,6,opt,name=query_args_json,json=queryArgsJson,proto3" json:"query_args_json,omitempty"`
	ExportLimit            uint64            `protobuf:"varint,7,opt,name=export_limit,json=exportLimit,proto3" json:"export_limit,omitempty"`
	ExportFormat           ExportFormat      `protobuf:"varint,8,opt,name=export_format,json=exportFormat,proto3,enum=rill.runtime.v1.ExportFormat" json:"export_format,omitempty"`
	Notifiers              []*Notifier       `protobuf:"bytes,11,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	Annotations            map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WatermarkInherit       bool              `protobuf:"varint,12,opt,name=watermark_inherit,json=watermarkInherit,proto3" json:"watermark_inherit,omitempty"` // If true, will use the lowest watermark of its refs instead of the trigger time.
	IntervalsIsoDuration   string            `protobuf:"bytes,13,opt,name=intervals_iso_duration,json=intervalsIsoDuration,proto3" json:"intervals_iso_duration,omitempty"`
	IntervalsLimit         int32             `protobuf:"varint,14,opt,name=intervals_limit,json=intervalsLimit,proto3" json:"intervals_limit,omitempty"`
	IntervalsCheckUnclosed bool              `protobuf:"varint,15,opt,name=intervals_check_unclosed,json=intervalsCheckUnclosed,proto3" json:"intervals_check_unclosed,omitempty"`
}

func (x *ReportSpec) Reset() {
	*x = ReportSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSpec) ProtoMessage() {}

func (x *ReportSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSpec.ProtoReflect.Descriptor instead.
func (*ReportSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{31}
}

func (x *ReportSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ReportSpec) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

func (x *ReportSpec) GetRefreshSchedule() *Schedule {
	if x != nil {
		return x.RefreshSchedule
	}
	return nil
}

func (x *ReportSpec) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *ReportSpec) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *ReportSpec) GetQueryArgsJson() string {
	if x != nil {
		return x.QueryArgsJson
	}
	return ""
}

func (x *ReportSpec) GetExportLimit() uint64 {
	if x != nil {
		return x.ExportLimit
	}
	return 0
}

func (x *ReportSpec) GetExportFormat() ExportFormat {
	if x != nil {
		return x.ExportFormat
	}
	return ExportFormat_EXPORT_FORMAT_UNSPECIFIED
}

func (x *ReportSpec) GetNotifiers() []*Notifier {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *ReportSpec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ReportSpec) GetWatermarkInherit() bool {
	if x != nil {
		return x.WatermarkInherit
	}
	return false
}

func (x *ReportSpec) GetIntervalsIsoDuration() string {
	if x != nil {
		return x.IntervalsIsoDuration
	}
	return ""
}

func (x *ReportSpec) GetIntervalsLimit() int32 {
	if x != nil {
		return x.IntervalsLimit
	}
	return 0
}

func (x *ReportSpec) GetIntervalsCheckUnclosed() bool {
	if x != nil {
		return x.IntervalsCheckUnclosed
	}
	return false
}

type ReportState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRunOn        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=next_run_on,json=nextRunOn,proto3" json:"next_run_on,omitempty"`
	CurrentExecution *ReportExecution       `protobuf:"bytes,2,opt,name=current_execution,json=currentExecution,proto3" json:"current_execution,omitempty"`
	ExecutionHistory []*ReportExecution     `protobuf:"bytes,3,rep,name=execution_history,json=executionHistory,proto3" json:"execution_history,omitempty"`
	ExecutionCount   uint32                 `protobuf:"varint,4,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
}

func (x *ReportState) Reset() {
	*x = ReportState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportState) ProtoMessage() {}

func (x *ReportState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportState.ProtoReflect.Descriptor instead.
func (*ReportState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{32}
}

func (x *ReportState) GetNextRunOn() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunOn
	}
	return nil
}

func (x *ReportState) GetCurrentExecution() *ReportExecution {
	if x != nil {
		return x.CurrentExecution
	}
	return nil
}

func (x *ReportState) GetExecutionHistory() []*ReportExecution {
	if x != nil {
		return x.ExecutionHistory
	}
	return nil
}

func (x *ReportState) GetExecutionCount() uint32 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

type ReportExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adhoc        bool                   `protobuf:"varint,1,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ReportTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	StartedOn    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_on,json=startedOn,proto3" json:"started_on,omitempty"`
	FinishedOn   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished_on,json=finishedOn,proto3" json:"finished_on,omitempty"`
}

func (x *ReportExecution) Reset() {
	*x = ReportExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportExecution) ProtoMessage() {}

func (x *ReportExecution) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportExecution.ProtoReflect.Descriptor instead.
func (*ReportExecution) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{33}
}

func (x *ReportExecution) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

func (x *ReportExecution) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReportExecution) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *ReportExecution) GetStartedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedOn
	}
	return nil
}

func (x *ReportExecution) GetFinishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedOn
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *AlertSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *AlertState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{34}
}

func (x *Alert) GetSpec() *AlertSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Alert) GetState() *AlertState {
	if x != nil {
		return x.State
	}
	return nil
}

type AlertSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName            string    `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Trigger                bool      `protobuf:"varint,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	RefreshSchedule        *Schedule `protobuf:"bytes,3,opt,name=refresh_schedule,json=refreshSchedule,proto3" json:"refresh_schedule,omitempty"`
	WatermarkInherit       bool      `protobuf:"varint,4,opt,name=watermark_inherit,json=watermarkInherit,proto3" json:"watermark_inherit,omitempty"` // If true, will use the lowest watermark of its refs instead of the trigger time.
	IntervalsIsoDuration   string    `protobuf:"bytes,5,opt,name=intervals_iso_duration,json=intervalsIsoDuration,proto3" json:"intervals_iso_duration,omitempty"`
	IntervalsLimit         int32     `protobuf:"varint,6,opt,name=intervals_limit,json=intervalsLimit,proto3" json:"intervals_limit,omitempty"`
	IntervalsCheckUnclosed bool      `protobuf:"varint,7,opt,name=intervals_check_unclosed,json=intervalsCheckUnclosed,proto3" json:"intervals_check_unclosed,omitempty"`
	TimeoutSeconds         uint32    `protobuf:"varint,8,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// for alerts that have not been edited since resolver and resolver_properties have been added
	QueryName          string           `protobuf:"bytes,9,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	QueryArgsJson      string           `protobuf:"bytes,10,opt,name=query_args_json,json=queryArgsJson,proto3" json:"query_args_json,omitempty"`
	Resolver           string           `protobuf:"bytes,22,opt,name=resolver,proto3" json:"resolver,omitempty"`
	ResolverProperties *structpb.Struct `protobuf:"bytes,23,opt,name=resolver_properties,json=resolverProperties,proto3" json:"resolver_properties,omitempty"`
	// Types that are assignable to QueryFor:
	//
	//	*AlertSpec_QueryForUserId
	//	*AlertSpec_QueryForUserEmail
	//	*AlertSpec_QueryForAttributes
	QueryFor             isAlertSpec_QueryFor `protobuf_oneof:"query_for"`
	NotifyOnRecover      bool                 `protobuf:"varint,15,opt,name=notify_on_recover,json=notifyOnRecover,proto3" json:"notify_on_recover,omitempty"`
	NotifyOnFail         bool                 `protobuf:"varint,16,opt,name=notify_on_fail,json=notifyOnFail,proto3" json:"notify_on_fail,omitempty"`
	NotifyOnError        bool                 `protobuf:"varint,17,opt,name=notify_on_error,json=notifyOnError,proto3" json:"notify_on_error,omitempty"`
	Renotify             bool                 `protobuf:"varint,18,opt,name=renotify,proto3" json:"renotify,omitempty"`
	RenotifyAfterSeconds uint32               `protobuf:"varint,19,opt,name=renotify_after_seconds,json=renotifyAfterSeconds,proto3" json:"renotify_after_seconds,omitempty"`
	Notifiers            []*Notifier          `protobuf:"bytes,21,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	Annotations          map[string]string    `protobuf:"bytes,20,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AlertSpec) Reset() {
	*x = AlertSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSpec) ProtoMessage() {}

func (x *AlertSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSpec.ProtoReflect.Descriptor instead.
func (*AlertSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{35}
}

func (x *AlertSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AlertSpec) GetTrigger() bool {
	if x != nil {
		return x.Trigger
	}
	return false
}

func (x *AlertSpec) GetRefreshSchedule() *Schedule {
	if x != nil {
		return x.RefreshSchedule
	}
	return nil
}

func (x *AlertSpec) GetWatermarkInherit() bool {
	if x != nil {
		return x.WatermarkInherit
	}
	return false
}

func (x *AlertSpec) GetIntervalsIsoDuration() string {
	if x != nil {
		return x.IntervalsIsoDuration
	}
	return ""
}

func (x *AlertSpec) GetIntervalsLimit() int32 {
	if x != nil {
		return x.IntervalsLimit
	}
	return 0
}

func (x *AlertSpec) GetIntervalsCheckUnclosed() bool {
	if x != nil {
		return x.IntervalsCheckUnclosed
	}
	return false
}

func (x *AlertSpec) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AlertSpec) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *AlertSpec) GetQueryArgsJson() string {
	if x != nil {
		return x.QueryArgsJson
	}
	return ""
}

func (x *AlertSpec) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

func (x *AlertSpec) GetResolverProperties() *structpb.Struct {
	if x != nil {
		return x.ResolverProperties
	}
	return nil
}

func (m *AlertSpec) GetQueryFor() isAlertSpec_QueryFor {
	if m != nil {
		return m.QueryFor
	}
	return nil
}

func (x *AlertSpec) GetQueryForUserId() string {
	if x, ok := x.GetQueryFor().(*AlertSpec_QueryForUserId); ok {
		return x.QueryForUserId
	}
	return ""
}

func (x *AlertSpec) GetQueryForUserEmail() string {
	if x, ok := x.GetQueryFor().(*AlertSpec_QueryForUserEmail); ok {
		return x.QueryForUserEmail
	}
	return ""
}

func (x *AlertSpec) GetQueryForAttributes() *structpb.Struct {
	if x, ok := x.GetQueryFor().(*AlertSpec_QueryForAttributes); ok {
		return x.QueryForAttributes
	}
	return nil
}

func (x *AlertSpec) GetNotifyOnRecover() bool {
	if x != nil {
		return x.NotifyOnRecover
	}
	return false
}

func (x *AlertSpec) GetNotifyOnFail() bool {
	if x != nil {
		return x.NotifyOnFail
	}
	return false
}

func (x *AlertSpec) GetNotifyOnError() bool {
	if x != nil {
		return x.NotifyOnError
	}
	return false
}

func (x *AlertSpec) GetRenotify() bool {
	if x != nil {
		return x.Renotify
	}
	return false
}

func (x *AlertSpec) GetRenotifyAfterSeconds() uint32 {
	if x != nil {
		return x.RenotifyAfterSeconds
	}
	return 0
}

func (x *AlertSpec) GetNotifiers() []*Notifier {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *AlertSpec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type isAlertSpec_QueryFor interface {
	isAlertSpec_QueryFor()
}

type AlertSpec_QueryForUserId struct {
	QueryForUserId string `protobuf:"bytes,11,opt,name=query_for_user_id,json=queryForUserId,proto3,oneof"`
}

type AlertSpec_QueryForUserEmail struct {
	QueryForUserEmail string `protobuf:"bytes,12,opt,name=query_for_user_email,json=queryForUserEmail,proto3,oneof"`
}

type AlertSpec_QueryForAttributes struct {
	QueryForAttributes *structpb.Struct `protobuf:"bytes,13,opt,name=query_for_attributes,json=queryForAttributes,proto3,oneof"`
}

func (*AlertSpec_QueryForUserId) isAlertSpec_QueryFor() {}

func (*AlertSpec_QueryForUserEmail) isAlertSpec_QueryFor() {}

func (*AlertSpec_QueryForAttributes) isAlertSpec_QueryFor() {}

type Notifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connector  string           `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	Properties *structpb.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Notifier) Reset() {
	*x = Notifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifier) ProtoMessage() {}

func (x *Notifier) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifier.ProtoReflect.Descriptor instead.
func (*Notifier) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{36}
}

func (x *Notifier) GetConnector() string {
	if x != nil {
		return x.Connector
	}
	return ""
}

func (x *Notifier) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AlertState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecHash         string                 `protobuf:"bytes,1,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
	RefsHash         string                 `protobuf:"bytes,2,opt,name=refs_hash,json=refsHash,proto3" json:"refs_hash,omitempty"`
	NextRunOn        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=next_run_on,json=nextRunOn,proto3" json:"next_run_on,omitempty"`
	CurrentExecution *AlertExecution        `protobuf:"bytes,4,opt,name=current_execution,json=currentExecution,proto3" json:"current_execution,omitempty"`
	ExecutionHistory []*AlertExecution      `protobuf:"bytes,5,rep,name=execution_history,json=executionHistory,proto3" json:"execution_history,omitempty"`
	ExecutionCount   uint32                 `protobuf:"varint,6,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
}

func (x *AlertState) Reset() {
	*x = AlertState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertState) ProtoMessage() {}

func (x *AlertState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertState.ProtoReflect.Descriptor instead.
func (*AlertState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{37}
}

func (x *AlertState) GetSpecHash() string {
	if x != nil {
		return x.SpecHash
	}
	return ""
}

func (x *AlertState) GetRefsHash() string {
	if x != nil {
		return x.RefsHash
	}
	return ""
}

func (x *AlertState) GetNextRunOn() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunOn
	}
	return nil
}

func (x *AlertState) GetCurrentExecution() *AlertExecution {
	if x != nil {
		return x.CurrentExecution
	}
	return nil
}

func (x *AlertState) GetExecutionHistory() []*AlertExecution {
	if x != nil {
		return x.ExecutionHistory
	}
	return nil
}

func (x *AlertState) GetExecutionCount() uint32 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

type AlertExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adhoc             bool                   `protobuf:"varint,1,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
	Result            *AssertionResult       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	SentNotifications bool                   `protobuf:"varint,3,opt,name=sent_notifications,json=sentNotifications,proto3" json:"sent_notifications,omitempty"`
	ExecutionTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	StartedOn         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_on,json=startedOn,proto3" json:"started_on,omitempty"`
	FinishedOn        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finished_on,json=finishedOn,proto3" json:"finished_on,omitempty"`
	// Stores the last notification time in suppressed alerts
	SuppressedSince *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=suppressed_since,json=suppressedSince,proto3" json:"suppressed_since,omitempty"`
}

func (x *AlertExecution) Reset() {
	*x = AlertExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertExecution) ProtoMessage() {}

func (x *AlertExecution) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertExecution.ProtoReflect.Descriptor instead.
func (*AlertExecution) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{38}
}

func (x *AlertExecution) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

func (x *AlertExecution) GetResult() *AssertionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AlertExecution) GetSentNotifications() bool {
	if x != nil {
		return x.SentNotifications
	}
	return false
}

func (x *AlertExecution) GetExecutionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionTime
	}
	return nil
}

func (x *AlertExecution) GetStartedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedOn
	}
	return nil
}

func (x *AlertExecution) GetFinishedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedOn
	}
	return nil
}

func (x *AlertExecution) GetSuppressedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.SuppressedSince
	}
	return nil
}

type AssertionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       AssertionStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=rill.runtime.v1.AssertionStatus" json:"status,omitempty"`
	FailRow      *structpb.Struct `protobuf:"bytes,2,opt,name=fail_row,json=failRow,proto3" json:"fail_row,omitempty"`
	ErrorMessage string           `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AssertionResult) Reset() {
	*x = AssertionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionResult) ProtoMessage() {}

func (x *AssertionResult) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionResult.ProtoReflect.Descriptor instead.
func (*AssertionResult) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{39}
}

func (x *AssertionResult) GetStatus() AssertionStatus {
	if x != nil {
		return x.Status
	}
	return AssertionStatus_ASSERTION_STATUS_UNSPECIFIED
}

func (x *AssertionResult) GetFailRow() *structpb.Struct {
	if x != nil {
		return x.FailRow
	}
	return nil
}

func (x *AssertionResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// DEPRECATED (2024-08-28): Use a RefreshTrigger that targets the project parser instead.
type PullTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *PullTriggerSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *PullTriggerState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PullTrigger) Reset() {
	*x = PullTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTrigger) ProtoMessage() {}

func (x *PullTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTrigger.ProtoReflect.Descriptor instead.
func (*PullTrigger) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{40}
}

func (x *PullTrigger) GetSpec() *PullTriggerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PullTrigger) GetState() *PullTriggerState {
	if x != nil {
		return x.State
	}
	return nil
}

type PullTriggerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullTriggerSpec) Reset() {
	*x = PullTriggerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTriggerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTriggerSpec) ProtoMessage() {}

func (x *PullTriggerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTriggerSpec.ProtoReflect.Descriptor instead.
func (*PullTriggerSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{41}
}

type PullTriggerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullTriggerState) Reset() {
	*x = PullTriggerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTriggerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTriggerState) ProtoMessage() {}

func (x *PullTriggerState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTriggerState.ProtoReflect.Descriptor instead.
func (*PullTriggerState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{42}
}

type RefreshTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *RefreshTriggerSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *RefreshTriggerState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RefreshTrigger) Reset() {
	*x = RefreshTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTrigger) ProtoMessage() {}

func (x *RefreshTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTrigger.ProtoReflect.Descriptor instead.
func (*RefreshTrigger) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{43}
}

func (x *RefreshTrigger) GetSpec() *RefreshTriggerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RefreshTrigger) GetState() *RefreshTriggerState {
	if x != nil {
		return x.State
	}
	return nil
}

type RefreshTriggerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resources to refresh. The refreshable types are sources, models, alerts, reports, and the project parser.
	// If a model is specified, a normal incremental refresh is triggered. Use the "models" field to trigger other kinds of model refreshes.
	Resources []*ResourceName `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// Models to refresh. These are specified separately to enable more fine-grained configuration.
	Models []*RefreshModelTrigger `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *RefreshTriggerSpec) Reset() {
	*x = RefreshTriggerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTriggerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTriggerSpec) ProtoMessage() {}

func (x *RefreshTriggerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTriggerSpec.ProtoReflect.Descriptor instead.
func (*RefreshTriggerSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{44}
}

func (x *RefreshTriggerSpec) GetResources() []*ResourceName {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RefreshTriggerSpec) GetModels() []*RefreshModelTrigger {
	if x != nil {
		return x.Models
	}
	return nil
}

type RefreshTriggerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshTriggerState) Reset() {
	*x = RefreshTriggerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTriggerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTriggerState) ProtoMessage() {}

func (x *RefreshTriggerState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTriggerState.ProtoReflect.Descriptor instead.
func (*RefreshTriggerState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{45}
}

type RefreshModelTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The model to refresh.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// If true, the current table and state will be dropped before refreshing.
	// For non-incremental models, this is equivalent to a normal refresh.
	Full bool `protobuf:"varint,2,opt,name=full,proto3" json:"full,omitempty"`
	// Keys of specific partitions to refresh.
	Partitions []string `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// If true, it will refresh all partitions that errored on their last execution.
	AllErroredPartitions bool `protobuf:"varint,4,opt,name=all_errored_partitions,json=allErroredPartitions,proto3" json:"all_errored_partitions,omitempty"`
}

func (x *RefreshModelTrigger) Reset() {
	*x = RefreshModelTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshModelTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshModelTrigger) ProtoMessage() {}

func (x *RefreshModelTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshModelTrigger.ProtoReflect.Descriptor instead.
func (*RefreshModelTrigger) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{46}
}

func (x *RefreshModelTrigger) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *RefreshModelTrigger) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *RefreshModelTrigger) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *RefreshModelTrigger) GetAllErroredPartitions() bool {
	if x != nil {
		return x.AllErroredPartitions
	}
	return false
}

type BucketPlanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *BucketPlannerSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *BucketPlannerState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BucketPlanner) Reset() {
	*x = BucketPlanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketPlanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketPlanner) ProtoMessage() {}

func (x *BucketPlanner) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketPlanner.ProtoReflect.Descriptor instead.
func (*BucketPlanner) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{47}
}

func (x *BucketPlanner) GetSpec() *BucketPlannerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BucketPlanner) GetState() *BucketPlannerState {
	if x != nil {
		return x.State
	}
	return nil
}

type BucketPlannerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtractPolicy *BucketExtractPolicy `protobuf:"bytes,1,opt,name=extract_policy,json=extractPolicy,proto3" json:"extract_policy,omitempty"`
}

func (x *BucketPlannerSpec) Reset() {
	*x = BucketPlannerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketPlannerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketPlannerSpec) ProtoMessage() {}

func (x *BucketPlannerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketPlannerSpec.ProtoReflect.Descriptor instead.
func (*BucketPlannerSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{48}
}

func (x *BucketPlannerSpec) GetExtractPolicy() *BucketExtractPolicy {
	if x != nil {
		return x.ExtractPolicy
	}
	return nil
}

type BucketPlannerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *BucketPlannerState) Reset() {
	*x = BucketPlannerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketPlannerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketPlannerState) ProtoMessage() {}

func (x *BucketPlannerState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketPlannerState.ProtoReflect.Descriptor instead.
func (*BucketPlannerState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{49}
}

func (x *BucketPlannerState) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type BucketExtractPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsStrategy   BucketExtractPolicy_Strategy `protobuf:"varint,1,opt,name=rows_strategy,json=rowsStrategy,proto3,enum=rill.runtime.v1.BucketExtractPolicy_Strategy" json:"rows_strategy,omitempty"`
	RowsLimitBytes uint64                       `protobuf:"varint,2,opt,name=rows_limit_bytes,json=rowsLimitBytes,proto3" json:"rows_limit_bytes,omitempty"`
	FilesStrategy  BucketExtractPolicy_Strategy `protobuf:"varint,3,opt,name=files_strategy,json=filesStrategy,proto3,enum=rill.runtime.v1.BucketExtractPolicy_Strategy" json:"files_strategy,omitempty"`
	FilesLimit     uint64                       `protobuf:"varint,4,opt,name=files_limit,json=filesLimit,proto3" json:"files_limit,omitempty"`
}

func (x *BucketExtractPolicy) Reset() {
	*x = BucketExtractPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketExtractPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketExtractPolicy) ProtoMessage() {}

func (x *BucketExtractPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketExtractPolicy.ProtoReflect.Descriptor instead.
func (*BucketExtractPolicy) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{50}
}

func (x *BucketExtractPolicy) GetRowsStrategy() BucketExtractPolicy_Strategy {
	if x != nil {
		return x.RowsStrategy
	}
	return BucketExtractPolicy_STRATEGY_UNSPECIFIED
}

func (x *BucketExtractPolicy) GetRowsLimitBytes() uint64 {
	if x != nil {
		return x.RowsLimitBytes
	}
	return 0
}

func (x *BucketExtractPolicy) GetFilesStrategy() BucketExtractPolicy_Strategy {
	if x != nil {
		return x.FilesStrategy
	}
	return BucketExtractPolicy_STRATEGY_UNSPECIFIED
}

func (x *BucketExtractPolicy) GetFilesLimit() uint64 {
	if x != nil {
		return x.FilesLimit
	}
	return 0
}

type Theme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ThemeSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ThemeState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Theme) Reset() {
	*x = Theme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Theme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Theme) ProtoMessage() {}

func (x *Theme) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Theme.ProtoReflect.Descriptor instead.
func (*Theme) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{51}
}

func (x *Theme) GetSpec() *ThemeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Theme) GetState() *ThemeState {
	if x != nil {
		return x.State
	}
	return nil
}

type ThemeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryColor      *Color `protobuf:"bytes,1,opt,name=primary_color,json=primaryColor,proto3,oneof" json:"primary_color,omitempty"`
	SecondaryColor    *Color `protobuf:"bytes,2,opt,name=secondary_color,json=secondaryColor,proto3,oneof" json:"secondary_color,omitempty"`
	PrimaryColorRaw   string `protobuf:"bytes,3,opt,name=primary_color_raw,json=primaryColorRaw,proto3" json:"primary_color_raw,omitempty"`
	SecondaryColorRaw string `protobuf:"bytes,4,opt,name=secondary_color_raw,json=secondaryColorRaw,proto3" json:"secondary_color_raw,omitempty"`
}

func (x *ThemeSpec) Reset() {
	*x = ThemeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeSpec) ProtoMessage() {}

func (x *ThemeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeSpec.ProtoReflect.Descriptor instead.
func (*ThemeSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{52}
}

func (x *ThemeSpec) GetPrimaryColor() *Color {
	if x != nil {
		return x.PrimaryColor
	}
	return nil
}

func (x *ThemeSpec) GetSecondaryColor() *Color {
	if x != nil {
		return x.SecondaryColor
	}
	return nil
}

func (x *ThemeSpec) GetPrimaryColorRaw() string {
	if x != nil {
		return x.PrimaryColorRaw
	}
	return ""
}

func (x *ThemeSpec) GetSecondaryColorRaw() string {
	if x != nil {
		return x.SecondaryColorRaw
	}
	return ""
}

type ThemeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThemeState) Reset() {
	*x = ThemeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeState) ProtoMessage() {}

func (x *ThemeState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeState.ProtoReflect.Descriptor instead.
func (*ThemeState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{53}
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ComponentSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ComponentState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{54}
}

func (x *Component) GetSpec() *ComponentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Component) GetState() *ComponentState {
	if x != nil {
		return x.State
	}
	return nil
}

type ComponentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName        string               `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description        string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Renderer           string               `protobuf:"bytes,4,opt,name=renderer,proto3" json:"renderer,omitempty"`
	RendererProperties *structpb.Struct     `protobuf:"bytes,5,opt,name=renderer_properties,json=rendererProperties,proto3" json:"renderer_properties,omitempty"`
	Input              []*ComponentVariable `protobuf:"bytes,8,rep,name=input,proto3" json:"input,omitempty"`
	Output             *ComponentVariable   `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	DefinedInCanvas    bool                 `protobuf:"varint,6,opt,name=defined_in_canvas,json=definedInCanvas,proto3" json:"defined_in_canvas,omitempty"`
}

func (x *ComponentSpec) Reset() {
	*x = ComponentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentSpec) ProtoMessage() {}

func (x *ComponentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentSpec.ProtoReflect.Descriptor instead.
func (*ComponentSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{55}
}

func (x *ComponentSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ComponentSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComponentSpec) GetRenderer() string {
	if x != nil {
		return x.Renderer
	}
	return ""
}

func (x *ComponentSpec) GetRendererProperties() *structpb.Struct {
	if x != nil {
		return x.RendererProperties
	}
	return nil
}

func (x *ComponentSpec) GetInput() []*ComponentVariable {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ComponentSpec) GetOutput() *ComponentVariable {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ComponentSpec) GetDefinedInCanvas() bool {
	if x != nil {
		return x.DefinedInCanvas
	}
	return false
}

type ComponentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidSpec *ComponentSpec `protobuf:"bytes,1,opt,name=valid_spec,json=validSpec,proto3" json:"valid_spec,omitempty"`
}

func (x *ComponentState) Reset() {
	*x = ComponentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentState) ProtoMessage() {}

func (x *ComponentState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentState.ProtoReflect.Descriptor instead.
func (*ComponentState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{56}
}

func (x *ComponentState) GetValidSpec() *ComponentSpec {
	if x != nil {
		return x.ValidSpec
	}
	return nil
}

type ComponentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DefaultValue *structpb.Value `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *ComponentVariable) Reset() {
	*x = ComponentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVariable) ProtoMessage() {}

func (x *ComponentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVariable.ProtoReflect.Descriptor instead.
func (*ComponentVariable) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{57}
}

func (x *ComponentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentVariable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComponentVariable) GetDefaultValue() *structpb.Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type Canvas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *CanvasSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *CanvasState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Canvas) Reset() {
	*x = Canvas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canvas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canvas) ProtoMessage() {}

func (x *Canvas) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canvas.ProtoReflect.Descriptor instead.
func (*Canvas) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{58}
}

func (x *Canvas) GetSpec() *CanvasSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Canvas) GetState() *CanvasState {
	if x != nil {
		return x.State
	}
	return nil
}

type CanvasSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Display name for the canvas.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Banner text that can be displayed in Rill Cloud.
	Banner string `protobuf:"bytes,17,opt,name=banner,proto3" json:"banner,omitempty"`
	// Max width in pixels of the canvas.
	MaxWidth uint32 `protobuf:"varint,2,opt,name=max_width,json=maxWidth,proto3" json:"max_width,omitempty"`
	// Horizontal gap in pixels of the canvas.
	GapX uint32 `protobuf:"varint,9,opt,name=gap_x,json=gapX,proto3" json:"gap_x,omitempty"`
	// Vertical gap in pixels of the canvas.
	GapY uint32 `protobuf:"varint,10,opt,name=gap_y,json=gapY,proto3" json:"gap_y,omitempty"`
	// Name of the theme to use. Only one of theme and embedded_theme can be set.
	Theme string `protobuf:"bytes,7,opt,name=theme,proto3" json:"theme,omitempty"`
	// Theme to use, provided inline. Only one of theme and embedded_theme can be set.
	EmbeddedTheme *ThemeSpec `protobuf:"bytes,8,opt,name=embedded_theme,json=embeddedTheme,proto3" json:"embedded_theme,omitempty"`
	// List of selectable time ranges with comparison time ranges.
	// If the list is empty, a default list should be shown.
	// TODO: Once the canvas APIs have stabilized, rename ExploreTimeRange to a non-explore-specific name.
	TimeRanges []*ExploreTimeRange `protobuf:"bytes,11,rep,name=time_ranges,json=timeRanges,proto3" json:"time_ranges,omitempty"`
	// List of selectable time zones.
	// If the list is empty, a default list should be shown.
	// The values should be valid IANA location identifiers.
	TimeZones []string `protobuf:"bytes,12,rep,name=time_zones,json=timeZones,proto3" json:"time_zones,omitempty"`
	// Indicates if filters should be enabled for the canvas.
	FiltersEnabled bool `protobuf:"varint,13,opt,name=filters_enabled,json=filtersEnabled,proto3" json:"filters_enabled,omitempty"`
	// Preset UI state to show by default.
	DefaultPreset *CanvasPreset `protobuf:"bytes,15,opt,name=default_preset,json=defaultPreset,proto3" json:"default_preset,omitempty"`
	// Variables that can be used in the canvas.
	Variables []*ComponentVariable `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty"`
	// Rows to render on the canvas
	Rows []*CanvasRow `protobuf:"bytes,18,rep,name=rows,proto3" json:"rows,omitempty"`
	// Security rules to apply for access to the canvas.
	SecurityRules []*SecurityRule `protobuf:"bytes,6,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
}

func (x *CanvasSpec) Reset() {
	*x = CanvasSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasSpec) ProtoMessage() {}

func (x *CanvasSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasSpec.ProtoReflect.Descriptor instead.
func (*CanvasSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{59}
}

func (x *CanvasSpec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CanvasSpec) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *CanvasSpec) GetMaxWidth() uint32 {
	if x != nil {
		return x.MaxWidth
	}
	return 0
}

func (x *CanvasSpec) GetGapX() uint32 {
	if x != nil {
		return x.GapX
	}
	return 0
}

func (x *CanvasSpec) GetGapY() uint32 {
	if x != nil {
		return x.GapY
	}
	return 0
}

func (x *CanvasSpec) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *CanvasSpec) GetEmbeddedTheme() *ThemeSpec {
	if x != nil {
		return x.EmbeddedTheme
	}
	return nil
}

func (x *CanvasSpec) GetTimeRanges() []*ExploreTimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *CanvasSpec) GetTimeZones() []string {
	if x != nil {
		return x.TimeZones
	}
	return nil
}

func (x *CanvasSpec) GetFiltersEnabled() bool {
	if x != nil {
		return x.FiltersEnabled
	}
	return false
}

func (x *CanvasSpec) GetDefaultPreset() *CanvasPreset {
	if x != nil {
		return x.DefaultPreset
	}
	return nil
}

func (x *CanvasSpec) GetVariables() []*ComponentVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CanvasSpec) GetRows() []*CanvasRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *CanvasSpec) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

type CanvasState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidSpec *CanvasSpec `protobuf:"bytes,1,opt,name=valid_spec,json=validSpec,proto3" json:"valid_spec,omitempty"`
}

func (x *CanvasState) Reset() {
	*x = CanvasState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasState) ProtoMessage() {}

func (x *CanvasState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasState.ProtoReflect.Descriptor instead.
func (*CanvasState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{60}
}

func (x *CanvasState) GetValidSpec() *CanvasSpec {
	if x != nil {
		return x.ValidSpec
	}
	return nil
}

type CanvasRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Height of the row. The unit is given in height_unit.
	Height *uint32 `protobuf:"varint,1,opt,name=height,proto3,oneof" json:"height,omitempty"`
	// Unit of the height. Current possible values: "px", empty string.
	HeightUnit string `protobuf:"bytes,2,opt,name=height_unit,json=heightUnit,proto3" json:"height_unit,omitempty"`
	// Items to render in the row.
	Items []*CanvasItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CanvasRow) Reset() {
	*x = CanvasRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasRow) ProtoMessage() {}

func (x *CanvasRow) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasRow.ProtoReflect.Descriptor instead.
func (*CanvasRow) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{61}
}

func (x *CanvasRow) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CanvasRow) GetHeightUnit() string {
	if x != nil {
		return x.HeightUnit
	}
	return ""
}

func (x *CanvasRow) GetItems() []*CanvasItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CanvasItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the component to render.
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Indicates if the component was defined inline as part of the canvas YAML.
	DefinedInCanvas bool `protobuf:"varint,8,opt,name=defined_in_canvas,json=definedInCanvas,proto3" json:"defined_in_canvas,omitempty"`
	// Width of the item. The unit is given in width_unit.
	Width *uint32 `protobuf:"varint,9,opt,name=width,proto3,oneof" json:"width,omitempty"`
	// Unit of the width. Current possible values: empty string.
	WidthUnit string `protobuf:"bytes,10,opt,name=width_unit,json=widthUnit,proto3" json:"width_unit,omitempty"`
}

func (x *CanvasItem) Reset() {
	*x = CanvasItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasItem) ProtoMessage() {}

func (x *CanvasItem) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasItem.ProtoReflect.Descriptor instead.
func (*CanvasItem) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{62}
}

func (x *CanvasItem) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *CanvasItem) GetDefinedInCanvas() bool {
	if x != nil {
		return x.DefinedInCanvas
	}
	return false
}

func (x *CanvasItem) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CanvasItem) GetWidthUnit() string {
	if x != nil {
		return x.WidthUnit
	}
	return ""
}

type CanvasPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time range for the explore.
	// It corresponds to the `range` property of the explore's `time_ranges`.
	// If not found in `time_ranges`, it should be added to the list.
	TimeRange *string `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3,oneof" json:"time_range,omitempty"`
	// Comparison mode.
	// TODO: Once the canvas APIs have stabilized, rename ExploreComparisonMode to a non-explore-specific name.
	ComparisonMode ExploreComparisonMode `protobuf:"varint,2,opt,name=comparison_mode,json=comparisonMode,proto3,enum=rill.runtime.v1.ExploreComparisonMode" json:"comparison_mode,omitempty"`
	// If comparison_mode is EXPLORE_COMPARISON_MODE_DIMENSION, this indicates the dimension to use.
	ComparisonDimension *string `protobuf:"bytes,8,opt,name=comparison_dimension,json=comparisonDimension,proto3,oneof" json:"comparison_dimension,omitempty"`
}

func (x *CanvasPreset) Reset() {
	*x = CanvasPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasPreset) ProtoMessage() {}

func (x *CanvasPreset) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasPreset.ProtoReflect.Descriptor instead.
func (*CanvasPreset) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{63}
}

func (x *CanvasPreset) GetTimeRange() string {
	if x != nil && x.TimeRange != nil {
		return *x.TimeRange
	}
	return ""
}

func (x *CanvasPreset) GetComparisonMode() ExploreComparisonMode {
	if x != nil {
		return x.ComparisonMode
	}
	return ExploreComparisonMode_EXPLORE_COMPARISON_MODE_UNSPECIFIED
}

func (x *CanvasPreset) GetComparisonDimension() string {
	if x != nil && x.ComparisonDimension != nil {
		return *x.ComparisonDimension
	}
	return ""
}

// API defines a custom operation for querying data stored in Rill.
type API struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *APISpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *APIState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *API) Reset() {
	*x = API{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API) ProtoMessage() {}

func (x *API) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API.ProtoReflect.Descriptor instead.
func (*API) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{64}
}

func (x *API) GetSpec() *APISpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *API) GetState() *APIState {
	if x != nil {
		return x.State
	}
	return nil
}

type APISpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resolver              string             `protobuf:"bytes,1,opt,name=resolver,proto3" json:"resolver,omitempty"`
	ResolverProperties    *structpb.Struct   `protobuf:"bytes,2,opt,name=resolver_properties,json=resolverProperties,proto3" json:"resolver_properties,omitempty"`
	OpenapiSummary        string             `protobuf:"bytes,3,opt,name=openapi_summary,json=openapiSummary,proto3" json:"openapi_summary,omitempty"`
	OpenapiParameters     []*structpb.Struct `protobuf:"bytes,4,rep,name=openapi_parameters,json=openapiParameters,proto3" json:"openapi_parameters,omitempty"`
	OpenapiResponseSchema *structpb.Struct   `protobuf:"bytes,5,opt,name=openapi_response_schema,json=openapiResponseSchema,proto3" json:"openapi_response_schema,omitempty"`
	SecurityRules         []*SecurityRule    `protobuf:"bytes,6,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
	SkipNestedSecurity    bool               `protobuf:"varint,7,opt,name=skip_nested_security,json=skipNestedSecurity,proto3" json:"skip_nested_security,omitempty"`
}

func (x *APISpec) Reset() {
	*x = APISpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APISpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APISpec) ProtoMessage() {}

func (x *APISpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APISpec.ProtoReflect.Descriptor instead.
func (*APISpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{65}
}

func (x *APISpec) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

func (x *APISpec) GetResolverProperties() *structpb.Struct {
	if x != nil {
		return x.ResolverProperties
	}
	return nil
}

func (x *APISpec) GetOpenapiSummary() string {
	if x != nil {
		return x.OpenapiSummary
	}
	return ""
}

func (x *APISpec) GetOpenapiParameters() []*structpb.Struct {
	if x != nil {
		return x.OpenapiParameters
	}
	return nil
}

func (x *APISpec) GetOpenapiResponseSchema() *structpb.Struct {
	if x != nil {
		return x.OpenapiResponseSchema
	}
	return nil
}

func (x *APISpec) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

func (x *APISpec) GetSkipNestedSecurity() bool {
	if x != nil {
		return x.SkipNestedSecurity
	}
	return false
}

type APIState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *APIState) Reset() {
	*x = APIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIState) ProtoMessage() {}

func (x *APIState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIState.ProtoReflect.Descriptor instead.
func (*APIState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{66}
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefUpdate     bool   `protobuf:"varint,4,opt,name=ref_update,json=refUpdate,proto3" json:"ref_update,omitempty"`
	Disable       bool   `protobuf:"varint,5,opt,name=disable,proto3" json:"disable,omitempty"`
	Cron          string `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	TickerSeconds uint32 `protobuf:"varint,2,opt,name=ticker_seconds,json=tickerSeconds,proto3" json:"ticker_seconds,omitempty"`
	TimeZone      string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{67}
}

func (x *Schedule) GetRefUpdate() bool {
	if x != nil {
		return x.RefUpdate
	}
	return false
}

func (x *Schedule) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *Schedule) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *Schedule) GetTickerSeconds() uint32 {
	if x != nil {
		return x.TickerSeconds
	}
	return 0
}

func (x *Schedule) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type ParseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FilePath      string        `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	StartLocation *CharLocation `protobuf:"bytes,3,opt,name=start_location,json=startLocation,proto3" json:"start_location,omitempty"`
	External      bool          `protobuf:"varint,4,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *ParseError) Reset() {
	*x = ParseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseError) ProtoMessage() {}

func (x *ParseError) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseError.ProtoReflect.Descriptor instead.
func (*ParseError) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{68}
}

func (x *ParseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ParseError) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ParseError) GetStartLocation() *CharLocation {
	if x != nil {
		return x.StartLocation
	}
	return nil
}

func (x *ParseError) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PropertyPath []string `protobuf:"bytes,2,rep,name=property_path,json=propertyPath,proto3" json:"property_path,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{69}
}

func (x *ValidationError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationError) GetPropertyPath() []string {
	if x != nil {
		return x.PropertyPath
	}
	return nil
}

type DependencyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Dependency string `protobuf:"bytes,2,opt,name=dependency,proto3" json:"dependency,omitempty"`
}

func (x *DependencyError) Reset() {
	*x = DependencyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyError) ProtoMessage() {}

func (x *DependencyError) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyError.ProtoReflect.Descriptor instead.
func (*DependencyError) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{70}
}

func (x *DependencyError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DependencyError) GetDependency() string {
	if x != nil {
		return x.Dependency
	}
	return ""
}

type ExecutionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExecutionError) Reset() {
	*x = ExecutionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionError) ProtoMessage() {}

func (x *ExecutionError) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionError.ProtoReflect.Descriptor instead.
func (*ExecutionError) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{71}
}

func (x *ExecutionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CharLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line uint32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *CharLocation) Reset() {
	*x = CharLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharLocation) ProtoMessage() {}

func (x *CharLocation) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharLocation.ProtoReflect.Descriptor instead.
func (*CharLocation) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{72}
}

func (x *CharLocation) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

type ConnectorV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ConnectorSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	State *ConnectorState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ConnectorV2) Reset() {
	*x = ConnectorV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorV2) ProtoMessage() {}

func (x *ConnectorV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorV2.ProtoReflect.Descriptor instead.
func (*ConnectorV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{73}
}

func (x *ConnectorV2) GetSpec() *ConnectorSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ConnectorV2) GetState() *ConnectorState {
	if x != nil {
		return x.State
	}
	return nil
}

type ConnectorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver              string            `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Properties          map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TemplatedProperties []string          `protobuf:"bytes,4,rep,name=templated_properties,json=templatedProperties,proto3" json:"templated_properties,omitempty"`
	Provision           bool              `protobuf:"varint,5,opt,name=provision,proto3" json:"provision,omitempty"`
	ProvisionArgs       *structpb.Struct  `protobuf:"bytes,6,opt,name=provision_args,json=provisionArgs,proto3" json:"provision_args,omitempty"`
	// DEPRECATED: properties_from_variables stores properties whose value is a variable.
	// NOTE : properties_from_variables and properties both should be used to get all properties.
	PropertiesFromVariables map[string]string `protobuf:"bytes,3,rep,name=properties_from_variables,json=propertiesFromVariables,proto3" json:"properties_from_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectorSpec) Reset() {
	*x = ConnectorSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorSpec) ProtoMessage() {}

func (x *ConnectorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorSpec.ProtoReflect.Descriptor instead.
func (*ConnectorSpec) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{74}
}

func (x *ConnectorSpec) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *ConnectorSpec) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ConnectorSpec) GetTemplatedProperties() []string {
	if x != nil {
		return x.TemplatedProperties
	}
	return nil
}

func (x *ConnectorSpec) GetProvision() bool {
	if x != nil {
		return x.Provision
	}
	return false
}

func (x *ConnectorSpec) GetProvisionArgs() *structpb.Struct {
	if x != nil {
		return x.ProvisionArgs
	}
	return nil
}

func (x *ConnectorSpec) GetPropertiesFromVariables() map[string]string {
	if x != nil {
		return x.PropertiesFromVariables
	}
	return nil
}

type ConnectorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecHash string `protobuf:"bytes,1,opt,name=spec_hash,json=specHash,proto3" json:"spec_hash,omitempty"`
}

func (x *ConnectorState) Reset() {
	*x = ConnectorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorState) ProtoMessage() {}

func (x *ConnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorState.ProtoReflect.Descriptor instead.
func (*ConnectorState) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{75}
}

func (x *ConnectorState) GetSpecHash() string {
	if x != nil {
		return x.SpecHash
	}
	return ""
}

// Dimensions are columns to filter and group by
type MetricsViewSpec_DimensionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Column      string `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	Expression  string `protobuf:"bytes,6,opt,name=expression,proto3" json:"expression,omitempty"`
	Unnest      bool   `protobuf:"varint,5,opt,name=unnest,proto3" json:"unnest,omitempty"`
	Uri         string `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *MetricsViewSpec_DimensionV2) Reset() {
	*x = MetricsViewSpec_DimensionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_DimensionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_DimensionV2) ProtoMessage() {}

func (x *MetricsViewSpec_DimensionV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_DimensionV2.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_DimensionV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MetricsViewSpec_DimensionV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsViewSpec_DimensionV2) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MetricsViewSpec_DimensionV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricsViewSpec_DimensionV2) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *MetricsViewSpec_DimensionV2) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *MetricsViewSpec_DimensionV2) GetUnnest() bool {
	if x != nil {
		return x.Unnest
	}
	return false
}

func (x *MetricsViewSpec_DimensionV2) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Selector for a dimension
type MetricsViewSpec_DimensionSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TimeGrain TimeGrain `protobuf:"varint,2,opt,name=time_grain,json=timeGrain,proto3,enum=rill.runtime.v1.TimeGrain" json:"time_grain,omitempty"` // Only for time dimensions (optional)
	Desc      bool      `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                           // Only for when ordering (optional)
}

func (x *MetricsViewSpec_DimensionSelector) Reset() {
	*x = MetricsViewSpec_DimensionSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_DimensionSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_DimensionSelector) ProtoMessage() {}

func (x *MetricsViewSpec_DimensionSelector) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_DimensionSelector.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_DimensionSelector) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 1}
}

func (x *MetricsViewSpec_DimensionSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsViewSpec_DimensionSelector) GetTimeGrain() TimeGrain {
	if x != nil {
		return x.TimeGrain
	}
	return TimeGrain_TIME_GRAIN_UNSPECIFIED
}

func (x *MetricsViewSpec_DimensionSelector) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

// Window to apply to the measure calculation
type MetricsViewSpec_MeasureWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, partitions the window by all present dimensions except those in order_by
	Partition bool `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Dimensions to order the window by. Must be present in required_dimensions.
	OrderBy []*MetricsViewSpec_DimensionSelector `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Raw SQL expression to use as the frame (starting with "ROWS ...")
	FrameExpression string `protobuf:"bytes,2,opt,name=frame_expression,json=frameExpression,proto3" json:"frame_expression,omitempty"`
}

func (x *MetricsViewSpec_MeasureWindow) Reset() {
	*x = MetricsViewSpec_MeasureWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_MeasureWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_MeasureWindow) ProtoMessage() {}

func (x *MetricsViewSpec_MeasureWindow) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_MeasureWindow.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_MeasureWindow) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 2}
}

func (x *MetricsViewSpec_MeasureWindow) GetPartition() bool {
	if x != nil {
		return x.Partition
	}
	return false
}

func (x *MetricsViewSpec_MeasureWindow) GetOrderBy() []*MetricsViewSpec_DimensionSelector {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *MetricsViewSpec_MeasureWindow) GetFrameExpression() string {
	if x != nil {
		return x.FrameExpression
	}
	return ""
}

// Measures are aggregated computed values
type MetricsViewSpec_MeasureV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName         string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description         string                               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Expression          string                               `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Type                MetricsViewSpec_MeasureType          `protobuf:"varint,8,opt,name=type,proto3,enum=rill.runtime.v1.MetricsViewSpec_MeasureType" json:"type,omitempty"`
	Window              *MetricsViewSpec_MeasureWindow       `protobuf:"bytes,9,opt,name=window,proto3" json:"window,omitempty"`
	PerDimensions       []*MetricsViewSpec_DimensionSelector `protobuf:"bytes,10,rep,name=per_dimensions,json=perDimensions,proto3" json:"per_dimensions,omitempty"`
	RequiredDimensions  []*MetricsViewSpec_DimensionSelector `protobuf:"bytes,11,rep,name=required_dimensions,json=requiredDimensions,proto3" json:"required_dimensions,omitempty"`
	ReferencedMeasures  []string                             `protobuf:"bytes,12,rep,name=referenced_measures,json=referencedMeasures,proto3" json:"referenced_measures,omitempty"`
	FormatPreset        string                               `protobuf:"bytes,5,opt,name=format_preset,json=formatPreset,proto3" json:"format_preset,omitempty"`
	FormatD3            string                               `protobuf:"bytes,7,opt,name=format_d3,json=formatD3,proto3" json:"format_d3,omitempty"`
	FormatD3Locale      *structpb.Struct                     `protobuf:"bytes,13,opt,name=format_d3_locale,json=formatD3Locale,proto3" json:"format_d3_locale,omitempty"`
	ValidPercentOfTotal bool                                 `protobuf:"varint,6,opt,name=valid_percent_of_total,json=validPercentOfTotal,proto3" json:"valid_percent_of_total,omitempty"`
	TreatNullsAs        string                               `protobuf:"bytes,14,opt,name=treat_nulls_as,json=treatNullsAs,proto3" json:"treat_nulls_as,omitempty"`
}

func (x *MetricsViewSpec_MeasureV2) Reset() {
	*x = MetricsViewSpec_MeasureV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_MeasureV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_MeasureV2) ProtoMessage() {}

func (x *MetricsViewSpec_MeasureV2) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_MeasureV2.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_MeasureV2) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 3}
}

func (x *MetricsViewSpec_MeasureV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetType() MetricsViewSpec_MeasureType {
	if x != nil {
		return x.Type
	}
	return MetricsViewSpec_MEASURE_TYPE_UNSPECIFIED
}

func (x *MetricsViewSpec_MeasureV2) GetWindow() *MetricsViewSpec_MeasureWindow {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *MetricsViewSpec_MeasureV2) GetPerDimensions() []*MetricsViewSpec_DimensionSelector {
	if x != nil {
		return x.PerDimensions
	}
	return nil
}

func (x *MetricsViewSpec_MeasureV2) GetRequiredDimensions() []*MetricsViewSpec_DimensionSelector {
	if x != nil {
		return x.RequiredDimensions
	}
	return nil
}

func (x *MetricsViewSpec_MeasureV2) GetReferencedMeasures() []string {
	if x != nil {
		return x.ReferencedMeasures
	}
	return nil
}

func (x *MetricsViewSpec_MeasureV2) GetFormatPreset() string {
	if x != nil {
		return x.FormatPreset
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetFormatD3() string {
	if x != nil {
		return x.FormatD3
	}
	return ""
}

func (x *MetricsViewSpec_MeasureV2) GetFormatD3Locale() *structpb.Struct {
	if x != nil {
		return x.FormatD3Locale
	}
	return nil
}

func (x *MetricsViewSpec_MeasureV2) GetValidPercentOfTotal() bool {
	if x != nil {
		return x.ValidPercentOfTotal
	}
	return false
}

func (x *MetricsViewSpec_MeasureV2) GetTreatNullsAs() string {
	if x != nil {
		return x.TreatNullsAs
	}
	return ""
}

// Deprecated: Now defined in the Explore resource.
type MetricsViewSpec_AvailableComparisonOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Used to override the range for the comparison with something other than the selected range.
	Range string `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *MetricsViewSpec_AvailableComparisonOffset) Reset() {
	*x = MetricsViewSpec_AvailableComparisonOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_AvailableComparisonOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_AvailableComparisonOffset) ProtoMessage() {}

func (x *MetricsViewSpec_AvailableComparisonOffset) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_AvailableComparisonOffset.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_AvailableComparisonOffset) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 4}
}

func (x *MetricsViewSpec_AvailableComparisonOffset) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *MetricsViewSpec_AvailableComparisonOffset) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

// Deprecated: Now defined in the Explore resource.
type MetricsViewSpec_AvailableTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range string `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Available comparison offsets for this time range.
	ComparisonOffsets []*MetricsViewSpec_AvailableComparisonOffset `protobuf:"bytes,2,rep,name=comparison_offsets,json=comparisonOffsets,proto3" json:"comparison_offsets,omitempty"`
}

func (x *MetricsViewSpec_AvailableTimeRange) Reset() {
	*x = MetricsViewSpec_AvailableTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rill_runtime_v1_resources_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsViewSpec_AvailableTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsViewSpec_AvailableTimeRange) ProtoMessage() {}

func (x *MetricsViewSpec_AvailableTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_rill_runtime_v1_resources_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsViewSpec_AvailableTimeRange.ProtoReflect.Descriptor instead.
func (*MetricsViewSpec_AvailableTimeRange) Descriptor() ([]byte, []int) {
	return file_rill_runtime_v1_resources_proto_rawDescGZIP(), []int{13, 5}
}

func (x *MetricsViewSpec_AvailableTimeRange) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *MetricsViewSpec_AvailableTimeRange) GetComparisonOffsets() []*MetricsViewSpec_AvailableComparisonOffset {
	if x != nil {
		return x.ComparisonOffsets
	}
	return nil
}

var File_rill_runtime_v1_resources_proto protoreflect.FileDescriptor

var file_rill_runtime_v1_resources_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2e, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf2, 0x06, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x72, 0x65,
	0x66, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x42, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x12,
	0x45, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x22, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x13, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x08, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x02, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22,
	0x9d, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x22,
	0x6c, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfc, 0x07,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1a,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x25, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x22, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xcb, 0x05, 0x0a,
	0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a,
	0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x18, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x56, 0x32, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x2d, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f,
	0x66, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x71, 0x6c, 0x12,
	0x31, 0x0a, 0x15, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x74, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0x76, 0x0a,
	0x11, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x1a, 0xa7, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xdf, 0x05, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x56, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x59, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x64, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x44, 0x33, 0x12, 0x41, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x64, 0x33,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x33,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x41,
	0x73, 0x1a, 0x49, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x95, 0x01, 0x0a,
	0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xed, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x48, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x70, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdc, 0x05, 0x0a, 0x0b, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4f, 0x0a, 0x13, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73,
	0x48, 0x69, 0x64, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xfe,
	0x0c, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4f, 0x0a, 0x13, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x48, 0x07, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x18, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x73,
	0x12, 0x27, 0x0a, 0x0d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x10, 0x52, 0x0c, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x12, 0x2d, 0x0a, 0x11, 0x64, 0x75, 0x63, 0x6b, 0x64, 0x62, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x64, 0x75, 0x63, 0x6b, 0x64, 0x62, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x59, 0x0a, 0x0d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf5, 0x05, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x49,
	0x73, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x02,
	0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x81, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x4f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xf8, 0x08, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x73, 0x6f, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x49, 0x73, 0x6f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a,
	0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x72, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc7,
	0x02, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75,
	0x6e, 0x4f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x0e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x68, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x68, 0x6f,
	0x63, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52,
	0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x6f,
	0x77, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x22,
	0x6a, 0x0a, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x09,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x76, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x13,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x22, 0x4f, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x70, 0x65, 0x63, 0x22, 0x78, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x32,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xf1, 0x04, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x61, 0x70,
	0x5f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x61, 0x70, 0x58, 0x12, 0x13,
	0x0a, 0x05, 0x67, 0x61, 0x70, 0x5f, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67,
	0x61, 0x70, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x40,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x6f, 0x77, 0x12,
	0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64,
	0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x46, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b,
	0x69, 0x70, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x0a, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x22, 0x50, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x2a, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x78, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x32,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x04, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x77, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x48, 0x61, 0x73, 0x68, 0x2a, 0x8a, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xab, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x57, 0x65, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x50, 0x4c, 0x4f,
	0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x50, 0x4c, 0x4f,
	0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x4c,
	0x4f, 0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x41, 0x4e,
	0x56, 0x41, 0x53, 0x10, 0x04, 0x2a, 0xdc, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x50, 0x4c,
	0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x54, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x53, 0x53, 0x45,
	0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53,
	0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0xc1, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x69, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x69, 0x6c, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x69, 0x6c, 0x6c, 0x2f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x52, 0x58, 0xaa, 0x02, 0x0f, 0x52, 0x69, 0x6c,
	0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x52,
	0x69, 0x6c, 0x6c, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1b, 0x52, 0x69, 0x6c, 0x6c, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x52,
	0x69, 0x6c, 0x6c, 0x3a, 0x3a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rill_runtime_v1_resources_proto_rawDescOnce sync.Once
	file_rill_runtime_v1_resources_proto_rawDescData = file_rill_runtime_v1_resources_proto_rawDesc
)

func file_rill_runtime_v1_resources_proto_rawDescGZIP() []byte {
	file_rill_runtime_v1_resources_proto_rawDescOnce.Do(func() {
		file_rill_runtime_v1_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_rill_runtime_v1_resources_proto_rawDescData)
	})
	return file_rill_runtime_v1_resources_proto_rawDescData
}

var file_rill_runtime_v1_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_rill_runtime_v1_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_rill_runtime_v1_resources_proto_goTypes = []any{
	(ReconcileStatus)(0),                              // 0: rill.runtime.v1.ReconcileStatus
	(ExploreComparisonMode)(0),                        // 1: rill.runtime.v1.ExploreComparisonMode
	(ExploreWebView)(0),                               // 2: rill.runtime.v1.ExploreWebView
	(ExploreSortType)(0),                              // 3: rill.runtime.v1.ExploreSortType
	(AssertionStatus)(0),                              // 4: rill.runtime.v1.AssertionStatus
	(MetricsViewSpec_MeasureType)(0),                  // 5: rill.runtime.v1.MetricsViewSpec.MeasureType
	(MetricsViewSpec_ComparisonMode)(0),               // 6: rill.runtime.v1.MetricsViewSpec.ComparisonMode
	(BucketExtractPolicy_Strategy)(0),                 // 7: rill.runtime.v1.BucketExtractPolicy.Strategy
	(*Resource)(nil),                                  // 8: rill.runtime.v1.Resource
	(*ResourceMeta)(nil),                              // 9: rill.runtime.v1.ResourceMeta
	(*ResourceName)(nil),                              // 10: rill.runtime.v1.ResourceName
	(*ProjectParser)(nil),                             // 11: rill.runtime.v1.ProjectParser
	(*ProjectParserSpec)(nil),                         // 12: rill.runtime.v1.ProjectParserSpec
	(*ProjectParserState)(nil),                        // 13: rill.runtime.v1.ProjectParserState
	(*SourceV2)(nil),                                  // 14: rill.runtime.v1.SourceV2
	(*SourceSpec)(nil),                                // 15: rill.runtime.v1.SourceSpec
	(*SourceState)(nil),                               // 16: rill.runtime.v1.SourceState
	(*ModelV2)(nil),                                   // 17: rill.runtime.v1.ModelV2
	(*ModelSpec)(nil),                                 // 18: rill.runtime.v1.ModelSpec
	(*ModelState)(nil),                                // 19: rill.runtime.v1.ModelState
	(*MetricsViewV2)(nil),                             // 20: rill.runtime.v1.MetricsViewV2
	(*MetricsViewSpec)(nil),                           // 21: rill.runtime.v1.MetricsViewSpec
	(*SecurityRule)(nil),                              // 22: rill.runtime.v1.SecurityRule
	(*SecurityRuleAccess)(nil),                        // 23: rill.runtime.v1.SecurityRuleAccess
	(*SecurityRuleFieldAccess)(nil),                   // 24: rill.runtime.v1.SecurityRuleFieldAccess
	(*SecurityRuleRowFilter)(nil),                     // 25: rill.runtime.v1.SecurityRuleRowFilter
	(*MetricsViewState)(nil),                          // 26: rill.runtime.v1.MetricsViewState
	(*Explore)(nil),                                   // 27: rill.runtime.v1.Explore
	(*ExploreSpec)(nil),                               // 28: rill.runtime.v1.ExploreSpec
	(*ExploreState)(nil),                              // 29: rill.runtime.v1.ExploreState
	(*ExploreTimeRange)(nil),                          // 30: rill.runtime.v1.ExploreTimeRange
	(*ExploreComparisonTimeRange)(nil),                // 31: rill.runtime.v1.ExploreComparisonTimeRange
	(*ExplorePreset)(nil),                             // 32: rill.runtime.v1.ExplorePreset
	(*FieldSelector)(nil),                             // 33: rill.runtime.v1.FieldSelector
	(*StringListValue)(nil),                           // 34: rill.runtime.v1.StringListValue
	(*Migration)(nil),                                 // 35: rill.runtime.v1.Migration
	(*MigrationSpec)(nil),                             // 36: rill.runtime.v1.MigrationSpec
	(*MigrationState)(nil),                            // 37: rill.runtime.v1.MigrationState
	(*Report)(nil),                                    // 38: rill.runtime.v1.Report
	(*ReportSpec)(nil),                                // 39: rill.runtime.v1.ReportSpec
	(*ReportState)(nil),                               // 40: rill.runtime.v1.ReportState
	(*ReportExecution)(nil),                           // 41: rill.runtime.v1.ReportExecution
	(*Alert)(nil),                                     // 42: rill.runtime.v1.Alert
	(*AlertSpec)(nil),                                 // 43: rill.runtime.v1.AlertSpec
	(*Notifier)(nil),                                  // 44: rill.runtime.v1.Notifier
	(*AlertState)(nil),                                // 45: rill.runtime.v1.AlertState
	(*AlertExecution)(nil),                            // 46: rill.runtime.v1.AlertExecution
	(*AssertionResult)(nil),                           // 47: rill.runtime.v1.AssertionResult
	(*PullTrigger)(nil),                               // 48: rill.runtime.v1.PullTrigger
	(*PullTriggerSpec)(nil),                           // 49: rill.runtime.v1.PullTriggerSpec
	(*PullTriggerState)(nil),                          // 50: rill.runtime.v1.PullTriggerState
	(*RefreshTrigger)(nil),                            // 51: rill.runtime.v1.RefreshTrigger
	(*RefreshTriggerSpec)(nil),                        // 52: rill.runtime.v1.RefreshTriggerSpec
	(*RefreshTriggerState)(nil),                       // 53: rill.runtime.v1.RefreshTriggerState
	(*RefreshModelTrigger)(nil),                       // 54: rill.runtime.v1.RefreshModelTrigger
	(*BucketPlanner)(nil),                             // 55: rill.runtime.v1.BucketPlanner
	(*BucketPlannerSpec)(nil),                         // 56: rill.runtime.v1.BucketPlannerSpec
	(*BucketPlannerState)(nil),                        // 57: rill.runtime.v1.BucketPlannerState
	(*BucketExtractPolicy)(nil),                       // 58: rill.runtime.v1.BucketExtractPolicy
	(*Theme)(nil),                                     // 59: rill.runtime.v1.Theme
	(*ThemeSpec)(nil),                                 // 60: rill.runtime.v1.ThemeSpec
	(*ThemeState)(nil),                                // 61: rill.runtime.v1.ThemeState
	(*Component)(nil),                                 // 62: rill.runtime.v1.Component
	(*ComponentSpec)(nil),                             // 63: rill.runtime.v1.ComponentSpec
	(*ComponentState)(nil),                            // 64: rill.runtime.v1.ComponentState
	(*ComponentVariable)(nil),                         // 65: rill.runtime.v1.ComponentVariable
	(*Canvas)(nil),                                    // 66: rill.runtime.v1.Canvas
	(*CanvasSpec)(nil),                                // 67: rill.runtime.v1.CanvasSpec
	(*CanvasState)(nil),                               // 68: rill.runtime.v1.CanvasState
	(*CanvasRow)(nil),                                 // 69: rill.runtime.v1.CanvasRow
	(*CanvasItem)(nil),                                // 70: rill.runtime.v1.CanvasItem
	(*CanvasPreset)(nil),                              // 71: rill.runtime.v1.CanvasPreset
	(*API)(nil),                                       // 72: rill.runtime.v1.API
	(*APISpec)(nil),                                   // 73: rill.runtime.v1.APISpec
	(*APIState)(nil),                                  // 74: rill.runtime.v1.APIState
	(*Schedule)(nil),                                  // 75: rill.runtime.v1.Schedule
	(*ParseError)(nil),                                // 76: rill.runtime.v1.ParseError
	(*ValidationError)(nil),                           // 77: rill.runtime.v1.ValidationError
	(*DependencyError)(nil),                           // 78: rill.runtime.v1.DependencyError
	(*ExecutionError)(nil),                            // 79: rill.runtime.v1.ExecutionError
	(*CharLocation)(nil),                              // 80: rill.runtime.v1.CharLocation
	(*ConnectorV2)(nil),                               // 81: rill.runtime.v1.ConnectorV2
	(*ConnectorSpec)(nil),                             // 82: rill.runtime.v1.ConnectorSpec
	(*ConnectorState)(nil),                            // 83: rill.runtime.v1.ConnectorState
	(*MetricsViewSpec_DimensionV2)(nil),               // 84: rill.runtime.v1.MetricsViewSpec.DimensionV2
	(*MetricsViewSpec_DimensionSelector)(nil),         // 85: rill.runtime.v1.MetricsViewSpec.DimensionSelector
	(*MetricsViewSpec_MeasureWindow)(nil),             // 86: rill.runtime.v1.MetricsViewSpec.MeasureWindow
	(*MetricsViewSpec_MeasureV2)(nil),                 // 87: rill.runtime.v1.MetricsViewSpec.MeasureV2
	(*MetricsViewSpec_AvailableComparisonOffset)(nil), // 88: rill.runtime.v1.MetricsViewSpec.AvailableComparisonOffset
	(*MetricsViewSpec_AvailableTimeRange)(nil),        // 89: rill.runtime.v1.MetricsViewSpec.AvailableTimeRange
	nil,                           // 90: rill.runtime.v1.ReportSpec.AnnotationsEntry
	nil,                           // 91: rill.runtime.v1.AlertSpec.AnnotationsEntry
	nil,                           // 92: rill.runtime.v1.ConnectorSpec.PropertiesEntry
	nil,                           // 93: rill.runtime.v1.ConnectorSpec.PropertiesFromVariablesEntry
	(*timestamppb.Timestamp)(nil), // 94: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 95: google.protobuf.Struct
	(*StructType)(nil),            // 96: rill.runtime.v1.StructType
	(TimeGrain)(0),                // 97: rill.runtime.v1.TimeGrain
	(*Expression)(nil),            // 98: rill.runtime.v1.Expression
	(ExportFormat)(0),             // 99: rill.runtime.v1.ExportFormat
	(*Color)(nil),                 // 100: rill.runtime.v1.Color
	(*structpb.Value)(nil),        // 101: google.protobuf.Value
}
var file_rill_runtime_v1_resources_proto_depIdxs = []int32{
	9,   // 0: rill.runtime.v1.Resource.meta:type_name -> rill.runtime.v1.ResourceMeta
	11,  // 1: rill.runtime.v1.Resource.project_parser:type_name -> rill.runtime.v1.ProjectParser
	14,  // 2: rill.runtime.v1.Resource.source:type_name -> rill.runtime.v1.SourceV2
	17,  // 3: rill.runtime.v1.Resource.model:type_name -> rill.runtime.v1.ModelV2
	20,  // 4: rill.runtime.v1.Resource.metrics_view:type_name -> rill.runtime.v1.MetricsViewV2
	27,  // 5: rill.runtime.v1.Resource.explore:type_name -> rill.runtime.v1.Explore
	35,  // 6: rill.runtime.v1.Resource.migration:type_name -> rill.runtime.v1.Migration
	38,  // 7: rill.runtime.v1.Resource.report:type_name -> rill.runtime.v1.Report
	42,  // 8: rill.runtime.v1.Resource.alert:type_name -> rill.runtime.v1.Alert
	48,  // 9: rill.runtime.v1.Resource.pull_trigger:type_name -> rill.runtime.v1.PullTrigger
	51,  // 10: rill.runtime.v1.Resource.refresh_trigger:type_name -> rill.runtime.v1.RefreshTrigger
	55,  // 11: rill.runtime.v1.Resource.bucket_planner:type_name -> rill.runtime.v1.BucketPlanner
	59,  // 12: rill.runtime.v1.Resource.theme:type_name -> rill.runtime.v1.Theme
	62,  // 13: rill.runtime.v1.Resource.component:type_name -> rill.runtime.v1.Component
	66,  // 14: rill.runtime.v1.Resource.canvas:type_name -> rill.runtime.v1.Canvas
	72,  // 15: rill.runtime.v1.Resource.api:type_name -> rill.runtime.v1.API
	81,  // 16: rill.runtime.v1.Resource.connector:type_name -> rill.runtime.v1.ConnectorV2
	10,  // 17: rill.runtime.v1.ResourceMeta.name:type_name -> rill.runtime.v1.ResourceName
	10,  // 18: rill.runtime.v1.ResourceMeta.refs:type_name -> rill.runtime.v1.ResourceName
	10,  // 19: rill.runtime.v1.ResourceMeta.owner:type_name -> rill.runtime.v1.ResourceName
	94,  // 20: rill.runtime.v1.ResourceMeta.created_on:type_name -> google.protobuf.Timestamp
	94,  // 21: rill.runtime.v1.ResourceMeta.spec_updated_on:type_name -> google.protobuf.Timestamp
	94,  // 22: rill.runtime.v1.ResourceMeta.state_updated_on:type_name -> google.protobuf.Timestamp
	94,  // 23: rill.runtime.v1.ResourceMeta.deleted_on:type_name -> google.protobuf.Timestamp
	0,   // 24: rill.runtime.v1.ResourceMeta.reconcile_status:type_name -> rill.runtime.v1.ReconcileStatus
	94,  // 25: rill.runtime.v1.ResourceMeta.reconcile_on:type_name -> google.protobuf.Timestamp
	10,  // 26: rill.runtime.v1.ResourceMeta.renamed_from:type_name -> rill.runtime.v1.ResourceName
	12,  // 27: rill.runtime.v1.ProjectParser.spec:type_name -> rill.runtime.v1.ProjectParserSpec
	13,  // 28: rill.runtime.v1.ProjectParser.state:type_name -> rill.runtime.v1.ProjectParserState
	76,  // 29: rill.runtime.v1.ProjectParserState.parse_errors:type_name -> rill.runtime.v1.ParseError
	94,  // 30: rill.runtime.v1.ProjectParserState.current_commit_on:type_name -> google.protobuf.Timestamp
	15,  // 31: rill.runtime.v1.SourceV2.spec:type_name -> rill.runtime.v1.SourceSpec
	16,  // 32: rill.runtime.v1.SourceV2.state:type_name -> rill.runtime.v1.SourceState
	95,  // 33: rill.runtime.v1.SourceSpec.properties:type_name -> google.protobuf.Struct
	75,  // 34: rill.runtime.v1.SourceSpec.refresh_schedule:type_name -> rill.runtime.v1.Schedule
	94,  // 35: rill.runtime.v1.SourceState.refreshed_on:type_name -> google.protobuf.Timestamp
	18,  // 36: rill.runtime.v1.ModelV2.spec:type_name -> rill.runtime.v1.ModelSpec
	19,  // 37: rill.runtime.v1.ModelV2.state:type_name -> rill.runtime.v1.ModelState
	75,  // 38: rill.runtime.v1.ModelSpec.refresh_schedule:type_name -> rill.runtime.v1.Schedule
	95,  // 39: rill.runtime.v1.ModelSpec.incremental_state_resolver_properties:type_name -> google.protobuf.Struct
	95,  // 40: rill.runtime.v1.ModelSpec.partitions_resolver_properties:type_name -> google.protobuf.Struct
	95,  // 41: rill.runtime.v1.ModelSpec.input_properties:type_name -> google.protobuf.Struct
	95,  // 42: rill.runtime.v1.ModelSpec.stage_properties:type_name -> google.protobuf.Struct
	95,  // 43: rill.runtime.v1.ModelSpec.output_properties:type_name -> google.protobuf.Struct
	95,  // 44: rill.runtime.v1.ModelState.result_properties:type_name -> google.protobuf.Struct
	94,  // 45: rill.runtime.v1.ModelState.refreshed_on:type_name -> google.protobuf.Timestamp
	95,  // 46: rill.runtime.v1.ModelState.incremental_state:type_name -> google.protobuf.Struct
	96,  // 47: rill.runtime.v1.ModelState.incremental_state_schema:type_name -> rill.runtime.v1.StructType
	21,  // 48: rill.runtime.v1.MetricsViewV2.spec:type_name -> rill.runtime.v1.MetricsViewSpec
	26,  // 49: rill.runtime.v1.MetricsViewV2.state:type_name -> rill.runtime.v1.MetricsViewState
	97,  // 50: rill.runtime.v1.MetricsViewSpec.smallest_time_grain:type_name -> rill.runtime.v1.TimeGrain
	84,  // 51: rill.runtime.v1.MetricsViewSpec.dimensions:type_name -> rill.runtime.v1.MetricsViewSpec.DimensionV2
	87,  // 52: rill.runtime.v1.MetricsViewSpec.measures:type_name -> rill.runtime.v1.MetricsViewSpec.MeasureV2
	22,  // 53: rill.runtime.v1.MetricsViewSpec.security_rules:type_name -> rill.runtime.v1.SecurityRule
	6,   // 54: rill.runtime.v1.MetricsViewSpec.default_comparison_mode:type_name -> rill.runtime.v1.MetricsViewSpec.ComparisonMode
	89,  // 55: rill.runtime.v1.MetricsViewSpec.available_time_ranges:type_name -> rill.runtime.v1.MetricsViewSpec.AvailableTimeRange
	23,  // 56: rill.runtime.v1.SecurityRule.access:type_name -> rill.runtime.v1.SecurityRuleAccess
	24,  // 57: rill.runtime.v1.SecurityRule.field_access:type_name -> rill.runtime.v1.SecurityRuleFieldAccess
	25,  // 58: rill.runtime.v1.SecurityRule.row_filter:type_name -> rill.runtime.v1.SecurityRuleRowFilter
	98,  // 59: rill.runtime.v1.SecurityRuleRowFilter.expression:type_name -> rill.runtime.v1.Expression
	21,  // 60: rill.runtime.v1.MetricsViewState.valid_spec:type_name -> rill.runtime.v1.MetricsViewSpec
	94,  // 61: rill.runtime.v1.MetricsViewState.model_refreshed_on:type_name -> google.protobuf.Timestamp
	28,  // 62: rill.runtime.v1.Explore.spec:type_name -> rill.runtime.v1.ExploreSpec
	29,  // 63: rill.runtime.v1.Explore.state:type_name -> rill.runtime.v1.ExploreState
	33,  // 64: rill.runtime.v1.ExploreSpec.dimensions_selector:type_name -> rill.runtime.v1.FieldSelector
	33,  // 65: rill.runtime.v1.ExploreSpec.measures_selector:type_name -> rill.runtime.v1.FieldSelector
	60,  // 66: rill.runtime.v1.ExploreSpec.embedded_theme:type_name -> rill.runtime.v1.ThemeSpec
	30,  // 67: rill.runtime.v1.ExploreSpec.time_ranges:type_name -> rill.runtime.v1.ExploreTimeRange
	32,  // 68: rill.runtime.v1.ExploreSpec.default_preset:type_name -> rill.runtime.v1.ExplorePreset
	22,  // 69: rill.runtime.v1.ExploreSpec.security_rules:type_name -> rill.runtime.v1.SecurityRule
	28,  // 70: rill.runtime.v1.ExploreState.valid_spec:type_name -> rill.runtime.v1.ExploreSpec
	31,  // 71: rill.runtime.v1.ExploreTimeRange.comparison_time_ranges:type_name -> rill.runtime.v1.ExploreComparisonTimeRange
	33,  // 72: rill.runtime.v1.ExplorePreset.dimensions_selector:type_name -> rill.runtime.v1.FieldSelector
	33,  // 73: rill.runtime.v1.ExplorePreset.measures_selector:type_name -> rill.runtime.v1.FieldSelector
	98,  // 74: rill.runtime.v1.ExplorePreset.where:type_name -> rill.runtime.v1.Expression
	1,   // 75: rill.runtime.v1.ExplorePreset.comparison_mode:type_name -> rill.runtime.v1.ExploreComparisonMode
	2,   // 76: rill.runtime.v1.ExplorePreset.view:type_name -> rill.runtime.v1.ExploreWebView
	3,   // 77: rill.runtime.v1.ExplorePreset.explore_sort_type:type_name -> rill.runtime.v1.ExploreSortType
	34,  // 78: rill.runtime.v1.FieldSelector.fields:type_name -> rill.runtime.v1.StringListValue
	36,  // 79: rill.runtime.v1.Migration.spec:type_name -> rill.runtime.v1.MigrationSpec
	37,  // 80: rill.runtime.v1.Migration.state:type_name -> rill.runtime.v1.MigrationState
	39,  // 81: rill.runtime.v1.Report.spec:type_name -> rill.runtime.v1.ReportSpec
	40,  // 82: rill.runtime.v1.Report.state:type_name -> rill.runtime.v1.ReportState
	75,  // 83: rill.runtime.v1.ReportSpec.refresh_schedule:type_name -> rill.runtime.v1.Schedule
	99,  // 84: rill.runtime.v1.ReportSpec.export_format:type_name -> rill.runtime.v1.ExportFormat
	44,  // 85: rill.runtime.v1.ReportSpec.notifiers:type_name -> rill.runtime.v1.Notifier
	90,  // 86: rill.runtime.v1.ReportSpec.annotations:type_name -> rill.runtime.v1.ReportSpec.AnnotationsEntry
	94,  // 87: rill.runtime.v1.ReportState.next_run_on:type_name -> google.protobuf.Timestamp
	41,  // 88: rill.runtime.v1.ReportState.current_execution:type_name -> rill.runtime.v1.ReportExecution
	41,  // 89: rill.runtime.v1.ReportState.execution_history:type_name -> rill.runtime.v1.ReportExecution
	94,  // 90: rill.runtime.v1.ReportExecution.report_time:type_name -> google.protobuf.Timestamp
	94,  // 91: rill.runtime.v1.ReportExecution.started_on:type_name -> google.protobuf.Timestamp
	94,  // 92: rill.runtime.v1.ReportExecution.finished_on:type_name -> google.protobuf.Timestamp
	43,  // 93: rill.runtime.v1.Alert.spec:type_name -> rill.runtime.v1.AlertSpec
	45,  // 94: rill.runtime.v1.Alert.state:type_name -> rill.runtime.v1.AlertState
	75,  // 95: rill.runtime.v1.AlertSpec.refresh_schedule:type_name -> rill.runtime.v1.Schedule
	95,  // 96: rill.runtime.v1.AlertSpec.resolver_properties:type_name -> google.protobuf.Struct
	95,  // 97: rill.runtime.v1.AlertSpec.query_for_attributes:type_name -> google.protobuf.Struct
	44,  // 98: rill.runtime.v1.AlertSpec.notifiers:type_name -> rill.runtime.v1.Notifier
	91,  // 99: rill.runtime.v1.AlertSpec.annotations:type_name -> rill.runtime.v1.AlertSpec.AnnotationsEntry
	95,  // 100: rill.runtime.v1.Notifier.properties:type_name -> google.protobuf.Struct
	94,  // 101: rill.runtime.v1.AlertState.next_run_on:type_name -> google.protobuf.Timestamp
	46,  // 102: rill.runtime.v1.AlertState.current_execution:type_name -> rill.runtime.v1.AlertExecution
	46,  // 103: rill.runtime.v1.AlertState.execution_history:type_name -> rill.runtime.v1.AlertExecution
	47,  // 104: rill.runtime.v1.AlertExecution.result:type_name -> rill.runtime.v1.AssertionResult
	94,  // 105: rill.runtime.v1.AlertExecution.execution_time:type_name -> google.protobuf.Timestamp
	94,  // 106: rill.runtime.v1.AlertExecution.started_on:type_name -> google.protobuf.Timestamp
	94,  // 107: rill.runtime.v1.AlertExecution.finished_on:type_name -> google.protobuf.Timestamp
	94,  // 108: rill.runtime.v1.AlertExecution.suppressed_since:type_name -> google.protobuf.Timestamp
	4,   // 109: rill.runtime.v1.AssertionResult.status:type_name -> rill.runtime.v1.AssertionStatus
	95,  // 110: rill.runtime.v1.AssertionResult.fail_row:type_name -> google.protobuf.Struct
	49,  // 111: rill.runtime.v1.PullTrigger.spec:type_name -> rill.runtime.v1.PullTriggerSpec
	50,  // 112: rill.runtime.v1.PullTrigger.state:type_name -> rill.runtime.v1.PullTriggerState
	52,  // 113: rill.runtime.v1.RefreshTrigger.spec:type_name -> rill.runtime.v1.RefreshTriggerSpec
	53,  // 114: rill.runtime.v1.RefreshTrigger.state:type_name -> rill.runtime.v1.RefreshTriggerState
	10,  // 115: rill.runtime.v1.RefreshTriggerSpec.resources:type_name -> rill.runtime.v1.ResourceName
	54,  // 116: rill.runtime.v1.RefreshTriggerSpec.models:type_name -> rill.runtime.v1.RefreshModelTrigger
	56,  // 117: rill.runtime.v1.BucketPlanner.spec:type_name -> rill.runtime.v1.BucketPlannerSpec
	57,  // 118: rill.runtime.v1.BucketPlanner.state:type_name -> rill.runtime.v1.BucketPlannerState
	58,  // 119: rill.runtime.v1.BucketPlannerSpec.extract_policy:type_name -> rill.runtime.v1.BucketExtractPolicy
	7,   // 120: rill.runtime.v1.BucketExtractPolicy.rows_strategy:type_name -> rill.runtime.v1.BucketExtractPolicy.Strategy
	7,   // 121: rill.runtime.v1.BucketExtractPolicy.files_strategy:type_name -> rill.runtime.v1.BucketExtractPolicy.Strategy
	60,  // 122: rill.runtime.v1.Theme.spec:type_name -> rill.runtime.v1.ThemeSpec
	61,  // 123: rill.runtime.v1.Theme.state:type_name -> rill.runtime.v1.ThemeState
	100, // 124: rill.runtime.v1.ThemeSpec.primary_color:type_name -> rill.runtime.v1.Color
	100, // 125: rill.runtime.v1.ThemeSpec.secondary_color:type_name -> rill.runtime.v1.Color
	63,  // 126: rill.runtime.v1.Component.spec:type_name -> rill.runtime.v1.ComponentSpec
	64,  // 127: rill.runtime.v1.Component.state:type_name -> rill.runtime.v1.ComponentState
	95,  // 128: rill.runtime.v1.ComponentSpec.renderer_properties:type_name -> google.protobuf.Struct
	65,  // 129: rill.runtime.v1.ComponentSpec.input:type_name -> rill.runtime.v1.ComponentVariable
	65,  // 130: rill.runtime.v1.ComponentSpec.output:type_name -> rill.runtime.v1.ComponentVariable
	63,  // 131: rill.runtime.v1.ComponentState.valid_spec:type_name -> rill.runtime.v1.ComponentSpec
	101, // 132: rill.runtime.v1.ComponentVariable.default_value:type_name -> google.protobuf.Value
	67,  // 133: rill.runtime.v1.Canvas.spec:type_name -> rill.runtime.v1.CanvasSpec
	68,  // 134: rill.runtime.v1.Canvas.state:type_name -> rill.runtime.v1.CanvasState
	60,  // 135: rill.runtime.v1.CanvasSpec.embedded_theme:type_name -> rill.runtime.v1.ThemeSpec
	30,  // 136: rill.runtime.v1.CanvasSpec.time_ranges:type_name -> rill.runtime.v1.ExploreTimeRange
	71,  // 137: rill.runtime.v1.CanvasSpec.default_preset:type_name -> rill.runtime.v1.CanvasPreset
	65,  // 138: rill.runtime.v1.CanvasSpec.variables:type_name -> rill.runtime.v1.ComponentVariable
	69,  // 139: rill.runtime.v1.CanvasSpec.rows:type_name -> rill.runtime.v1.CanvasRow
	22,  // 140: rill.runtime.v1.CanvasSpec.security_rules:type_name -> rill.runtime.v1.SecurityRule
	67,  // 141: rill.runtime.v1.CanvasState.valid_spec:type_name -> rill.runtime.v1.CanvasSpec
	70,  // 142: rill.runtime.v1.CanvasRow.items:type_name -> rill.runtime.v1.CanvasItem
	1,   // 143: rill.runtime.v1.CanvasPreset.comparison_mode:type_name -> rill.runtime.v1.ExploreComparisonMode
	73,  // 144: rill.runtime.v1.API.spec:type_name -> rill.runtime.v1.APISpec
	74,  // 145: rill.runtime.v1.API.state:type_name -> rill.runtime.v1.APIState
	95,  // 146: rill.runtime.v1.APISpec.resolver_properties:type_name -> google.protobuf.Struct
	95,  // 147: rill.runtime.v1.APISpec.openapi_parameters:type_name -> google.protobuf.Struct
	95,  // 148: rill.runtime.v1.APISpec.openapi_response_schema:type_name -> google.protobuf.Struct
	22,  // 149: rill.runtime.v1.APISpec.security_rules:type_name -> rill.runtime.v1.SecurityRule
	80,  // 150: rill.runtime.v1.ParseError.start_location:type_name -> rill.runtime.v1.CharLocation
	82,  // 151: rill.runtime.v1.ConnectorV2.spec:type_name -> rill.runtime.v1.ConnectorSpec
	83,  // 152: rill.runtime.v1.ConnectorV2.state:type_name -> rill.runtime.v1.ConnectorState
	92,  // 153: rill.runtime.v1.ConnectorSpec.properties:type_name -> rill.runtime.v1.ConnectorSpec.PropertiesEntry
	95,  // 154: rill.runtime.v1.ConnectorSpec.provision_args:type_name -> google.protobuf.Struct
	93,  // 155: rill.runtime.v1.ConnectorSpec.properties_from_variables:type_name -> rill.runtime.v1.ConnectorSpec.PropertiesFromVariablesEntry
	97,  // 156: rill.runtime.v1.MetricsViewSpec.DimensionSelector.time_grain:type_name -> rill.runtime.v1.TimeGrain
	85,  // 157: rill.runtime.v1.MetricsViewSpec.MeasureWindow.order_by:type_name -> rill.runtime.v1.MetricsViewSpec.DimensionSelector
	5,   // 158: rill.runtime.v1.MetricsViewSpec.MeasureV2.type:type_name -> rill.runtime.v1.MetricsViewSpec.MeasureType
	86,  // 159: rill.runtime.v1.MetricsViewSpec.MeasureV2.window:type_name -> rill.runtime.v1.MetricsViewSpec.MeasureWindow
	85,  // 160: rill.runtime.v1.MetricsViewSpec.MeasureV2.per_dimensions:type_name -> rill.runtime.v1.MetricsViewSpec.DimensionSelector
	85,  // 161: rill.runtime.v1.MetricsViewSpec.MeasureV2.required_dimensions:type_name -> rill.runtime.v1.MetricsViewSpec.DimensionSelector
	95,  // 162: rill.runtime.v1.MetricsViewSpec.MeasureV2.format_d3_locale:type_name -> google.protobuf.Struct
	88,  // 163: rill.runtime.v1.MetricsViewSpec.AvailableTimeRange.comparison_offsets:type_name -> rill.runtime.v1.MetricsViewSpec.AvailableComparisonOffset
	164, // [164:164] is the sub-list for method output_type
	164, // [164:164] is the sub-list for method input_type
	164, // [164:164] is the sub-list for extension type_name
	164, // [164:164] is the sub-list for extension extendee
	0,   // [0:164] is the sub-list for field type_name
}

func init() { file_rill_runtime_v1_resources_proto_init() }
func file_rill_runtime_v1_resources_proto_init() {
	if File_rill_runtime_v1_resources_proto != nil {
		return
	}
	file_rill_runtime_v1_colors_proto_init()
	file_rill_runtime_v1_export_format_proto_init()
	file_rill_runtime_v1_expression_proto_init()
	file_rill_runtime_v1_schema_proto_init()
	file_rill_runtime_v1_time_grain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rill_runtime_v1_resources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectParserSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectParserState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SourceV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ModelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ModelSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ModelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityRuleAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityRuleFieldAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityRuleRowFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Explore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ExploreSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ExploreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ExploreTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ExploreComparisonTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ExplorePreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*FieldSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*StringListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Migration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MigrationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*MigrationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ReportSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ReportState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ReportExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AlertSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Notifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*AlertState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*AlertExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AssertionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PullTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*PullTriggerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*PullTriggerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTriggerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTriggerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshModelTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*BucketPlanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*BucketPlannerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*BucketPlannerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*BucketExtractPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*Theme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*ThemeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ThemeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ComponentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ComponentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*ComponentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*Canvas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CanvasSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CanvasState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CanvasRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CanvasItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CanvasPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*API); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*APISpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*APIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*ParseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*DependencyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*CharLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectorV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectorSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_DimensionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_DimensionSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_MeasureWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_MeasureV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_AvailableComparisonOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rill_runtime_v1_resources_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsViewSpec_AvailableTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rill_runtime_v1_resources_proto_msgTypes[0].OneofWrappers = []any{
		(*Resource_ProjectParser)(nil),
		(*Resource_Source)(nil),
		(*Resource_Model)(nil),
		(*Resource_MetricsView)(nil),
		(*Resource_Explore)(nil),
		(*Resource_Migration)(nil),
		(*Resource_Report)(nil),
		(*Resource_Alert)(nil),
		(*Resource_PullTrigger)(nil),
		(*Resource_RefreshTrigger)(nil),
		(*Resource_BucketPlanner)(nil),
		(*Resource_Theme)(nil),
		(*Resource_Component)(nil),
		(*Resource_Canvas)(nil),
		(*Resource_Api)(nil),
		(*Resource_Connector)(nil),
	}
	file_rill_runtime_v1_resources_proto_msgTypes[1].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[13].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[14].OneofWrappers = []any{
		(*SecurityRule_Access)(nil),
		(*SecurityRule_FieldAccess)(nil),
		(*SecurityRule_RowFilter)(nil),
	}
	file_rill_runtime_v1_resources_proto_msgTypes[24].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[25].OneofWrappers = []any{
		(*FieldSelector_All)(nil),
		(*FieldSelector_Fields)(nil),
		(*FieldSelector_Regex)(nil),
		(*FieldSelector_DuckdbExpression)(nil),
	}
	file_rill_runtime_v1_resources_proto_msgTypes[35].OneofWrappers = []any{
		(*AlertSpec_QueryForUserId)(nil),
		(*AlertSpec_QueryForUserEmail)(nil),
		(*AlertSpec_QueryForAttributes)(nil),
	}
	file_rill_runtime_v1_resources_proto_msgTypes[52].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[61].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[62].OneofWrappers = []any{}
	file_rill_runtime_v1_resources_proto_msgTypes[63].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rill_runtime_v1_resources_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rill_runtime_v1_resources_proto_goTypes,
		DependencyIndexes: file_rill_runtime_v1_resources_proto_depIdxs,
		EnumInfos:         file_rill_runtime_v1_resources_proto_enumTypes,
		MessageInfos:      file_rill_runtime_v1_resources_proto_msgTypes,
	}.Build()
	File_rill_runtime_v1_resources_proto = out.File
	file_rill_runtime_v1_resources_proto_rawDesc = nil
	file_rill_runtime_v1_resources_proto_goTypes = nil
	file_rill_runtime_v1_resources_proto_depIdxs = nil
}
