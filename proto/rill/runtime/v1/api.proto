syntax = "proto3";
package rill.runtime.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "rill/runtime/v1/schema.proto";
import "rill/runtime/v1/resources.proto";
import "validate/validate.proto";

// RuntimeService is a data infrastructure proxy and orchestrator based on Rill SQL.
// It has a concept of instances, which are fully isolated data projects, enabling optional multi-tenancy.
service RuntimeService {
  // Ping returns information about the runtime
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {get: "/v1/ping"};
  }

  // Health runs a health check on the runtime.
  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {get: "/v1/health"};
  }

  // InstanceHealth runs a health check on a specific instance.
  rpc InstanceHealth(InstanceHealthRequest) returns (InstanceHealthResponse) {
    option (google.api.http) = {get: "/v1/health/instances/{instance_id}"};
  }

  // Instances

  // ListInstances lists all the instances currently managed by the runtime
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = {get: "/v1/instances"};
  }

  // GetInstance returns information about a specific instance
  rpc GetInstance(GetInstanceRequest) returns (GetInstanceResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}"};
  }

  // CreateInstance creates a new instance
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/instances",
      body: "*"
    };
  }

  // EditInstance edits an existing instance
  rpc EditInstance(EditInstanceRequest) returns (EditInstanceResponse) {
    option (google.api.http) = {
      patch: "/v1/instances/{instance_id}",
      body: "*"
    };
  }

  // DeleteInstance deletes an instance
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}",
      body: "*"
    };
  }

  // Repos

  // ListFiles lists all the files matching a glob in a repo.
  // The files are sorted by their full path.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files"};
  }

  // WatchFiles streams repo file update events. It is not supported on all backends.
  rpc WatchFiles(WatchFilesRequest) returns (stream WatchFilesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files/watch"};
  }

  // GetFile returns the contents of a specific file in a repo.
  rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files/entry"};
  }

  // PutFile creates or updates a file in a repo
  rpc PutFile(PutFileRequest) returns (PutFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/entry",
      body: "*"
    };
  }

  // CreateDirectory create a directory for the given path
  rpc CreateDirectory(CreateDirectoryRequest) returns (CreateDirectoryResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/dir",
      body: "*"
    };
  }

  // DeleteFile deletes a file from a repo
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
    option (google.api.http) = {delete: "/v1/instances/{instance_id}/files/entry"};
  }

  // RenameFile renames a file in a repo
  rpc RenameFile(RenameFileRequest) returns (RenameFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/rename",
      body: "*"
    };
  }

  // ListExamples lists all the examples embedded into binary
  rpc ListExamples(ListExamplesRequest) returns (ListExamplesResponse) {
    option (google.api.http) = {get: "/v1/examples"};
  }

  // UnpackExample unpacks an example project
  rpc UnpackExample(UnpackExampleRequest) returns (UnpackExampleResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/unpack-example",
      body: "*"
    };
  }

  // UnpackEmpty unpacks an empty project
  rpc UnpackEmpty(UnpackEmptyRequest) returns (UnpackEmptyResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/unpack-empty",
      body: "*"
    };
  }

  // GenerateMetricsViewFile generates a metrics view YAML file from a table in an OLAP database
  rpc GenerateMetricsViewFile(GenerateMetricsViewFileRequest) returns (GenerateMetricsViewFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/generate-metrics-view",
      body: "*"
    };
  }

  // GenerateResolver generates resolver and resolver properties from a table or a metrics view
  rpc GenerateResolver(GenerateResolverRequest) returns (GenerateResolverResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/generate/resolver",
      body: "*"
    };
  }

  // GenerateRenderer generates a component renderer and renderer properties from a resolver and resolver properties
  rpc GenerateRenderer(GenerateRendererRequest) returns (GenerateRendererResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/generate/renderer",
      body: "*"
    };
  }

  // QueryResolver queries a resolver with the given properties and arguments
  rpc QueryResolver(QueryResolverRequest) returns (QueryResolverResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/query/resolver",
      body: "*"
    };
  }

  // Controller
  
  // GetLogs returns recent logs from a controller
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/logs"};
  }

  // WatchLogs streams new logs emitted from a controller
  rpc WatchLogs(WatchLogsRequest) returns (stream WatchLogsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/logs/watch"};
  }

  // ListResources lists the resources stored in the catalog
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resources"};
  }
  
  // WatchResources streams updates to catalog resources (including creation and deletion events)
  rpc WatchResources(WatchResourcesRequest) returns (stream WatchResourcesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resources/-/watch"};
  }
  
  // GetResource looks up a specific catalog resource
  rpc GetResource(GetResourceRequest) returns (GetResourceResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resource"};
  }

  // GetExplore is a convenience RPC that combines looking up an Explore resource and its underlying MetricsView into one network call.
  rpc GetExplore(GetExploreRequest) returns (GetExploreResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resources/explore"};
  }

  // GetModelPartitions returns the partitions of a model
  rpc GetModelPartitions(GetModelPartitionsRequest) returns (GetModelPartitionsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/models/{model}/partitions"};
  }
  
  // CreateTrigger submits a refresh trigger, which will asynchronously refresh the specified resources.
  // Triggers are ephemeral resources that will be cleaned up by the controller.
  rpc CreateTrigger(CreateTriggerRequest) returns (CreateTriggerResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/trigger",
      body: "*"
    };
  }

  // Connectors

  // ListConnectorDrivers returns a description of all the connector drivers registed in the runtime,
  // including their configuration specs and the capabilities they support.
  rpc ListConnectorDrivers(ListConnectorDriversRequest) returns (ListConnectorDriversResponse) {
    option (google.api.http) = {get: "/v1/connectors/meta"};
  }

  // AnalyzeConnectors scans all the project files and returns information about all referenced connectors.
  rpc AnalyzeConnectors(AnalyzeConnectorsRequest) returns (AnalyzeConnectorsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/connectors/analyze"};
  }

  // ListNotifierConnectors returns the names of all configured connectors that can be used as notifiers.
  // This API is much faster than AnalyzeConnectors and can be called without admin-level permissions.
  rpc ListNotifierConnectors(ListNotifierConnectorsRequest) returns (ListNotifierConnectorsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/connectors/notifiers"};
  }

  // Access management

  // IssueDevJWT issues a JWT for mimicking a user in local development.
  rpc IssueDevJWT(IssueDevJWTRequest) returns (IssueDevJWTResponse) {
    option (google.api.http) = {
      post: "/v1/dev-jwt",
      body: "*"
    };
  }

  // Variables

  // AnalyzeVariables scans `Source`, `Model` and `Connector` resources in the catalog for use of an environment variable
  rpc AnalyzeVariables(AnalyzeVariablesRequest) returns (AnalyzeVariablesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/variables/analyze"};
  }
}

// Request message for RuntimeService.Ping
message PingRequest {}

// Response message for RuntimeService.Ping
message PingResponse {
  // Runtime version
  string version = 1;

  // Runtime server time
  google.protobuf.Timestamp time = 2;
}

message HealthRequest {}

message HealthResponse {
  string limiter_error = 1;
  string conn_cache_error = 2;
  string metastore_error = 3;
  string network_error = 4;
  map<string, InstanceHealth> instances_health = 5;
}

message InstanceHealthRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
}

message InstanceHealthResponse {
  InstanceHealth instance_health = 1;
}

message InstanceHealth {
  string controller_error = 1;
  string olap_error = 2;
  string repo_error = 3;
  map<string, string> metrics_view_errors = 4;
  int32 parse_error_count = 5;
  int32 reconcile_error_count = 6;
}

// **********
// Instances
// **********

// Instance represents a single data project, meaning one set of code artifacts,
// one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
// metadata (such as reconciliation state). Instances are the unit of isolation within
// the runtime. They enable one runtime deployment to serve not only multiple data
// projects, but also multiple tenants. On local, the runtime will usually have
// just a single instance.
message Instance {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string environment = 20;
  string olap_connector = 2;
  string repo_connector = 4;
  string admin_connector = 19;
  string ai_connector = 21;
  google.protobuf.Timestamp created_on = 11;
  google.protobuf.Timestamp updated_on = 12;
  repeated Connector connectors = 10;
  repeated Connector project_connectors = 13;
  map<string, string> variables = 7;
  map<string, string> project_variables = 8;
  map<string, bool> feature_flags = 22;
  map<string, string> annotations = 14;
  bool embed_catalog = 6;
  bool watch_repo = 15;
}
 
message Connector {
  // Type of the connector. One of the infra driver supported.
  string type = 1;
  // Name of the connector
  string name = 2;
  // Config for the connector
  map<string, string> config = 3;
  // Properties in config that use templating
  repeated string templated_properties = 5;
  // Provision settings if its a managed connector
  bool provision = 6;
  google.protobuf.Struct provision_args = 7;
  // DEPRECATED: config_from_variables stores configs whose value is a variable. This is only set for configs obtained from `connector.yaml`
  map<string, string> config_from_variables = 4;
}

// Request message for RuntimeService.ListInstances
message ListInstancesRequest {
  uint32 page_size = 1; 
  string page_token = 2;
}

// Response message for RuntimeService.ListInstances
message ListInstancesResponse {
  repeated Instance instances = 1;
  string next_page_token = 2;
}

// Request message for RuntimeService.GetInstance
message GetInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  bool sensitive = 2;
}

// Response message for RuntimeService.GetInstance
message GetInstanceResponse {
  Instance instance = 1;
}

// Request message for RuntimeService.CreateInstance.
// See message Instance for field descriptions.
message CreateInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {
    ignore_empty: true,
    pattern: "^[_\\-a-zA-Z0-9]+$"
  }];
  string environment = 16;
  string olap_connector = 2;
  string repo_connector = 4;
  string admin_connector = 15;
  string ai_connector = 17;
  repeated Connector connectors = 10;
  map<string, string> variables = 7;
  map<string, string> annotations = 9;
  bool embed_catalog = 6;
  bool watch_repo = 11;
}

// Response message for RuntimeService.CreateInstance
message CreateInstanceResponse {
  Instance instance = 1;
}

// Request message for RuntimeService.DeleteInstance
message DeleteInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
}

// Response message for RuntimeService.DeleteInstance
message DeleteInstanceResponse {}

// Request message for RuntimeService.EditInstance.
// See message Instance for field descriptions.
message EditInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  optional string environment = 17;
  optional string olap_connector = 2;
  optional string repo_connector = 4;
  optional string admin_connector = 16;
  optional string ai_connector = 18;
  repeated Connector connectors = 9;
  map<string, string> variables = 15;
  map<string, string> annotations = 10;
  optional bool embed_catalog = 6;
  optional bool watch_repo = 11;
}

// Response message for RuntimeService.EditInstance
message EditInstanceResponse {
  Instance instance = 1;
}

// **********
// Repos
// **********

// Request message for RuntimeService.ListFiles
message ListFilesRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string glob = 2;
}

// Response message for RuntimeService.ListFiles
message ListFilesResponse {
  repeated DirEntry files = 1;
}

message DirEntry {
  string path = 1;
  bool is_dir = 2;
}

// FileEvent describes a file change.
enum FileEvent {
  FILE_EVENT_UNSPECIFIED = 0;
  FILE_EVENT_WRITE = 1;
  FILE_EVENT_DELETE = 2;
}

// Request message for RuntimeService.WatchFiles
message WatchFilesRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  bool replay = 2;
}

// Response message for RuntimeService.WatchFiles
message WatchFilesResponse {
  FileEvent event = 1;
  string path = 2;
  bool is_dir = 3;
}

// Request message for RuntimeService.GetFile
message GetFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.GetFile
message GetFileResponse {
  string blob = 1;
  google.protobuf.Timestamp updated_on = 2;
}

// Request message for RuntimeService.PutFile
message PutFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
  string blob = 3;
  // Create indicates whether to create the file if it doesn't already exist
  bool create = 4;
  // Will cause the operation to fail if the file already exists.
  // It should only be set when create = true.
  bool create_only = 5;
}

// Response message for RuntimeService.PutFile
message PutFileResponse {
  string file_path = 1; // TODO: Redundant, should be removed (but frontend currently uses it)
}

// Request message for RuntimeService.CreateDirectory
message CreateDirectoryRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.CreateDirectory
message CreateDirectoryResponse {}

// Request message for RuntimeService.DeleteFile
message DeleteFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
  bool force = 3;
}

// Response message for RuntimeService.DeleteFile
message DeleteFileResponse {}

// Request message for RuntimeService.RenameFile
message RenameFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string from_path = 2 [(validate.rules).string.min_len = 1];
  string to_path = 3 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.RenameFile
message RenameFileResponse {}

// Example contains metadata about an example project that is available for unpacking.
message Example {
  string name = 1;
  string display_name = 2;
  string description = 3;
}

// Request message for RuntimeService.ListExamples
message ListExamplesRequest {}

// Response message for RuntimeService.ListExamples
message ListExamplesResponse {
  repeated Example examples = 1;
}

// Request message for RuntimeService.UnpackExample
message UnpackExampleRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string name = 2 [(validate.rules).string.min_len = 1];
  bool force = 3;
}

// Response message for RuntimeService.UnpackExample
message UnpackExampleResponse {}

// Request message for RuntimeService.UnpackEmpty
message UnpackEmptyRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string display_name = 2;
  bool force = 3;
}

// Response message for RuntimeService.UnpackEmpty
message UnpackEmptyResponse {}

// Request message for RuntimeService.GenerateMetricsViewFile
message GenerateMetricsViewFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Model to base the metrics view on.
  // If you set this, do NOT set connector, database, database_schema or table.
  string model = 8;
  // Connector for the table.
  // See "table" for more details.
  string connector = 2;
  // Database for the table.
  // See "table" for more details.
  string database = 6;
  // Database schema for the table.
  // See "table" for more details.
  string database_schema = 7;
  // Table to base the metrics view on.
  // If you set this, do NOT set model.
  string table = 3;
  // Path to save the metrics view file to.
  string path = 4;
  // If true, the AI will be used to generate the metrics view file.
  // Otherwise, it falls back to a simpler heuristic approach.
  bool use_ai = 5;
}

// Response message for RuntimeService.GenerateMetricsViewFile
message GenerateMetricsViewFileResponse {
  // Indicates if AI-based generation succeeded. If it failed, it falls back to the simpler heuristic approach.
  bool ai_succeeded = 1;
}

message GenerateResolverRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string prompt = 2;
  // Both connector and table must be specified if metrics_view is not.
  string connector = 3;
  string table = 4;
  // table and connector should not be provided if metrics_view is provided.
  string metrics_view = 5;
}

message GenerateResolverResponse {
  string resolver = 1;
  google.protobuf.Struct resolver_properties = 2;
}

message GenerateRendererRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string prompt = 2;
  string resolver = 3;
  google.protobuf.Struct resolver_properties = 4;
}

message GenerateRendererResponse {
  string renderer = 1;
  google.protobuf.Struct renderer_properties = 2;
}

message QueryResolverRequest {
  string instance_id = 1;
  string resolver = 2;
  google.protobuf.Struct resolver_properties = 3;
  google.protobuf.Struct resolver_args = 4;
  int32 limit = 5;
}

message QueryResolverResponse {
  StructType schema = 1;
  repeated google.protobuf.Struct data = 2;
}

// **********
// Controller
// **********

message Log {
  LogLevel level = 1;
  google.protobuf.Timestamp time = 2;
  string message = 3;
  string json_payload = 4;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 4;
  LOG_LEVEL_INFO = 8;
  LOG_LEVEL_WARN = 12;
  LOG_LEVEL_ERROR = 16;
  LOG_LEVEL_FATAL = 20;
}

enum ResourceEvent {
  RESOURCE_EVENT_UNSPECIFIED = 0;
  RESOURCE_EVENT_WRITE = 1;
  RESOURCE_EVENT_DELETE = 2;
}

message ModelPartition {
  string key = 1;
  google.protobuf.Struct data = 2;
  google.protobuf.Timestamp watermark = 3;
  google.protobuf.Timestamp executed_on = 4;
  string error = 5;
  uint32 elapsed_ms = 6;
}

message GetLogsRequest {
  string instance_id = 1;
  bool ascending = 2;
  int32 limit = 3 [(validate.rules).int32 = {gte: -1}];
  LogLevel level = 4;
}

message GetLogsResponse {
  repeated Log logs = 1;
}

message WatchLogsRequest {
  string instance_id = 1;
  bool replay = 2;
  int32 replay_limit = 3 [(validate.rules).int32 = {gte: -1}];
  LogLevel level = 4;
}

message WatchLogsResponse {
  Log log = 1;
}

message ListResourcesRequest {
  // Instance to list resources from.
  string instance_id = 1;
  // Filter by resource kind (optional).
  string kind = 2;
  // Filter by resource path (optional).
  string path = 3;
  // Skip security checks
  bool skip_security_checks = 4;
}

message ListResourcesResponse {
  repeated Resource resources = 1;
}

message WatchResourcesRequest {
  string instance_id = 1;
  string kind = 2;
  bool replay = 3;
  string level = 4;
}

message WatchResourcesResponse {
  ResourceEvent event = 1;
  ResourceName name = 2;
  Resource resource = 3;
}

message GetResourceRequest {
  string instance_id = 1;
  ResourceName name = 2;
  bool skip_security_checks = 3;
}

message GetResourceResponse {
  Resource resource = 1;
}

message GetExploreRequest {
  string instance_id = 1;
  string name = 2;
}

message GetExploreResponse {
  Resource explore = 1;
  Resource metrics_view = 2;
}

message GetModelPartitionsRequest {
  string instance_id = 1;
  string model = 2;
  bool pending = 5;
  bool errored = 6;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 10000}];
  string page_token = 4;
}

message GetModelPartitionsResponse {
  repeated ModelPartition partitions = 1;
  string next_page_token = 2;
}

message CreateTriggerRequest {
  // Instance to target.
  string instance_id = 1;
  // Resources to trigger. See RefreshTriggerSpec for details.
  repeated ResourceName resources = 4;
  // Models to trigger. Unlike resources, this supports advanced configuration of the refresh trigger.
  repeated RefreshModelTrigger models = 5;
  // Parser is a convenience flag to trigger the global project parser.
  // Triggering the project parser ensures a pull of the repository and a full parse of all files.
  bool parser = 6;
  // Convenience flag to trigger all sources and models.
  bool all_sources_models = 7;
  // Convenience flag to trigger all sources and models.
  // Will trigger models with RefreshModelTrigger.full set to true.
  bool all_sources_models_full = 8;
}

message CreateTriggerResponse {}

// **********
// Connectors
// **********

// ConnectorDriver represents a connector driver available in the runtime.
message ConnectorDriver {
  // Property represents the spec of one of the driver's config properties
  message Property {
    // Type of the property
    enum Type {
      TYPE_UNSPECIFIED = 0;
      TYPE_NUMBER = 1;
      TYPE_BOOLEAN = 2;
      TYPE_STRING = 3;
      TYPE_FILE = 4;
      TYPE_INFORMATIONAL = 5;
    }
    // The property key
    string key = 1;
    // The type expected for this property
    Type type = 2;
    // Required is true if the field must be set
    bool required = 3;
    // Pretty name for the property
    string display_name = 4;
    // Human readable description of the field
    string description = 5;
    // Link to documentation for this property
    string docs_url = 6;
    // Additional textual explanation for use in UIs
    string hint = 7;
    // Default value for the property
    string default = 8;
    // Placeholder value for use in UIs
    string placeholder = 9;
    // If true, the property is a secret and should not be displayed in UIs
    bool secret = 10;
    // If true, the property should not be prompted. The expectation is that only advanced users will use it and can set directly in the connector.yaml
    bool no_prompt = 11;
  }
  // Name is the name of the connector
  string name = 1;
  // Properties for configuring the connector
  repeated Property config_properties = 2;
  // Properties that can be provided to the connector when using it as a source
  repeated Property source_properties = 3;
  // Pretty display name for use in UIs
  string display_name = 4;
  // Human readable description of the connector
  string description = 5;
  // Capabilities supported by the connector
  bool implements_registry = 10;
  bool implements_catalog = 11;
  bool implements_repo = 12;
  bool implements_admin = 13;
  bool implements_ai = 14;
  bool implements_sql_store = 15;
  bool implements_olap = 16;
  bool implements_object_store = 17;
  bool implements_file_store = 18;
  bool implements_notifier = 19;
  bool implements_warehouse = 20;
}

// AnalyzedConnector contains information about a connector that is referenced in the project files.
message AnalyzedConnector {
  // Connector name
  string name = 1;
  // Connector driver metadata
  ConnectorDriver driver = 2;
  // Combined config properties for the connector
  map<string, string> config = 3;
  // Config properties preset by the runtime or when the instance was created
  map<string, string> preset_config = 4;
  // Config properties set in project YAML files
  map<string, string> project_config = 5;
  // Config properties set as dynamic variables
  map<string, string> env_config = 6;
  // Provision indicates if its a managed connector
  bool provision = 10;
  // Provision args for the provisioner if provision is true
  google.protobuf.Struct provision_args = 11;
  // True if the connector can be accessed without credentials
  bool has_anonymous_access = 7;
  // List of resources that appear to use the connector
  repeated ResourceName used_by = 8;
  // Error message if the connector is misconfigured
  string error_message = 9;
}

// Request message for RuntimeService.ListConnectorDrivers
message ListConnectorDriversRequest {}

// Response message for RuntimeService.ListConnectorDrivers
message ListConnectorDriversResponse {
  repeated ConnectorDriver connectors = 1;
}

// Request message for RuntimeService.AnalyzeConnectors
message AnalyzeConnectorsRequest {
  string instance_id = 1;
}

// Response message for RuntimeService.AnalyzeConnectors
message AnalyzeConnectorsResponse {
  repeated AnalyzedConnector connectors = 1;
}

// Request message for RuntimeService.ListNotifierConnectors
message ListNotifierConnectorsRequest {
  string instance_id = 1;
}

// Response message for RuntimeService.ListNotifierConnectors
message ListNotifierConnectorsResponse {
  // Note: In this list, the Connector.config property will always be empty.
  repeated Connector connectors = 1;
}

// Request message for RuntimeService.IssueDevJWT
message IssueDevJWTRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string email = 2 [(validate.rules).string.min_len = 1];
  repeated string groups = 3;
  bool admin = 4;
  // Additional arbitrary attributes to include in the JWT.
  // They take precedence if they collide with name, email, groups or admin.
  google.protobuf.Struct attributes = 5;
}

// Response message for RuntimeService.IssueDevJWT
message IssueDevJWTResponse {
  string jwt = 1;
}

// Request message for RuntimeService.AnalyzeVariables
message AnalyzeVariablesRequest {
  string instance_id = 1;
}

// Response message for RuntimeService.AnalyzeVariables
message AnalyzeVariablesResponse {
  repeated AnalyzedVariable variables = 1;
}

message AnalyzedVariable {
  // Name of the variable.
  string name = 1;
  // Default value set for the variable in rill.yaml, if any.
  string default_value = 2;
  // List of resources that appear to use the connector.
  repeated ResourceName used_by = 8;
}
