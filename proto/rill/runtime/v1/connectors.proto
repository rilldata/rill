syntax = "proto3";
package rill.runtime.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "rill/runtime/v1/schema.proto";
import "validate/validate.proto";

service ConnectorService {
  // S3ListBuckets lists buckets accessible with the configured credentials.
  rpc S3ListBuckets(S3ListBucketsRequest) returns (S3ListBucketsResponse) {
    option (google.api.http) = {get: "/v1/s3/buckets"};
  }

  // S3ListBuckets lists objects for the given bucket.
  rpc S3ListObjects(S3ListObjectsRequest) returns (S3ListObjectsResponse) {
    option (google.api.http) = {get: "/v1/s3/bucket/{bucket}/objects"};
  }

  // S3GetBucketMetadata returns metadata for the given bucket.
  rpc S3GetBucketMetadata(S3GetBucketMetadataRequest) returns (S3GetBucketMetadataResponse) {
    option (google.api.http) = {get: "/v1/s3/bucket/{bucket}/metadata"};
  }

  // S3GetCredentialsInfo returns metadata for the given bucket.
  rpc S3GetCredentialsInfo(S3GetCredentialsInfoRequest) returns (S3GetCredentialsInfoResponse) {
    option (google.api.http) = {get: "/v1/s3/credentials_info"};
  }

  // GCSListBuckets lists buckets accessible with the configured credentials.
  rpc GCSListBuckets(GCSListBucketsRequest) returns (GCSListBucketsResponse) {
    option (google.api.http) = {get: "/v1/gcs/buckets"};
  }

  // GCSListObjects lists objects for the given bucket.
  rpc GCSListObjects(GCSListObjectsRequest) returns (GCSListObjectsResponse) {
    option (google.api.http) = {get: "/v1/gcs/bucket/{bucket}/objects"};
  }

  // GCSGetCredentialsInfo returns metadata for the given bucket.
  rpc GCSGetCredentialsInfo(GCSGetCredentialsInfoRequest) returns (GCSGetCredentialsInfoResponse) {
    option (google.api.http) = {get: "/v1/gcs/credentials_info"};
  }

  // OLAPListTables list all tables across all databases on motherduck
  rpc OLAPListTables(OLAPListTablesRequest) returns (OLAPListTablesResponse) {
    option (google.api.http) = {get: "/v1/olap/tables"};
  }

  // OLAPGetTable returns metadata about a table or view in an OLAP
  rpc OLAPGetTable(OLAPGetTableRequest) returns (OLAPGetTableResponse) {
    option (google.api.http) = {get: "/v1/connectors/olap/table"};
  }

  // BigQueryListDatasets list all datasets in a bigquery project
  rpc BigQueryListDatasets(BigQueryListDatasetsRequest) returns (BigQueryListDatasetsResponse) {
    option (google.api.http) = {get: "/v1/bigquery/datasets"};
  }

  // BigQueryListTables list all tables in a bigquery project:dataset
  rpc BigQueryListTables(BigQueryListTablesRequest) returns (BigQueryListTablesResponse) {
    option (google.api.http) = {get: "/v1/bigquery/tables"};
  }
}

message S3Object {
  string name = 1;
  google.protobuf.Timestamp modified_on = 2;
  int64 size = 3;
  bool is_dir = 4;
}

message S3ListBucketsRequest {
  string instance_id = 1;
  string connector = 2;
  uint32 page_size = 3;
  string page_token = 4;
}

message S3ListBucketsResponse {
  string next_page_token = 1;
  repeated string buckets = 2;
}

message S3ListObjectsRequest {
  string instance_id = 1;
  string connector = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 4;
  string bucket = 5 [(validate.rules).string.min_len = 1];
  string region = 6;
  string prefix = 7;
  string start_after = 8;
  string delimiter = 9;
}

message S3ListObjectsResponse {
  string next_page_token = 1;
  repeated S3Object objects = 2;
}

message S3GetBucketMetadataRequest {
  string instance_id = 1;
  string connector = 2;
  string bucket = 3 [(validate.rules).string.min_len = 1];
}

message S3GetBucketMetadataResponse {
  string region = 1;
}

message S3GetCredentialsInfoRequest {
  string instance_id = 1;
  string connector = 2;
}

message S3GetCredentialsInfoResponse {
  bool exist = 1;
  string provider = 2;
}

message GCSObject {
  string name = 1;
  google.protobuf.Timestamp modified_on = 2;
  int64 size = 3;
  bool is_dir = 4;
}

message GCSListBucketsRequest {
  string instance_id = 1;
  string connector = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 4;
}

message GCSListBucketsResponse {
  string next_page_token = 1;
  repeated string buckets = 2;
}

message GCSListObjectsRequest {
  string instance_id = 1;
  string connector = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 4;
  string bucket = 5 [(validate.rules).string.min_len = 1];
  string prefix = 6;
  string start_offset = 7;
  string end_offset = 8;
  string delimiter = 9;
}

message GCSListObjectsResponse {
  string next_page_token = 1;
  repeated GCSObject objects = 2;
}

message GCSGetCredentialsInfoRequest {
  string instance_id = 1;
  string connector = 2;
}

message GCSGetCredentialsInfoResponse {
  bool exist = 1;
  string project_id = 2;
}

message OLAPListTablesRequest {
  string instance_id = 1;
  // Connector to list tables from.
  string connector = 2;
  // Optional search pattern to filter tables by.
  // Has the same syntax and behavior as ILIKE in SQL.
  // If the connector supports schema/database names, it searches against both the plain table name and the fully qualified table name.
  string search_pattern = 3;
}

message OLAPListTablesResponse {
  repeated TableInfo tables = 1;
}

message TableInfo {
  string database = 1;
  string database_schema = 4;
  bool is_default_database = 5;
  bool is_default_database_schema = 6;
  string name = 2;
  // has_unsupported_data_types indicates if the underlying table has any column with an unsupported OLAP engine datatype
  bool has_unsupported_data_types = 3;
  // physical_size_bytes is the physical size of the table. Set to -1 if the size cannot be determined.
  int64 physical_size_bytes = 7;
}

message OLAPGetTableRequest {
  string instance_id = 1;
  string connector = 2;
  string database = 4;
  string database_schema = 5;
  string table = 3;
}

message OLAPGetTableResponse {
  StructType schema = 1;
  // unsupported_columns are columns having datatypes which are not supported by Rill
  map<string, string> unsupported_columns = 3;
  bool view = 2;
  // physical_size_bytes is the physical size of the table. Set to -1 if the size cannot be determined.
  int64 physical_size_bytes = 4;
}

message BigQueryListDatasetsRequest {
  string instance_id = 1;
  string connector = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 4;
}

message BigQueryListDatasetsResponse {
  string next_page_token = 1;
  repeated string names = 2;
}

message BigQueryListTablesRequest {
  string instance_id = 1;
  string connector = 2;
  string dataset = 3;
  uint32 page_size = 4 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 5;
}

message BigQueryListTablesResponse {
  string next_page_token = 1;
  repeated string names = 2;
}
