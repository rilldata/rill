connectors:
  - clickhouse
  - s3
project_files:
  all_datatypes_clickhouse_csv.yaml:
    type: model
    materialize: true
    connector: clickhouse
    output: clickhouse
    sql: "SELECT * FROM s3('s3://integration-test.rilldata.com/csv_test/all_datatypes.csv', '{{.env.connector.s3.aws_access_key_id}}', '{{.env.connector.s3.aws_secret_access_key}}', 'CSVWithNames')"
  all_datatypes_clickhouse_glob.yaml:
    type: model
    materialize: true
    connector: clickhouse
    output: clickhouse
    sql: "SELECT * FROM s3('s3://integration-test.rilldata.com/glob_test/y=202*/a*.csv', '{{.env.connector.s3.aws_access_key_id}}', '{{.env.connector.s3.aws_secret_access_key}}', 'CSVWithNames')"
  all_datatypes_clickhouse_parquet.yaml:
    type: model
    materialize: true
    connector: clickhouse
    output: clickhouse
    sql: "SELECT * FROM s3('s3://integration-test.rilldata.com/parquet_test/all_datatypes.parquet', '{{.env.connector.s3.aws_access_key_id}}', '{{.env.connector.s3.aws_secret_access_key}}', 'Parquet')"
  all_datatypes_duckdb_model_csv.yaml:
    type: model
    connector: duckdb
    materialize: true
    pre_exec: "CREATE SECRET secret1 (TYPE s3, KEY_ID '{{.env.connector.s3.aws_access_key_id}}', SECRET '{{.env.connector.s3.aws_secret_access_key}}', REGION 'us-east-1')"
    sql: "select * from read_csv('s3://integration-test.rilldata.com/csv_test/all_datatypes.csv', auto_detect=true, ignore_errors=1, header=true)"
  all_datatypes_duckdb_model_glob.yaml:
    type: model
    connector: duckdb
    materialize: true
    pre_exec: "CREATE SECRET secret1 (TYPE s3, KEY_ID '{{.env.connector.s3.aws_access_key_id}}', SECRET '{{.env.connector.s3.aws_secret_access_key}}', REGION 'us-east-1')"
    sql: "select * from read_csv('s3://integration-test.rilldata.com/glob_test/y=202*/a*.csv', auto_detect=true, ignore_errors=1, header=true)"
  all_datatypes_duckdb_model_partitions.yaml:
    type: model
    connector: duckdb
    materialize: true
    pre_exec: "CREATE SECRET secret1 (TYPE s3, KEY_ID '{{.env.connector.s3.aws_access_key_id}}', SECRET '{{.env.connector.s3.aws_secret_access_key}}', REGION 'us-east-1')"
    partitions:
      glob:
        path: s3://integration-test.rilldata.com/glob_test/y=202*/a*.csv
    sql: "select * from read_csv('{{ .partition.uri }}', auto_detect=true, ignore_errors=0, header=true)"
    output:
      incremental_strategy: merge
      unique_key: id
  all_datatypes_duckdb_model_partition_paths_with_new_line.yaml:
    type: model
    connector: duckdb
    materialize: true
    pre_exec: "CREATE SECRET secret1 (TYPE s3, KEY_ID '{{.env.connector.s3.aws_access_key_id}}', SECRET '{{.env.connector.s3.aws_secret_access_key}}', REGION 'us-east-1')"
    partitions:
      glob:
        path: |
          s3://integration-test.rilldata.com/glob_test/y=202*/a*.csv
    sql: "select * from read_csv('{{ .partition.uri }}', auto_detect=true, ignore_errors=0, header=true)"
    output:
      incremental_strategy: merge
      unique_key: id
  all_datatypes_duckdb_model_parquet.yaml:
    type: model
    connector: duckdb
    materialize: true
    pre_exec: "CREATE SECRET secret1 (TYPE s3, KEY_ID '{{.env.connector.s3.aws_access_key_id}}', SECRET '{{.env.connector.s3.aws_secret_access_key}}', REGION 'us-east-1')"
    sql: "select * from read_parquet('s3://integration-test.rilldata.com/parquet_test/all_datatypes.parquet')"
  all_datatypes_duckdb_source_csv.yaml:
    type: source
    connector: s3
    uri: "s3://integration-test.rilldata.com/csv_test/all_datatypes.csv"
  all_datatypes_duckdb_source_glob.yaml:
    type: source
    connector: s3
    uri: "s3://integration-test.rilldata.com/glob_test/y=202*/a*.csv"
  all_datatypes_duckdb_source_parquet.yaml:
    type: source
    connector: duckdb
    sql: "select * from read_parquet('s3://integration-test.rilldata.com/parquet_test/all_datatypes.parquet')"
tests:
  - name: query_all_result_duckdb_source_csv
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_source_csv order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}"
      2,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}"
      3,,,,,,,,,,,,,,,,,,,
  - name: query_all_datatypes_duckdb_source_csv
    resolver: sql
    properties:
      sql: "describe all_datatypes_duckdb_source_csv"
    result_csv: |
      column_name,column_type,null,key,default,extra
      id,BIGINT,YES,,,
      boolean_col,BOOLEAN,YES,,,
      int32_col,BIGINT,YES,,,
      int64_col,BIGINT,YES,,,
      float_col,DOUBLE,YES,,,
      double_col,DOUBLE,YES,,,
      byte_array_col,VARCHAR,YES,,,
      fixed_len_byte_array_col,VARCHAR,YES,,,
      string_col,VARCHAR,YES,,,
      decimal_col,DOUBLE,YES,,,
      date_col,DATE,YES,,,
      time_millis_col,TIME,YES,,,
      time_micros_col,TIME,YES,,,
      timestamp_millis_col,TIMESTAMP,YES,,,
      timestamp_micros_col,TIMESTAMP,YES,,,
      uuid_col,VARCHAR,YES,,,
      list_int_col,VARCHAR,YES,,,
      list_string_col,VARCHAR,YES,,,
      map_col,VARCHAR,YES,,,
      struct_col,VARCHAR,YES,,,
  - name: query_all_result_duckdb_model_csv
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_model_csv order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}"
      2,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}"
      3,,,,,,,,,,,,,,,,,,,
  - name: query_all_datatypes_duckdb_model_csv
    resolver: sql
    properties:
      sql: "describe all_datatypes_duckdb_model_csv"
    result_csv: |
      column_name,column_type,null,key,default,extra
      id,BIGINT,YES,,,
      boolean_col,BOOLEAN,YES,,,
      int32_col,BIGINT,YES,,,
      int64_col,BIGINT,YES,,,
      float_col,DOUBLE,YES,,,
      double_col,DOUBLE,YES,,,
      byte_array_col,VARCHAR,YES,,,
      fixed_len_byte_array_col,VARCHAR,YES,,,
      string_col,VARCHAR,YES,,,
      decimal_col,DOUBLE,YES,,,
      date_col,DATE,YES,,,
      time_millis_col,TIME,YES,,,
      time_micros_col,TIME,YES,,,
      timestamp_millis_col,TIMESTAMP,YES,,,
      timestamp_micros_col,TIMESTAMP,YES,,,
      uuid_col,VARCHAR,YES,,,
      list_int_col,VARCHAR,YES,,,
      list_string_col,VARCHAR,YES,,,
      map_col,VARCHAR,YES,,,
      struct_col,VARCHAR,YES,,,
  - name: query_all_result_clickhouse_csv
    resolver: sql
    properties:
      connector: clickhouse
      sql: "select * from all_datatypes_clickhouse_csv order by id"
      # time is converted to datetime like 2025-01-01T00:02:03.456Z but should be 1970-01-01T00:02:03.456Z, which is wrong.
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,True,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,2025-01-01T00:02:03.456Z,2025-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}"
      2,False,0,0,0,0,,0000000000000000,,0,1970-01-01,2025-01-01T00:00:00Z,2025-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}"
      3,,,,,,,,,,,,,,,,,,,
  - name: query_table_type_clickhouse_csv
    resolver: sql
    properties:
      connector: clickhouse
      sql: "select name, engine from system.tables where name = 'all_datatypes_clickhouse_csv'"
    result_csv: |
      name,engine
      all_datatypes_clickhouse_csv,MergeTree
  - name: query_all_datatypes_clickhouse_csv
    resolver: sql
    properties:
      connector: clickhouse
      sql: |
        select name, type from system.columns where `table` = 'all_datatypes_clickhouse_csv'
    result_csv: |
      name,type
      id,Nullable(Int64)
      boolean_col,Nullable(String)
      int32_col,Nullable(Int64)
      int64_col,Nullable(Int64)
      float_col,Nullable(Float64)
      double_col,Nullable(Float64)
      byte_array_col,Nullable(String)
      fixed_len_byte_array_col,Nullable(String)
      string_col,Nullable(String)
      decimal_col,Nullable(Float64)
      date_col,Nullable(Date)
      time_millis_col,Nullable(DateTime64(9))
      time_micros_col,Nullable(DateTime64(9))
      timestamp_millis_col,Nullable(DateTime64(9))
      timestamp_micros_col,Nullable(DateTime64(9))
      uuid_col,Nullable(String)
      list_int_col,Nullable(String)
      list_string_col,Nullable(String)
      map_col,Nullable(String)
      struct_col,Nullable(String)
  - name: query_all_result_duckdb_source_parquet
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_source_parquet order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,true,123,45678901234,1.2300000190734863,3.14159,YWJjZA==,MTIzNDU2Nzg5MGFiY2RlZg==,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,dXVpZGFiY2QxMjM0ZWZnaA==,"[1,2,3]","[""apple"",""banana"",""cherry""]","{""key1"":10,""key2"":20}","{""field_float_col"":3.140000104904175,""field_int_col"":42,""field_string_col"":""example""}"
      2,false,0,0,0,0,,MDAwMDAwMDAwMDAwMDAwMA==,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,MDAwMDAwMDAwMDAwMDAwMA==,[],[],{},"{""field_float_col"":0,""field_int_col"":0,""field_string_col"":""""}"
      3,,,,,,,,,,,,,,,,,,,
  - name: query_all_datatypes_duckdb_source_parquet
    resolver: sql
    properties:
      sql: "describe all_datatypes_duckdb_source_parquet"
    result_csv: |
      column_name,column_type,null,key,default,extra
      id,INTEGER,YES,,,
      boolean_col,BOOLEAN,YES,,,
      int32_col,INTEGER,YES,,,
      int64_col,BIGINT,YES,,,
      float_col,FLOAT,YES,,,
      double_col,DOUBLE,YES,,,
      byte_array_col,BLOB,YES,,,
      fixed_len_byte_array_col,BLOB,YES,,,
      string_col,VARCHAR,YES,,,
      decimal_col,"DECIMAL(10,2)",YES,,,
      date_col,DATE,YES,,,
      time_millis_col,TIME WITH TIME ZONE,YES,,,
      time_micros_col,TIME WITH TIME ZONE,YES,,,
      timestamp_millis_col,TIMESTAMP,YES,,,
      timestamp_micros_col,TIMESTAMP,YES,,,
      uuid_col,BLOB,YES,,,
      list_int_col,INTEGER[],YES,,,
      list_string_col,VARCHAR[],YES,,,
      map_col,"MAP(VARCHAR, INTEGER)",YES,,,
      struct_col,"STRUCT(field_int_col INTEGER, field_float_col FLOAT, field_string_col VARCHAR)",YES,,,
  - name: query_all_result_duckdb_model_parquet
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_model_parquet order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,true,123,45678901234,1.2300000190734863,3.14159,YWJjZA==,MTIzNDU2Nzg5MGFiY2RlZg==,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,dXVpZGFiY2QxMjM0ZWZnaA==,"[1,2,3]","[""apple"",""banana"",""cherry""]","{""key1"":10,""key2"":20}","{""field_float_col"":3.140000104904175,""field_int_col"":42,""field_string_col"":""example""}"
      2,false,0,0,0,0,,MDAwMDAwMDAwMDAwMDAwMA==,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,MDAwMDAwMDAwMDAwMDAwMA==,[],[],{},"{""field_float_col"":0,""field_int_col"":0,""field_string_col"":""""}"
      3,,,,,,,,,,,,,,,,,,,
  - name: query_all_datatypes_duckdb_model_parquet
    resolver: sql
    properties:
      sql: "describe all_datatypes_duckdb_model_parquet"
    result_csv: |
      column_name,column_type,null,key,default,extra
      id,INTEGER,YES,,,
      boolean_col,BOOLEAN,YES,,,
      int32_col,INTEGER,YES,,,
      int64_col,BIGINT,YES,,,
      float_col,FLOAT,YES,,,
      double_col,DOUBLE,YES,,,
      byte_array_col,BLOB,YES,,,
      fixed_len_byte_array_col,BLOB,YES,,,
      string_col,VARCHAR,YES,,,
      decimal_col,"DECIMAL(10,2)",YES,,,
      date_col,DATE,YES,,,
      time_millis_col,TIME WITH TIME ZONE,YES,,,
      time_micros_col,TIME WITH TIME ZONE,YES,,,
      timestamp_millis_col,TIMESTAMP,YES,,,
      timestamp_micros_col,TIMESTAMP,YES,,,
      uuid_col,BLOB,YES,,,
      list_int_col,INTEGER[],YES,,,
      list_string_col,VARCHAR[],YES,,,
      map_col,"MAP(VARCHAR, INTEGER)",YES,,,
      struct_col,"STRUCT(field_int_col INTEGER, field_float_col FLOAT, field_string_col VARCHAR)",YES,,,
  - name: query_all_result_clickhouse_parquet
    resolver: sql
    properties:
      connector: clickhouse
      sql: "select * from all_datatypes_clickhouse_parquet order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,true,123,45678901234,1.2300000190734863,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,1970-01-01T00:02:03.456Z,1970-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,"[1,2,3]","[""apple"",""banana"",""cherry""]","{""key1"":10,""key2"":20}","{""FIELD_FLOAT_COL"":null,""FIELD_INT_COL"":null,""FIELD_STRING_COL"":null,""field_float_col"":3.14,""field_int_col"":42,""field_string_col"":""example""}"
      2,false,0,0,0,0,,0000000000000000,,0,1970-01-01,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],{},"{""FIELD_FLOAT_COL"":null,""FIELD_INT_COL"":null,""FIELD_STRING_COL"":null,""field_float_col"":0,""field_int_col"":0,""field_string_col"":""""}"
      3,,,,,,,,,,,,,,,,[],[],{},"{""FIELD_FLOAT_COL"":null,""FIELD_INT_COL"":null,""FIELD_STRING_COL"":null,""field_float_col"":null,""field_int_col"":null,""field_string_col"":null}"
  - name: query_all_datatypes_clickhouse_parquet
    resolver: sql
    properties:
      connector: clickhouse
      sql: |
        select name, type from system.columns where `table` = 'all_datatypes_clickhouse_parquet'
    result_csv: |
      name,type
      id,Nullable(Int32)
      boolean_col,Nullable(Bool)
      int32_col,Nullable(Int32)
      int64_col,Nullable(Int64)
      float_col,Nullable(Float32)
      double_col,Nullable(Float64)
      byte_array_col,Nullable(String)
      fixed_len_byte_array_col,Nullable(FixedString(16))
      string_col,Nullable(String)
      decimal_col,"Nullable(Decimal(10, 2))"
      date_col,Nullable(Date32)
      time_millis_col,Nullable(DateTime64(3))
      time_micros_col,Nullable(DateTime64(6))
      timestamp_millis_col,Nullable(DateTime64(3))
      timestamp_micros_col,Nullable(DateTime64(6))
      uuid_col,Nullable(FixedString(16))
      list_int_col,Array(Nullable(Int32))
      list_string_col,Array(Nullable(String))
      map_col,"Map(String, Nullable(Int32))"
      struct_col,"Tuple(field_int_col Nullable(Int32), field_float_col Nullable(Float32), field_string_col Nullable(String))"
  - name: query_all_result_duckdb_source_glob
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_source_glob order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col,y
      1,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}",2024
      2,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}",2024
      3,,,,,,,,,,,,,,,,,,,,2024
      4,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}",2023
      5,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}",2023
      6,,,,,,,,,,,,,,,,,,,,2023
  - name: query_all_result_duckdb_model_glob
    resolver: sql
    properties:
      sql: "select * from all_datatypes_duckdb_model_glob order by id"
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col,y
      1,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}",2024
      2,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}",2024
      3,,,,,,,,,,,,,,,,,,,,2024
      4,true,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,0001-01-01T00:02:03.456Z,0001-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}",2023
      5,false,0,0,0,0,,0000000000000000,,0,1970-01-01,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}",2023
      6,,,,,,,,,,,,,,,,,,,,2023
  - name: query_count_duckdb_model_partitions
    resolver: sql
    properties:
      sql: "select count(*) as count from all_datatypes_duckdb_model_partitions"
    result_csv: |
      count
      6
  - name: query_all_result_clickhouse_glob
    resolver: sql
    properties:
      connector: clickhouse
      sql: "select * from all_datatypes_clickhouse_glob order by id"
      # time is converted to datetime like 2025-01-01T00:02:03.456Z but should be 1970-01-01T00:02:03.456Z, which is wrong.
    result_csv: |
      id,boolean_col,int32_col,int64_col,float_col,double_col,byte_array_col,fixed_len_byte_array_col,string_col,decimal_col,date_col,time_millis_col,time_micros_col,timestamp_millis_col,timestamp_micros_col,uuid_col,list_int_col,list_string_col,map_col,struct_col
      1,True,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,2025-01-01T00:02:03.456Z,2025-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}"
      2,False,0,0,0,0,,0000000000000000,,0,1970-01-01,2025-01-01T00:00:00Z,2025-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}"
      3,,,,,,,,,,,,,,,,,,,
      4,True,123,45678901234,1.23,3.14159,abcd,1234567890abcdef,hello,123.45,2024-03-06,2025-01-01T00:02:03.456Z,2025-01-01T00:02:03.456789Z,2024-03-06T12:34:56.789Z,2024-03-06T12:34:56.789123Z,uuidabcd1234efgh,[1 2 3],['apple' 'banana' 'cherry'],"[('key1', 10), ('key2', 20)]","{'field_int_col': 42, 'field_float_col': 3.140000104904175, 'field_string_col': 'example'}"
      5,False,0,0,0,0,,0000000000000000,,0,1970-01-01,2025-01-01T00:00:00Z,2025-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0000000000000000,[],[],[],"{'field_int_col': 0, 'field_float_col': 0.0, 'field_string_col': ''}"
      6,,,,,,,,,,,,,,,,,,,
