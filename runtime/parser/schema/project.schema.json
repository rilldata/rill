{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "project.schema.json",
  "title": "YAML Syntax",
  "description": "When you create models and dashboards, these objects are represented as object files on the file system. You can find these files in your `models` and `dashboards` folders in your project by default. \r\n\r\n:::info Working with resources outside their native folders\r\n\r\nIt is possible to define resources (such as [models](model.md), [metrics-views](metrics-view.md), [dashboards](explore.md), [custom APIs](api.md), or [themes](theme.md)) within <u>any</u> nested folder within your Rill project directory. However, for any YAML configuration file, it is then imperative that the `type` property is then appropriately defined within the underlying resource configuration or Rill will not able to resolve the resource type correctly!\r\n\r\n:::\r\n\r\nProjects can simply be rehydrated from Rill project files into an explorable data application as long as there is sufficient access and credentials to the source data - figuring out the dependencies, pulling down data, & validating your model queries and metrics configurations. The result is a set of functioning exploratory dashboards.\r\n\r\nYou can see a few different example projects by visiting our [example github repository](https://github.com/rilldata/rill-examples).\r\n\r\n:::tip\r\n\r\nFor more information about using Git or cloning projects locally, please see our page on [GitHub Basics](/deploy/deploy-dashboard/github-101).\r\n\r\n:::",
  "type": "object",
  "oneOf": [
    {
      "$ref": "#/definitions/alert"
    },
    {
      "$ref": "#/definitions/api"
    },
    {
      "$ref": "#/definitions/canvas"
    },
    {
      "$ref": "#/definitions/component"
    },
    {
      "$ref": "#/definitions/connector"
    },
    {
      "$ref": "#/definitions/explore"
    },
    {
      "$ref": "#/definitions/metrics_view"
    },
    {
      "$ref": "#/definitions/model"
    },
    {
      "$ref": "#/definitions/report"
    },
    {
      "$ref": "#/definitions/theme"
    }
  ],
  "definitions": {
    "alert": {
      "type": "object",
      "title": "Alert YAML",
      "description": "Along with alertings at the dashboard level and can be created via the UI, there might be more extensive alerting that you might want to develop and can be done so the an alert.yaml. When creating an alert via a YAML file, you'll see this denoted in the UI as `Created through code`.",
      "examples": [
        {
          "_comment_heading": "Example: To send alert when data lags by more than 1 day to slack channel #rill-cloud-alerts",
          "type": "alert",
          "display_name": "Data lags by more than 1 day",
          "_comment_refresh": "Check the alert every hour.",
          "refresh": {
            "cron": "0 * * * *"
          },
          "_comment_data": "Query that returns non-empty results if the metrics lag by more than 1 day.",
          "data": {
            "sql": "SELECT  *\nFROM\n(\n  SELECT  MAX(event_time) AS max_time\n  FROM rill_metrics_model\n)\nWHERE max_time < NOW() - INTERVAL '1 day'"
          },
          "_comment_notify": "Send notifications in Slack.",
          "notify": {
            "slack": {
              "channels": [
                "#rill-cloud-alerts"
              ]
            }
          }
        }
      ],
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "alert",
              "description": "Refers to the resource type and must be `alert`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/alert/definitions/alert_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/alert/definitions/alert_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/alert/definitions/alert_properties",
          "required": [
            "refresh",
            "data",
            "notify"
          ]
        }
      ],
      "definitions": {
        "alert_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "Refers to the display name for the alert"
            },
            "refresh": {
              "$ref": "#/definitions/schedule_properties",
              "description": "Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying data"
            },
            "intervals": {
              "type": "object",
              "description": "define the interval of the alert to check",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "a valid ISO8601 duration to define the interval duration"
                },
                "limit": {
                  "type": "integer",
                  "description": "maximum number of intervals to check for on invocation",
                  "minimum": 0
                },
                "check_unclosed": {
                  "type": "boolean",
                  "description": "boolean, whether unclosed intervals should be checked"
                }
              }
            },
            "watermark": {
              "type": "string",
              "enum": [
                "trigger_time",
                "inherit"
              ],
              "description": "Specifies how the watermark is determined for incremental processing.\nUse 'trigger_time' to set it at runtime or 'inherit' to use the upstream model's watermark."
            },
            "timeout": {
              "type": "string",
              "description": "define the timeout of the alert in seconds (optional)."
            },
            "data": {
              "description": "Specifies one of the options to retrieve or compute the data used by alert",
              "$ref": "#/definitions/data_properties"
            },
            "for": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "user_id"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "user_email": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "required": [
                    "user_email"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "required": [
                    "attributes"
                  ],
                  "additionalProperties": false
                }
              ]
            },
            "on_recover": {
              "type": "boolean",
              "description": "Send an alert when a previously failing alert recovers. Defaults to false."
            },
            "on_fail": {
              "type": "boolean",
              "description": "Send an alert when a failure occurs. Defaults to true."
            },
            "on_error": {
              "type": "boolean",
              "description": "Send an alert when an error occurs during evaluation. Defaults to false."
            },
            "renotify": {
              "type": "boolean",
              "description": "Enable repeated notifications for unresolved alerts. Defaults to false."
            },
            "renotify_after": {
              "type": "string",
              "description": "Defines the re-notification interval for the alert (e.g., '10m', '24h'), equivalent to snooze duration in UI, defaults to 'Off'"
            },
            "notify": {
              "$ref": "#/definitions/notify_properties",
              "description": "Defines how and where to send notifications. At least one method (email or Slack) is required."
            },
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "api": {
      "type": "object",
      "title": "API YAML",
      "description": "In your Rill project directory, create a new file name `<api-name>.yaml` in the `apis` directory containing a custom API definition. See comprehensive documentation on how to define and use [custom APIs](/integrate/custom-apis/index.md)",
      "examples": [
        {
          "_comment_heading": "Example: This api returns the top 10 authors by net line changes since the specified date provided in the arguments.",
          "type": "api",
          "name": "metrics_view_api",
            "metrics_sql": "SELECT author_name, net_line_changes\nFROM advanced_metrics_view\n  where author_date > '{{ .args.date }}'\n  order by net_line_changes DESC\n  limit 10"
        }
      ],
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "api",
              "description": "Refers to the resource type and must be `api`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/api/definitions/api_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/api/definitions/api_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/api/definitions/api_properties"
        }
      ],
      "definitions": {
        "api_properties": {
          "type": "object",
          "properties": {
            "openapi": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "string"
                },
                "request": {
                  "type": "object",
                  "properties": {
                    "parameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  }
                }
              }
            },
            "security": {
              "$ref": "#/definitions/security_policy_properties"
            },
            "skip_nested_security": {
              "type": "boolean"
            }
          },
          "oneOf": [
            {
              "$ref": "#/definitions/data_properties"
            }
          ]
        }
      }
    },
    "canvas": {
      "type": "object",
      "title": "Canvas YAML",
      "description": "In your Rill project directory, create a explore dashboard, `<dashboard_name>.yaml`, file in the `dashboards` directory. Rill will ingest the dashboard definition next time you run `rill start`.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "canvas",
              "description": "Refers to the resource type and must be `canvas`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/canvas/definitions/canvas_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/canvas/definitions/canvas_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/canvas/definitions/canvas_properties",
          "required": [
            "rows"
          ]
        }
      ],
      "definitions": {
        "canvas_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "Refers to the display name for the canvas"
            },
            "banner": {
              "type": "string",
              "description": "Refers to the custom banner displayed at the header of an Canvas dashboard"
            },
            "max_width": {
              "type": "integer",
              "description": "Max width in pixels of the canvas",
              "minimum": 0
            },
            "gap_x": {
              "type": "integer",
              "description": "Horizontal gap in pixels of the canvas",
              "minimum": 0
            },
            "gap_y": {
              "type": "integer",
              "description": "Vertical gap in pixels of the canvas",
              "minimum": 0
            },
            "theme": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": true
                }
              ],
              "description": "Name of the theme to use. Only one of theme and embedded_theme can be set."
            },
            "allow_custom_time_range": {
              "type": "boolean",
              "description": "Defaults to true, when set to false it will hide the ability to set a custom time range for the user. "
            },
            "time_ranges": {
              "type": "array",
              "description": "Overrides the list of default time range selections available in the dropdown. It can be string or an object with a 'range' and optional 'comparison_offsets'",
              "items": {
                "$ref": "#/definitions/explore_time_range_properties"
              }
            },
            "time_zones": {
              "type": "array",
              "description": "Refers to the time zones that should be pinned to the top of the time zone selector. It should be a list of [IANA time zone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
              "items": {
                "type": "string"
              }
            },
            "filters": {
              "type": "object",
              "description": "Indicates if filters should be enabled for the canvas.",
              "properties": {
                "enable": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "defaults": {
              "type": "object",
              "description": "Preset UI state to show by default",
              "properties": {
                "time_range": {
                  "type": "string"
                },
                "comparison_mode": {
                  "type": "string"
                },
                "comparison_dimension": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "variables": {
              "type": "array",
              "description": "Variables that can be used in the canvas",
              "items": {
                "$ref": "#/definitions/component_variable_properties"
              }
            },
            "rows": {
              "type": "array",
              "description": "Refers to all of the rows displayed on the Canvas",
              "items": {
                "type": "object",
                "description": "Refers to each row of components, multiple items can be listed in a single items",
                "properties": {
                  "height": {
                    "type": "string"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "width": {
                          "type": [
                            "string",
                            "integer"
                          ]
                        },
                        "component": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": true
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "security": {
              "$ref": "#/definitions/security_policy_properties",
              "description": "Security rules to apply for access to the canvas"
            }
          }
        }
      }
    },
    "component": {
      "type": "object",
      "title": "Component YAML",
      "description": "",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "component",
              "description": "Refers to the resource type and must be `component`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/component/definitions/component_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/component/definitions/component_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/component/definitions/component_properties"
        }
      ],
      "definitions": {
        "component_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "Refers to the display name for the component"
            },
            "description": {
              "type": "string"
            },
            "input": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/component_variable_properties"
              }
            },
            "output": {
              "$ref": "#/definitions/component_variable_properties"
            }
          }
        }
      }
    },
    "connector": {
      "type": "object",
      "title": "Connector YAML",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "connector",
              "description": "Refers to the resource type and must be `connector`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/connector/definitions/athena"
            },
            {
              "$ref": "#/definitions/connector/definitions/azure"
            },
            {
              "$ref": "#/definitions/connector/definitions/bigquery"
            },
            {
              "$ref": "#/definitions/connector/definitions/clickhouse"
            },
            {
              "$ref": "#/definitions/connector/definitions/druid"
            },
            {
              "$ref": "#/definitions/connector/definitions/duckdb"
            },
            {
              "$ref": "#/definitions/connector/definitions/gcs"
            },
            {
              "$ref": "#/definitions/connector/definitions/https"
            },
            {
              "$ref": "#/definitions/connector/definitions/local_file"
            },
            {
              "$ref": "#/definitions/connector/definitions/motherduck"
            },
            {
              "$ref": "#/definitions/connector/definitions/mysql"
            },
            {
              "$ref": "#/definitions/connector/definitions/pinot"
            },
            {
              "$ref": "#/definitions/connector/definitions/postgres"
            },
            {
              "$ref": "#/definitions/connector/definitions/redshift"
            },
            {
              "$ref": "#/definitions/connector/definitions/s3"
            },
            {
              "$ref": "#/definitions/connector/definitions/salesforce"
            },
            {
              "$ref": "#/definitions/connector/definitions/slack"
            },
            {
              "$ref": "#/definitions/connector/definitions/snowflake"
            },
            {
              "$ref": "#/definitions/connector/definitions/sqlite"
            }
          ]
        }
      ],
      "definitions": {
        "athena": {
          "type": "object",
          "title": "athena",
          "description": "Configuration properties specific to the athena",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `athena`",
                  "const": "athena"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/athena/definitions/athena_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/athena/definitions/athena_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/athena/definitions/athena_properties"
                }
              }
            }
          ],
          "definitions": {
            "athena_properties": {
              "type": "object",
              "properties": {
                "aws_access_key_id": {
                  "type": "string",
                  "description": "AWS Access Key ID for Athena access"
                },
                "aws_secret_access_key": {
                  "type": "string",
                  "description": "AWS Secret Access Key for Athena access"
                },
                "aws_access_token": {
                  "type": "string",
                  "description": "Optional AWS session token for temporary credentials"
                },
                "external_id": {
                  "type": "string",
                  "description": "Optional External ID for assuming a role"
                },
                "role_arn": {
                  "type": "string",
                  "description": "Optional AWS Role ARN to assume when accessing Athena"
                },
                "role_session_name": {
                  "type": "string",
                  "description": "Optional Session name when assuming the role"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                }
              }
            }
          }
        },
        "azure": {
          "type": "object",
          "title": "azure",
          "description": "Configuration properties specific to the azure",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `azure`",
                  "const": "azure"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/azure/definitions/azure_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/azure/definitions/azure_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/azure/definitions/azure_properties"
                }
              }
            }
          ],
          "definitions": {
            "azure_properties": {
              "type": "object",
              "properties": {
                "azure_storage_account": {
                  "type": "string",
                  "description": "Azure storage account name"
                },
                "azure_storage_key": {
                  "type": "string",
                  "description": "Azure storage access key"
                },
                "azure_storage_sas_token": {
                  "type": "string",
                  "description": "Optional azure SAS token for authentication"
                },
                "azure_storage_connection_string": {
                  "type": "string",
                  "description": "Optional azure connection string for storage account"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                }
              }
            }
          }
        },
        "bigquery": {
          "type": "object",
          "title": "bigquery",
          "description": "Configuration properties specific to the bigquery",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `bigquery`",
                  "const": "bigquery"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/bigquery/definitions/bigquery_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/bigquery/definitions/bigquery_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/bigquery/definitions/bigquery_properties"
                }
              }
            }
          ],
          "definitions": {
            "bigquery_properties": {
              "type": "object",
              "properties": {
                "google_application_credentials": {
                  "type": "string",
                  "description": "Path to the Google Cloud credentials JSON file"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                }
              }
            }
          }
        },
        "clickhouse": {
          "type": "object",
          "title": "clickhouse",
          "description": "Configuration properties specific to the clickhouse",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `clickhouse`",
                  "const": "clickhouse"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/clickhouse/definitions/clickhouse_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/clickhouse/definitions/clickhouse_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/clickhouse/definitions/clickhouse_properties"
                }
              }
            }
          ],
          "definitions": {
            "clickhouse_properties": {
              "type": "object",
              "properties": {
                "managed": {
                  "type": "boolean",
                  "description": "`true` means Rill will provision the connector using the default provisioner. `false` disables automatic provisioning."
                },
                "dsn": {
                  "type": "string",
                  "description": "DSN(Data Source Name) for the ClickHouse connection"
                },
                "username": {
                  "type": "string",
                  "description": "Username for authentication"
                },
                "password": {
                  "type": "string",
                  "description": "Password for authentication"
                },
                "host": {
                  "type": "string",
                  "description": "Host where the ClickHouse instance is running"
                },
                "port": {
                  "type": "integer",
                  "description": "Port where the ClickHouse instance is accessible"
                },
                "database": {
                  "type": "string",
                  "description": "Name of the ClickHouse database within the cluster"
                },
                "ssl": {
                  "type": "boolean",
                  "description": "Indicates whether a secured SSL connection is required"
                },
                "cluster": {
                  "type": "string",
                  "description": "Cluster name, required for running distributed queries"
                },
                "log_queries": {
                  "type": "boolean",
                  "description": "Controls whether to log raw SQL queries"
                },
                "settings_override": {
                  "type": "string",
                  "description": "override the default settings used in queries. example `readonly = 1, session_timezone = 'UTC'`"
                },
                "embed_port": {
                  "type": "integer",
                  "description": "Port to run ClickHouse locally (0 for random port)"
                },
                "can_scale_to_zero": {
                  "type": "boolean",
                  "description": "Indicates if the database can scale to zero"
                },
                "max_open_conns": {
                  "type": "integer",
                  "description": "Maximum number of open connections to the database"
                },
                "max_idle_conns": {
                  "type": "integer",
                  "description": "Maximum number of idle connections in the pool"
                },
                "dial_timeout": {
                  "type": "string",
                  "description": "Timeout for dialing the ClickHouse server"
                },
                "conn_max_lifetime": {
                  "type": "string",
                  "description": "Maximum time a connection may be reused"
                },
                "read_timeout": {
                  "type": "string",
                  "description": "Maximum time for a connection to read data"
                }
              }
            }
          }
        },
        "druid": {
          "type": "object",
          "title": "druid",
          "description": "Configuration properties specific to the druid",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `druid`",
                  "const": "druid"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/druid/definitions/druid_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/druid/definitions/druid_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/druid/definitions/druid_properties"
                }
              }
            }
          ],
          "definitions": {
            "druid_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "Data Source Name (DSN) for connecting to Druid"
                },
                "username": {
                  "type": "string",
                  "description": "Username for authenticating with Druid"
                },
                "password": {
                  "type": "string",
                  "description": "Password for authenticating with Druid"
                },
                "host": {
                  "type": "string",
                  "description": "Hostname of the Druid coordinator or broker"
                },
                "port": {
                  "type": "integer",
                  "description": "Port number of the Druid service"
                },
                "ssl": {
                  "type": "boolean",
                  "description": "Enable SSL for secure connection"
                },
                "log_queries": {
                  "type": "boolean",
                  "description": "Log raw SQL queries sent to Druid"
                },
                "max_open_conns": {
                  "type": "integer",
                  "description": "Maximum number of open database connections (0 = default, -1 = unlimited)"
                },
                "skip_version_check": {
                  "type": "boolean",
                  "description": "Skip checking Druid version compatibility"
                }
              }
            }
          }
        },
        "duckdb": {
          "type": "object",
          "title": "duckdb",
          "description": "Configuration properties specific to the duckdb",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `duckdb`",
                  "const": "duckdb"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/duckdb/definitions/duckdb_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/duckdb/definitions/duckdb_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/duckdb/definitions/duckdb_properties"
                }
              }
            }
          ],
          "definitions": {
            "duckdb_properties": {
              "type": "object",
              "properties": {
                "pool_size": {
                  "type": "integer",
                  "description": "Number of concurrent connections and queries allowed"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Whether access to the local environment and file system is allowed"
                },
                "cpu": {
                  "type": "integer",
                  "description": "Number of CPU cores available to the database"
                },
                "memory_limit_gb": {
                  "type": "integer",
                  "description": "Amount of memory in GB available to the database"
                },
                "read_write_ratio": {
                  "type": "number",
                  "description": "Ratio of resources allocated to the read database; used to divide CPU and memory"
                },
                "boot_queries": {
                  "type": "string",
                  "description": "SQL to run when initializing a new connection, before extensions and defaults"
                },
                "init_sql": {
                  "type": "string",
                  "description": "SQL to run when initializing a new connection, after extensions and defaults"
                },
                "log_queries": {
                  "type": "boolean",
                  "description": "Whether to log raw SQL queries executed through OLAP"
                }
              }
            }
          }
        },
        "gcs": {
          "type": "object",
          "title": "gcs",
          "description": "Configuration properties specific to the gcs",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `gcs`",
                  "const": "gcs"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/gcs/definitions/gcs_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/gcs/definitions/gcs_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/gcs/definitions/gcs_properties"
                }
              }
            }
          ],
          "definitions": {
            "gcs_properties": {
              "type": "object",
              "properties": {
                "google_application_credentials": {
                  "type": "string",
                  "description": "Google Cloud credentials JSON string"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                },
                "key_id": {
                  "type": "string",
                  "description": "Optional S3-compatible Key ID when used in compatibility mode"
                },
                "secret": {
                  "type": "string",
                  "description": "Optional S3-compatible Secret when used in compatibility mode"
                }
              }
            }
          }
        },
        "https": {
          "type": "object",
          "title": "https",
          "description": "Configuration properties specific to the https",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `https`",
                  "const": "https"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/https/definitions/https_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/https/definitions/https_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/https/definitions/https_properties"
                }
              }
            }
          ],
          "definitions": {
            "https_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The full HTTPS URI to fetch data from"
                },
                "headers": {
                  "type": "object",
                  "description": "HTTP headers to include in the request",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "local_file": {
          "type": "object",
          "title": "local_file",
          "description": "Configuration properties specific to the local_file",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `local_file`",
                  "const": "local_file"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/local_file/definitions/local_file_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/local_file/definitions/local_file_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/local_file/definitions/local_file_properties"
                }
              }
            }
          ],
          "definitions": {
            "local_file_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "Data Source Name (DSN) indicating the file path or location of the local file"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Flag to indicate if access to host-level file paths is permitted"
                }
              }
            }
          }
        },
        "motherduck": {
          "type": "object",
          "title": "motherduck",
          "description": "Configuration properties specific to the motherduck",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `motherduck`",
                  "const": "motherduck"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/motherduck/definitions/motherduck_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/motherduck/definitions/motherduck_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/motherduck/definitions/motherduck_properties"
                }
              }
            }
          ],
          "definitions": {
            "motherduck_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "Data Source Name (DSN) specifying the MotherDuck connection endpoint"
                },
                "token": {
                  "type": "string",
                  "description": "Authentication token for accessing MotherDuck (secret)"
                }
              }
            }
          }
        },
        "mysql": {
          "type": "object",
          "title": "mysql",
          "description": "Configuration properties specific to the mysql",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `mysql`",
                  "const": "mysql"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/mysql/definitions/mysql_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/mysql/definitions/mysql_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/mysql/definitions/mysql_properties"
                }
              }
            }
          ],
          "definitions": {
            "mysql_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "DSN(Data Source Name) for the mysql connection"
                }
              }
            }
          }
        },
        "pinot": {
          "type": "object",
          "title": "pinot",
          "description": "Configuration properties specific to the pinot",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `pinot`",
                  "const": "pinot"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/pinot/definitions/pinot_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/pinot/definitions/pinot_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/pinot/definitions/pinot_properties"
                }
              }
            }
          ],
          "definitions": {
            "pinot_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "DSN(Data Source Name) for the Pinot connection"
                },
                "username": {
                  "type": "string",
                  "description": "Username for authenticating with Pinot"
                },
                "password": {
                  "type": "string",
                  "description": "Password for authenticating with Pinot"
                },
                "broker_host": {
                  "type": "string",
                  "description": "Hostname of the Pinot broker"
                },
                "broker_port": {
                  "type": "integer",
                  "description": "Port number for the Pinot broker"
                },
                "controller_host": {
                  "type": "string",
                  "description": "Hostname of the Pinot controller"
                },
                "controller_port": {
                  "type": "integer",
                  "description": "Port number for the Pinot controller"
                },
                "ssl": {
                  "type": "boolean",
                  "description": "Enable SSL connection to Pinot"
                },
                "log_queries": {
                  "type": "boolean",
                  "description": "Log raw SQL queries executed through Pinot"
                },
                "max_open_conns": {
                  "type": "integer",
                  "description": "Maximum number of open connections to the Pinot database"
                }
              }
            }
          }
        },
        "postgres": {
          "type": "object",
          "title": "postgres",
          "description": "Configuration properties specific to the postgres",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `postgres`",
                  "const": "postgres"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/postgres/definitions/postgres_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/postgres/definitions/postgres_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/postgres/definitions/postgres_properties"
                }
              }
            }
          ],
          "definitions": {
            "postgres_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "DSN(Data Source Name) for the postgres connection"
                }
              }
            }
          }
        },
        "redshift": {
          "type": "object",
          "title": "redshift",
          "description": "Configuration properties specific to the redshift",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `redshift`",
                  "const": "redshift"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/redshift/definitions/redshift_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/redshift/definitions/redshift_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/redshift/definitions/redshift_properties"
                }
              }
            }
          ],
          "definitions": {
            "redshift_properties": {
              "type": "object",
              "properties": {
                "aws_access_key_id": {
                  "type": "string",
                  "description": "AWS access key ID for authentication"
                },
                "aws_secret_access_key": {
                  "type": "string",
                  "description": "AWS secret access key for authentication"
                },
                "aws_access_token": {
                  "type": "string",
                  "description": "AWS session token for temporary credentials (optional)"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                }
              }
            }
          }
        },
        "s3": {
          "type": "object",
          "title": "s3",
          "description": "Configuration properties specific to the s3",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `s3`",
                  "const": "s3"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/s3/definitions/s3_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/s3/definitions/s3_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/s3/definitions/s3_properties"
                }
              }
            }
          ],
          "definitions": {
            "s3_properties": {
              "type": "object",
              "properties": {
                "aws_access_key_id": {
                  "type": "string",
                  "description": "AWS Access Key ID used for authentication"
                },
                "aws_secret_access_key": {
                  "type": "string",
                  "description": "AWS Secret Access Key used for authentication"
                },
                "aws_access_token": {
                  "type": "string",
                  "description": "Optional AWS session token for temporary credentials"
                },
                "endpoint": {
                  "type": "string",
                  "description": "Optional custom endpoint URL for S3-compatible storage"
                },
                "region": {
                  "type": "string",
                  "description": "AWS region of the S3 bucket"
                },
                "allow_host_access": {
                  "type": "boolean",
                  "description": "Allow access to host environment configuration"
                },
                "retain_files": {
                  "type": "boolean",
                  "description": "Whether to retain intermediate files after processing"
                }
              }
            }
          }
        },
        "salesforce": {
          "type": "object",
          "title": "salesforce",
          "description": "Configuration properties specific to the salesforce",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `salesforce`",
                  "const": "salesforce"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/salesforce/definitions/salesforce_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/salesforce/definitions/salesforce_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/salesforce/definitions/salesforce_properties"
                }
              }
            }
          ],
          "definitions": {
            "salesforce_properties": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Salesforce account username"
                },
                "password": {
                  "type": "string",
                  "description": "Salesforce account password (secret)"
                },
                "key": {
                  "type": "string",
                  "description": "Authentication key for Salesforce (secret)"
                },
                "endpoint": {
                  "type": "string",
                  "description": "Salesforce API endpoint URL"
                },
                "client_id": {
                  "type": "string",
                  "description": "Client ID used for Salesforce OAuth authentication"
                }
              }
            }
          }
        },
        "slack": {
          "type": "object",
          "title": "slack",
          "description": "Configuration properties specific to the slack",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `slack`",
                  "const": "slack"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/slack/definitions/slack_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/slack/definitions/slack_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/slack/definitions/slack_properties"
                }
              }
            }
          ],
          "definitions": {
            "slack_properties": {
              "type": "object",
              "properties": {
                "bot_token": {
                  "type": "string",
                  "description": "Bot token used for authenticating Slack API requests"
                }
              }
            }
          }
        },
        "snowflake": {
          "type": "object",
          "title": "snowflake",
          "description": "Configuration properties specific to the snowflake",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `snowflake`",
                  "const": "snowflake"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/snowflake/definitions/snowflake_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/snowflake/definitions/snowflake_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/snowflake/definitions/snowflake_properties"
                }
              }
            }
          ],
          "definitions": {
            "snowflake_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "DSN (Data Source Name) for the Snowflake connection"
                },
                "parallel_fetch_limit": {
                  "type": "integer",
                  "description": "Maximum number of concurrent fetches during query execution"
                }
              }
            }
          }
        },
        "sqlite": {
          "type": "object",
          "title": "sqlite",
          "description": "Configuration properties specific to the sqlite",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Refers to the driver type and must be driver `sqlite`",
                  "const": "sqlite"
                }
              },
              "required": [
                "driver"
              ]
            },
            {
              "$ref": "#/definitions/connector/definitions/sqlite/definitions/sqlite_properties"
            },
            {
              "type": "object",
              "properties": {
                "dev": {
                  "type": "object",
                  "description": "Overrides properties in development",
                  "$ref": "#/definitions/connector/definitions/sqlite/definitions/sqlite_properties"
                },
                "prod": {
                  "type": "object",
                  "description": "Overrides properties in production",
                  "$ref": "#/definitions/connector/definitions/sqlite/definitions/sqlite_properties"
                }
              }
            }
          ],
          "definitions": {
            "sqlite_properties": {
              "type": "object",
              "properties": {
                "dsn": {
                  "type": "string",
                  "description": "DSN(Data Source Name) for the sqlite connection"
                }
              }
            }
          }
        }
      }
    },
    "explore": {
      "type": "object",
      "title": "Explore YAML",
      "description": "In your Rill project directory, create a explore dashboard, `<dashboard_name>.yaml`, file in the `dashboards` directory. Rill will ingest the dashboard definition next time you run `rill start`.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "explore",
              "description": "Refers to the resource type and must be `explore`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/explore/definitions/explore_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/explore/definitions/explore_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/explore/definitions/explore_properties"
        }
      ],
      "definitions": {
        "explore_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "Refers to the display name for the explore dashboard"
            },
            "description": {
              "type": "string",
              "description": "Refers to the description of the explore dashboard"
            },
            "banner": {
              "type": "string",
              "description": "Refers to the custom banner displayed at the header of an explore dashboard"
            },
            "metrics_view": {
              "type": "string",
              "description": "Refers to the metrics view resource"
            },
            "dimensions": {
              "description": "List of dimension names. Use '*' to select all dimensions (default) ",
              "$ref": "#/definitions/explore/definitions/explore_properties/definitions/field_selector_properties"
            },
            "measures": {
              "description": " List of measure names. Use '*' to select all measures (default)",
              "$ref": "#/definitions/explore/definitions/explore_properties/definitions/field_selector_properties"
            },
            "theme": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/theme"
                }
              ],
              "description": "Name of the theme to use. Only one of theme and embedded_theme can be set."
            },
            "time_ranges": {
              "type": "array",
              "description": "Overrides the list of default time range selections available in the dropdown. It can be string or an object with a 'range' and optional 'comparison_offsets'",
              "items": {
                "$ref": "#/definitions/explore_time_range_properties"
              }
            },
            "time_zones": {
              "type": "array",
              "description": "Refers to the time zones that should be pinned to the top of the time zone selector. It should be a list of [IANA time zone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
              "items": {
                "type": "string"
              }
            },
            "lock_time_zone": {
              "type": "boolean",
              "description": "When true, the dashboard will be locked to the first time provided in the time_zones list. When no time_zones are provided, the dashboard will be locked to UTC"
            },
            "allow_custom_time_range": {
              "type": "boolean",
              "description": "Defaults to true, when set to false it will hide the ability to set a custom time range for the user."
            },
            "defaults": {
              "type": "object",
              "description": "defines the defaults YAML struct",
              "properties": {
                "dimensions": {
                  "description": "Provides the default dimensions to load on viewing the dashboard",
                  "$ref": "#/definitions/explore/definitions/explore_properties/definitions/field_selector_properties"
                },
                "measures": {
                  "description": "Provides the default measures to load on viewing the dashboard",
                  "$ref": "#/definitions/explore/definitions/explore_properties/definitions/field_selector_properties"
                },
                "time_range": {
                  "description": "Refers to the default time range shown when a user initially loads the dashboard. The value must be either a valid [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) (for example, PT12H for 12 hours, P1M for 1 month, or P26W for 26 weeks) or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions)",
                  "type": "string"
                },
                "comparison_mode": {
                  "description": "Controls how to compare current data with historical or categorical baselines. Options: 'none' (no comparison), 'time' (compares with past based on default_time_range), 'dimension' (compares based on comparison_dimension values)",
                  "type": "string"
                },
                "comparison_dimension": {
                  "description": "for dimension mode, specify the comparison dimension by name",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "embeds": {
              "type": "object",
              "properties": {
                "hide_pivot": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "security": {
              "description": "Security rules to apply for access to the explore dashboard",
              "$ref": "#/definitions/security_policy_properties"
            }
          },
          "definitions": {
            "field_selector_properties": {
              "oneOf": [
                {
                  "type": "string",
                  "const": "*",
                  "description": "Matches all fields"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Explicit list of fields"
                },
                {
                  "type": "object",
                  "description": "Advanced matching using regex, DuckDB expression, or exclusion",
                  "properties": {
                    "regex": {
                      "type": "string",
                      "description": "Select dimensions using a regular expression"
                    },
                    "expr": {
                      "type": "string"
                    },
                    "exclude": {
                      "type": "object",
                      "description": "Select all dimensions except those listed here"
                    }
                  },
                  "additionalProperties": false,
                  "oneOf": [
                    {
                      "required": [
                        "regex"
                      ]
                    },
                    {
                      "required": [
                        "expr"
                      ]
                    },
                    {
                      "required": [
                        "exclude"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "metrics_view": {
      "type": "object",
      "title": "Metrics View YAML",
      "description": "In your Rill project directory, create a metrics view, `<metrics_view>.yaml`, file in the `metrics` directory. Rill will ingest the metric view definition next time you run `rill start`.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "metrics_view",
              "description": "Refers to the resource type and must be `metrics_view`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties"
        }
      ],
      "definitions": {
        "metrics_view_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "Refers to the display name for the metrics view"
            },
            "description": {
              "type": "string",
              "description": "Refers to the description for the metrics view"
            },
            "model": {
              "type": "string",
              "description": "Refers to the model powering the dashboard (either model or table is required)"
            },
            "database": {
              "type": "string",
              "description": "Refers to the database to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified"
            },
            "database_schema": {
              "type": "string",
              "description": "Refers to the schema to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified"
            },
            "table": {
              "type": "string",
              "description": "Refers to the table powering the dashboard, should be used instead of model for dashboards create from external OLAP tables (either table or model is required)"
            },
            "timeseries": {
              "type": "string",
              "description": "Refers to the timestamp column from your model that will underlie x-axis data in the line charts. If not specified, the line charts will not appear"
            },
            "watermark": {
              "type": "string",
              "description": "A SQL expression that tells us the max timestamp that the metrics are considered valid for. Usually does not need to be overwritten"
            },
            "smallest_time_grain": {
              "type": "string",
              "description": "Refers to the smallest time granularity the user is allowed to view. The valid values are: millisecond, second, minute, hour, day, week, month, quarter, year"
            },
            "first_day_of_week": {
              "type": "integer",
              "description": "Refers to the first day of the week for time grain aggregation (for example, Sunday instead of Monday). The valid values are 1 through 7 where Monday=1 and Sunday=7"
            },
            "first_month_of_year": {
              "type": "integer",
              "description": "Refers to the first month of the year for time grain aggregation. The valid values are 1 through 12 where January=1 and December=12"
            },
            "dimensions": {
              "type": "array",
              "description": "Relates to exploring segments or dimensions of your data and filtering the dashboard",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a stable identifier for the dimension"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "a display name for your dimension"
                  },
                  "description": {
                    "type": "string",
                    "description": "a freeform text description of the dimension"
                  },
                  "column": {
                    "type": "string",
                    "description": "a categorical column"
                  },
                  "expression": {
                    "type": "string",
                    "description": "a non-aggregate expression such as string_split(domain, '.'). One of column and expression is required but cannot have both at the same time"
                  },
                  "unnest": {
                    "type": "boolean",
                    "description": "if true, allows multi-valued dimension to be unnested (such as lists) and filters will automatically switch to \"contains\" instead of exact match "
                  },
                  "uri": {
                    "type": [
                      "string",
                      "boolean"
                    ],
                    "description": "enable if your dimension is a clickable URL to enable single click navigation (boolean or valid SQL expression) "
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "column"
                    ]
                  },
                  {
                    "required": [
                      "expression"
                    ]
                  }
                ]
              }
            },
            "measures": {
              "type": "array",
              "description": "Used to define the numeric aggregates of columns from your data model",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a stable identifier for the measure"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "the display name of your measure."
                  },
                  "description": {
                    "type": "string",
                    "description": "a freeform text description of the dimension"
                  },
                  "type": {
                    "type": "string"
                  },
                  "expression": {
                    "type": "string",
                    "description": "a combination of operators and functions for aggregations"
                  },
                  "window": {
                    "description": "A measure window can be defined as a keyword string (e.g., 'time' or 'all') or an object with detailed window configuration.",
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "time",
                          "true",
                          "all"
                        ],
                        "description": "Shorthand: 'time' or 'true' means time-partitioned, 'all' means non-partitioned."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "partition": {
                            "type": "boolean"
                          },
                          "order": {
                            "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties/definitions/field_selectors_properties",
                            "description": "to order the window"
                          },
                          "frame": {
                            "type": "string",
                            "description": "sets the frame of your window"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "per": {
                    "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties/definitions/field_selectors_properties",
                    "description": "for per dimensions"
                  },
                  "requires": {
                    "$ref": "#/definitions/metrics_view/definitions/metrics_view_properties/definitions/field_selectors_properties",
                    "description": "using an available measure or dimension in your metrics view to set a required parameter, cannot be used with simple measures"
                  },
                  "format_preset": {
                    "type": "string",
                    "description": "Controls the formatting of this measure using a predefined preset. Measures cannot have both `format_preset` and `format_d3`. If neither is supplied, the measure will be formatted using the `humanize` preset by default. Available options:\n- `humanize`: Round numbers into thousands (K), millions (M), billions (B), etc.\n- `none`: Raw output.\n- `currency_usd`: Round to 2 decimal points with a dollar sign ($).\n- `currency_eur`: Round to 2 decimal points with a euro sign (€).\n- `percentage`: Convert a rate into a percentage with a % sign.\n- `interval_ms`: Convert milliseconds into human-readable durations like hours (h), days (d), years (y), etc. (optional)"
                  },
                  "format_d3": {
                    "type": "string",
                    "description": "Controls the formatting of this measure using a [d3-format](https://d3js.org/d3-format) string. If an invalid format string is supplied, the measure will fall back to `format_preset: humanize`. A measure cannot have both `format_preset` and `format_d3`. If neither is provided, the humanize preset is used by default. Example: `format_d3: \".2f\"` formats using fixed-point notation with two decimal places. Example: `format_d3: \",.2r\"` formats using grouped thousands with two significant digits. (optional)"
                  },
                  "format_d3_locale": {
                    "type": "object",
                    "description": "locale configuration passed through to D3, enabling changing the currency symbol among other things. For details, see the docs for D3's [formatLocale](https://d3js.org/d3-format#formatLocale)",
                    "additionalProperties": true
                  },
                  "valid_percent_of_total": {
                    "type": "boolean",
                    "description": "a boolean indicating whether percent-of-total values should be rendered for this measure "
                  },
                  "treat_nulls_as": {
                    "type": "string",
                    "description": "used to configure what value to fill in for missing time buckets. This also works generally as COALESCING over non empty time buckets."
                  }
                }
              },
              "minItems": 1
            },
            "security": {
              "$ref": "#/definitions/security_policy_properties",
              "description": "Defines a security policy for the dashboard"
            }
          },
          "definitions": {
            "field_selectors_properties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Shorthand field selector, interpreted as the name."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "time_grain": {
                            "type": "string",
                            "description": "Time grain for time-based dimensions.",
                            "enum": [
                              "",
                              "ms",
                              "millisecond",
                              "s",
                              "second",
                              "min",
                              "minute",
                              "h",
                              "hour",
                              "d",
                              "day",
                              "w",
                              "week",
                              "month",
                              "q",
                              "quarter",
                              "y",
                              "year"
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "minItems": 1
                }
              ]
            }
          }
        }
      }
    },
    "model": {
      "type": "object",
      "title": "Model YAML",
      "description": "",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "model",
              "description": "Refers to the resource type and must be `model`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "$ref": "#/definitions/model/definitions/model_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/model/definitions/model_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/model/definitions/model_properties"
            }
          }
        },
        {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/model/definitions/athena"
            },
            {
              "$ref": "#/definitions/model/definitions/azure"
            },
            {
              "$ref": "#/definitions/model/definitions/bigquery"
            },
            {
              "$ref": "#/definitions/model/definitions/clickhouse"
            },
            {
              "$ref": "#/definitions/model/definitions/druid"
            },
            {
              "$ref": "#/definitions/model/definitions/duckdb"
            },
            {
              "$ref": "#/definitions/model/definitions/gcs"
            },
            {
              "$ref": "#/definitions/model/definitions/https"
            },
            {
              "$ref": "#/definitions/model/definitions/local_file"
            },
            {
              "$ref": "#/definitions/model/definitions/motherduck"
            },
            {
              "$ref": "#/definitions/model/definitions/mysql"
            },
            {
              "$ref": "#/definitions/model/definitions/pinot"
            },
            {
              "$ref": "#/definitions/model/definitions/postgres"
            },
            {
              "$ref": "#/definitions/model/definitions/redshift"
            },
            {
              "$ref": "#/definitions/model/definitions/s3"
            },
            {
              "$ref": "#/definitions/model/definitions/salesforce"
            },
            {
              "$ref": "#/definitions/model/definitions/snowflake"
            },
            {
              "$ref": "#/definitions/model/definitions/sqlite"
            }
          ]
        }
      ],
      "definitions": {
        "model_properties": {
          "type": "object",
          "properties": {
            "refresh": {
              "$ref": "#/definitions/schedule_properties",
              "description": "Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying model data "
            },
            "timeout": {
              "type": "string",
              "description": "The maximum time to wait for model ingestion"
            },
            "incremental": {
              "type": "boolean",
              "description": "whether incremental modeling is required (optional)"
            },
            "change_mode": {
              "type": "string",
              "enum": [
                "reset",
                "manual",
                "patch"
              ],
              "description": "Configure how changes to the model specifications are applied (optional). 'reset' will drop and recreate the model automatically, 'manual' will require a manual full or incremental refresh to apply changes, and 'patch' will switch to the new logic without re-processing historical data (only applies for incremental models)."
            },
            "state": {
              "$ref": "#/definitions/data_properties",
              "description": "Refers to the explicitly defined state of your model, cannot be used with partitions (optional)"
            },
            "partitions": {
              "$ref": "#/definitions/data_properties",
              "description": "Refers to the how your data is partitioned, cannot be used with state. (optional)"
            },
            "sql": {
              "type": "string",
              "description": "Raw SQL query to run against source"
            },
            "materialize": {
              "type": "boolean",
              "description": "models will be materialized in olap"
            },
            "partitions_watermark": {
              "type": "string",
              "description": "Refers to a customizable timestamp that can be set to check if an object has been updated (optional)."
            },
            "partitions_concurrency": {
              "type": "integer",
              "description": "Refers to the number of concurrent partitions that can be read at the same time (optional)."
            },
            "stage": {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "description": "Refers to the connector type for the staging table"
                }
              },
              "required": [
                "connector"
              ],
              "description": "in the case of staging models, where an input source does not support direct write to the output and a staging table is required",
              "additionalProperties": true
            },
            "output": {
              "type": "object",
              "description": "to define the properties of output",
              "properties": {
                "connector": {
                  "type": "string",
                  "description": "Refers to the connector type for the output table"
                }
              },
              "additionalProperties": true
            }
          }
        },
        "athena": {
          "type": "object",
          "title": "athena",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "athena"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/athena/definitions/athena_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/athena/definitions/athena_properties"
            }
          ],
          "definitions": {
            "athena_properties": {
              "type": "object",
              "properties": {
                "output_location": {
                  "type": "string",
                  "description": "Output location for query results in S3."
                },
                "workgroup": {
                  "type": "string",
                  "description": "AWS Athena workgroup to use for queries."
                },
                "region": {
                  "type": "string",
                  "description": "AWS region to connect to Athena and the output location."
                }
              }
            }
          }
        },
        "azure": {
          "type": "object",
          "title": "azure",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "azure"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/azure/definitions/azure_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/azure/definitions/azure_properties"
            }
          ],
          "definitions": {
            "azure_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the source"
                },
                "account": {
                  "type": "string",
                  "description": "Account identifier"
                },
                "uri": {
                  "type": "string",
                  "description": "Source URI"
                },
                "extract": {
                  "type": "object",
                  "description": "Arbitrary key-value pairs for extraction settings",
                  "additionalProperties": true
                },
                "glob": {
                  "type": "object",
                  "description": "Settings related to glob file matching.",
                  "properties": {
                    "max_total_size": {
                      "type": "integer",
                      "description": "Maximum total size (in bytes) matched by glob"
                    },
                    "max_objects_matched": {
                      "type": "integer",
                      "description": "Maximum number of objects matched by glob"
                    },
                    "max_objects_listed": {
                      "type": "integer",
                      "description": "Maximum number of objects listed in glob"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "Page size for glob listing"
                    }
                  }
                },
                "batch_size": {
                  "type": "string",
                  "description": "Size of a batch (e.g., '100MB')"
                }
              }
            }
          }
        },
        "bigquery": {
          "type": "object",
          "title": "bigquery",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "bigquery"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/bigquery/definitions/bigquery_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/bigquery/definitions/bigquery_properties"
            }
          ],
          "definitions": {
            "bigquery_properties": {
              "type": "object",
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "ID of the BigQuery project."
                }
              }
            }
          }
        },
        "clickhouse": {
          "type": "object",
          "title": "clickhouse",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "clickhouse"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/clickhouse/definitions/clickhouse_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/clickhouse/definitions/clickhouse_properties"
            }
          ],
          "definitions": {
            "clickhouse_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the data source."
                },
                "format": {
                  "type": "string",
                  "description": "Format of the data source (e.g., csv, json, parquet)."
                }
              }
            }
          }
        },
        "druid": {
          "type": "object",
          "title": "druid",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "druid"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/druid/definitions/druid_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/druid/definitions/druid_properties"
            }
          ],
          "definitions": {
            "druid_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "duckdb": {
          "type": "object",
          "title": "duckdb",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "duckdb"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/duckdb/definitions/duckdb_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/duckdb/definitions/duckdb_properties"
            }
          ],
          "definitions": {
            "duckdb_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the data source."
                },
                "format": {
                  "type": "string",
                  "description": "Format of the data source (e.g., csv, json, parquet)."
                },
                "pre_exec": {
                  "type": "string",
                  "description": "refers to a SQL queries to run before the main query, available for DuckDB based models"
                },
                "post_exec": {
                  "type": "string",
                  "description": "refers to a SQL query that is run after the main query, available for DuckDB based models"
                }
              }
            }
          }
        },
        "gcs": {
          "type": "object",
          "title": "gcs",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "gcs"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/gcs/definitions/gcs_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/gcs/definitions/gcs_properties"
            }
          ],
          "definitions": {
            "gcs_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the source"
                },
                "uri": {
                  "type": "string",
                  "description": "Source URI"
                },
                "extract": {
                  "type": "object",
                  "description": "key-value pairs for extraction settings",
                  "additionalProperties": true
                },
                "glob": {
                  "type": "object",
                  "description": "Settings related to glob file matching.",
                  "properties": {
                    "max_total_size": {
                      "type": "integer",
                      "description": "Maximum total size (in bytes) matched by glob"
                    },
                    "max_objects_matched": {
                      "type": "integer",
                      "description": "Maximum number of objects matched by glob"
                    },
                    "max_objects_listed": {
                      "type": "integer",
                      "description": "Maximum number of objects listed in glob"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "Page size for glob listing"
                    }
                  }
                },
                "batch_size": {
                  "type": "string",
                  "description": "Size of a batch (e.g., '100MB')"
                }
              }
            }
          }
        },
        "https": {
          "type": "object",
          "title": "https",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "https"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/https/definitions/https_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/https/definitions/https_properties"
            }
          ],
          "definitions": {
            "https_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "local_file": {
          "type": "object",
          "title": "local_file",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "local_file"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/local_file/definitions/local_file_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/local_file/definitions/local_file_properties"
            }
          ],
          "definitions": {
            "local_file_properties": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to the data source."
                },
                "format": {
                  "type": "string",
                  "description": "Format of the data source (e.g., csv, json, parquet)."
                }
              }
            }
          }
        },
        "motherduck": {
          "type": "object",
          "title": "motherduck",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "motherduck"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/motherduck/definitions/motherduck_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/motherduck/definitions/motherduck_properties"
            }
          ],
          "definitions": {
            "motherduck_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "mysql": {
          "type": "object",
          "title": "mysql",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "mysql"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/mysql/definitions/mysql_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/mysql/definitions/mysql_properties"
            }
          ],
          "definitions": {
            "mysql_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "pinot": {
          "type": "object",
          "title": "pinot",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "pinot"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/pinot/definitions/pinot_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/pinot/definitions/pinot_properties"
            }
          ],
          "definitions": {
            "pinot_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "postgres": {
          "type": "object",
          "title": "postgres",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "postgres"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/postgres/definitions/postgres_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/postgres/definitions/postgres_properties"
            }
          ],
          "definitions": {
            "postgres_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "redshift": {
          "type": "object",
          "title": "redshift",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "redshift"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/redshift/definitions/redshift_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/redshift/definitions/redshift_properties"
            }
          ],
          "definitions": {
            "redshift_properties": {
              "type": "object",
              "properties": {
                "output_location": {
                  "type": "string",
                  "description": "S3 location where query results are stored."
                },
                "workgroup": {
                  "type": "string",
                  "description": "Redshift Serverless workgroup to use."
                },
                "database": {
                  "type": "string",
                  "description": "Name of the Redshift database."
                },
                "cluster_identifier": {
                  "type": "string",
                  "description": "Identifier of the Redshift cluster."
                },
                "role_arn": {
                  "type": "string",
                  "description": "ARN of the IAM role to assume for Redshift access."
                },
                "region": {
                  "type": "string",
                  "description": "AWS region of the Redshift deployment."
                }
              }
            }
          }
        },
        "s3": {
          "type": "object",
          "title": "s3",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "s3"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/s3/definitions/s3_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/s3/definitions/s3_properties"
            }
          ],
          "definitions": {
            "s3_properties": {
              "type": "object",
              "properties": {
                "region": {
                  "type": "string",
                  "description": "AWS region"
                },
                "endpoint": {
                  "type": "string",
                  "description": "AWS Endpoint"
                },
                "path": {
                  "type": "string",
                  "description": "Path to the source"
                },
                "uri": {
                  "type": "string",
                  "description": "Source URI"
                },
                "extract": {
                  "type": "object",
                  "description": "key-value pairs for extraction settings",
                  "additionalProperties": true
                },
                "glob": {
                  "type": "object",
                  "description": "Settings related to glob file matching.",
                  "properties": {
                    "max_total_size": {
                      "type": "integer",
                      "description": "Maximum total size (in bytes) matched by glob"
                    },
                    "max_objects_matched": {
                      "type": "integer",
                      "description": "Maximum number of objects matched by glob"
                    },
                    "max_objects_listed": {
                      "type": "integer",
                      "description": "Maximum number of objects listed in glob"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "Page size for glob listing"
                    }
                  }
                },
                "batch_size": {
                  "type": "string",
                  "description": "Size of a batch (e.g., '100MB')"
                }
              }
            }
          }
        },
        "salesforce": {
          "type": "object",
          "title": "salesforce",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "salesforce"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/salesforce/definitions/salesforce_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/salesforce/definitions/salesforce_properties"
            }
          ],
          "definitions": {
            "salesforce_properties": {
              "type": "object",
              "properties": {
                "soql": {
                  "type": "string",
                  "description": "SOQL query to execute against the Salesforce instance."
                },
                "sobject": {
                  "type": "string",
                  "description": "Salesforce object (e.g., Account, Contact) targeted by the query."
                },
                "queryAll": {
                  "type": "boolean",
                  "description": "Whether to include deleted and archived records in the query (uses queryAll API)."
                }
              }
            }
          }
        },
        "snowflake": {
          "type": "object",
          "title": "snowflake",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "snowflake"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/snowflake/definitions/snowflake_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/snowflake/definitions/snowflake_properties"
            }
          ],
          "definitions": {
            "snowflake_properties": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "sqlite": {
          "type": "object",
          "title": "sqlite",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "connector": {
                  "type": "string",
                  "const": "sqlite"
                }
              },
              "required": [
                "connector"
              ]
            },
            {
              "$ref": "#/definitions/model/definitions/sqlite/definitions/sqlite_properties"
            },
            {
              "$ref": "#/definitions/connector/definitions/sqlite/definitions/sqlite_properties"
            }
          ],
          "definitions": {
            "sqlite_properties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "report": {
      "type": "object",
      "title": "Report YAML",
      "description": "",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "report",
              "description": "Refers to the resource type and must be `report`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/report/definitions/report_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/report/definitions/report_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/report/definitions/report_properties",
          "required": [
            "query",
            "notify",
            "export"
          ]
        }
      ],
      "definitions": {
        "report_properties": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "the display name of your report."
            },
            "refresh": {
              "$ref": "#/definitions/schedule_properties",
              "description": "Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying data"
            },
            "watermark": {
              "type": "string",
              "enum": [
                "trigger_time",
                "inherit"
              ],
              "description": "Specifies how the watermark is determined for incremental processing.\nUse 'trigger_time' to set it at runtime or 'inherit' to use the upstream model's watermark."
            },
            "intervals": {
              "type": "object",
              "description": "define the interval of the report to check",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "a valid ISO8601 duration to define the interval duration"
                },
                "limit": {
                  "type": "integer",
                  "description": "maximum number of intervals to check for on invocation",
                  "minimum": 0
                },
                "check_unclosed": {
                  "type": "boolean",
                  "description": "boolean, whether unclosed intervals should be checked"
                }
              }
            },
            "timeout": {
              "type": "string",
              "description": "define the timeout of the report in seconds (optional)."
            },
            "query": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "args": {
                  "type": "object",
                  "additionalProperties": true
                },
                "args_json": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": false,
              "required": [
                "name"
              ]
            },
            "export": {
              "type": "object",
              "description": "to define the export properties",
              "properties": {
                "format": {
                  "type": "string",
                  "enum": [
                    "csv",
                    "xlsx",
                    "parquet"
                  ],
                  "description": "Format for exported report: can be 'csv', 'xlsx', or 'parquet'."
                },
                "limit": {
                  "type": "integer"
                }
              },
              "additionalProperties": false,
              "required": [
                "format"
              ]
            },
            "notify": {
              "$ref": "#/definitions/notify_properties",
              "description": "Defines how and where to send notifications. At least one method (email or Slack) is required"
            },
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "theme": {
      "type": "object",
      "title": "Theme YAML",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "theme",
              "description": "Refers to the resource type and must be `theme`"
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/definitions/common_properties"
        },
        {
          "type": "object",
          "properties": {
            "dev": {
              "type": "object",
              "description": "Overrides properties in development",
              "$ref": "#/definitions/theme/definitions/theme_properties"
            },
            "prod": {
              "type": "object",
              "description": "Overrides properties in production",
              "$ref": "#/definitions/theme/definitions/theme_properties"
            }
          }
        },
        {
          "$ref": "#/definitions/theme/definitions/theme_properties",
          "required": [
            "colors"
          ]
        }
      ],
      "definitions": {
        "theme_properties": {
          "type": "object",
          "properties": {
            "colors": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "primary": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "primary"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "secondary": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "secondary"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "common_properties": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is usually inferred from the filename, but can be specified manually."
        },
        "refs": {
          "type": "array",
          "items": {
                "type": "string",
                "description": "A string reference like `<resource-name>` or `<type/resource-name>`."
          },
          "description": "List of resource references, each as a string or map."
        }
      }
    },
    "component_variable_properties": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "description": "The value can be of any type.",
          "type": [
            "string",
            "number",
            "boolean",
            "object",
            "array",
            "null"
          ]
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false
    },
    "data_properties": {
      "oneOf": [
        {
          "title": "sql",
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "Raw SQL query to run against existing models in the project."
            },
            "connector": {
              "type": "string",
              "description": "specifies the connector to use when running SQL or glob queries."
            }
          },
          "required": [
            "sql"
          ]
        },
        {
          "title": "metrics_sql",
          "type": "object",
          "properties": {
            "metrics_sql": {
              "type": "string",
              "description": "SQL query that targets a metrics view in the project"
            }
          },
          "required": [
            "metrics_sql"
          ]
        },
        {
          "title": "api",
          "type": "object",
          "properties": {
            "api": {
              "type": "string",
              "description": "Name of a custom API defined in the project."
            },
            "args": {
              "type": "object",
              "description": "Arguments to pass to the custom API.",
              "additionalProperties": true
            }
          },
          "required": [
            "api"
          ]
        },
        {
          "title": "glob",
          "type": "object",
          "properties": {
            "glob": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": true
                }
              ],
              "description": "Defines the file path or pattern to query from the specified connector."
            },
            "connector": {
              "type": "string",
              "description": "Specifies the connector to use with the glob input."
            }
          },
          "required": [
            "glob"
          ]
        },
        {
          "title": "resource_status",
          "type": "object",
          "properties": {
            "resource_status": {
              "type": "object",
              "description": "Based on resource status",
              "properties": {
                "where_error": {
                  "type": "boolean",
                  "description": "Indicates whether the condition should trigger when the resource is in an error state."
                }
              },
              "additionalProperties": true
            }
          },
          "required": [
            "resource_status"
          ]
        }
      ]
    },
    "explore_time_range_properties": {
      "oneOf": [
        {
          "type": "string",
          "description": "a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) duration or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions) extensions for the selection"
        },
        {
          "type": "object",
          "properties": {
            "range": {
              "type": "string",
              "description": "a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) duration or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions) extensions for the selection"
            },
            "comparison_offsets": {
              "type": "array",
              "description": "list of time comparison options for this time range selection (optional). Must be one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions)",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Offset string only (range is inferred)"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "offset": {
                        "type": "string"
                      },
                      "range": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "required": [
            "range"
          ],
          "additionalProperties": false
        }
      ]
    },
    "notify_properties": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "object",
              "description": "Send notifications via email.",
              "properties": {
                "recipients": {
                  "type": "array",
                  "description": "An array of email addresses to notify.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "required": [
                "recipients"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "email"
          ]
        },
        {
          "type": "object",
          "properties": {
            "slack": {
              "type": "object",
              "description": "Send notifications via Slack.",
              "properties": {
                "users": {
                  "type": "array",
                  "description": "An array of Slack user IDs to notify.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                },
                "channels": {
                  "type": "array",
                  "description": "An array of Slack channel IDs to notify.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                },
                "webhooks": {
                  "type": "array",
                  "description": "An array of Slack webhook URLs to send notifications to.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              },
              "anyOf": [
                {
                  "required": [
                    "users"
                  ]
                },
                {
                  "required": [
                    "channels"
                  ]
                },
                {
                  "required": [
                    "webhooks"
                  ]
                }
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "slack"
          ]
        }
      ]
    },
    "schedule_properties": {
      "type": "object",
      "properties": {
        "cron": {
          "type": "string",
          "description": "A cron expression that defines the execution schedule"
        },
        "time_zone": {
          "type": "string",
          "description": "Time zone to interpret the schedule in (e.g., 'UTC', 'America/Los_Angeles')."
        },
        "disable": {
          "type": "boolean",
          "description": "If true, disables the resource without deleting it."
        },
        "ref_update": {
          "type": "boolean",
          "description": "If true, allows the resource to run when a dependency updates."
        },
        "run_in_dev": {
          "type": "boolean",
          "description": "If true, allows the schedule to run in development mode."
        }
      }
    },
    "security_policy_properties": {
      "type": "object",
      "properties": {
        "access": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "description": "Expression indicating if the user should be granted access to the dashboard. If not defined, it will resolve to false and the dashboard won't be accessible to anyone. Needs to be a valid SQL expression that evaluates to a boolean."
        },
        "row_filter": {
          "type": "string",
          "description": "SQL expression to filter the underlying model by. Can leverage templated user attributes to customize the filter for the requesting user. Needs to be a valid SQL expression that can be injected into a WHERE clause"
        },
        "include": {
          "type": "array",
          "description": "List of dimension or measure names to include in the dashboard. If include is defined all other dimensions and measures are excluded",
          "items": {
            "type": "object",
            "properties": {
              "if": {
                "type": "string",
                "description": "Expression to decide if the column should be included or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean"
              },
              "names": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "enum": [
                      "*"
                    ]
                  }
                ],
                "description": "List of fields to include. Should match the name of one of the dashboard's dimensions or measures"
              }
            },
            "required": [
              "if",
              "names"
            ]
          }
        },
        "exclude": {
          "type": "array",
          "description": "List of dimension or measure names to exclude from the dashboard. If exclude is defined all other dimensions and measures are included",
          "items": {
            "type": "object",
            "properties": {
              "if": {
                "type": "string",
                "description": "Expression to decide if the column should be excluded or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean"
              },
              "names": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "enum": [
                      "*"
                    ]
                  }
                ],
                "description": "List of fields to exclude. Should match the name of one of the dashboard's dimensions or measures"
              }
            },
            "required": [
              "if",
              "names"
            ]
          }
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "access",
                  "field_access",
                  "row_filter"
                ]
              },
              "action": {
                "type": "string",
                "enum": [
                  "allow",
                  "deny"
                ]
              },
              "if": {
                "type": "string"
              },
              "names": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "all": {
                "type": "boolean"
              },
              "sql": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          }
        }
      }
    }
  }
}