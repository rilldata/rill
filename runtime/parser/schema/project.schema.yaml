$schema: 'http://json-schema.org/draft-07/schema#'
$id: project.schema.yaml
title: YAML Syntax
type: object
description: |
  When you create models and dashboards, these objects are represented as object files on the file system. You can find these files in your `models` and `dashboards` folders in your project by default. 

  :::info Working with resources outside their native folders

  It is possible to define resources (such as [models](models.md), [metrics-views](metrics-views.md), [dashboards](explore-dashboards.md), [custom APIs](apis.md), or [themes](themes.md)) within <u>any</u> nested folder within your Rill project directory. However, for any YAML configuration file, it is then imperative that the `type` property is then appropriately defined within the underlying resource configuration or Rill will not able to resolve the resource type correctly!

  :::

  Projects can simply be rehydrated from Rill project files into an explorable data application as long as there is sufficient access and credentials to the source data - figuring out the dependencies, pulling down data, & validating your model queries and metrics configurations. The result is a set of functioning exploratory dashboards.

  You can see a few different example projects by visiting our [example github repository](https://github.com/rilldata/rill-examples).

  :::tip

  For more information about using Git or cloning projects locally, please see our page on [GitHub Basics](/deploy/deploy-dashboard/github-101).

  :::
oneOf:
  - $ref: '#/definitions/connectors'
  - $ref: '#/definitions/sources'
  - $ref: '#/definitions/models'
  - $ref: '#/definitions/metrics-views'
  - $ref: '#/definitions/canvas-dashboards'
  - $ref: '#/definitions/explore-dashboards'
  - $ref: '#/definitions/alerts'
  - $ref: '#/definitions/apis'
  - $ref: '#/definitions/themes'
  - $ref: '#/definitions/components'
  # - $ref: '#/definitions/rillyaml' separated due to parsing YAML issues

definitions:
  # Connector YAML
  connectors:
    title: Connector YAML
    id: connectors
    type: object
    description: |
      Connector YAML files define how Rill connects to external data sources and OLAP engines. Each connector specifies a driver type and its required connection parameters.

      ## Available Connector Types

      ### _OLAP Engines_
      - [**ClickHouse**](#clickhouse) - ClickHouse analytical database
      - [**Druid**](#druid) - Apache Druid
      - [**DuckDB**](#duckdb) - Embedded DuckDB engine (default)
      - [**MotherDuck**](#motherduck) - MotherDuck cloud database
      - [**Pinot**](#pinot) - Apache Pinot

      ### _Data Warehouses_
      - [**Athena**](#athena) - Amazon Athena
      - [**BigQuery**](#bigquery) - Google BigQuery
      - [**Redshift**](#redshift) - Amazon Redshift
      - [**Snowflake**](#snowflake) - Snowflake data warehouse

      ### _Databases_
      - [**MySQL**](#mysql) - MySQL databases
      - [**PostgreSQL**](#postgres) - PostgreSQL databases
      - [**SQLite**](#sqlite) - SQLite databases

      ### _Cloud Storage_
      - [**Azure**](#azure) - Azure Blob Storage
      - [**GCS**](#gcs) - Google Cloud Storage
      - [**S3**](#s3) - Amazon S3 storage

      ### _Other_
      - [**HTTPS**](#https) - Public files via HTTP/HTTPS
      - [**OpenAPI**](#openapi) - OpenAPI data
      - [**Salesforce**](#salesforce) - Salesforce data
      - [**Slack**](#slack) - Slack data

      :::warning Security Recommendation
      For all credential parameters (passwords, tokens, keys), use environment variables with the syntax `{{.env.connector.<connector_driver>.<parameter_name>}}`. This keeps sensitive data out of your YAML files and version control. See our [credentials documentation](/connect/credentials/) for complete setup instructions.
      :::
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: connector
            description: Refers to the resource type and must be `connector`
        required:
          - type


      - $ref: '#/definitions/common_properties'
        # Connector definitions
      - oneOf:
        - type: object
          title: Athena
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `athena`
              const: athena
            aws_access_key_id:
              type: string
              description: AWS Access Key ID used for authentication. Required when using static credentials directly or as base credentials for assuming a role.
            aws_secret_access_key:
              type: string
              description: AWS Secret Access Key paired with the Access Key ID. Required when using static credentials directly or as base credentials for assuming a role.
            aws_access_token:
              type: string
              description: AWS session token used with temporary credentials. Required only if the Access Key and Secret Key are part of a temporary session credentials.
            role_arn:
              type: string
              description: ARN of the IAM role to assume. When specified, the SDK uses the base credentials to call STS AssumeRole and obtain temporary credentials scoped to this role.
            role_session_name:
              type: string
              description: Session name to associate with the STS AssumeRole session. Used only if 'role_arn' is specified. Useful for identifying and auditing the session.
            external_id:
              type: string
              description: External ID required by some roles when assuming them, typically for cross-account access. Used only if 'role_arn' is specified and the role's trust policy requires it.
            workgroup:
              type: string
              description: Athena workgroup to use for query execution. Defaults to 'primary' if not specified.
            output_location:
              type: string
              description: S3 URI where Athena query results should be stored (e.g., s3://your-bucket/athena/results/). Optional if the selected workgroup has a default result configuration.
            aws_region:
              type: string
              description: AWS region where Athena and the result S3 bucket are located (e.g., us-east-1). Defaults to 'us-east-1' if not specified.
            allow_host_access:
              type: boolean
              description: Allow the Athena client to access host environment configurations such as environment variables or local AWS credential files. Defaults to true, enabling use of credentials and settings from the host environment unless explicitly disabled.
          examples:
            - # Example: Athena connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: athena                                   # Must be `athena` _(required)_

              aws_access_key_id: "myawsaccesskey"              # AWS Access Key ID for authentication  
              aws_secret_access_key: "myawssecretkey"          # AWS Secret Access Key for authentication  
              aws_access_token: "mytemporarytoken"             # AWS session token for temporary credentials  
              role_arn: "arn:aws:iam::123456789012:role/MyRole" # ARN of the IAM role to assume  
              role_session_name: "MySession"                   # Session name for STS AssumeRole  
              external_id: "MyExternalID"                      # External ID for cross-account access  
              workgroup: "primary"                             # Athena workgroup (defaults to 'primary')  
              output_location: "s3://my-bucket/athena-output/" # S3 URI for query results  
              aws_region: "us-east-1"                          # AWS region (defaults to 'us-east-1')  
              allow_host_access: true                          # Allow host environment access _(default: true)_
            
          required:
            - driver
        - type: object
          title: Azure
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `azure`
              const: azure
            azure_storage_account:
              type: string
              description: Azure storage account name
            azure_storage_key:
              type: string
              description: Azure storage access key
            azure_storage_bucket:
              type: string
              description: Name of the Azure Blob Storage container (equivalent to an S3 bucket)
            azure_storage_sas_token:
              type: string
              description: Optional azure SAS token for authentication
            azure_storage_connection_string:
              type: string
              description: Optional azure connection string for storage account
            allow_host_access:
              type: boolean
              description: Allow access to host environment configuration
          examples:
            - # Example: Azure connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: azure                                    # Must be `azure` _(required)_

              azure_storage_account: "mystorageaccount"        # Azure storage account name  
              azure_storage_key: "credentialjsonstring"        # Azure storage access key  
              azure_storage_sas_token: "optionaltoken"         # Optional SAS token for authentication  
              azure_storage_connection_string: "optionalconnectionstring" # Optional connection string  
              azure_storage_bucket: "mycontainer"              # Azure Blob Storage container name _(required)_  
              allow_host_access: true                          # Allow host environment access
          required:
            - driver
            - azure_storage_bucket
        - type: object
          title: BigQuery
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `bigquery`
              const: bigquery
            google_application_credentials:
              type: string
              description: Raw contents of the Google Cloud service account key (in JSON format) used for authentication.
            project_id:
              type: string
              description: Google Cloud project ID
            dataset_id:
              type: string
              description: BigQuery dataset ID
            location:
              type: string
              description: BigQuery dataset location
            allow_host_access:
              type: boolean
              description: Enable the BigQuery client to use credentials from the host environment when no service account JSON is provided. This includes Application Default Credentials from environment variables, local credential files, or the Google Compute Engine metadata server. Defaults to true, allowing seamless authentication in GCP environments.
          examples:
            - # Example: BigQuery connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: bigquery                                 # Must be `bigquery` _(required)_

              google_application_credentials: "credentialjsonstring"     # Google Cloud service account JSON  
              project_id: "my-project-id"                      # Google Cloud project ID  
              allow_host_access: true                          # Allow host environment access _(default: true)_
          required:
            - driver
        - type: object
          title: ClickHouse
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `clickhouse`
              const: clickhouse
            managed:
              type: boolean
              description: '`true` means Rill will provision the connector using the default provisioner. `false` disables automatic provisioning.'
            mode:
              type: string
              description: "`read` - Controls the operation mode for the ClickHouse connection. Defaults to 'read' for safe operation with external databases. Set to 'readwrite' to enable model creation and table mutations. Note: When 'managed: true', this is automatically set to 'readwrite'."
            dsn:
              type: string
              description: DSN(Data Source Name) for the ClickHouse connection
            username:
              type: string
              description: Username for authentication
            password:
              type: string
              description: Password for authentication
            host:
              type: string
              description: Host where the ClickHouse instance is running
            port:
              type: integer
              description: Port where the ClickHouse instance is accessible
            database:
              type: string
              description: Name of the ClickHouse database within the cluster
            ssl:
              type: boolean
              description: Indicates whether a secured SSL connection is required
            cluster:
              type: string
              description: Cluster name, required for running distributed queries
            log_queries:
              type: boolean
              description: Controls whether to log raw SQL queries
            query_settings_override:
              type: string
              description: "override the default settings used in queries. Changing the default settings can lead to incorrect query results and is generally not recommended. If you need to add settings, use `query_settings`"
            query_settings:
              type: string
              description: "query settings to be set on dashboard queries. `query_settings_override` takes precedence over these settings and if set these are ignored. Each setting must be separated by a comma. Example `max_threads = 8, max_memory_usage = 10000000000`"
            embed_port:
              type: integer
              description: Port to run ClickHouse locally (0 for random port)
            can_scale_to_zero:
              type: boolean
              description: Indicates if the database can scale to zero
            max_open_conns:
              type: integer
              description: Maximum number of open connections to the database
            max_idle_conns:
              type: integer
              description: Maximum number of idle connections in the pool
            dial_timeout:
              type: string
              description: Timeout for dialing the ClickHouse server
            conn_max_lifetime:
              type: string
              description: Maximum time a connection may be reused
            read_timeout:
              type: string
              description: Maximum time for a connection to read data
          examples:
            - # Example: ClickHouse connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: clickhouse                               # Must be `clickhouse` _(required)_

              managed: false                                    # Provision the connector using the default provisioner  
              mode: "readwrite"                                # Enable model creation and table mutations  
              username: "myusername"                          # Username for authentication  
              password: "mypassword"                          # Password for authentication  
              host: "localhost"                              # Hostname of the ClickHouse server  
              port: 9000                                     # Port number of the ClickHouse server  
              database: "mydatabase"                         # Name of the ClickHouse database  
              ssl: true                                      # Enable SSL for secure connection  
              cluster: "mycluster"                           # Cluster name  
          required:
            - driver
        - type: object
          title: Druid
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `druid`
              const: druid
            dsn:
              type: string
              description: Data Source Name (DSN) for connecting to Druid
            username:
              type: string
              description: Username for authenticating with Druid
            password:
              type: string
              description: Password for authenticating with Druid
            host:
              type: string
              description: Hostname of the Druid coordinator or broker
            port:
              type: integer
              description: Port number of the Druid service
            ssl:
              type: boolean
              description: Enable SSL for secure connection
            log_queries:
              type: boolean
              description: Log raw SQL queries sent to Druid
            max_open_conns:
              type: integer
              description: Maximum number of open database connections (0 = default, -1 = unlimited)
            skip_version_check:
              type: boolean
              description: Skip checking Druid version compatibility
          examples:
            - # Example: Druid connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: druid                                    # Must be `druid` _(required)_

              username: "myusername"                          # Username for authentication  
              password: "mypassword"                          # Password for authentication  
              host: "localhost"                              # Hostname of the Druid coordinator or broker  
              port: 8082                                     # Port number of the Druid service  
              ssl: true                                      # Enable SSL for secure connection  

          required:
            - driver
            - dsn
        - type: object
          title: DuckDB
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `duckdb`
              const: duckdb
            pool_size:
              type: integer
              description: Number of concurrent connections and queries allowed
            allow_host_access:
              type: boolean
              description: Whether access to the local environment and file system is allowed
            cpu:
              type: integer
              description: Number of CPU cores available to the database
            memory_limit_gb:
              type: integer
              description: Amount of memory in GB available to the database
            read_write_ratio:
              type: number
              description: Ratio of resources allocated to the read database; used to divide CPU and memory
            init_sql:
              type: string
              description: is executed during database initialization.
            secrets:
              type: string
              description: Comma-separated list of other connector names to create temporary secrets for in DuckDB before executing a model.
            log_queries:
              type: boolean
              description: Whether to log raw SQL queries executed through OLAP
          examples:
            - # Example: DuckDB connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: duckdb                                   # Must be `duckdb` _(required)_

              allow_host_access: true                          # Whether access to the local environment and file system is allowed  
              cpu: 4                                          # Number of CPU cores available to the database  
              memory_limit_gb: 16                              # Amount of memory in GB available to the database

          required:
            - driver
        - type: object
          title: GCS
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `gcs`
              const: gcs
            google_application_credentials:
              type: string
              description: Google Cloud credentials JSON string
            bucket:
              type: string
              description: Name of gcs bucket
            allow_host_access:
              type: boolean
              description: Allow access to host environment configuration
            key_id:
              type: string
              description: Optional S3-compatible Key ID when used in compatibility mode
            secret:
              type: string
              description: Optional S3-compatible Secret when used in compatibility mode
          examples:
            - # Example: GCS connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: gcs                                      # Must be `gcs` _(required)_

              google_application_credentials: "credentialjsonstring"     # Google Cloud credentials JSON string  
              bucket: "my-gcs-bucket"                            # Name of gcs bucket  
          required:
            - driver
            - bucket
        - type: object
          title: HTTPS
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `https`
              const: https
            path:
              type: string
              description: The full HTTPS URI to fetch data from
            headers:
              type: object
              description: HTTP headers to include in the request
              additionalProperties:
                type: string
          examples:
            - # Example: HTTPS connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: https                                    # Must be `https` _(required)_

              path: "https://api.example.com/data.csv"         # The full HTTPS URI to fetch data from  
              headers:
                "Authorization": "Bearer my-token"            # HTTP headers to include in the request
          required:
            - driver
            - path
        - type: object
          title: MotherDuck
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `motherduck`
              const: duckdb
            path:
              type: string
              description: Path to your MD database
            schema_name: 
              type: string
              description: Define your schema if not main, uses main by default
            token:
              type: string
              description: MotherDuck token
            init_sql:
              type: string
              description: SQL executed during database initialization.
          examples:
            - # Example: MotherDuck connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: motherduck                               # Must be `motherduck` _(required)_
              token: '{{ .env.connector.motherduck.token }}'    # Set the MotherDuck token from your .env file _(required)_
              path: "md:my_database"                           # Path to your MD database  
              schema_name: "my_schema"                        # Define your schema if not main, uses main by default  
          required:
            - driver
            - path
            - token
        - type: object
          title: MySQL
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `mysql`
            dsn:
              type: string
              description: DSN(Data Source Name) for the mysql connection 
            host:
              type: string
              description: Hostname of the MySQL server
            port:
              type: integer
              description: Port number for the MySQL server
            database:
              type: string
              description: Name of the MySQL database
            user:
              type: string
              description: Username for authentication
            password:
              type: string
              description: Password for authentication
            ssl_mode:
              type: string
              description: SSL mode can be DISABLED, PREFERRED or REQUIRED        
          examples:
            - # Example: MySQL connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: mysql                                    # Must be `mysql` _(required)_

              host: "localhost"                              # Hostname of the MySQL server  
              port: 3306                                     # Port number for the MySQL server  
              database: "mydatabase"                         # Name of the MySQL database  
              user: "myusername"                             # Username for authentication  
              password: "mypassword"                         # Password for authentication  
              ssl_mode: "DISABLED"                           # SSL mode can be DISABLED, PREFERRED or REQUIRED
          required:
            - driver
        - type: object
          title: OpenAPI
          properties:
            driver:
              type: string
              description: The driver type, must be set to "openapi"
            api_key:
              type: string
              description: API key for connecting to OpenAI
            model:
              type: string
              description: The OpenAI model to use (e.g., 'gpt-4o')
            base_url:
              type: string
              description: The base URL for the OpenAI API (e.g., 'https://api.openai.com/v1')
            api_type:
              type: string
              description: The type of OpenAI API to use
            api_version:
              type: string
              description: The version of the OpenAI API to use (e.g., '2023-05-15'). Required when API Type is AZURE or AZURE_AD
          examples:
            - # Example: OpenAPI connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: openapi                                  # Must be `openapi` _(required)_

              api_key: "my-api-key"                            # API key for connecting to OpenAI  
              model: "gpt-4o"                                  # The OpenAI model to use (e.g., 'gpt-4o')  
              base_url: "https://api.openai.com/v1"            # The base URL for the OpenAI API (e.g., 'https://api.openai.com/v1')  
              api_type: "openai"                               # The type of OpenAI API to use  
              api_version: "2023-05-15"                        # The version of the OpenAI API to use (e.g., '2023-05-15'). Required when API Type is AZURE or AZURE_AD  
            
          required: 
            - api_key
      
        - type: object
          title: Pinot
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `pinot`
            dsn:
              type: string
              description: DSN(Data Source Name) for the Pinot connection
            username:
              type: string
              description: Username for authenticating with Pinot
            password:
              type: string
              description: Password for authenticating with Pinot
            broker_host:
              type: string
              description: Hostname of the Pinot broker
            broker_port:
              type: integer
              description: Port number for the Pinot broker
            controller_host:
              type: string
              description: Hostname of the Pinot controller
            controller_port:
              type: integer
              description: Port number for the Pinot controller
            ssl:
              type: boolean
              description: Enable SSL connection to Pinot
            log_queries:
              type: boolean
              description: Log raw SQL queries executed through Pinot
            max_open_conns:
              type: integer
              description: Maximum number of open connections to the Pinot database
          examples:
            - # Example: Pinot connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: pinot                                    # Must be `pinot` _(required)_

              username: "myusername"                          # Username for authentication  
              password: "mypassword"                          # Password for authentication  
              broker_host: "localhost"                        # Hostname of the Pinot broker  
              broker_port: 9000                               # Port number for the Pinot broker  
              controller_host: "localhost"                    # Hostname of the Pinot controller  
              controller_port: 9000                           # Port number for the Pinot controller  
              ssl: true                                      # Enable SSL connection to Pinot  
              log_queries: true                               # Log raw SQL queries executed through Pinot  
              max_open_conns: 100                             # Maximum number of open connections to the Pinot database
          required:
            - driver
            - dsn
            - broker_host
            - controller_host
        - type: object
          title: Postgres
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `postgres`
            dsn:
              type: string
              description: DSN(Data Source Name) for the postgres connection
            host:
              type: string
              description: Hostname of the Postgres server
            port:
              type: string
              description: Port number for the Postgres server
            dbname:
              type: string
              description: Name of the Postgres database
            user:
              type: string
              description: Username for authentication
            password:
              type: string
              description: Password for authentication
            sslmode:
              type: string
              description: SSL mode can be disable, allow, prefer or require
          examples:
            - # Example: Postgres connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: postgres                                 # Must be `postgres` _(required)_

              host: "localhost"                              # Hostname of the Postgres server  
              port: 5432                                     # Port number for the Postgres server  
              dbname: "mydatabase"                           # Name of the Postgres database  
              user: "myusername"                             # Username for authentication  
              password: "mypassword"                         # Password for authentication  
              sslmode: "disable"                             # SSL mode can be disable, allow, prefer or require
          required:
            - driver
        - type: object
          title: Redshift
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `redshift`
            aws_access_key_id:
              type: string
              description: AWS Access Key ID used for authenticating with Redshift.
            aws_secret_access_key:
              type: string
              description: AWS Secret Access Key used for authenticating with Redshift.
            aws_access_token:
              type: string
              description: AWS Session Token for temporary credentials (optional).
            region:
              type: string
              description: AWS region where the Redshift cluster or workgroup is hosted (e.g., 'us-east-1').
            database:
              type: string
              description: Name of the Redshift database to query.
            workgroup:
              type: string
              description: Workgroup name for Redshift Serverless, in case of provisioned Redshift clusters use 'cluster_identifier'.
            cluster_identifier:
              type: string
              description: Cluster identifier for provisioned Redshift clusters, in case of Redshift Serverless use 'workgroup' .
          examples:
            - # Example: Redshift connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: redshift                                 # Must be `redshift` _(required)_

              aws_access_key_id: "my-access-key-id"            # AWS Access Key ID used for authenticating with Redshift.  
              aws_secret_access_key: "my-secret-access-key"    # AWS Secret Access Key used for authenticating with Redshift.  
              aws_access_token: "my-access-token"              # AWS Session Token for temporary credentials (optional).  
              region: "us-east-1"                              # AWS region where the Redshift cluster or workgroup is hosted (e.g., 'us-east-1').  
              database: "mydatabase"                           # Name of the Redshift database to query.  
              workgroup: "my-workgroup"                       # Workgroup name for Redshift Serverless, in case of provisioned Redshift clusters use 'cluster_identifier'.  
              cluster_identifier: "my-cluster-identifier"      # Cluster identifier for provisioned Redshift clusters, in case of Redshift Serverless use 'workgroup' .
          required:
            - driver
            - aws_access_key_id
            - aws_secret_access_key
            - database
        - type: object
          title: S3
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `s3`
            aws_access_key_id:
              type: string
              description: AWS Access Key ID used for authentication
            aws_secret_access_key:
              type: string
              description: AWS Secret Access Key used for authentication
            aws_access_token:
              type: string
              description: Optional AWS session token for temporary credentials
            bucket:
              type: string
              description: Name of s3 bucket 
            endpoint:
              type: string
              description: Optional custom endpoint URL for S3-compatible storage
            region:
              type: string
              description: AWS region of the S3 bucket
            allow_host_access:
              type: boolean
              description: Allow access to host environment configuration
            retain_files:
              type: boolean
              description: Whether to retain intermediate files after processing
          examples:
            - # Example: S3 connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: s3                                       # Must be `s3` _(required)_

              aws_access_key_id: "my-access-key-id"            # AWS Access Key ID used for authentication  
              aws_secret_access_key: "my-secret-access-key"    # AWS Secret Access Key used for authentication  
              aws_access_token: "my-access-token"              # Optional AWS session token for temporary credentials  
              bucket: "my-s3-bucket"                           # Name of s3 bucket  
              endpoint: "https://my-s3-endpoint.com"           # Optional custom endpoint URL for S3-compatible storage  
              region: "us-east-1"                              # AWS region of the S3 bucket  
            
          required:
            - driver
            - bucket
        - type: object
          title: Salesforce
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `salesforce`
            username:
              type: string
              description: Salesforce account username
            password:
              type: string
              description: Salesforce account password (secret)
            key:
              type: string
              description: Authentication key for Salesforce (secret)
            endpoint:
              type: string
              description: Salesforce API endpoint URL
            client_id:
              type: string
              description: Client ID used for Salesforce OAuth authentication
          examples:
            - # Example: Salesforce connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: salesforce                               # Must be `salesforce` _(required)_

              username: "myusername"                          # Salesforce account username  
              password: "mypassword"                          # Salesforce account password (secret)  
              endpoint: "https://login.salesforce.com"        # Salesforce API endpoint URL  
              client_id: "my-client-id"                       # Client ID used for Salesforce OAuth authentication
          required: 
            - driver
            - username
            - endpoint
            - client_id
        - type: object
          title: Slack
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `slack`
            bot_token:
              type: string
              description: Bot token used for authenticating Slack API requests
          examples:
            - # Example: Slack connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: slack                                    # Must be `slack` _(required)_

              bot_token: "xoxb-my-bot-token"                  # Bot token used for authenticating Slack API requests
          required:
            - driver
            - bot_token
        - type: object
          title: Snowflake
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `snowflake`
              const: snowflake
            account:
              type: string
              description: Snowflake account identifier. To find your Snowflake account identifier, look at your Snowflake account URL. The account identifier is everything before .snowflakecomputing.com
            user:
              type: string
              description: Username for the Snowflake connection.
            password:
              type: string
              description: Password for the Snowflake connection. _(deprecated, use privateKey instead)_
            privateKey:
              type: string
              description: |
                Private key for JWT authentication.
                :::tip
                Private key must be generated as a **PKCS#8 (nocrypt) key**, since the Snowflake Go driver
                only supports unencrypted private keys. After generating, it must be **base64 URL encoded**.

                Example commands to generate and encode:

                ```bash
                # Generate a 2048-bit unencrypted PKCS#8 private key
                openssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8 -nocrypt

                # Convert URL safe format for Snowflake
                cat rsa_key.p8 | grep -v "\----" | tr -d '\n' | tr '+/' '-_'
                ```
                See: https://docs.snowflake.com/en/user-guide/key-pair-auth
                :::
            authenticator:
              type: string
              description: Optional authenticator type (e.g., SNOWFLAKE_JWT).
            database:
              type: string
              description: Name of the Snowflake database.
            schema:
              type: string
              description: Schema within the database to use.
            warehouse:
              type: string
              description: Compute warehouse to use for queries.
            role:
              type: string
              description: Snowflake role to use.
            dsn:
              type: string
              description: |
                DSN (Data Source Name) for the Snowflake connection.

                This is intended for **advanced configuration** where you want to specify
                properties that are not explicitly defined above.  
                It can only be used when the other connection fields (account, user, password,
                database, schema, warehouse, role, authenticator, privateKey) are **not used**.

                For details on private key generation and encoding, see the `privateKey` property.
            parallel_fetch_limit:
              type: integer
              description: Maximum number of concurrent fetches during query execution.
          examples:
          - # Example: Snowflake connector basic configuration
              type: connector  
              driver: snowflake

              account: my_account_identifier
              user: my_user
              privateKey: '{{ .env.SNOWFLAKE_PRIVATE_KEY }}' # define SNOWFLAKE_PRIVATE_KEY in .env file
              database: my_db
              schema: my_schema
              warehouse: my_wh
              role: my_role
              parallel_fetch_limit: 2
          - # Example: Snowflake connector advance configuration
              type: connector
              driver: snowflake
              
              dsn: '{{ .env.SNOWFLAKE_DSN }}' # define SNOWFLAKE_DSN in .env file like SNOWFLAKE_DSN='my_username@my_account/my_db/my_schema?warehouse=my_wh&role=my_role&authenticator=SNOWFLAKE_JWT&privateKey=my_private_key'
              parallel_fetch_limit: 2
          required:
          - type
          - driver
        - type: object
          title: SQLite
          properties:
            driver:
              type: string
              description: Refers to the driver type and must be driver `sqlite`
            dsn:
              type: string
              description: DSN(Data Source Name) for the sqlite connection
          examples:
            - # Example: SQLite connector configuration
              type: connector                                  # Must be `connector` (required)
              driver: sqlite                                   # Must be `sqlite` _(required)_

              dsn: "file:mydatabase.db"                        # DSN for the sqlite connection
          required:
            - driver
            - dsn

    
  # Source YAML
  sources:
    title: Source YAML
    type: object
    id: sources
    description: |
      :::warning Deprecated Feature
      **Sources have been deprecated** and are now considered "source models." While sources remain backward compatible, we recommend migrating to the new source model format for access to the latest features and improvements.

      **Next steps:**
      - Continue using sources if needed (backward compatible)
      - Migrate to source models via the `type:model` parameter for existing projects
      - See our [model YAML reference](models) for current documentation and best practices
      :::
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: connector
            description: Refers to the resource type and must be `connector`
          connector:
            type: string
            description: Refers to the connector type for the source, see [connectors](/reference/project-files/connectors) for more information
            enum:
              - https
              - s3
              - gcs
              - local_file
              - motherduck
              - athena
              - redshift
              - postgres
              - sqlite
              - snowflake
              - bigquery
              - duckdb
          uri:
            type: string
            description: |
              Refers to the URI of the remote connector you are using for the source. Rill also supports glob patterns as part of the URI for S3 and GCS (required for type: http, s3, gcs).

              - `s3://your-org/bucket/file.parquet` — the s3 URI of your file
              - `gs://your-org/bucket/file.parquet` — the gsutil URI of your file
              - `https://data.example.org/path/to/file.parquet` — the web address of your file
          path:
            type: string
            description: Refers to the local path of the connector you are using for the source
          sql:
            type: string
            description: Sets the SQL query to extract data from a SQL source
          region:
            type: string
            description: Sets the cloud region of the S3 bucket or Athena
          endpoint:
            type: string
            description: Overrides the S3 endpoint to connect to
          output_location:
            type: string
            description: Sets the query output location and result files in Athena
          workgroup:
            type: string
            description: Sets a workgroup for Athena connector
          project_id:
            type: string
            description: Sets a project id to be used to run BigQuery jobs
          timeout:
            type: string
            description: The maximum time to wait for source ingestion
          refresh:
            type: object
            description: |
              Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying source data (optional).
              ```yaml
              refresh:
                cron: "* * * * *"
                every: "24h"
              ```
            properties:
              cron:
                type: string
                description: A cron schedule expression, which should be encapsulated in single quotes, e.g. `* * * * *`
              every:
                type: string
                description: A Go duration string, such as `24h`
          db:
            type: string
            description: Sets the database for motherduck connections and/or the path to the DuckDB/SQLite db file
          database_url:
            type: string
            description: Postgres connection string that should be used
          duckdb:
            type: object
            description: Specifies the raw parameters to inject into the DuckDB read_csv, read_json or read_parquet statement
            additionalProperties: true
          dsn:
            type: string
            description: Used to set the Snowflake connection string
        required:
          - type
          - connector
      - $ref: '#/definitions/common_properties'
  
  # Model SQL
  models: 
    title: Models YAML
    id: models
    type: object
    description: |

      This file is used to define YAML models. For more information on our SQL models, see the [SQL models](/build/models/) documentation.
      :::tip

      Both regular models and source models can use the Model YAML specification described on this page. While [SQL models](/build/models) are perfect for simple transformations, Model YAML files provide advanced capabilities for complex data processing scenarios.

      **When to use Model YAML:**
      - **Partitions** - Optimize performance with data partitioning strategies
      - **Incremental models** - Process only new or changed data efficiently
      - **Pre/post execution hooks** - Run custom logic before or after model execution
      - **Staging** - Create intermediate tables for complex transformations
      - **Output configuration** - Define specific output formats and destinations

      Model YAML files give you fine-grained control over how your data is processed and transformed, making them ideal for production workloads and complex analytics pipelines.

      :::
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: model
            description: Refers to the resource type and must be `model`
          refresh:
            $ref: '#/definitions/schedule_properties'
            description: Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying model data 
            examples: 
              - refresh:
                  cron: "* * * * *"
          connector:
            type: string
            const: connector
            description: Refers to the resource type and is needed if setting an explicit OLAP engine. IE `clickhouse`
          sql:
            type: string
            description: Raw SQL query to run against source
          pre_exec:
            type: string
            description: Refers to SQL queries to run before the main query, available for DuckDB-based models. (optional). Ensure pre_exec queries are idempotent. Use IF NOT EXISTS statements when applicable.
            examples: 
              - pre_exec: ATTACH IF NOT EXISTS 'dbname=postgres host=localhost port=5432 user=postgres password=postgres' AS postgres_db (TYPE POSTGRES)
          post_exec:
            type: string
            description: Refers to a SQL query that is run after the main query, available for DuckDB-based models. (optional). Ensure post_exec queries are idempotent. Use IF EXISTS statements when applicable.
            examples: 
              - post_exec: DETACH DATABASE IF EXISTS postgres_db
          retry:
            type: object
            description: Refers to the retry configuration for the model. (optional)
            properties:
              attempts:
                type: integer
                description: The number of attempts to retry the model.
              delay:
                type: string
                description: The delay between attempts.
              exponential_backoff:
                type: boolean
                description: Whether to use exponential backoff.
              if_error_matches:
                type: array
                items:
                  type: string
                description: The error messages to match.
            examples:
              - retry:
                  attempts: 5
                  delay: 10s
                  exponential_backoff: true
                  if_error_matches:
                    - ".*OvercommitTracker.*"
                    - ".*Timeout.*"
                    - ".*Bad Gateway.*"
          timeout:
            type: string
            description: The maximum time to wait for model ingestion
          incremental:
            type: boolean
            description: whether incremental modeling is required (optional)
          change_mode:
            type: string
            enum:
              - reset
              - manual
              - patch
            description: Configure how changes to the model specifications are applied (optional). 'reset' will drop and recreate the model automatically, 'manual' will require a manual full or incremental refresh to apply changes, and 'patch' will switch to the new logic without re-processing historical data (only applies for incremental models).
          state:
            $ref: '#/definitions/data_properties'
            description:  Refers to the explicitly defined state of your model, cannot be used with partitions (optional)
            examples: 
              - state:
                  sql: SELECT MAX(date) as max_date
          partitions:
            $ref: '#/definitions/data_properties'
            description: Refers to the how your data is partitioned, cannot be used with state. (optional)
            examples: 
              - partitions:
                  glob: gcs://my_bucket/y=*/m=*/d=*/*.parquet
              - partitions:
                  connector: duckdb
                  sql: SELECT range AS num FROM range(0,10)
          materialize:
            type: boolean
            description: models will be materialized in olap
          partitions_watermark:
            type: string
            description: Refers to a customizable timestamp that can be set to check if an object has been updated (optional).
          partitions_concurrency:
            type: integer
            description: Refers to the number of concurrent partitions that can be read at the same time (optional).
          stage:
            type: object
            properties:
              connector:
                type: string
                description: Refers to the connector type for the staging table
              path:
                type: string
                description: Refers to the path to the staging table

            required:
              - connector
            description: in the case of staging models, where an input source does not support direct write to the output and a staging table is required
            examples: 
              - stage:
                  connector: s3
                  path: s3://my_bucket/my_staging_table

            additionalProperties: true
          output:
            type: object
            description: to define the properties of output
            properties:
              table:
                type: string
                description: Name of the output table. If not specified, the model name is used.
              materialize:
                type: boolean
                description: Whether to materialize the model as a table or view
              connector:
                type: string
                description: Refers to the connector type for the output table. Can be `clickhouse` or `duckdb` and their named connector 
              incremental_strategy:
                type: string
                enum:
                  - append
                  - merge
                  - partition_overwrite
                description: Strategy to use for incremental updates. Can be 'append', 'merge' or 'partition_overwrite'
              unique_key:
                type: array
                items:
                  type: string
                description: List of columns that uniquely identify a row for merge strategy
              partition_by:
                type: string
                description: Column or expression to partition the table by
            allOf:
              - if:
                  title: Additional properties for `output` when `connector` is `clickhouse`
                  properties:
                    connector:
                      const: clickhouse
                  required:
                    - connector
                then:
                  properties:
                    type:
                      type: string
                      description: Type to materialize the model into. Can be 'TABLE', 'VIEW' or 'DICTIONARY'
                      enum:
                        - TABLE
                        - VIEW
                        - DICTIONARY
                    columns:
                      type: string
                      description: Column names and types. Can also include indexes. If unspecified, detected from the query.
                    engine_full:
                      type: string
                      description: Full engine definition in SQL format. Can include partition keys, order, TTL, etc.
                    engine:
                      type: string
                      description: Table engine to use. Default is MergeTree
                    order_by:
                      type: string
                      description: ORDER BY clause.
                    partition_by:
                      type: string
                      description: Partition BY clause.
                    primary_key:
                      type: string
                      description: PRIMARY KEY clause.
                    sample_by:
                      type: string
                      description: SAMPLE BY clause.
                    ttl:
                      type: string
                      description: TTL settings for the table or columns.
                    table_settings:
                      type: string
                      description: Table-specific settings.
                    query_settings:
                      type: string
                      description: Settings used in insert/create table as select queries.
                    distributed_settings:
                      type: string
                      description: Settings for distributed table.
                    distributed_sharding_key:
                      type: string
                      description: Sharding key for distributed table.
                    dictionary_source_user:
                      type: string
                      description: User for accessing the source dictionary table (used if type is DICTIONARY).
                    dictionary_source_password:
                      type: string
                      description: Password for the dictionary source user.
        required:
          - type
          - sql
      - $ref: '#/definitions/common_properties'
      - type: object
        allOf:
              - if:
                  title: Additional properties for `output` when `connector` is `clickhouse`
                  properties:
                    connector:
                      const: clickhouse
                  required:
                    - connector
                then:
                  properties:
                    type:
                      type: string
                      description: Type to materialize the model into. Can be 'TABLE', 'VIEW' or 'DICTIONARY'
                      enum:
                        - TABLE
                        - VIEW
                        - DICTIONARY
                    columns:
                      type: string
                      description: Column names and types. Can also include indexes. If unspecified, detected from the query.
                    engine_full:
                      type: string
                      description: Full engine definition in SQL format. Can include partition keys, order, TTL, etc.
                    engine:
                      type: string
                      description: Table engine to use. Default is MergeTree
                    order_by:
                      type: string
                      description: ORDER BY clause.
                    partition_by:
                      type: string
                      description: Partition BY clause.
                    primary_key:
                      type: string
                      description: PRIMARY KEY clause.
                    sample_by:
                      type: string
                      description: SAMPLE BY clause.
                    ttl:
                      type: string
                      description: TTL settings for the table or columns.
                    table_settings:
                      type: string
                      description: Table-specific settings.
                    query_settings:
                      type: string
                      description: Settings used in insert/create table as select queries.
                    distributed_settings:
                      type: string
                      description: Settings for distributed table.
                    distributed_sharding_key:
                      type: string
                      description: Sharding key for distributed table.
                    dictionary_source_user:
                      type: string
                      description: User for accessing the source dictionary table (used if type is DICTIONARY).
                    dictionary_source_password:
                      type: string
                      description: Password for the dictionary source user.
        required:
          - type
          - sql
      - $ref: '#/definitions/common_properties'
      - type: object
        allOf:
          - if:
              title: Additional properties when `connector` is `athena` or [named connector](./connectors.md#athena) for athena
              properties:
                connector:
                  const: athena
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/athena'
          - if:
              title: Additional properties when `connector` is `azure` or [named connector](./connectors.md#azure) of azure
              properties:
                connector:
                  const: azure
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/azure'
          - if:
              title: Additional properties when `connector` is `bigquery` or [named connector](./connectors.md#bigquery) of bigquery
              properties:
                connector:
                  const: bigquery
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/bigquery'
          - if:
              title: Additional properties when `connector` is `duckdb` or [named connector](./connectors.md#duckdb) of duckdb
              properties:
                connector:
                  const: duckdb
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/duckdb'
          - if:
              title: Additional properties when `connector` is `gcs` or [named connector](./connectors.md#gcs) of gcs
              properties:
                connector:
                  const: gcs
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/gcs'
          - if:
              title: Additional properties when `connector` is `local_file` or [named connector](/connect/data-source/local-file) of local_file
              properties:
                connector:
                  const: local_file
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/local_file'
          - if:
              title: Additional properties when `connector` is `redshift` or [named connector](./connectors.md#redshift) of redshift
              properties:
                connector:
                  const: redshift
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/redshift'
          - if:
              title: Additional properties when `connector` is `s3` or [named connector](./connectors.md#s3) of s3
              properties:
                connector:
                  const: s3
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/s3'
          - if:
              title: Additional properties when `connector` is `salesforce` or [named connector](./connectors.md#salesforce) of salesforce
              properties:
                connector:
                  const: salesforce
              required:
                - connector
            then:
              $ref: '#/definitions/models/definitions/salesforce'
    definitions:
      athena:
        type: object
        properties:
          output_location:
            type: string
            description: Output location for query results in S3.
          workgroup:
            type: string
            description: AWS Athena workgroup to use for queries.
          region:
            type: string
            description: AWS region to connect to Athena and the output location.
      azure:
        type: object
        properties:
          path:
            type: string
            description: Path to the source
          account:
            type: string
            description: Account identifier
          uri:
            type: string
            description: Source URI
          extract:
            type: object
            description: Arbitrary key-value pairs for extraction settings
            additionalProperties: true
          glob:
            type: object
            description: Settings related to glob file matching.
            properties:
              max_total_size:
                type: integer
                description: Maximum total size (in bytes) matched by glob
              max_objects_matched:
                type: integer
                description: Maximum number of objects matched by glob
              max_objects_listed:
                type: integer
                description: Maximum number of objects listed in glob
              page_size:
                type: integer
                description: Page size for glob listing
          batch_size:
            type: string
            description: 'Size of a batch (e.g., ''100MB'')'
      bigquery:
        type: object
        properties:
          project_id:
            type: string
            description: ID of the BigQuery project.
      duckdb:
        type: object
        properties:
          path:
            type: string
            description: Path to the data source.
          format:
            type: string
            description: 'Format of the data source (e.g., csv, json, parquet).'
          pre_exec:
            type: string
            description: 'refers to SQL queries to run before the main query, available for DuckDB-based models. _(optional)_. Ensure `pre_exec` queries are idempotent. Use `IF NOT EXISTS` statements when applicable.'
          post_exec:
            type: string
            description: 'refers to a SQL query that is run after the main query, available for DuckDB-based models. _(optional)_. Ensure `post_exec` queries are idempotent. Use `IF EXISTS` statements when applicable.'
            examples:
            - pre_exec: ATTACH IF NOT EXISTS 'dbname=postgres host=localhost port=5432 user=postgres password=postgres' AS postgres_db (TYPE POSTGRES);
              sql: SELECT * FROM postgres_query('postgres_db', 'SELECT * FROM USERS')
              post_exec: DETACH DATABASE IF EXISTS postgres_db 
      gcs:
        type: object
        properties:
          path:
            type: string
            description: Path to the source
          uri:
            type: string
            description: Source URI
          extract:
            type: object
            description: key-value pairs for extraction settings
            additionalProperties: true
          glob:
            type: object
            description: Settings related to glob file matching.
            properties:
              max_total_size:
                type: integer
                description: Maximum total size (in bytes) matched by glob
              max_objects_matched:
                type: integer
                description: Maximum number of objects matched by glob
              max_objects_listed:
                type: integer
                description: Maximum number of objects listed in glob
              page_size:
                type: integer
                description: Page size for glob listing
          batch_size:
            type: string
            description: 'Size of a batch (e.g., ''100MB'')'
      local_file:
        type: object
        properties:
          path:
            type: string
            description: Path to the data source.
          format:
            type: string
            description: 'Format of the data source (e.g., csv, json, parquet).'
      redshift:
        type: object
        properties:
          output_location:
            type: string
            description: S3 location where query results are stored.
          workgroup:
            type: string
            description: Redshift Serverless workgroup to use.
          database:
            type: string
            description: Name of the Redshift database.
          cluster_identifier:
            type: string
            description: Identifier of the Redshift cluster.
          role_arn:
            type: string
            description: ARN of the IAM role to assume for Redshift access.
          region:
            type: string
            description: AWS region of the Redshift deployment.
      s3:
        type: object
        properties:
          region:
            type: string
            description: AWS region
          endpoint:
            type: string
            description: AWS Endpoint
          path:
            type: string
            description: Path to the source
          uri:
            type: string
            description: Source URI
          extract:
            type: object
            description: key-value pairs for extraction settings
            additionalProperties: true
          glob:
            type: object
            description: Settings related to glob file matching.
            properties:
              max_total_size:
                type: integer
                description: Maximum total size (in bytes) matched by glob
              max_objects_matched:
                type: integer
                description: Maximum number of objects matched by glob
              max_objects_listed:
                type: integer
                description: Maximum number of objects listed in glob
              page_size:
                type: integer
                description: Page size for glob listing
          batch_size:
            type: string
            description: 'Size of a batch (e.g., ''100MB'')'
      salesforce:
        type: object
        properties:
          soql:
            type: string
            description: SOQL query to execute against the Salesforce instance.
          sobject:
            type: string
            description: Salesforce object (e.g., Account, Contact) targeted by the query.
          queryAll:
            type: boolean
            description: Whether to include deleted and archived records in the query (uses queryAll API).
    examples: 
      - ### Incremental model 
        type: model
        incremental: true
        connector: bigquery 

        state:
          sql: SELECT MAX(date) as max_date

        sql: |
              SELECT ... FROM events 
                {{ if incremental }} 
                    WHERE event_time > '{{.state.max_date}}' 
                {{end}}
        output:
          connector: duckdb 

      - ### Partitioned model 
        type: model

        partitions:
          glob:
            connector: gcs
            path: gs://rilldata-public/github-analytics/Clickhouse/2025/*/commits_*.parquet

        sql: SELECT * FROM read_parquet('{{ .partition.uri }}')

        output:
          connector: duckdb
          incremental_strategy: append

      - ### Partitioned Incremental model 
        type: model

        incremental: true
        refresh:
            cron: "0 8 * * *"

        partitions:
          glob:
            path: gs://rilldata-public/github-analytics/Clickhouse/2025/*/*
            partition: directory
          
        sql: |
          SELECT * 
            FROM read_parquet('gs://rilldata-public/{{ .partition.path }}/commits_*.parquet') 
            WHERE '{{ .partition.path }}' IS NOT NULL


        output:
          connector: duckdb
          incremental_strategy: append

      - ### Staging model 
        type: model 
        connector: snowflake

        # Use DuckDB to generate a range of days from 1st Jan to today
        partitions:
          connector: duckdb
          sql: SELECT range as day FROM range(TIMESTAMPTZ '2024-01-01', now(), INTERVAL 1 DAY)

        # Don't reload previously ingested partitions on every refresh
        incremental: true

        # Query Snowflake for all events belonging to the current partition
        sql: SELECT * FROM events WHERE date_trunc('day', event_time) = '{{ .partition.day }}'

        # Since ClickHouse can't ingest from Snowflake or vice versa, we use S3 as a temporary staging connector
        stage:
          connector: s3
          path: s3://bucket/temp-data

        # Produce the final output into ClickHouse, requires a clickhouse.yaml connector defined.
        output:
          connector: clickhouse


  # Metrics Views
  metrics-views:
    title: Metrics View YAML
    id: metrics-views
    type: object
    description: In your Rill project directory, create a metrics view, `<metrics_view>.yaml`, file in the `metrics` directory. Rill will ingest the metric view definition next time you run `rill start`.
    allOf:
      - title: Properties
        type: object
        properties:
          version:
            type: string
            description: The version of the metrics view schema
          type:
            type: string
            const: metrics_view
            description: Refers to the resource type and must be `metrics_view`
          connector:
            type: string
            description: Refers to the connector type for the metrics view, see [OLAP engines](/connect/olap) for more information
          display_name:
            type: string
            description: Refers to the display name for the metrics view
          description:
            type: string
            description: Refers to the description for the metrics view
          ai_instructions:
            type: string
            description: Extra instructions for [AI agents](/explore/mcp). Used to guide natural language question answering and routing.
          model:
            type: string
            description: Refers to the model powering the dashboard (either model or table is required)
          database:
            type: string
            description: Refers to the database to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified
          database_schema:
            type: string
            description: Refers to the schema to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified
          table:
            type: string
            description: Refers to the table powering the dashboard, should be used instead of model for dashboards create from external OLAP tables (either table or model is required)
          timeseries:
            type: string
            description: Refers to the timestamp column from your model that will underlie x-axis data in the line charts. If not specified, the line charts will not appear
          watermark:
            type: string
            description: A SQL expression that tells us the max timestamp that the metrics are considered valid for. Usually does not need to be overwritten
          smallest_time_grain:
            type: string
            description: 'Refers to the smallest time granularity the user is allowed to view. The valid values are: millisecond, second, minute, hour, day, week, month, quarter, year'
          first_day_of_week:
            type: integer
            description: Refers to the first day of the week for time grain aggregation (for example, Sunday instead of Monday). The valid values are 1 through 7 where Monday=1 and Sunday=7
          first_month_of_year:
            type: integer
            description: Refers to the first month of the year for time grain aggregation. The valid values are 1 through 12 where January=1 and December=12
          dimensions:
            type: array
            description: Relates to exploring segments or dimensions of your data and filtering the dashboard
            items:
              type: object
              properties:
                name:
                  type: string
                  description: a stable identifier for the dimension
                display_name:
                  type: string
                  description: a display name for your dimension
                description:
                  type: string
                  description: a freeform text description of the dimension
                column:
                  type: string
                  description: a categorical column
                expression:
                  type: string
                  description: a non-aggregate expression such as string_split(domain, '.'). One of column and expression is required but cannot have both at the same time
                unnest:
                  type: boolean
                  description: if true, allows multi-valued dimension to be unnested (such as lists) and filters will automatically switch to "contains" instead of exact match 
                uri:
                  type:
                    - string
                    - boolean
                  description: enable if your dimension is a clickable URL to enable single click navigation (boolean or valid SQL expression) 
              anyOf:
                - required:
                    - column
                - required:
                    - expression
          measures:
            type: array
            description: Used to define the numeric aggregates of columns from your data model
            items:
              type: object
              properties:
                name:
                  type: string
                  description: a stable identifier for the measure
                display_name:
                  type: string
                  description: the display name of your measure.
                label:
                  type: string
                  description: a label for your measure, deprecated use display_name
                description:
                  type: string
                  description: a freeform text description of the measure
                type:
                  type: string
                  description: 'Measure calculation type: "simple" for basic aggregations, "derived" for calculations using other measures, or "time_comparison" for period-over-period analysis. Defaults to "simple" unless dependencies exist.'
                expression:
                  type: string
                  description: a combination of operators and functions for aggregations
                window:
                  description: A measure window can be defined as a keyword string (e.g. 'time' or 'all') or an object with detailed window configuration. For more information, see the [window functions](/build/metrics-view/advanced-expressions/windows) documentation.
                  anyOf:
                    - type: string
                      enum:
                        - time
                        - 'true'
                        - all
                      description: 'Shorthand: `time` or `true` means time-partitioned, `all` means non-partitioned.'
                    - type: object
                      description: 'Detailed window configuration for measure calculations, allowing control over partitioning, ordering, and frame definition.'
                      properties:
                        partition:
                          type: boolean
                          description: 'Controls whether the window is partitioned. When true, calculations are performed within each partition separately.'
                        order:
                          type: string
                          $ref: '#/definitions/field_selectors_properties'
                          description: 'Specifies the fields to order the window by, determining the sequence of rows within each partition.'
                        frame:
                          type: string
                          description: 'Defines the window frame boundaries for calculations, specifying which rows are included in the window relative to the current row.'
                      additionalProperties: false
                per:
                  $ref: '#/definitions/field_selectors_properties'
                  description: for per dimensions
                requires:
                  $ref: '#/definitions/field_selectors_properties'
                  description: using an available measure or dimension in your metrics view to set a required parameter, cannot be used with simple measures. See [referencing measures](/build/metrics-view/advanced-expressions/referencing) for more information.
                valid_percent_of_total:
                  type: boolean
                  description: a boolean indicating whether percent-of-total values should be rendered for this measure
                format_preset:
                  type: string
                  description: |
                    Controls the formatting of this measure using a predefined preset. Measures cannot have both `format_preset` and `format_d3`. If neither is supplied, the measure will be formatted using the `humanize` preset by default.
                    
                      Available options:
                      - `humanize`: Round numbers into thousands (K), millions(M), billions (B), etc.
                      - `none`: Raw output.
                      - `currency_usd`: Round to 2 decimal points with a dollar sign ($).
                      - `currency_eur`: Round to 2 decimal points with a euro sign (€).
                      - `percentage`: Convert a rate into a percentage with a % sign.
                      - `interval_ms`: Convert milliseconds into human-readable durations like hours (h), days (d), years (y), etc. (optional)
                format_d3:
                  type: string
                  description: 'Controls the formatting of this measure using a [d3-format](https://d3js.org/d3-format) string. If an invalid format string is supplied, the measure will fall back to `format_preset: humanize`. A measure cannot have both `format_preset` and `format_d3`. If neither is provided, the humanize preset is used by default. Example: `format_d3: ".2f"` formats using fixed-point notation with two decimal places. Example: `format_d3: ",.2r"` formats using grouped thousands with two significant digits. (optional)'
                format_d3_locale:
                  type: object
                  description: |
                      locale configuration passed through to D3, enabling changing the currency symbol among other things. For details, see the docs for D3's formatLocale.
                        ```yaml
                        format_d3: "$,"
                        format_d3_locale:
                          grouping: [3, 2]
                          currency: ["₹", ""]
                        ```
                  properties:
                    grouping:
                      type: array
                      description: the grouping of the currency symbol
                    currency:
                      type: array
                      description: the currency symbol

                treat_nulls_as:
                  type: string
                  description: used to configure what value to fill in for missing time buckets. This also works generally as COALESCING over non empty time buckets.
                
              required:
                - name
                - display_name
                - expression

          annotations:
            type: array
            description: Used to define annotations that can be displayed on charts
            items:
              type: object
              properties:
                name:
                  type: string
                  description: A stable identifier for the annotation. Defaults to model or table names when not specified
                model:
                  type: string
                  description: Refers to the model powering the annotation (either table or model is required). The model must have 'time' and 'description' columns. Optional columns include 'time_end' for range annotations and 'grain' to specify when the annotation should appear based on dashboard grain level.
                database:
                  type: string
                  description: Refers to the database to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified
                database_schema:
                  type: string
                  description: Refers to the schema to use in the OLAP engine (to be used in conjunction with table). Otherwise, will use the default database or schema if not specified
                table:
                  type: string
                  description: Refers to the table powering the annotation, should be used instead of model for annotations from external OLAP tables (either table or model is required)
                connector:
                  type: string
                  description: Refers to the connector to use for the annotation
                measures:
                  description: Specifies which measures to apply the annotation to. Applies to all measures if not specified
                  anyOf:
                    - type: string
                      description: Simple field name as a string.
                    - type: array
                      description: List of field selectors, each can be a string or an object with detailed configuration.
                      items:
                        anyOf:
                          - type: string
                            description: Shorthand field selector, interpreted as the name.
                          - type: object
                            description: Detailed field selector configuration with name and optional time grain.
                            properties:
                              name:
                                type: string
                                description: Name of the field to select.
                              time_grain:
                                type: string
                                description: Time grain for time-based dimensions.
                                enum:
                                  - ''
                                  - ms
                                  - millisecond
                                  - s
                                  - second
                                  - min
                                  - minute
                                  - hadditionalProperties: fal
                                  - hour
                                  - d
                                  - day
                                  - w
                                  - week
                                  - month
                                  - q
                                  - quarter
                                  - 'y'
                                  - year
                            required:
                              - name
                            additionalProperties: false
          security:
              $ref: '#/definitions/security_policy_properties'
              description: Defines a security policy for the dashboard
        required:
          - type
          - model
      
      - $ref: '#/definitions/common_properties'

  # Canvas Dashboards
  canvas-dashboards:
    title: Canvas Dashboard YAML
    id: canvas-dashboards
    type: object
    description: Canvas dashboards provide a flexible way to create custom dashboards with drag-and-drop components.
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: canvas
            description: Refers to the resource type and must be `canvas`
          display_name:
            type: string
            description: Refers to the display name for the canvas
          description:
            type: string
            description: Description for the canvas dashboard
          banner:
            type: string
            description: Refers to the custom banner displayed at the header of an Canvas dashboard
          rows:
            type: array
            description: Refers to all of the rows displayed on the Canvas
            items:
              type: object
              properties:
                height:
                  type: string
                  description: Height of the row in px
                items:
                  type: array
                  description: List of components to display in the row
                  items:
                    type: object
                    properties:
                      component:
                        type: string
                        description: |
                          Name of the component to display. Each component type has its own set of properties.
                          Available component types:
                          
                              - **markdown** - Text component, uses markdown formatting
                              - **kpi_grid** - KPI component, similar to TDD in Rill Explore, display quick KPI charts
                              - **stacked_bar_normalized** - Bar chart normalized to 100% values
                              - **line_chart** - Normal Line chart
                              - **bar_chart** - Normal Bar chart
                              - **stacked_bar** - Stacked Bar chart
                              - **area_chart** - Line chart with area
                              - **image** - Provide a URL to embed into canvas dashboard
                              - **table** - Similar to Pivot table, add dimensions and measures to visualize your data
                              - **heatmap** - Heat Map chart to visualize distribution of data
                              - **donut_chart** - Donut or Pie chart to display sums of total
                      width:
                        type:
                          - string
                          - integer
                        description: Width of the component (can be a number or string with unit)
                    additionalProperties: true
              additionalProperties: false
          max_width:
            type: integer
            description: Max width in pixels of the canvas
            minimum: 0
          gap_x:
            type: integer
            description: Horizontal gap in pixels of the canvas
            minimum: 0
          gap_y:
            type: integer
            description: Vertical gap in pixels of the canvas
            minimum: 0
          filters:
            type: object
            description: Indicates if filters should be enabled for the canvas.
            additionalProperties: true
            properties:
              enable:
                type: boolean
                description: Toggles filtering functionality for the canvas dashboard.
          allow_custom_time_range:
            type: boolean
            description: Defaults to true, when set to false it will hide the ability to set a custom time range for the user.
          time_ranges:
            type: array
            description: |
              Overrides the list of default time range selections available in the dropdown. It can be string or an object with a 'range' and optional 'comparison_offsets'
                ```yaml
                time_ranges:
                  - PT15M // Simplified syntax to specify only the range
                  - PT1H
                  - PT6H
                  - P7D
                  - range: P5D // Advanced syntax to specify comparison_offsets as well
                  - P4W
                  - rill-TD // Today
                  - rill-WTD // Week-To-date
                ```
            items:
              $ref: '#/definitions/explore_time_range_properties'
          time_zones:
            type: array
            description: Refers to the time zones that should be pinned to the top of the time zone selector. It should be a list of [IANA time zone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
            items:
              type: string
          defaults:
            type: object
            description: |
              defines the defaults YAML struct
                ```yaml
                defaults: #define all the defaults within here
                  time_range: P1M
                  comparison_mode: dimension #time, none
                  comparison_dimension: filename
                ```
            properties:
              time_range:
                description: Refers to the default time range shown when a user initially loads the dashboard. The value must be either a valid [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) (for example, PT12H for 12 hours, P1M for 1 month, or P26W for 26 weeks) or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions)
                type: string
              comparison_mode:
                description: 'Controls how to compare current data with historical or categorical baselines. Options: `none` (no comparison), `time` (compares with past based on default_time_range), `dimension` (compares based on comparison_dimension values)'
                type: string
                enum:
                  - none
                  - time
                  - dimension
              comparison_dimension:
                description: 'for dimension mode, specify the comparison dimension by name'
                type: string
            additionalProperties: false
          theme:
            oneOf:
              - type: string
                description: Name of an existing theme to apply to the dashboard
              - $ref: '#/definitions/theme_properties'
                description: Inline theme configuration.
            description: Name of the theme to use. Only one of theme and embedded_theme can be set.
          security:
            description: Security rules to apply for access to the canvas dashboard
            $ref: '#/definitions/dashboard_security_policy_properties'
        required:
          - type
          - display_name
      - $ref: '#/definitions/common_properties'

  # Explore dashboards
  explore-dashboards:
    title: Explore Dashboard YAML
    id: explore-dashboards
    type: object
    description: Explore dashboards provide an interactive way to explore data with predefined metrics and dimensions.
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: explore
            description: Refers to the resource type and must be `explore`
          display_name:
            type: string
            description: Refers to the display name for the explore dashboard
          metrics_view:
            type: string
            description: Refers to the metrics view resource
          description:
            type: string
            description: Refers to the description of the explore dashboard
          banner:
            type: string
            description: Refers to the custom banner displayed at the header of an explore dashboard
          dimensions:
            description:  List of dimension names. Use '*' to select all dimensions (default)
            $ref: '#/definitions/field_selector_properties'
            examples: 
              - # Example: Select a dimension
                dimensions:
                  - country

              - # Example: Select all dimensions except one
                dimensions:
                  exclude:
                    - country

              - # Example: Select all dimensions that match a regex
                dimensions:
                  expr: "^public_.*$"
              
          measures:
            description: List of measure names. Use '*' to select all measures (default)
            $ref: '#/definitions/field_selector_properties'
            examples: 
              - # Example: Select a measure
                measures:
                  - sum_of_total

              - # Example: Select all measures except one
                measures:
                  exclude:
                    - sum_of_total

              - # Example: Select all measures that match a regex
                measures:
                  expr: "^public_.*$"
              
          theme:
            oneOf:
              - type: string
                description: Name of an existing theme to apply to the dashboard
              - $ref: '#/definitions/theme_properties'
                description: Inline theme configuration.
            description: Name of the theme to use. Only one of theme and embedded_theme can be set.
          time_ranges:
            type: array
            description: |
              Overrides the list of default time range selections available in the dropdown. It can be string or an object with a 'range' and optional 'comparison_offsets'
                ```yaml
                time_ranges:
                  - PT15M // Simplified syntax to specify only the range
                  - PT1H
                  - PT6H
                  - P7D
                  - range: P5D // Advanced syntax to specify comparison_offsets as well
                  - P4W
                  - rill-TD // Today
                  - rill-WTD // Week-To-date
                ```
            items:
              $ref: '#/definitions/explore_time_range_properties'
          time_zones:
            type: array
            description: Refers to the time zones that should be pinned to the top of the time zone selector. It should be a list of [IANA time zone identifiers](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
            items:
              type: string
          lock_time_zone:
            type: boolean
            description: When true, the dashboard will be locked to the first time provided in the time_zones list. When no time_zones are provided, the dashboard will be locked to UTC
          allow_custom_time_range:
            type: boolean
            description: Defaults to true, when set to false it will hide the ability to set a custom time range for the user.
          defaults:
            type: object
            description: |
              defines the defaults YAML struct
                ```yaml
                defaults: #define all the defaults within here
                  dimensions:
                    - dim_1
                    - dim_2
                  measures:
                    - measure_1
                    - measure_2
                  time_range: P1M
                  comparison_mode: dimension #time, none
                  comparison_dimension: filename
                ```
            properties:
              dimensions:
                description: Provides the default dimensions to load on viewing the dashboard
                $ref: '#/definitions/field_selector_properties'
              measures:
                description: Provides the default measures to load on viewing the dashboard
                $ref: '#/definitions/field_selector_properties'
              time_range:
                description: Refers to the default time range shown when a user initially loads the dashboard. The value must be either a valid [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) (for example, PT12H for 12 hours, P1M for 1 month, or P26W for 26 weeks) or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions)
                type: string
              comparison_mode:
                description: 'Controls how to compare current data with historical or categorical baselines. Options: `none` (no comparison), `time` (compares with past based on default_time_range), `dimension` (compares based on comparison_dimension values)'
                type: string
                enum:
                  - none
                  - time
                  - dimension
              comparison_dimension:
                description: 'for dimension mode, specify the comparison dimension by name'
                type: string
            additionalProperties: false
          embeds:
            type: object
            description: Configuration options for embedded dashboard views
            properties:
              hide_pivot:
                type: boolean
                description: When true, hides the pivot table view in embedded mode
            additionalProperties: false
        
          security:
            description: Security rules to apply for access to the explore dashboard
            $ref: '#/definitions/dashboard_security_policy_properties'
        required:
          - type
          - display_name
          - metrics_view
      - $ref: '#/definitions/common_properties'

  # Alerts
  alerts: 
    title: Alert YAML
    id: alerts
    type: object
    description: Along with alertings at the dashboard level and can be created via the UI, there might be more extensive alerting that you might want to develop and can be done so the an alert.yaml. When creating an alert via a YAML file, you'll see this denoted in the UI as `Created through code`.
    examples:
      - # Example: To send alert when data lags by more than 1 day to slack channel #rill-cloud-alerts
        type: alert
        display_name: Data lags by more than 1 day
        # Check the alert every hour.
        refresh:
          cron: 0 * * * *
        # Query that returns non-empty results if the metrics lag by more than 1 day.
        data:
          sql: |-
            SELECT  *
            FROM
            (
              SELECT  MAX(event_time) AS max_time
              FROM rill_metrics_model
            )
            WHERE max_time < NOW() - INTERVAL '1 day'
        # Send notifications in Slack.
        notify:
          slack:
            channels:
              - '#rill-cloud-alerts'
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: alert
            description: Refers to the resource type and must be `alert`
          refresh:
            $ref: '#/definitions/schedule_properties'
            description: |
                  Refresh schedule for the alert
                    ```yaml
                    refresh:
                      cron: "* * * * *"
                      #every: "24h"
                    ```
          display_name:
            type: string
            description: Display name for the alert
          description:
            type: string
            description: Description for the alert
          intervals:
            type: object
            description: define the interval of the alert to check
            properties:
              duration:
                type: string
                description: a valid ISO8601 duration to define the interval duration
              limit:
                type: integer
                description: maximum number of intervals to check for on invocation
                minimum: 0
              check_unclosed:
                type: boolean
                description: 'boolean, whether unclosed intervals should be checked'
          watermark:
            type: string
            enum:
              - trigger_time
              - inherit
            description: Specifies how the watermark is determined for incremental processing. Use 'trigger_time' to set it at runtime or 'inherit' to use the upstream model's watermark.
          timeout:
            type: string
            description: define the timeout of the alert in seconds (optional).
          data:
            $ref: '#/definitions/data_properties'
            description: Data source for the alert
          for:
            description: "Specifies how user identity or attributes should be evaluated for security policy enforcement."
            oneOf:
              - type: object
                description: Specifies a unique user identifier for applying security policies.
                properties:
                  user_id:
                    type: string
                    description: "The unique user ID used to evaluate security policies."
                required:
                  - user_id
                additionalProperties: false
              - type: object
                description: Specifies a user's email address for applying security policies.
                properties:
                  user_email:
                    type: string
                    description: "The user's email address used to evaluate security policies."
                    format: email
                required:
                  - user_email
                additionalProperties: false
              - type: object
                description: Specifies a set of arbitrary user attributes for applying security policies.
                properties:
                  attributes:
                    type: object
                    description: A dictionary of user attributes used to evaluate security policies.
                    additionalProperties: true
                required:
                  - attributes
                additionalProperties: false
          on_recover:
            type: boolean
            description: Send an alert when a previously failing alert recovers. Defaults to false.
          on_fail:
            type: boolean
            description: Send an alert when a failure occurs. Defaults to true.
          on_error:
            type: boolean
            description: Send an alert when an error occurs during evaluation. Defaults to false.
          renotify:
            type: boolean
            description: Enable repeated notifications for unresolved alerts. Defaults to false.
          renotify_after:
            type: string
            description: Defines the re-notification interval for the alert (e.g., '10m','24h'), equivalent to snooze duration in UI, defaults to 'Off'
          notify:
            $ref: '#/definitions/notify_properties'
            description: Notification configuration
          annotations:
            type: object
            description: Key value pair used for annotations
            additionalProperties:
              type: string

        required:
          - type
          - refresh
          - data
          - notify
      - $ref: '#/definitions/common_properties'

  # APIs
  apis:
    title: API YAML
    id: apis
    type: object
    description: Custom APIs allow you to create endpoints that can be called to retrieve or manipulate data.
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: api
            description: Refers to the resource type and must be `api`
          openapi:
            type: object
            description: OpenAPI specification for the API endpoint
            properties:
              summary:
                type: string
                description: A brief description of what the API endpoint does
              parameters:
                type: array
                description: List of parameters that the API endpoint accepts
                items:
                  type: object
                  additionalProperties: true
              request_schema:
                type: object
                description: JSON schema for the request body (use nested YAML instead of a JSON string)
                additionalProperties: true
              response_schema:
                type: object
                description: JSON schema for the response body (use nested YAML instead of a JSON string)
                additionalProperties: true
          security:
            $ref: '#/definitions/security_policy_properties'
            description: Security configuration for the API
          skip_nested_security:
            type: boolean
            description: Flag to control security inheritance
        required:
          - type
      - $ref: '#/definitions/api_data_properties'
      # - $ref: '#/definitions/common_properties'

  # Themes
  themes:
    title: Theme YAML
    id: themes
    type: object
    description: | 
      In your Rill project directory, create a `<theme_name>.yaml` file in any directory containing `type: theme`. Rill will automatically ingest the theme next time you run `rill start` or deploy to Rill Cloud.
      
      To apply that theme to a dashboard, add `default_theme: <name of theme>` to the yaml file for that dashboard. Alternatively, you can add this to the end of the URL in your browser: `?theme=<name of theme>`
    examples: 
      - # Example: You can copy this directly into your <theme_name>.yaml file
        type: theme
        
        colors:
          primary: plum
          secondary: violet
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: theme
            description: Refers to the resource type and must be `theme`
          colors:
            type: object
            description: Color palette for the theme
            properties:
              primary:
                type: string
                description: Primary color
              secondary:
                type: string
                description: Secondary color
            additionalProperties: true
      
        required:
          - type
          - display_name
      - $ref: '#/definitions/common_properties'

  # Components
  components:
    type: object
    title: Component YAML
    description: Defines a reusable dashboard component that can be embedded in canvas dashboards
    allOf:
      - title: Properties
        type: object
        properties:
          type:
            type: string
            const: component
            description: Refers to the resource type and must be `component`
          display_name:
            type: string
            description: Refers to the display name for the component
          description:
            type: string
            description: Detailed description of the component's purpose and functionality
          input:
            type: array
            description: List of input variables that can be passed to the component
            items:
              $ref: '#/definitions/component_variable_properties'
          output:
            description: Output variable that the component produces
            $ref: '#/definitions/component_variable_properties'
        required:
          - type

  # Common Properties
  common_properties:
    type: object
    title: "Common Properties"
    properties:
      name:
        type: string
        description: Name is usually inferred from the filename, but can be specified manually.
      refs:
        type: array
        description: 'List of resource references'
        items:
          type: string
          description: A string reference like `<resource-name>` or `<type/resource-name>`.
      dev:
        type: object
        description: Overrides any properties in development environment.
      prod:
        type: object
        description: Overrides any properties in production environment.


  component_variable_properties:
    type: object
    properties:
      name:
        type: string
        description: Unique identifier for the variable
      type:
        type: string
        description: Data type of the variable (e.g., string, number, boolean)
      value:
        description: Default value for the variable. Can be any valid JSON value type
        type:
          - string
          - number
          - boolean
          - object
          - array
    required:
      - name
      - type
    additionalProperties: false
  # Reusable Properties
  theme_properties:
    type: object
    properties:
      colors:
        type: object
        description: Used to override the dashboard colors. Either primary or secondary color must be provided.
        properties:
          primary:
            type: string
            description: Overrides the primary blue color in the dashboard. Can have any hex (without the '#' character), [named colors](https://www.w3.org/TR/css-color-4/#named-colors) or hsl() formats. Note that the hue of the input colors is used for variants but the saturation and lightness is copied over from the [blue color palette](https://tailwindcss.com/docs/customizing-colors).
          secondary:
            type: string
            description: Overrides the secondary color in the dashboard. Applies to the loading spinner only as of now. Can have any hex (without the '#' character), [named colors](https://www.w3.org/TR/css-color-4/#named-colors) or hsl() formats.
        anyOf:
          - required:
              - primary
          - required:
              - secondary
  api_data_properties:
    oneOf:
      - title: SQL Query
        type: object
        description:  Executes a raw SQL query against the project's data models.
        properties:
          sql:
            type: string
            description: Raw SQL query to run against existing models in the project.
          connector:
            type: string
            description: specifies the connector to use when running SQL or glob queries.
        required:
          - sql
        examples: 
          - type: api
            sql: "SELECT * FROM table_name WHERE date >= '2024-01-01'"
            
      - title: Metrics View Query
        type: object
        description: Executes a SQL query that targets a defined metrics view.
        properties:
          metrics_sql:
            type: string
            description: SQL query that targets a metrics view in the project
        required:
          - metrics_sql
        examples: 
          - 
            type: api

            metrics_sql: "SELECT * FROM user_metrics WHERE date >= '2024-01-01'"
      - title: Custom API Call
        type: object
        description: Calls a custom API defined in the project to compute data.
        properties:
          api:
            type: string
            description: Name of a custom API defined in the project.
          args:
            type: object
            description: Arguments to pass to the custom API.
            additionalProperties: true
        required:
          - api
        examples: 
          - type: api
            api: "user_analytics_api"
            args:
              start_date: "2024-01-01"
              limit: 10

      - title: File Glob Query
        type: object
        description: Uses a file-matching pattern (glob) to query data from a connector.
        properties:
          glob:
            description: Defines the file path or pattern to query from the specified connector.
            anyOf:
              - type: string
                description: A simple file path/glob pattern as a string.
              - type: object
                description: An object-based configuration for specifying a file path/glob pattern with advanced options.
                additionalProperties: true
          connector:
            type: string
            description: Specifies the connector to use with the glob input.
        required:
          - glob
        examples: 
          - type: api

            glob: "data/*.csv"
 
      - title: Resource Status Check
        type: object
        description: Uses the status of a resource as data.
        properties:
          resource_status:
            type: object
            description: Based on resource status
            properties:
              where_error:
                type: boolean
                description: Indicates whether the condition should trigger when the resource is in an error state.
            additionalProperties: true
        required:
          - resource_status
        examples: 
          - type: api
            resource_status:
              where_error: true
 
  data_properties:
    oneOf:
      - title: SQL Query
        type: object
        description: Executes a raw SQL query against the project's data models.
        properties:
          sql:
            type: string
            description: Raw SQL query to run against existing models in the project.
          connector:
            type: string
            description: specifies the connector to use when running SQL or glob queries.
        required:
          - sql
      - title: Metrics View Query
        type: object
        description: Executes a SQL query that targets a defined metrics view.
        properties:
          metrics_sql:
            type: string
            description: SQL query that targets a metrics view in the project
        required:
          - metrics_sql
      - title: Custom API Call
        type: object
        description: Calls a custom API defined in the project to compute data.
        properties:
          api:
            type: string
            description: Name of a custom API defined in the project.
          args:
            type: object
            description: Arguments to pass to the custom API.
            additionalProperties: true
        required:
          - api
      - title: File Glob Query
        type: object
        description: Uses a file-matching pattern (glob) to query data from a connector.
        properties:
          glob:
            description: Defines the file path or pattern to query from the specified connector.
            anyOf:
              - type: string
                description: A simple file path/glob pattern as a string.
              - type: object
                description: An object-based configuration for specifying a file path/glob pattern with advanced options.
                additionalProperties: true
          connector:
            type: string
            description: Specifies the connector to use with the glob input.
        required:
          - glob
      - title: Resource Status Check
        type: object
        description: Uses the status of a resource as data.
        properties:
          resource_status:
            type: object
            description: Based on resource status
            properties:
              where_error:
                type: boolean
                description: Indicates whether the condition should trigger when the resource is in an error state.
            additionalProperties: true
        required:
          - resource_status
        examples: 
          -
            resource_status:
              where_error: true
          
  explore_time_range_properties:
    oneOf:
      - type: string
        description: a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) duration or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions) extensions for the selection
      - type: object
        description: Object containing time range and comparison configuration
        properties:
          range:
            type: string
            description: a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) duration or one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions) extensions for the selection
          comparison_offsets:
            type: array
            description: list of time comparison options for this time range selection (optional). Must be one of the [Rill ISO 8601 extensions](https://docs.rilldata.com/reference/rill-iso-extensions#extensions)
            items:
              oneOf:
                - type: string
                  description: Offset string only (range is inferred)
                - type: object
                  description: Object containing offset and range configuration for time comparison
                  properties:
                    offset:
                      type: string
                      description: Time offset for comparison (e.g., 'P1D' for one day ago)
                    range:
                      type: string
                      description: Custom time range for comparison period
                  additionalProperties: false
        required:
          - range
        additionalProperties: false
  notify_properties:
    type: object
    properties:
      email:
        type: object
        description: Send notifications via email.
        properties:
          recipients:
            type: array
            description: An array of email addresses to notify.
            items:
              type: string
            minItems: 1
        required:
          - recipients
      slack:
        type: object
        description: Send notifications via Slack.
        properties:
          users:
            type: array
            description: An array of Slack user IDs to notify.
            items:
              type: string
            minItems: 1
          channels:
            type: array
            description: An array of Slack channel IDs to notify.
            items:
              type: string
            minItems: 1
          webhooks:
            type: array
            description: An array of Slack webhook URLs to send notifications to.
            items:
              type: string
            minItems: 1
        anyOf:
          - required:
              - channels
          - required:
              - users
          - required:
              - webhooks
    anyOf:
        - required:
          - slack
        - required:
          - email
  schedule_properties:
    type: object
    properties:
      cron:
        type: string
        description: A cron expression that defines the execution schedule
      time_zone:
        type: string
        description: Time zone to interpret the schedule in (e.g., 'UTC', 'America/Los_Angeles').
      disable:
        type: boolean
        description: 'If true, disables the resource without deleting it.'
      ref_update:
        type: boolean
        description: 'If true, allows the resource to run when a dependency updates.'
      run_in_dev:
        type: boolean
        description: 'If true, allows the schedule to run in development mode.'
  security_policy_properties:
    type: object
    description: Defines [security rules and access control policies](/build/metrics-view/security) for resources
    properties:
      access:
        oneOf:
          - type: string
            description: SQL expression that evaluates to a boolean to determine access
          - type: boolean
            description: Direct boolean value to allow or deny access
        description: Expression indicating if the user should be granted access to the dashboard. If not defined, it will resolve to false and the dashboard won't be accessible to anyone. Needs to be a valid SQL expression that evaluates to a boolean.
      row_filter:
        type: string
        description: SQL expression to filter the underlying model by. Can leverage templated user attributes to customize the filter for the requesting user. Needs to be a valid SQL expression that can be injected into a WHERE clause
      include:
        type: array
        description: List of dimension or measure names to include in the dashboard. If include is defined all other dimensions and measures are excluded
        items:
          type: object
          properties:
            if:
              type: string
              description: Expression to decide if the column should be included or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean
            names:
              anyOf:
                - type: array
                  description: List of specific field names to include
                  items:
                    type: string
                - type: string
                  description: Wildcard '*' to include all fields
                  enum:
                    - '*'
              description: List of fields to include. Should match the name of one of the dashboard's dimensions or measures
          required:
            - if
            - names
      exclude:
        type: array
        description: List of dimension or measure names to exclude from the dashboard. If exclude is defined all other dimensions and measures are included
        items:
          type: object
          properties:
            if:
              type: string
              description: Expression to decide if the column should be excluded or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean
            names:
              anyOf:
                - type: array
                  description: List of specific field names to exclude
                  items:
                    type: string
                - type: string
                  description: Wildcard '*' to exclude all fields
                  enum:
                    - '*'
              description: List of fields to exclude. Should match the name of one of the dashboard's dimensions or measures
          required:
            - if
            - names
      rules:
        type: array
        description: List of detailed security rules that can be used to define complex access control policies
        items:
          type: object
          description: Individual security rule definition
          properties:
            type:
              type: string
              enum:
                - access
                - field_access
                - row_filter
              description: Type of security rule - access (overall access), field_access (field-level access), or row_filter (row-level filtering)
            action:
              type: string
              enum:
                - allow
                - deny
              description: Whether to allow or deny access for this rule
            if:
              type: string
              description: Conditional expression that determines when this rule applies. Must be a valid SQL expression that evaluates to a boolean
            names:
              type: array
              items:
                type: string
              description: List of field names this rule applies to (for field_access type rules)
            all:
              type: boolean
              description: When true, applies the rule to all fields (for field_access type rules)
            sql:
              type: string
              description: SQL expression for row filtering (for row_filter type rules)
          required:
            - type
  dashboard_security_policy_properties:
    type: object
    description: Defines [security rules and access control policies](/build/metrics-view/security) for dashboards (without row filtering)
    properties:
      access:
        oneOf:
          - type: string
            description: SQL expression that evaluates to a boolean to determine access
          - type: boolean
            description: Direct boolean value to allow or deny access
        description: Expression indicating if the user should be granted access to the dashboard. If not defined, it will resolve to false and the dashboard won't be accessible to anyone. Needs to be a valid SQL expression that evaluates to a boolean.
  field_selectors_properties:
    oneOf:
      - type: string
        description: 'Simple field name as a string.'
      - type: array
        description: 'List of field selectors, each can be a string or an object with detailed configuration.'
        items:
          oneOf:
            - type: string
              description: 'Shorthand field selector, interpreted as the name.'
            - type: object
              description: 'Detailed field selector configuration with name and optional time grain.'
              properties:
                name:
                  type: string
                  description: 'Name of the field to select.'
                time_grain:
                  type: string
                  description: 'Time grain for time-based dimensions.'
                  enum:
                    - ''
                    - ms
                    - millisecond
                    - s
                    - second
                    - min
                    - minute
                    - h
                    - hour
                    - d
                    - day
                    - w
                    - week
                    - month
                    - q
                    - quarter
                    - 'y'
                    - year
              required:
                - name
              additionalProperties: false
        minItems: 1 
  field_selector_properties:
    oneOf:
      - title: Wildcard(*) selector
        type: string
        const: '*'
        description: Wildcard(*) selector that includes all available fields in the selection
      - title: Explicit list of fields
        type: array
        items:
          type: string
        description: Explicit list of fields to include in the selection
      - title: Regex matching
        type: object
        description: 'Advanced matching using regex, DuckDB expression, or exclusion'
        properties:
          regex:
            type: string
            description: Select fields using a regular expression
          expr:
            type: string
            description: DuckDB SQL expression to select fields based on custom logic
          exclude:
            type: object
            description: Select all fields except those listed here
        additionalProperties: false
        oneOf:
          - required:
              - regex
          - required:
              - expr
          - required:
              - exclude
  
  

    # component_variable_properties:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #       description: Unique identifier for the variable
    #     type:
    #       type: string
    #       description: Data type of the variable (e.g., string, number, boolean)
    #     value:
    #       description: Default value for the variable. Can be any valid JSON value type
    #       type:
    #         - string
    #         - number
    #         - boolean
    #         - object
    #         - array
    #   required:
    #     - name
    #     - type
    #   additionalProperties: false 
