$schema: 'http://json-schema.org/draft-07/schema#'
$id: apis.schema.yaml
title: API YAML
type: object
description: In your Rill project directory, create a new file name `<api-name>.yaml` in the `apis` directory containing a custom API definition. See comprehensive documentation on how to define and use [custom APIs](/integrate/custom-apis/index.md)
examples:
  - # Example: This api returns the top 10 authors by net line changes since the specified date provided in the arguments.
    type: api
    name: metrics_view_api
    metrics_sql: |-
      SELECT author_name, net_line_changes
      FROM advanced_metrics_view
        where author_date > '{{ .args.date }}'
        order by net_line_changes DESC
        limit 10
allOf:
  - title: Properties
    type: object
    properties:
      type:
        type: string
        const: api
        description: Refers to the resource type and must be `api`
      openapi:
        type: object
        description: OpenAPI specification for the API endpoint
        properties:
          summary:
            type: string
            description: A brief description of what the API endpoint does
          parameters:
            type: array
            description: List of parameters that the API endpoint accepts
            items:
              type: object
              additionalProperties: true
          request_schema:
            type: object
            description: JSON schema for the request body (use nested YAML instead of a JSON string)
            additionalProperties: true
          response_schema:
            type: object
            description: JSON schema for the response body (use nested YAML instead of a JSON string)
            additionalProperties: true
      security:
        $ref: '#/definitions/security_policy_properties'
      skip_nested_security:
        type: boolean
        description: Flag to control security inheritance
    allOf:
      - $ref: '#/definitions/data_properties'
    required:
      - type       
  - $ref: '#/definitions/common_properties'
definitions:
  data_properties:
    oneOf:
      - title: SQL Query
        type: object
        description: Executes a raw SQL query against the project's data models.
        properties:
          sql:
            type: string
            description: Raw SQL query to run against existing models in the project.
          connector:
            type: string
            description: specifies the connector to use when running SQL or glob queries.
        required:
          - sql
      - title: Metrics View Query
        type: object
        description: Executes a SQL query that targets a defined metrics view.
        properties:
          metrics_sql:
            type: string
            description: SQL query that targets a metrics view in the project
        required:
          - metrics_sql
      - title: Custom API Call
        type: object
        description: Calls a custom API defined in the project to compute data.
        properties:
          api:
            type: string
            description: Name of a custom API defined in the project.
          args:
            type: object
            description: Arguments to pass to the custom API.
            additionalProperties: true
        required:
          - api
      - title: File Glob Query
        type: object
        description: Uses a file-matching pattern (glob) to query data from a connector.
        properties:
          glob:
            description:  Defines the file path or pattern to query from the specified connector.
            anyOf:
              - type: string
                description: A simple file path/glob pattern as a string.
              - type: object
                description: An object-based configuration for specifying a file path/glob pattern with advanced options.
                additionalProperties: true
          connector:
            type: string
            description: Specifies the connector to use with the glob input.
        required:
          - glob
      - title: Resource Status Check
        type: object
        description: Uses the status of a resource as data.
        properties:
          resource_status:
            type: object
            description: Based on resource status
            properties:
              where_error:
                type: boolean
                description: Indicates whether the condition should trigger when the resource is in an error state.
            additionalProperties: true
        required:
          - resource_status
  security_policy_properties:
    type: object
    description: Defines security rules and access control policies for resources
    properties:
      access:
        oneOf:
          - type: string
            description: SQL expression that evaluates to a boolean to determine access
          - type: boolean
            description: Direct boolean value to allow or deny access
        description: Expression indicating if the user should be granted access to the dashboard. If not defined, it will resolve to false and the dashboard won't be accessible to anyone. Needs to be a valid SQL expression that evaluates to a boolean.
      row_filter:
        type: string
        description: SQL expression to filter the underlying model by. Can leverage templated user attributes to customize the filter for the requesting user. Needs to be a valid SQL expression that can be injected into a WHERE clause
      include:
        type: array
        description: List of dimension or measure names to include in the dashboard. If include is defined all other dimensions and measures are excluded
        items:
          type: object
          properties:
            if:
              type: string
              description: Expression to decide if the column should be included or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean
            names:
              anyOf:
                - type: array
                  description: List of specific field names to include
                  items:
                    type: string
                - type: string
                  description: Wildcard '*' to include all fields
                  enum:
                    - '*'
              description: List of fields to include. Should match the name of one of the dashboard's dimensions or measures
          required:
            - if
            - names
      exclude:
        type: array
        description: List of dimension or measure names to exclude from the dashboard. If exclude is defined all other dimensions and measures are included
        items:
          type: object
          properties:
            if:
              type: string
              description: Expression to decide if the column should be excluded or not. It can leverage templated user attributes. Needs to be a valid SQL expression that evaluates to a boolean
            names:
              anyOf:
                - type: array
                  description: List of specific field names to exclude
                  items:
                    type: string
                - type: string
                  description: Wildcard '*' to exclude all fields
                  enum:
                    - '*'
              description: List of fields to exclude. Should match the name of one of the dashboard's dimensions or measures
          required:
            - if
            - names
      rules:
        type: array
        description: List of detailed security rules that can be used to define complex access control policies
        items:
          type: object
          description: Individual security rule definition
          properties:
            type:
              type: string
              enum:
                - access
                - field_access
                - row_filter
              description: Type of security rule - access (overall access), field_access (field-level access), or row_filter (row-level filtering)
            action:
              type: string
              enum:
                - allow
                - deny
              description: Whether to allow or deny access for this rule
            if:
              type: string
              description: Conditional expression that determines when this rule applies. Must be a valid SQL expression that evaluates to a boolean
            names:
              type: array
              items:
                type: string
              description: List of field names this rule applies to (for field_access type rules)
            all:
              type: boolean
              description: When true, applies the rule to all fields (for field_access type rules)
            sql:
              type: string
              description: SQL expression for row filtering (for row_filter type rules)
          required:
            - type
  common_properties:
    type: object
    title: "Common Properties"
    properties:
      name:
        type: string
        description: Name is usually inferred from the filename, but can be specified manually.
      refs:
        type: array
        description: 'List of resource references'
        items:
          type: string
          description: A string reference like `<resource-name>` or `<type/resource-name>`.
      dev:
        type: object
        description: Overrides any properties in development environment.
      prod:
        type: object
        description: Overrides any properties in production environment. 