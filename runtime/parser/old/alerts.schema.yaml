$schema: 'http://json-schema.org/draft-07/schema#'
$id: alerts.schema.yaml
title: Alert YAML
type: object
description: Along with alertings at the dashboard level and can be created via the UI, there might be more extensive alerting that you might want to develop and can be done so the an alert.yaml. When creating an alert via a YAML file, you'll see this denoted in the UI as `Created through code`.
examples:
  - # Example: To send alert when data lags by more than 1 day to slack channel #rill-cloud-alerts
    type: alert
    display_name: Data lags by more than 1 day
    # Check the alert every hour.
    refresh:
      cron: 0 * * * *
    # Query that returns non-empty results if the metrics lag by more than 1 day.
    data:
      sql: |-
        SELECT  *
        FROM
        (
          SELECT  MAX(event_time) AS max_time
          FROM rill_metrics_model
        )
        WHERE max_time < NOW() - INTERVAL '1 day'
    # Send notifications in Slack.
    notify:
      slack:
        channels:
          - '#rill-cloud-alerts'
allOf:
  - title: Properties
    type: object
    properties:
      type:
        type: string
        const: alert
        description: Refers to the resource type and must be `alert`
      display_name:
        type: string
        description: Refers to the display name for the alert
      refresh:
        $ref: '#/definitions/schedule_properties'
        description: Specifies the refresh schedule that Rill should follow to re-ingest and update the underlying data
      intervals:
        type: object
        description: define the interval of the alert to check
        properties:
          duration:
            type: string
            description: a valid ISO8601 duration to define the interval duration
          limit:
            type: integer
            description: maximum number of intervals to check for on invocation
            minimum: 0
          check_unclosed:
            type: boolean
            description: 'boolean, whether unclosed intervals should be checked'
      watermark:
        type: string
        enum:
          - trigger_time
          - inherit
        description: Specifies how the watermark is determined for incremental processing.  Use 'trigger_time' to set it at runtime or 'inherit' to use the upstream model's watermark.
      timeout:
        type: string
        description: define the timeout of the alert in seconds (optional).
      data:
        description: Specifies one of the options to retrieve or compute the data used by alert
        $ref: '#/definitions/data_properties'
      for:
        description: "Specifies how user identity or attributes should be evaluated for security policy enforcement."
        oneOf:
          - type: object
            description: Specifies a unique user identifier for applying security policies.
            properties:
              user_id:
                type: string
                description: "The unique user ID used to evaluate security policies."
            required:
              - user_id
            additionalProperties: false
          - type: object
            description: Specifies a user's email address for applying security policies.
            properties:
              user_email:
                type: string
                description: "The user's email address used to evaluate security policies."
                format: email
            required:
              - user_email
            additionalProperties: false
          - type: object
            description: Specifies a set of arbitrary user attributes for applying security policies.
            properties:
              attributes:
                type: object
                description: A dictionary of user attributes used to evaluate security policies.
                additionalProperties: true
            required:
              - attributes
            additionalProperties: false
      on_recover:
        type: boolean
        description: Send an alert when a previously failing alert recovers. Defaults to false.
      on_fail:
        type: boolean
        description: Send an alert when a failure occurs. Defaults to true.
      on_error:
        type: boolean
        description: Send an alert when an error occurs during evaluation. Defaults to false.
      renotify:
        type: boolean
        description: Enable repeated notifications for unresolved alerts. Defaults to false.
      renotify_after:
        type: string
        description: Defines the re-notification interval for the alert (e.g., '10m','24h'), equivalent to snooze duration in UI, defaults to 'Off'
      notify:
        $ref: '#/definitions/notify_properties'
        description: Defines how and where to send notifications. At least one method (email or Slack) is required.
      annotations:
        type: object
        description: Key value pair used for annotations
        additionalProperties:
          type: string
    required:
      - type
      - refresh
      - data
      - notify  
  - $ref: '#/definitions/common_properties'
definitions:
  schedule_properties:
    type: object
    properties:
      cron:
        type: string
        description: A cron expression that defines the execution schedule
      time_zone:
        type: string
        description: Time zone to interpret the schedule in (e.g., 'UTC', 'America/Los_Angeles').
      disable:
        type: boolean
        description: 'If true, disables the resource without deleting it.'
      ref_update:
        type: boolean
        description: 'If true, allows the resource to run when a dependency updates.'
      run_in_dev:
        type: boolean
        description: 'If true, allows the schedule to run in development mode.'
  data_properties:
    oneOf:
      - title: SQL Query
        type: object
        description: Executes a raw SQL query against the project's data models.
        properties:
          sql:
            type: string
            description: Raw SQL query to run against existing models in the project.
          connector:
            type: string
            description: specifies the connector to use when running SQL or glob queries.
        required:
          - sql
      - title: Metrics View Query
        type: object
        description: Executes a SQL query that targets a defined metrics view.
        properties:
          metrics_sql:
            type: string
            description: SQL query that targets a metrics view in the project
        required:
          - metrics_sql
      - title: Custom API Call
        type: object
        description: Calls a custom API defined in the project to compute data.
        properties:
          api:
            type: string
            description: Name of a custom API defined in the project.
          args:
            type: object
            description: Arguments to pass to the custom API.
            additionalProperties: true
        required:
          - api
      - title: File Glob Query
        type: object
        description: Uses a file-matching pattern (glob) to query data from a connector.
        properties:
          glob:
            description:  Defines the file path or pattern to query from the specified connector.
            anyOf:
              - type: string
                description: A simple file path/glob pattern as a string.
              - type: object
                description: An object-based configuration for specifying a file path/glob pattern with advanced options.
                additionalProperties: true
          connector:
            type: string
            description: Specifies the connector to use with the glob input.
        required:
          - glob
      - title: Resource Status Check
        type: object
        description: Uses the status of a resource as data.
        properties:
          resource_status:
            type: object
            description: Based on resource status
            properties:
              where_error:
                type: boolean
                description: Indicates whether the condition should trigger when the resource is in an error state.
            additionalProperties: true
        required:
          - resource_status
  notify_properties:
    type: object
    properties:
      email:
        type: object
        description: Send notifications via email.
        properties:
          recipients:
            type: array
            description: An array of email addresses to notify.
            items:
              type: string
            minItems: 1
        required:
          - recipients
      slack:
        type: object
        description: Send notifications via Slack.
        properties:
          users:
            type: array
            description: An array of Slack user IDs to notify.
            items:
              type: string
            minItems: 1
          channels:
            type: array
            description: An array of Slack channel IDs to notify.
            items:
              type: string
            minItems: 1
          webhooks:
            type: array
            description: An array of Slack webhook URLs to send notifications to.
            items:
              type: string
            minItems: 1
        anyOf:
          - required:
              - channels
          - required:
              - users
          - required:
              - webhooks
    anyOf:
        - required:
          - slack
        - required:
          - email
  common_properties:
    type: object
    title: "Common Properties"
    properties:
      name:
        type: string
        description: Name is usually inferred from the filename, but can be specified manually.
      refs:
        type: array
        description: 'List of resource references'
        items:
          type: string
          description: A string reference like `<resource-name>` or `<type/resource-name>`.
      dev:
        type: object
        description: Overrides any properties in development environment.
      prod:
        type: object
        description: Overrides any properties in production environment. 