---
description: 
globs: 
alwaysApply: false
---
# Frontend Development Guidelines

## Technology Stack

### Core Technologies
- **SvelteKit 2.x**: Full-stack web framework
- **TypeScript**: Type-safe JavaScript
- **Tailwind CSS v4**: Utility-first CSS framework
- **Vite**: Build tool and dev server

### Web Applications
- **web-local**: Local Rill application (data modeler)
- **web-admin**: Admin control plane frontend
- **web-common**: Shared components and utilities

## Project Structure

### Web Application Organization
```
web-local/
├── src/
│   ├── lib/           # Application code
│   ├── routes/        # SvelteKit routes
│   ├── app.html       # HTML template
│   └── app.css        # Global styles
├── static/            # Static assets
├── tests/             # E2E tests
└── package.json       # Dependencies

web-admin/
├── src/
│   ├── lib/           # Application code
│   ├── routes/        # SvelteKit routes
│   └── app.html       # HTML template
├── tests/             # E2E tests
└── package.json       # Dependencies

web-common/
├── src/
│   ├── components/    # Shared components
│   ├── features/      # Feature modules
│   ├── lib/           # Utilities
│   └── types/         # TypeScript types
└── package.json       # Dependencies
```

## Component Architecture

### Shared Components (web-common)
- Generic, reusable components
- No business logic dependencies
- Proper TypeScript interfaces
- Comprehensive prop validation

### Component Categories
```
web-common/src/components/
├── ui/              # Basic UI components
└── button/          # Button components
```

### Component Guidelines
- Use PascalCase for component names
- Match component name to file name
- Implement proper TypeScript interfaces
- Use proper event dispatching
- Keep components small and focused

## Styling Guidelines

### Tailwind CSS v4
- Use inline Tailwind classes
- Avoid `<style>` blocks in Svelte files
- Use Tailwind variants for responsive design
- Leverage Tailwind's design system

### CSS Organization
- Global styles in `app.css`
- Component-specific styles inline
- Use CSS custom properties for theming
- Follow mobile-first responsive design

## State Management

### Svelte Stores
- Use Svelte stores for global state
- Keep stores modular and focused
- Use derived stores for computed values
- Implement proper store subscriptions

### Data Fetching
- Use `@tanstack/svelte-query` for server state
- Implement proper loading states
- Handle errors gracefully
- Use optimistic updates where appropriate

## Routing and Navigation

### SvelteKit Routing
- Use file-based routing in `src/routes/`
- Implement proper layouts with `+layout.svelte`
- Handle loading states with `+loading.svelte`
- Implement error boundaries with `+error.svelte`

### Route Organization
```
src/routes/
├── +layout.svelte     # Root layout
├── +page.svelte       # Home page
├── projects/
│   ├── +page.svelte   # Projects list
│   └── [id]/
│       └── +page.svelte # Project detail
└── api/               # API routes
```

## API Integration

### Client Generation
- Use `orval` for OpenAPI client generation
- Generate clients in `web-common`
- Use generated types for type safety
- Implement proper error handling

### API Patterns
- Use Connect-RPC for gRPC communication
- Implement proper request/response types
- Handle authentication and authorization
- Use proper error boundaries

## Testing Strategy

### Testing Tools
- **Playwright**: E2E testing
- **Vitest**: Unit testing
- **@testing-library/svelte**: Component testing

### Test Organization
```
tests/
├── e2e/               # End-to-end tests
├── unit/              # Unit tests
└── fixtures/          # Test data
```

### Testing Guidelines
- Write tests for critical user flows
- Test component interactions
- Mock external dependencies
- Use proper test data fixtures

## Build and Development

### Development Commands
```bash
# Start development server
npm run dev

# Build for production
npm run build

# Run type checking
npm run check

# Run tests
npm run test

# Format code
npm run format

# Lint code
npm run lint
```

### Build Configuration
- Use Vite for development and building
- Configure proper environment variables
- Implement code splitting
- Optimize bundle size

## Performance Optimization

### Code Splitting
- Use dynamic imports for route-based splitting
- Lazy load non-critical components
- Implement proper preloading strategies

### Asset Optimization
- Optimize images and static assets
- Use proper caching strategies
- Implement service workers where needed

## Accessibility

### ARIA Guidelines
- Use proper ARIA labels and roles
- Implement keyboard navigation
- Ensure proper color contrast
- Test with screen readers

### Semantic HTML
- Use semantic HTML elements
- Implement proper heading hierarchy
- Use proper form labels and descriptions