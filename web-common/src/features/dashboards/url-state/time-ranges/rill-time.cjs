// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }

  import {
    RillTime,

    RillTimeAnchoredDurationInterval,
    RillShorthandInterval,
    RillPeriodToGrainInterval,
    RillTimeStartEndInterval,
    RillGrainToInterval,

    RillGrainPointInTime,
    RillGrainPointInTimePart,
    RillAbsoluteTime,
  } from "./RillTime.ts"
let Lexer = undefined;
let ParserRules = [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "dqstring$ebnf$1", "symbols": []},
    {"name": "dqstring$ebnf$1", "symbols": ["dqstring$ebnf$1", "dstrchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "dqstring", "symbols": [{"literal":"\""}, "dqstring$ebnf$1", {"literal":"\""}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "sqstring$ebnf$1", "symbols": []},
    {"name": "sqstring$ebnf$1", "symbols": ["sqstring$ebnf$1", "sstrchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "sqstring", "symbols": [{"literal":"'"}, "sqstring$ebnf$1", {"literal":"'"}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "btstring$ebnf$1", "symbols": []},
    {"name": "btstring$ebnf$1", "symbols": ["btstring$ebnf$1", /[^`]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "btstring", "symbols": [{"literal":"`"}, "btstring$ebnf$1", {"literal":"`"}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "dstrchar", "symbols": [/[^\\"\n]/], "postprocess": id},
    {"name": "dstrchar", "symbols": [{"literal":"\\"}, "strescape"], "postprocess": 
        function(d) {
            return JSON.parse("\""+d.join("")+"\"");
        }
        },
    {"name": "sstrchar", "symbols": [/[^\\'\n]/], "postprocess": id},
    {"name": "sstrchar", "symbols": [{"literal":"\\"}, "strescape"], "postprocess": function(d) { return JSON.parse("\""+d.join("")+"\""); }},
    {"name": "sstrchar$string$1", "symbols": [{"literal":"\\"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sstrchar", "symbols": ["sstrchar$string$1"], "postprocess": function(d) {return "'"; }},
    {"name": "strescape", "symbols": [/["\\/bfnrt]/], "postprocess": id},
    {"name": "strescape", "symbols": [{"literal":"u"}, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/], "postprocess": 
        function(d) {
            return d.join("");
        }
        },
    {"name": "rill_time", "symbols": ["full_interval"], "postprocess": id},
    {"name": "rill_time$string$1", "symbols": [{"literal":"t"}, {"literal":"z"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rill_time", "symbols": ["full_interval", "_", "rill_time$string$1", "_", "timezone_modifier"], "postprocess": ([rt, , , , tz]) => rt.withTimezone(tz)},
    {"name": "full_interval$subexpression$1", "symbols": [/[aA]/, /[sS]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "full_interval$subexpression$2", "symbols": [/[oO]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "full_interval", "symbols": ["interval_with_grain", "_", "full_interval$subexpression$1", "_", "full_interval$subexpression$2", "_", "anchor_override"], "postprocess": id},
    {"name": "full_interval", "symbols": ["interval_with_grain"], "postprocess": id},
    {"name": "interval_with_grain$subexpression$1", "symbols": [/[bB]/, /[yY]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "interval_with_grain", "symbols": ["interval", "_", "interval_with_grain$subexpression$1", "_", "grain"], "postprocess": ([interval, , , , grain]) => new RillTime(interval).withGrain(grain)},
    {"name": "interval_with_grain", "symbols": ["interval"], "postprocess": ([interval]) => new RillTime(interval)},
    {"name": "interval", "symbols": ["anchored_duration_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["shorthand_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["period_to_grain_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["ordinal_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["start_end_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["grain_to_interval"], "postprocess": id},
    {"name": "interval", "symbols": ["iso_interval"], "postprocess": id},
    {"name": "anchored_duration_interval$subexpression$1", "symbols": [/[sS]/, /[tT]/, /[aA]/, /[rR]/, /[tT]/, /[iI]/, /[nN]/, /[gG]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "anchored_duration_interval", "symbols": ["grain_duration", "_", "anchored_duration_interval$subexpression$1", "_", "point_in_time"], "postprocess": ([grains, , , , point]) => new RillTimeAnchoredDurationInterval(grains, true, point)},
    {"name": "anchored_duration_interval$subexpression$2", "symbols": [/[eE]/, /[nN]/, /[dD]/, /[iI]/, /[nN]/, /[gG]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "anchored_duration_interval", "symbols": ["grain_duration", "_", "anchored_duration_interval$subexpression$2", "_", "point_in_time"], "postprocess": ([grains, , , , point]) => new RillTimeAnchoredDurationInterval(grains, false, point)},
    {"name": "shorthand_interval$subexpression$1", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "shorthand_interval", "symbols": ["num", "grain", "_", "shorthand_interval$subexpression$1", "_", "grain", {"literal":"!"}], "postprocess": ([num, grain, , , , inGrain]) => new RillShorthandInterval(num, grain, inGrain, false)},
    {"name": "shorthand_interval$subexpression$2", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "shorthand_interval", "symbols": ["num", "grain", "_", "shorthand_interval$subexpression$2", "_", "grain"], "postprocess": ([num, grain, , , , inGrain]) => new RillShorthandInterval(num, grain, inGrain, true)},
    {"name": "shorthand_interval", "symbols": ["num", "grain", {"literal":"!"}], "postprocess": ([num, grain]) => new RillShorthandInterval(num, grain, undefined, false)},
    {"name": "shorthand_interval", "symbols": ["num", "grain"], "postprocess": ([num, grain]) => new RillShorthandInterval(num, grain, undefined, true)},
    {"name": "period_to_grain_interval$subexpression$1", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "period_to_grain_interval", "symbols": ["period_to_grain", "_", "period_to_grain_interval$subexpression$1", "_", "grain", {"literal":"!"}], "postprocess": ([grain, , , , inGrain]) => new RillPeriodToGrainInterval(grain, inGrain, false)},
    {"name": "period_to_grain_interval$subexpression$2", "symbols": [/[iI]/, /[nN]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "period_to_grain_interval", "symbols": ["period_to_grain", "_", "period_to_grain_interval$subexpression$2", "_", "grain"], "postprocess": ([grain, , , , inGrain]) => new RillPeriodToGrainInterval(grain, inGrain, true)},
    {"name": "period_to_grain_interval", "symbols": ["period_to_grain", {"literal":"!"}], "postprocess": ([grain]) => new RillPeriodToGrainInterval(grain, undefined, false)},
    {"name": "period_to_grain_interval", "symbols": ["period_to_grain"], "postprocess": ([grain]) => new RillPeriodToGrainInterval(grain, undefined, true)},
    {"name": "ordinal_interval$subexpression$1", "symbols": [/[oO]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ordinal_interval", "symbols": ["ordinal_duration", "_", "ordinal_interval$subexpression$1", "_", "ordinal_interval_end"]},
    {"name": "ordinal_interval", "symbols": ["ordinal_duration"]},
    {"name": "ordinal_interval_end", "symbols": ["grain_to_interval"]},
    {"name": "ordinal_interval_end", "symbols": ["start_end_interval"]},
    {"name": "ordinal_interval_end", "symbols": ["grain"]},
    {"name": "start_end_interval$subexpression$1", "symbols": [/[tT]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "start_end_interval", "symbols": ["point_in_time", "_", "start_end_interval$subexpression$1", "_", "point_in_time"], "postprocess": ([start, , , , end]) => new RillTimeStartEndInterval(start, end)},
    {"name": "grain_to_interval", "symbols": ["grain_point_in_time", "_", {"literal":"#"}], "postprocess": ([point]) => new RillGrainToInterval(point)},
    {"name": "iso_interval$subexpression$1", "symbols": [/[tT]/, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "iso_interval", "symbols": ["abs_time", "_", "iso_interval$subexpression$1", "_", "abs_time"]},
    {"name": "iso_interval", "symbols": ["abs_time", "_", {"literal":"/"}, "_", "abs_time"]},
    {"name": "iso_interval", "symbols": ["abs_time"]},
    {"name": "anchor_override", "symbols": ["grain_point_in_time"]},
    {"name": "anchor_override", "symbols": ["labeled_point_in_time"]},
    {"name": "anchor_override", "symbols": ["abs_time"]},
    {"name": "point_in_time", "symbols": ["ordinal_point_in_time"], "postprocess": id},
    {"name": "point_in_time", "symbols": ["grain_point_in_time"], "postprocess": id},
    {"name": "point_in_time", "symbols": ["labeled_point_in_time"], "postprocess": id},
    {"name": "ordinal_point_in_time", "symbols": ["ordinal", "_", "suffix", "_", "ordinal_duration"]},
    {"name": "ordinal_point_in_time", "symbols": ["ordinal", "_", "suffix"]},
    {"name": "grain_point_in_time$ebnf$1", "symbols": []},
    {"name": "grain_point_in_time$ebnf$1$subexpression$1", "symbols": ["_", "prefixed_grain_point_in_time_part"]},
    {"name": "grain_point_in_time$ebnf$1", "symbols": ["grain_point_in_time$ebnf$1", "grain_point_in_time$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "grain_point_in_time", "symbols": ["grain_point_in_time_part", "grain_point_in_time$ebnf$1"], "postprocess": ([part, rest]) => new RillGrainPointInTime([part, ...rest.map(([, p]) => p)])},
    {"name": "grain_point_in_time_part", "symbols": ["prefixed_grain_point_in_time_part"], "postprocess": id},
    {"name": "grain_point_in_time_part", "symbols": ["unprefixed_grain_point_in_time_part"], "postprocess": id},
    {"name": "prefixed_grain_point_in_time_part", "symbols": ["prefix", "_", "unprefixed_grain_point_in_time_part"], "postprocess": ([prefix, _, point]) => point.withPrefix(prefix)},
    {"name": "unprefixed_grain_point_in_time_part", "symbols": ["grain_duration", "_", {"literal":"/"}, "_", "snap_grain", "_", "suffix"], "postprocess": ([grains, , , , snap, , suffix]) => new RillGrainPointInTimePart(grains).withSnap(snap).withSuffix(suffix)},
    {"name": "unprefixed_grain_point_in_time_part", "symbols": ["grain_duration", "_", {"literal":"/"}, "_", "snap_grain"], "postprocess": ([grains, , , , snap]) => new RillGrainPointInTimePart(grains).withSnap(snap)},
    {"name": "unprefixed_grain_point_in_time_part", "symbols": ["grain_duration", "_", "suffix"], "postprocess": ([grains, , suffix]) => new RillGrainPointInTimePart(grains).withSuffix(suffix)},
    {"name": "unprefixed_grain_point_in_time_part", "symbols": ["grain_duration"], "postprocess": ([grains]) => new RillGrainPointInTimePart(grains)},
    {"name": "labeled_point_in_time$string$1", "symbols": [{"literal":"e"}, {"literal":"a"}, {"literal":"r"}, {"literal":"l"}, {"literal":"i"}, {"literal":"e"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "labeled_point_in_time", "symbols": ["labeled_point_in_time$string$1"], "postprocess": id},
    {"name": "labeled_point_in_time$string$2", "symbols": [{"literal":"l"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "labeled_point_in_time", "symbols": ["labeled_point_in_time$string$2"], "postprocess": id},
    {"name": "labeled_point_in_time$string$3", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "labeled_point_in_time", "symbols": ["labeled_point_in_time$string$3"], "postprocess": id},
    {"name": "labeled_point_in_time$string$4", "symbols": [{"literal":"w"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}, {"literal":"r"}, {"literal":"m"}, {"literal":"a"}, {"literal":"r"}, {"literal":"k"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "labeled_point_in_time", "symbols": ["labeled_point_in_time$string$4"], "postprocess": id},
    {"name": "ordinal_duration$ebnf$1", "symbols": []},
    {"name": "ordinal_duration$ebnf$1$subexpression$1$subexpression$1", "symbols": [/[oO]/, /[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ordinal_duration$ebnf$1$subexpression$1", "symbols": ["_", "ordinal_duration$ebnf$1$subexpression$1$subexpression$1", "_", "ordinal_duration_part"]},
    {"name": "ordinal_duration$ebnf$1", "symbols": ["ordinal_duration$ebnf$1", "ordinal_duration$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ordinal_duration", "symbols": ["ordinal_duration_part", "ordinal_duration$ebnf$1"]},
    {"name": "ordinal_duration_part", "symbols": ["ordinal"]},
    {"name": "ordinal_duration_part", "symbols": ["snap_prefix", "_", "grain_duration_part"]},
    {"name": "ordinal", "symbols": ["grain", "num"]},
    {"name": "grain_duration$ebnf$1", "symbols": []},
    {"name": "grain_duration$ebnf$1$subexpression$1", "symbols": ["_", "grain_duration_part"]},
    {"name": "grain_duration$ebnf$1", "symbols": ["grain_duration$ebnf$1", "grain_duration$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "grain_duration", "symbols": ["grain_duration_part", "grain_duration$ebnf$1"], "postprocess": ([part, rest]) => ([part, ...rest.map(([, p]) => p)])},
    {"name": "grain_duration_part", "symbols": ["num", "grain"], "postprocess": ([num, grain]) => ({num, grain})},
    {"name": "grain_duration_part", "symbols": ["grain"], "postprocess": ([grain]) => ({grain})},
    {"name": "period_to_grain$string$1", "symbols": [{"literal":"T"}, {"literal":"D"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "period_to_grain", "symbols": [/[sSmhHdDwWqQMyY]/, "period_to_grain$string$1"], "postprocess": ([grain]) => grain},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, {"literal":"T"}, /[\d]/, /[\d]/, /[:]/, /[\d]/, /[\d]/, /[:]/, /[\d]/, /[\d]/, {"literal":"Z"}], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, {"literal":"T"}, /[\d]/, /[\d]/, /[:]/, /[\d]/, /[\d]/], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, {"literal":"T"}, /[\d]/, /[\d]/], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/, /[\-]/, /[\d]/, /[\d]/], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "abs_time", "symbols": [/[\d]/, /[\d]/, /[\d]/, /[\d]/], "postprocess": RillAbsoluteTime.postProcessor},
    {"name": "timezone_modifier$ebnf$1", "symbols": [/[0-9a-zA-Z/+\-_]/]},
    {"name": "timezone_modifier$ebnf$1", "symbols": ["timezone_modifier$ebnf$1", /[0-9a-zA-Z/+\-_]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "timezone_modifier", "symbols": ["timezone_modifier$ebnf$1"], "postprocess": ([args]) => args.join("")},
    {"name": "prefix", "symbols": [/[+\-]/], "postprocess": id},
    {"name": "snap_prefix", "symbols": [/[<>]/], "postprocess": id},
    {"name": "suffix", "symbols": [/[\^\$]/], "postprocess": id},
    {"name": "num$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "num$ebnf$1", "symbols": ["num$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "num", "symbols": ["num$ebnf$1"], "postprocess": ([args]) => Number(args.join(""))},
    {"name": "snap_grain", "symbols": ["week_snap_grain"], "postprocess": id},
    {"name": "snap_grain", "symbols": ["grain"], "postprocess": id},
    {"name": "week_snap_grain", "symbols": [/[qQMyY]/, /[wW]/], "postprocess": ([args]) => args.join("")},
    {"name": "grain", "symbols": [/[sSmhHdDwWqQMyY]/], "postprocess": id}
];
let ParserStart = "rill_time";
export default { Lexer, ParserRules, ParserStart };
