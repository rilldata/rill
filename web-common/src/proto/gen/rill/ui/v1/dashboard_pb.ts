// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/ui/v1/dashboard.proto (package rill.ui.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { MetricsViewFilter } from "../../runtime/v1/queries_pb.js";
import { Expression } from "../../runtime/v1/expression_pb.js";
import { TimeGrain } from "../../runtime/v1/time_grain_pb.js";

/**
 * DashboardState represents the dashboard as seen by the user
 *
 * @generated from message rill.ui.v1.DashboardState
 */
export class DashboardState extends Message<DashboardState> {
  /**
   * Selected time range
   *
   * @generated from field: rill.ui.v1.DashboardTimeRange time_range = 1;
   */
  timeRange?: DashboardTimeRange;

  /**
   * Dimension filters applied
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filters = 2;
   */
  filters?: MetricsViewFilter;

  /**
   * Expression format for dimension filters
   *
   * @generated from field: rill.runtime.v1.Expression where = 20;
   */
  where?: Expression;

  /**
   * Temporary to differentiate between "select" and "in list" modes. Expression will be replaced with UI specific state in the future.
   *
   * @generated from field: repeated string dimensions_with_inlist_filter = 37;
   */
  dimensionsWithInlistFilter: string[] = [];

  /**
   * Expression format for measure filters
   *
   * @generated from field: repeated rill.ui.v1.DashboardDimensionFilter having = 21;
   */
  having: DashboardDimensionFilter[] = [];

  /**
   * Selected time granularity
   *
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 3;
   */
  timeGrain = TimeGrain.UNSPECIFIED;

  /**
   * @generated from field: rill.ui.v1.DashboardTimeRange compare_time_range = 4;
   */
  compareTimeRange?: DashboardTimeRange;

  /**
   * Determines the active page. This is cleaner than using setting `selected_dimension` or `expanded_measure`
   *
   * @generated from field: rill.ui.v1.DashboardState.ActivePage active_page = 32;
   */
  activePage = DashboardState_ActivePage.UNSPECIFIED;

  /**
   * Selected measure for the leaderboard
   *
   * @generated from field: optional string leaderboard_measure = 5;
   */
  leaderboardMeasure?: string;

  /**
   * Focused dimension
   *
   * @generated from field: optional string selected_dimension = 6;
   */
  selectedDimension?: string;

  /**
   * @generated from field: optional bool show_time_comparison = 7;
   */
  showTimeComparison?: boolean;

  /**
   * Selected measures and dimensions to be shown
   *
   * @generated from field: repeated string visible_measures = 8;
   */
  visibleMeasures: string[] = [];

  /**
   * @generated from field: optional bool all_measures_visible = 9;
   */
  allMeasuresVisible?: boolean;

  /**
   * @generated from field: repeated string visible_dimensions = 10;
   */
  visibleDimensions: string[] = [];

  /**
   * @generated from field: optional bool all_dimensions_visible = 11;
   */
  allDimensionsVisible?: boolean;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardContextColumn leaderboard_context_column = 12;
   */
  leaderboardContextColumn?: DashboardState_LeaderboardContextColumn;

  /**
   * Selected timezone for the dashboard
   *
   * @generated from field: optional string selected_timezone = 13;
   */
  selectedTimezone?: string;

  /**
   * Scrub time range
   *
   * @generated from field: optional rill.ui.v1.DashboardTimeRange scrub_range = 14;
   */
  scrubRange?: DashboardTimeRange;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardSortDirection leaderboard_sort_direction = 15;
   */
  leaderboardSortDirection?: DashboardState_LeaderboardSortDirection;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardSortType leaderboard_sort_type = 16;
   */
  leaderboardSortType?: DashboardState_LeaderboardSortType;

  /**
   * @generated from field: optional uint32 leaderboard_measure_count = 38;
   */
  leaderboardMeasureCount?: number;

  /**
   * @generated from field: optional string comparison_dimension = 17;
   */
  comparisonDimension?: string;

  /**
   * Expanded measure for TDD view
   *
   * @generated from field: optional string expanded_measure = 18;
   */
  expandedMeasure?: string;

  /**
   * Pin index for TDD table selected values
   *
   * @generated from field: optional int32 pin_index = 19;
   */
  pinIndex?: number;

  /**
   * Type of visualization for TDD view
   *
   * @generated from field: optional string chart_type = 33;
   */
  chartType?: string;

  /**
   * *
   * Pivot related fields
   *
   * @generated from field: optional bool pivot_is_active = 22;
   */
  pivotIsActive?: boolean;

  /**
   *
   * These pivot fields are preserved to support backward
   * compatibility with existing URLs
   *
   * @generated from field: repeated rill.runtime.v1.TimeGrain pivot_row_time_dimensions = 23;
   */
  pivotRowTimeDimensions: TimeGrain[] = [];

  /**
   * @generated from field: repeated string pivot_row_dimensions = 24;
   */
  pivotRowDimensions: string[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.TimeGrain pivot_column_time_dimensions = 25;
   */
  pivotColumnTimeDimensions: TimeGrain[] = [];

  /**
   * @generated from field: repeated string pivot_column_dimensions = 26;
   */
  pivotColumnDimensions: string[] = [];

  /**
   * List of time measures selected for columns
   *
   * @generated from field: repeated string pivot_column_measures = 27;
   */
  pivotColumnMeasures: string[] = [];

  /**
   * Map of dimensions that are expanded
   *
   * @generated from field: map<string, bool> pivot_expanded = 28;
   */
  pivotExpanded: { [key: string]: boolean } = {};

  /**
   * Sort settings
   *
   * @generated from field: repeated rill.ui.v1.PivotColumnSort pivot_sort = 29;
   */
  pivotSort: PivotColumnSort[] = [];

  /**
   * Pagination data
   *
   * @generated from field: optional int32 pivot_column_page = 30;
   */
  pivotColumnPage?: number;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.PivotTableMode pivot_table_mode = 31;
   */
  pivotTableMode?: DashboardState_PivotTableMode;

  /**
   * Enable comparison for pivot
   *
   * @generated from field: optional bool pivot_enable_comparison = 34;
   */
  pivotEnableComparison?: boolean;

  /**
   * List of all dimensions selected for rows
   *
   * @generated from field: repeated rill.ui.v1.PivotElement pivot_row_all_dimensions = 35;
   */
  pivotRowAllDimensions: PivotElement[] = [];

  /**
   * List of all dimensions selected for columns
   *
   * @generated from field: repeated rill.ui.v1.PivotElement pivot_column_all_dimensions = 36;
   */
  pivotColumnAllDimensions: PivotElement[] = [];

  constructor(data?: PartialMessage<DashboardState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.ui.v1.DashboardState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_range", kind: "message", T: DashboardTimeRange },
    { no: 2, name: "filters", kind: "message", T: MetricsViewFilter },
    { no: 20, name: "where", kind: "message", T: Expression },
    { no: 37, name: "dimensions_with_inlist_filter", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 21, name: "having", kind: "message", T: DashboardDimensionFilter, repeated: true },
    { no: 3, name: "time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 4, name: "compare_time_range", kind: "message", T: DashboardTimeRange },
    { no: 32, name: "active_page", kind: "enum", T: proto3.getEnumType(DashboardState_ActivePage) },
    { no: 5, name: "leaderboard_measure", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "selected_dimension", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "show_time_comparison", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "visible_measures", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "all_measures_visible", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 10, name: "visible_dimensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "all_dimensions_visible", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "leaderboard_context_column", kind: "enum", T: proto3.getEnumType(DashboardState_LeaderboardContextColumn), opt: true },
    { no: 13, name: "selected_timezone", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "scrub_range", kind: "message", T: DashboardTimeRange, opt: true },
    { no: 15, name: "leaderboard_sort_direction", kind: "enum", T: proto3.getEnumType(DashboardState_LeaderboardSortDirection), opt: true },
    { no: 16, name: "leaderboard_sort_type", kind: "enum", T: proto3.getEnumType(DashboardState_LeaderboardSortType), opt: true },
    { no: 38, name: "leaderboard_measure_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 17, name: "comparison_dimension", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "expanded_measure", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 19, name: "pin_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 33, name: "chart_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: "pivot_is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 23, name: "pivot_row_time_dimensions", kind: "enum", T: proto3.getEnumType(TimeGrain), repeated: true },
    { no: 24, name: "pivot_row_dimensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 25, name: "pivot_column_time_dimensions", kind: "enum", T: proto3.getEnumType(TimeGrain), repeated: true },
    { no: 26, name: "pivot_column_dimensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 27, name: "pivot_column_measures", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 28, name: "pivot_expanded", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 29, name: "pivot_sort", kind: "message", T: PivotColumnSort, repeated: true },
    { no: 30, name: "pivot_column_page", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 31, name: "pivot_table_mode", kind: "enum", T: proto3.getEnumType(DashboardState_PivotTableMode), opt: true },
    { no: 34, name: "pivot_enable_comparison", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 35, name: "pivot_row_all_dimensions", kind: "message", T: PivotElement, repeated: true },
    { no: 36, name: "pivot_column_all_dimensions", kind: "message", T: PivotElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardState {
    return new DashboardState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardState {
    return new DashboardState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardState {
    return new DashboardState().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardState | PlainMessage<DashboardState> | undefined, b: DashboardState | PlainMessage<DashboardState> | undefined): boolean {
    return proto3.util.equals(DashboardState, a, b);
  }
}

/**
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardContextColumn
 */
export enum DashboardState_LeaderboardContextColumn {
  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_PERCENT = 1;
   */
  PERCENT = 1,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT = 2;
   */
  DELTA_PERCENT = 2,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE = 3;
   */
  DELTA_ABSOLUTE = 3,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_HIDDEN = 4;
   */
  HIDDEN = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DashboardState_LeaderboardContextColumn)
proto3.util.setEnumType(DashboardState_LeaderboardContextColumn, "rill.ui.v1.DashboardState.LeaderboardContextColumn", [
  { no: 0, name: "LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED" },
  { no: 1, name: "LEADERBOARD_CONTEXT_COLUMN_PERCENT" },
  { no: 2, name: "LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT" },
  { no: 3, name: "LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE" },
  { no: 4, name: "LEADERBOARD_CONTEXT_COLUMN_HIDDEN" },
]);

/**
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardSortDirection
 */
export enum DashboardState_LeaderboardSortDirection {
  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_DESCENDING = 2;
   */
  DESCENDING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DashboardState_LeaderboardSortDirection)
proto3.util.setEnumType(DashboardState_LeaderboardSortDirection, "rill.ui.v1.DashboardState.LeaderboardSortDirection", [
  { no: 0, name: "LEADERBOARD_SORT_DIRECTION_UNSPECIFIED" },
  { no: 1, name: "LEADERBOARD_SORT_DIRECTION_ASCENDING" },
  { no: 2, name: "LEADERBOARD_SORT_DIRECTION_DESCENDING" },
]);

/**
 * *
 * SortType is used to determine how to sort the leaderboard
 * and dimension detail table, as well as where to place the
 * sort arrow.
 *
 * By default, the leaderboards+table will be sorted by VALUE,
 * using the value of the currently selected dashboard measure.
 *
 * If DELTA_ABSOLUTE or DELTA_PERCENT is selected, the
 * leaderboards+table will be sorted by the absolute or percentage
 * delta change of the currently selected dashboard measure.
 *
 * If PERCENT is selected, the table will be sorted by the value
 * of the currently selected dashboard measure, which will return
 * the same ordering as the percent-of-total sort for measures
 * with valid percent-of-total. However, the sort arrow will be
 * placed next to the percent-of-total icon.
 *
 * As of 2023-08, DIMENSION is not implemented, but at that time
 * the plan was to only apply DIMENSTION sort to the dimension
 * detail table, and not the leaderboards.
 *
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardSortType
 */
export enum DashboardState_LeaderboardSortType {
  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_VALUE = 1;
   */
  VALUE = 1,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DIMENSION = 2;
   */
  DIMENSION = 2,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_PERCENT = 3;
   */
  PERCENT = 3,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DELTA_PERCENT = 4;
   */
  DELTA_PERCENT = 4,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE = 5;
   */
  DELTA_ABSOLUTE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(DashboardState_LeaderboardSortType)
proto3.util.setEnumType(DashboardState_LeaderboardSortType, "rill.ui.v1.DashboardState.LeaderboardSortType", [
  { no: 0, name: "LEADERBOARD_SORT_TYPE_UNSPECIFIED" },
  { no: 1, name: "LEADERBOARD_SORT_TYPE_VALUE" },
  { no: 2, name: "LEADERBOARD_SORT_TYPE_DIMENSION" },
  { no: 3, name: "LEADERBOARD_SORT_TYPE_PERCENT" },
  { no: 4, name: "LEADERBOARD_SORT_TYPE_DELTA_PERCENT" },
  { no: 5, name: "LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE" },
]);

/**
 * @generated from enum rill.ui.v1.DashboardState.PivotTableMode
 */
export enum DashboardState_PivotTableMode {
  /**
   * @generated from enum value: PIVOT_TABLE_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PIVOT_TABLE_MODE_FLAT = 1;
   */
  FLAT = 1,

  /**
   * @generated from enum value: PIVOT_TABLE_MODE_NEST = 2;
   */
  NEST = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DashboardState_PivotTableMode)
proto3.util.setEnumType(DashboardState_PivotTableMode, "rill.ui.v1.DashboardState.PivotTableMode", [
  { no: 0, name: "PIVOT_TABLE_MODE_UNSPECIFIED" },
  { no: 1, name: "PIVOT_TABLE_MODE_FLAT" },
  { no: 2, name: "PIVOT_TABLE_MODE_NEST" },
]);

/**
 * @generated from enum rill.ui.v1.DashboardState.ActivePage
 */
export enum DashboardState_ActivePage {
  /**
   * @generated from enum value: ACTIVE_PAGE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTIVE_PAGE_DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * @generated from enum value: ACTIVE_PAGE_DIMENSION_TABLE = 2;
   */
  DIMENSION_TABLE = 2,

  /**
   * @generated from enum value: ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL = 3;
   */
  TIME_DIMENSIONAL_DETAIL = 3,

  /**
   * @generated from enum value: ACTIVE_PAGE_PIVOT = 4;
   */
  PIVOT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DashboardState_ActivePage)
proto3.util.setEnumType(DashboardState_ActivePage, "rill.ui.v1.DashboardState.ActivePage", [
  { no: 0, name: "ACTIVE_PAGE_UNSPECIFIED" },
  { no: 1, name: "ACTIVE_PAGE_DEFAULT" },
  { no: 2, name: "ACTIVE_PAGE_DIMENSION_TABLE" },
  { no: 3, name: "ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL" },
  { no: 4, name: "ACTIVE_PAGE_PIVOT" },
]);

/**
 * @generated from message rill.ui.v1.DashboardTimeRange
 */
export class DashboardTimeRange extends Message<DashboardTimeRange> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp time_start = 2;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp time_end = 3;
   */
  timeEnd?: Timestamp;

  constructor(data?: PartialMessage<DashboardTimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.ui.v1.DashboardTimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "time_start", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "time_end", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardTimeRange {
    return new DashboardTimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardTimeRange {
    return new DashboardTimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardTimeRange {
    return new DashboardTimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardTimeRange | PlainMessage<DashboardTimeRange> | undefined, b: DashboardTimeRange | PlainMessage<DashboardTimeRange> | undefined): boolean {
    return proto3.util.equals(DashboardTimeRange, a, b);
  }
}

/**
 * @generated from message rill.ui.v1.DashboardDimensionFilter
 */
export class DashboardDimensionFilter extends Message<DashboardDimensionFilter> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: rill.runtime.v1.Expression filter = 2;
   */
  filter?: Expression;

  constructor(data?: PartialMessage<DashboardDimensionFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.ui.v1.DashboardDimensionFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: Expression },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardDimensionFilter {
    return new DashboardDimensionFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardDimensionFilter {
    return new DashboardDimensionFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardDimensionFilter {
    return new DashboardDimensionFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardDimensionFilter | PlainMessage<DashboardDimensionFilter> | undefined, b: DashboardDimensionFilter | PlainMessage<DashboardDimensionFilter> | undefined): boolean {
    return proto3.util.equals(DashboardDimensionFilter, a, b);
  }
}

/**
 * @generated from message rill.ui.v1.PivotColumnSort
 */
export class PivotColumnSort extends Message<PivotColumnSort> {
  /**
   * @generated from field: bool desc = 1;
   */
  desc = false;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<PivotColumnSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.ui.v1.PivotColumnSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PivotColumnSort {
    return new PivotColumnSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PivotColumnSort {
    return new PivotColumnSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PivotColumnSort {
    return new PivotColumnSort().fromJsonString(jsonString, options);
  }

  static equals(a: PivotColumnSort | PlainMessage<PivotColumnSort> | undefined, b: PivotColumnSort | PlainMessage<PivotColumnSort> | undefined): boolean {
    return proto3.util.equals(PivotColumnSort, a, b);
  }
}

/**
 * @generated from message rill.ui.v1.PivotElement
 */
export class PivotElement extends Message<PivotElement> {
  /**
   * @generated from oneof rill.ui.v1.PivotElement.element
   */
  element: {
    /**
     * @generated from field: rill.runtime.v1.TimeGrain pivot_time_dimension = 1;
     */
    value: TimeGrain;
    case: "pivotTimeDimension";
  } | {
    /**
     * @generated from field: string pivot_dimension = 2;
     */
    value: string;
    case: "pivotDimension";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PivotElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.ui.v1.PivotElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pivot_time_dimension", kind: "enum", T: proto3.getEnumType(TimeGrain), oneof: "element" },
    { no: 2, name: "pivot_dimension", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "element" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PivotElement {
    return new PivotElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PivotElement {
    return new PivotElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PivotElement {
    return new PivotElement().fromJsonString(jsonString, options);
  }

  static equals(a: PivotElement | PlainMessage<PivotElement> | undefined, b: PivotElement | PlainMessage<PivotElement> | undefined): boolean {
    return proto3.util.equals(PivotElement, a, b);
  }
}

