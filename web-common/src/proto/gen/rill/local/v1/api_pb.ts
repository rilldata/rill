// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/local/v1/api.proto (package rill.local.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { BillingIssue, Organization, Project, ProjectPermissions, User } from "../../admin/v1/api_pb.js";

/**
 * @generated from message rill.local.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetMetadataRequest
 */
export class GetMetadataRequest extends Message<GetMetadataRequest> {
  constructor(data?: PartialMessage<GetMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined, b: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined): boolean {
    return proto3.util.equals(GetMetadataRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetMetadataResponse
 */
export class GetMetadataResponse extends Message<GetMetadataResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string project_path = 2;
   */
  projectPath = "";

  /**
   * @generated from field: string install_id = 3;
   */
  installId = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string build_commit = 6;
   */
  buildCommit = "";

  /**
   * @generated from field: string build_time = 7;
   */
  buildTime = "";

  /**
   * @generated from field: bool is_dev = 8;
   */
  isDev = false;

  /**
   * @generated from field: bool analytics_enabled = 9;
   */
  analyticsEnabled = false;

  /**
   * @generated from field: bool readonly = 10;
   */
  readonly = false;

  /**
   * @generated from field: int32 grpc_port = 11;
   */
  grpcPort = 0;

  /**
   * @generated from field: string login_url = 12;
   */
  loginUrl = "";

  /**
   * @generated from field: string admin_url = 13;
   */
  adminUrl = "";

  constructor(data?: PartialMessage<GetMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "install_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "build_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "build_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "is_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "analytics_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "readonly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "grpc_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "login_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "admin_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined, b: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetMetadataResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetVersionRequest
 */
export class GetVersionRequest extends Message<GetVersionRequest> {
  constructor(data?: PartialMessage<GetVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined, b: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetVersionRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetVersionResponse
 */
export class GetVersionResponse extends Message<GetVersionResponse> {
  /**
   * @generated from field: string current = 1;
   */
  current = "";

  /**
   * @generated from field: string latest = 2;
   */
  latest = "";

  constructor(data?: PartialMessage<GetVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined, b: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetVersionResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitStatusRequest
 */
export class GitStatusRequest extends Message<GitStatusRequest> {
  constructor(data?: PartialMessage<GitStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStatusRequest {
    return new GitStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStatusRequest {
    return new GitStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStatusRequest {
    return new GitStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GitStatusRequest | PlainMessage<GitStatusRequest> | undefined, b: GitStatusRequest | PlainMessage<GitStatusRequest> | undefined): boolean {
    return proto3.util.equals(GitStatusRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitStatusResponse
 */
export class GitStatusResponse extends Message<GitStatusResponse> {
  /**
   * The current branch of the git repo.
   *
   * @generated from field: string branch = 1;
   */
  branch = "";

  /**
   * The remote url of the git repo.
   *
   * @generated from field: string github_url = 2;
   */
  githubUrl = "";

  /**
   * If the repo is managed by Rill.
   *
   * @generated from field: bool managed_git = 3;
   */
  managedGit = false;

  /**
   * local_changes returns true if there are any staged, unstaged, or untracked changes in the local git repo.
   *
   * @generated from field: bool local_changes = 4;
   */
  localChanges = false;

  /**
   * local_commits returns number of local commits that are not pushed to the remote git repo.
   *
   * @generated from field: int32 local_commits = 5;
   */
  localCommits = 0;

  /**
   * remote_commits returns number of remote commits not pulled yet.
   *
   * @generated from field: int32 remote_commits = 6;
   */
  remoteCommits = 0;

  constructor(data?: PartialMessage<GitStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "managed_git", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "local_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "local_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "remote_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStatusResponse {
    return new GitStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStatusResponse {
    return new GitStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStatusResponse {
    return new GitStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GitStatusResponse | PlainMessage<GitStatusResponse> | undefined, b: GitStatusResponse | PlainMessage<GitStatusResponse> | undefined): boolean {
    return proto3.util.equals(GitStatusResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitPullRequest
 */
export class GitPullRequest extends Message<GitPullRequest> {
  /**
   * @generated from field: bool discard_local = 1;
   */
  discardLocal = false;

  constructor(data?: PartialMessage<GitPullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitPullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discard_local", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitPullRequest {
    return new GitPullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitPullRequest {
    return new GitPullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitPullRequest {
    return new GitPullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GitPullRequest | PlainMessage<GitPullRequest> | undefined, b: GitPullRequest | PlainMessage<GitPullRequest> | undefined): boolean {
    return proto3.util.equals(GitPullRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitPullResponse
 */
export class GitPullResponse extends Message<GitPullResponse> {
  /**
   * The output of the git pull command. Only set for unsuccessful pulls.
   *
   * @generated from field: string output = 1;
   */
  output = "";

  constructor(data?: PartialMessage<GitPullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitPullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitPullResponse {
    return new GitPullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitPullResponse {
    return new GitPullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitPullResponse {
    return new GitPullResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GitPullResponse | PlainMessage<GitPullResponse> | undefined, b: GitPullResponse | PlainMessage<GitPullResponse> | undefined): boolean {
    return proto3.util.equals(GitPullResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitPushRequest
 */
export class GitPushRequest extends Message<GitPushRequest> {
  /**
   * @generated from field: string commit_message = 1;
   */
  commitMessage = "";

  /**
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<GitPushRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitPushRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitPushRequest {
    return new GitPushRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitPushRequest {
    return new GitPushRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitPushRequest {
    return new GitPushRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GitPushRequest | PlainMessage<GitPushRequest> | undefined, b: GitPushRequest | PlainMessage<GitPushRequest> | undefined): boolean {
    return proto3.util.equals(GitPushRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GitPushResponse
 */
export class GitPushResponse extends Message<GitPushResponse> {
  constructor(data?: PartialMessage<GitPushResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GitPushResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitPushResponse {
    return new GitPushResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitPushResponse {
    return new GitPushResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitPushResponse {
    return new GitPushResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GitPushResponse | PlainMessage<GitPushResponse> | undefined, b: GitPushResponse | PlainMessage<GitPushResponse> | undefined): boolean {
    return proto3.util.equals(GitPushResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PushToGithubRequest
 */
export class PushToGithubRequest extends Message<PushToGithubRequest> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  constructor(data?: PartialMessage<PushToGithubRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PushToGithubRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushToGithubRequest {
    return new PushToGithubRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushToGithubRequest {
    return new PushToGithubRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushToGithubRequest {
    return new PushToGithubRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PushToGithubRequest | PlainMessage<PushToGithubRequest> | undefined, b: PushToGithubRequest | PlainMessage<PushToGithubRequest> | undefined): boolean {
    return proto3.util.equals(PushToGithubRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PushToGithubResponse
 */
export class PushToGithubResponse extends Message<PushToGithubResponse> {
  /**
   * @generated from field: string remote = 1;
   */
  remote = "";

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  /**
   * @generated from field: string repo = 3;
   */
  repo = "";

  constructor(data?: PartialMessage<PushToGithubResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PushToGithubResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushToGithubResponse {
    return new PushToGithubResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushToGithubResponse {
    return new PushToGithubResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushToGithubResponse {
    return new PushToGithubResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PushToGithubResponse | PlainMessage<PushToGithubResponse> | undefined, b: PushToGithubResponse | PlainMessage<PushToGithubResponse> | undefined): boolean {
    return proto3.util.equals(PushToGithubResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployProjectRequest
 */
export class DeployProjectRequest extends Message<DeployProjectRequest> {
  /**
   * @generated from field: string org = 1;
   */
  org = "";

  /**
   * @generated from field: string new_org_display_name = 4;
   */
  newOrgDisplayName = "";

  /**
   * @generated from field: string project_name = 2;
   */
  projectName = "";

  /**
   * @generated from field: bool upload = 3;
   */
  upload = false;

  /**
   * temporarily used for testing
   *
   * @generated from field: bool archive = 5;
   */
  archive = false;

  constructor(data?: PartialMessage<DeployProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_org_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "archive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployProjectRequest {
    return new DeployProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployProjectRequest {
    return new DeployProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployProjectRequest {
    return new DeployProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployProjectRequest | PlainMessage<DeployProjectRequest> | undefined, b: DeployProjectRequest | PlainMessage<DeployProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeployProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployProjectResponse
 */
export class DeployProjectResponse extends Message<DeployProjectResponse> {
  /**
   * @generated from field: string deploy_id = 1;
   */
  deployId = "";

  /**
   * @generated from field: string org = 2;
   */
  org = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * @generated from field: string frontend_url = 4;
   */
  frontendUrl = "";

  constructor(data?: PartialMessage<DeployProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deploy_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "frontend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployProjectResponse {
    return new DeployProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployProjectResponse {
    return new DeployProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployProjectResponse {
    return new DeployProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployProjectResponse | PlainMessage<DeployProjectResponse> | undefined, b: DeployProjectResponse | PlainMessage<DeployProjectResponse> | undefined): boolean {
    return proto3.util.equals(DeployProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.RedeployProjectRequest
 */
export class RedeployProjectRequest extends Message<RedeployProjectRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: bool reupload = 2;
   */
  reupload = false;

  /**
   * temporarily used for testing
   *
   * @generated from field: bool rearchive = 3;
   */
  rearchive = false;

  /**
   * @generated from field: bool create_managed_repo = 4;
   */
  createManagedRepo = false;

  constructor(data?: PartialMessage<RedeployProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.RedeployProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reupload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "rearchive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "create_managed_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployProjectRequest | PlainMessage<RedeployProjectRequest> | undefined, b: RedeployProjectRequest | PlainMessage<RedeployProjectRequest> | undefined): boolean {
    return proto3.util.equals(RedeployProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.RedeployProjectResponse
 */
export class RedeployProjectResponse extends Message<RedeployProjectResponse> {
  /**
   * @generated from field: string frontend_url = 1;
   */
  frontendUrl = "";

  constructor(data?: PartialMessage<RedeployProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.RedeployProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frontend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployProjectResponse | PlainMessage<RedeployProjectResponse> | undefined, b: RedeployProjectResponse | PlainMessage<RedeployProjectResponse> | undefined): boolean {
    return proto3.util.equals(RedeployProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetCurrentUserRequest
 */
export class GetCurrentUserRequest extends Message<GetCurrentUserRequest> {
  constructor(data?: PartialMessage<GetCurrentUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetCurrentUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined, b: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetCurrentUserResponse
 */
export class GetCurrentUserResponse extends Message<GetCurrentUserResponse> {
  /**
   * @generated from field: rill.admin.v1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: repeated string rill_user_orgs = 2;
   */
  rillUserOrgs: string[] = [];

  /**
   * @generated from field: bool is_representing_user = 3;
   */
  isRepresentingUser = false;

  constructor(data?: PartialMessage<GetCurrentUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetCurrentUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "rill_user_orgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "is_representing_user", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined, b: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetCurrentProjectRequest
 */
export class GetCurrentProjectRequest extends Message<GetCurrentProjectRequest> {
  constructor(data?: PartialMessage<GetCurrentProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetCurrentProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentProjectRequest {
    return new GetCurrentProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentProjectRequest {
    return new GetCurrentProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentProjectRequest {
    return new GetCurrentProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentProjectRequest | PlainMessage<GetCurrentProjectRequest> | undefined, b: GetCurrentProjectRequest | PlainMessage<GetCurrentProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetCurrentProjectResponse
 */
export class GetCurrentProjectResponse extends Message<GetCurrentProjectResponse> {
  /**
   * @generated from field: string local_project_name = 1;
   */
  localProjectName = "";

  /**
   * @generated from field: rill.admin.v1.Project project = 2;
   */
  project?: Project;

  constructor(data?: PartialMessage<GetCurrentProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetCurrentProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentProjectResponse {
    return new GetCurrentProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentProjectResponse {
    return new GetCurrentProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentProjectResponse {
    return new GetCurrentProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentProjectResponse | PlainMessage<GetCurrentProjectResponse> | undefined, b: GetCurrentProjectResponse | PlainMessage<GetCurrentProjectResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListOrganizationsAndBillingMetadataRequest
 */
export class ListOrganizationsAndBillingMetadataRequest extends Message<ListOrganizationsAndBillingMetadataRequest> {
  constructor(data?: PartialMessage<ListOrganizationsAndBillingMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListOrganizationsAndBillingMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsAndBillingMetadataRequest {
    return new ListOrganizationsAndBillingMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataRequest {
    return new ListOrganizationsAndBillingMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataRequest {
    return new ListOrganizationsAndBillingMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsAndBillingMetadataRequest | PlainMessage<ListOrganizationsAndBillingMetadataRequest> | undefined, b: ListOrganizationsAndBillingMetadataRequest | PlainMessage<ListOrganizationsAndBillingMetadataRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsAndBillingMetadataRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListOrganizationsAndBillingMetadataResponse
 */
export class ListOrganizationsAndBillingMetadataResponse extends Message<ListOrganizationsAndBillingMetadataResponse> {
  /**
   * @generated from field: repeated rill.local.v1.ListOrganizationsAndBillingMetadataResponse.OrgMetadata orgs = 1;
   */
  orgs: ListOrganizationsAndBillingMetadataResponse_OrgMetadata[] = [];

  constructor(data?: PartialMessage<ListOrganizationsAndBillingMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListOrganizationsAndBillingMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orgs", kind: "message", T: ListOrganizationsAndBillingMetadataResponse_OrgMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsAndBillingMetadataResponse {
    return new ListOrganizationsAndBillingMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataResponse {
    return new ListOrganizationsAndBillingMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataResponse {
    return new ListOrganizationsAndBillingMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsAndBillingMetadataResponse | PlainMessage<ListOrganizationsAndBillingMetadataResponse> | undefined, b: ListOrganizationsAndBillingMetadataResponse | PlainMessage<ListOrganizationsAndBillingMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsAndBillingMetadataResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListOrganizationsAndBillingMetadataResponse.OrgMetadata
 */
export class ListOrganizationsAndBillingMetadataResponse_OrgMetadata extends Message<ListOrganizationsAndBillingMetadataResponse_OrgMetadata> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated rill.admin.v1.BillingIssue issues = 3;
   */
  issues: BillingIssue[] = [];

  constructor(data?: PartialMessage<ListOrganizationsAndBillingMetadataResponse_OrgMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListOrganizationsAndBillingMetadataResponse.OrgMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "issues", kind: "message", T: BillingIssue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsAndBillingMetadataResponse_OrgMetadata {
    return new ListOrganizationsAndBillingMetadataResponse_OrgMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataResponse_OrgMetadata {
    return new ListOrganizationsAndBillingMetadataResponse_OrgMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsAndBillingMetadataResponse_OrgMetadata {
    return new ListOrganizationsAndBillingMetadataResponse_OrgMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsAndBillingMetadataResponse_OrgMetadata | PlainMessage<ListOrganizationsAndBillingMetadataResponse_OrgMetadata> | undefined, b: ListOrganizationsAndBillingMetadataResponse_OrgMetadata | PlainMessage<ListOrganizationsAndBillingMetadataResponse_OrgMetadata> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsAndBillingMetadataResponse_OrgMetadata, a, b);
  }
}

/**
 * @generated from message rill.local.v1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListMatchingProjectsRequest
 */
export class ListMatchingProjectsRequest extends Message<ListMatchingProjectsRequest> {
  constructor(data?: PartialMessage<ListMatchingProjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListMatchingProjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMatchingProjectsRequest {
    return new ListMatchingProjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMatchingProjectsRequest {
    return new ListMatchingProjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMatchingProjectsRequest {
    return new ListMatchingProjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMatchingProjectsRequest | PlainMessage<ListMatchingProjectsRequest> | undefined, b: ListMatchingProjectsRequest | PlainMessage<ListMatchingProjectsRequest> | undefined): boolean {
    return proto3.util.equals(ListMatchingProjectsRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListMatchingProjectsResponse
 */
export class ListMatchingProjectsResponse extends Message<ListMatchingProjectsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Project projects = 1;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<ListMatchingProjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListMatchingProjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMatchingProjectsResponse {
    return new ListMatchingProjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMatchingProjectsResponse {
    return new ListMatchingProjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMatchingProjectsResponse {
    return new ListMatchingProjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMatchingProjectsResponse | PlainMessage<ListMatchingProjectsResponse> | undefined, b: ListMatchingProjectsResponse | PlainMessage<ListMatchingProjectsResponse> | undefined): boolean {
    return proto3.util.equals(ListMatchingProjectsResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListProjectsForOrgRequest
 */
export class ListProjectsForOrgRequest extends Message<ListProjectsForOrgRequest> {
  /**
   * @generated from field: string org = 1;
   */
  org = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectsForOrgRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListProjectsForOrgRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrgRequest {
    return new ListProjectsForOrgRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrgRequest {
    return new ListProjectsForOrgRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrgRequest {
    return new ListProjectsForOrgRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrgRequest | PlainMessage<ListProjectsForOrgRequest> | undefined, b: ListProjectsForOrgRequest | PlainMessage<ListProjectsForOrgRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrgRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.ListProjectsForOrgResponse
 */
export class ListProjectsForOrgResponse extends Message<ListProjectsForOrgResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Project projects = 1;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<ListProjectsForOrgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.ListProjectsForOrgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrgResponse {
    return new ListProjectsForOrgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrgResponse {
    return new ListProjectsForOrgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrgResponse {
    return new ListProjectsForOrgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrgResponse | PlainMessage<ListProjectsForOrgResponse> | undefined, b: ListProjectsForOrgResponse | PlainMessage<ListProjectsForOrgResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrgResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  /**
   * @generated from field: rill.admin.v1.ProjectPermissions project_permissions = 4;
   */
  projectPermissions?: ProjectPermissions;

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 4, name: "project_permissions", kind: "message", T: ProjectPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined, b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectResponse, a, b);
  }
}

