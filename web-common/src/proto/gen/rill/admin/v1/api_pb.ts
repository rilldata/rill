// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/admin/v1/api.proto (package rill.admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";
import { Expression } from "../../runtime/v1/expression_pb.js";
import { ExportFormat } from "../../runtime/v1/export_format_pb.js";

/**
 * @generated from enum rill.admin.v1.GithubPermission
 */
export enum GithubPermission {
  /**
   * @generated from enum value: GITHUB_PERMISSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GITHUB_PERMISSION_READ = 1;
   */
  READ = 1,

  /**
   * @generated from enum value: GITHUB_PERMISSION_WRITE = 2;
   */
  WRITE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GithubPermission)
proto3.util.setEnumType(GithubPermission, "rill.admin.v1.GithubPermission", [
  { no: 0, name: "GITHUB_PERMISSION_UNSPECIFIED" },
  { no: 1, name: "GITHUB_PERMISSION_READ" },
  { no: 2, name: "GITHUB_PERMISSION_WRITE" },
]);

/**
 * @generated from enum rill.admin.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: DEPLOYMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_OK = 2;
   */
  OK = 2,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_ERROR = 4;
   */
  ERROR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentStatus)
proto3.util.setEnumType(DeploymentStatus, "rill.admin.v1.DeploymentStatus", [
  { no: 0, name: "DEPLOYMENT_STATUS_UNSPECIFIED" },
  { no: 1, name: "DEPLOYMENT_STATUS_PENDING" },
  { no: 2, name: "DEPLOYMENT_STATUS_OK" },
  { no: 4, name: "DEPLOYMENT_STATUS_ERROR" },
]);

/**
 * @generated from enum rill.admin.v1.BillingPlanType
 */
export enum BillingPlanType {
  /**
   * @generated from enum value: BILLING_PLAN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BILLING_PLAN_TYPE_TRIAL = 1;
   */
  TRIAL = 1,

  /**
   * @generated from enum value: BILLING_PLAN_TYPE_TEAM = 2;
   */
  TEAM = 2,

  /**
   * @generated from enum value: BILLING_PLAN_TYPE_MANAGED = 3;
   */
  MANAGED = 3,

  /**
   * @generated from enum value: BILLING_PLAN_TYPE_ENTERPRISE = 4;
   */
  ENTERPRISE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(BillingPlanType)
proto3.util.setEnumType(BillingPlanType, "rill.admin.v1.BillingPlanType", [
  { no: 0, name: "BILLING_PLAN_TYPE_UNSPECIFIED" },
  { no: 1, name: "BILLING_PLAN_TYPE_TRIAL" },
  { no: 2, name: "BILLING_PLAN_TYPE_TEAM" },
  { no: 3, name: "BILLING_PLAN_TYPE_MANAGED" },
  { no: 4, name: "BILLING_PLAN_TYPE_ENTERPRISE" },
]);

/**
 * @generated from enum rill.admin.v1.BillingIssueType
 */
export enum BillingIssueType {
  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_ON_TRIAL = 1;
   */
  ON_TRIAL = 1,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_TRIAL_ENDED = 2;
   */
  TRIAL_ENDED = 2,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_NO_PAYMENT_METHOD = 3;
   */
  NO_PAYMENT_METHOD = 3,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_NO_BILLABLE_ADDRESS = 4;
   */
  NO_BILLABLE_ADDRESS = 4,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_PAYMENT_FAILED = 5;
   */
  PAYMENT_FAILED = 5,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_SUBSCRIPTION_CANCELLED = 6;
   */
  SUBSCRIPTION_CANCELLED = 6,

  /**
   * @generated from enum value: BILLING_ISSUE_TYPE_NEVER_SUBSCRIBED = 7;
   */
  NEVER_SUBSCRIBED = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(BillingIssueType)
proto3.util.setEnumType(BillingIssueType, "rill.admin.v1.BillingIssueType", [
  { no: 0, name: "BILLING_ISSUE_TYPE_UNSPECIFIED" },
  { no: 1, name: "BILLING_ISSUE_TYPE_ON_TRIAL" },
  { no: 2, name: "BILLING_ISSUE_TYPE_TRIAL_ENDED" },
  { no: 3, name: "BILLING_ISSUE_TYPE_NO_PAYMENT_METHOD" },
  { no: 4, name: "BILLING_ISSUE_TYPE_NO_BILLABLE_ADDRESS" },
  { no: 5, name: "BILLING_ISSUE_TYPE_PAYMENT_FAILED" },
  { no: 6, name: "BILLING_ISSUE_TYPE_SUBSCRIPTION_CANCELLED" },
  { no: 7, name: "BILLING_ISSUE_TYPE_NEVER_SUBSCRIBED" },
]);

/**
 * @generated from enum rill.admin.v1.BillingIssueLevel
 */
export enum BillingIssueLevel {
  /**
   * @generated from enum value: BILLING_ISSUE_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BILLING_ISSUE_LEVEL_WARNING = 1;
   */
  WARNING = 1,

  /**
   * @generated from enum value: BILLING_ISSUE_LEVEL_ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BillingIssueLevel)
proto3.util.setEnumType(BillingIssueLevel, "rill.admin.v1.BillingIssueLevel", [
  { no: 0, name: "BILLING_ISSUE_LEVEL_UNSPECIFIED" },
  { no: 1, name: "BILLING_ISSUE_LEVEL_WARNING" },
  { no: 2, name: "BILLING_ISSUE_LEVEL_ERROR" },
]);

/**
 * @generated from message rill.admin.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationsResponse
 */
export class ListOrganizationsResponse extends Message<ListOrganizationsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined, b: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationRequest
 */
export class GetOrganizationRequest extends Message<GetOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined, b: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationResponse
 */
export class GetOrganizationResponse extends Message<GetOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.OrganizationPermissions permissions = 2;
   */
  permissions?: OrganizationPermissions;

  constructor(data?: PartialMessage<GetOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "permissions", kind: "message", T: OrganizationPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined, b: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationNameForDomainRequest
 */
export class GetOrganizationNameForDomainRequest extends Message<GetOrganizationNameForDomainRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<GetOrganizationNameForDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationNameForDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationNameForDomainRequest {
    return new GetOrganizationNameForDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationNameForDomainRequest {
    return new GetOrganizationNameForDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationNameForDomainRequest {
    return new GetOrganizationNameForDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationNameForDomainRequest | PlainMessage<GetOrganizationNameForDomainRequest> | undefined, b: GetOrganizationNameForDomainRequest | PlainMessage<GetOrganizationNameForDomainRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationNameForDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationNameForDomainResponse
 */
export class GetOrganizationNameForDomainResponse extends Message<GetOrganizationNameForDomainResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOrganizationNameForDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationNameForDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationNameForDomainResponse {
    return new GetOrganizationNameForDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationNameForDomainResponse {
    return new GetOrganizationNameForDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationNameForDomainResponse {
    return new GetOrganizationNameForDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationNameForDomainResponse | PlainMessage<GetOrganizationNameForDomainResponse> | undefined, b: GetOrganizationNameForDomainResponse | PlainMessage<GetOrganizationNameForDomainResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationNameForDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteOrganizationResponse
 */
export class DeleteOrganizationResponse extends Message<DeleteOrganizationResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined, b: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateOrganizationRequest
 */
export class UpdateOrganizationRequest extends Message<UpdateOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: optional string new_name = 3;
   */
  newName?: string;

  /**
   * @generated from field: optional string display_name = 5;
   */
  displayName?: string;

  /**
   * @generated from field: optional string logo_asset_id = 6;
   */
  logoAssetId?: string;

  /**
   * @generated from field: optional string favicon_asset_id = 7;
   */
  faviconAssetId?: string;

  /**
   * @generated from field: optional string billing_email = 4;
   */
  billingEmail?: string;

  constructor(data?: PartialMessage<UpdateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "logo_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "favicon_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "billing_email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined, b: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateOrganizationResponse
 */
export class UpdateOrganizationResponse extends Message<UpdateOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<UpdateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined, b: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectsForOrganizationRequest
 */
export class ListProjectsForOrganizationRequest extends Message<ListProjectsForOrganizationRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectsForOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectsForOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrganizationRequest | PlainMessage<ListProjectsForOrganizationRequest> | undefined, b: ListProjectsForOrganizationRequest | PlainMessage<ListProjectsForOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectsForOrganizationResponse
 */
export class ListProjectsForOrganizationResponse extends Message<ListProjectsForOrganizationResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Project projects = 1;
   */
  projects: Project[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectsForOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectsForOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrganizationResponse | PlainMessage<ListProjectsForOrganizationResponse> | undefined, b: ListProjectsForOrganizationResponse | PlainMessage<ListProjectsForOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 access_token_ttl_seconds = 3;
   */
  accessTokenTtlSeconds = 0;

  /**
   * @generated from field: bool issue_superuser_token = 4;
   */
  issueSuperuserToken = false;

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_token_ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "issue_superuser_token", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  /**
   * @generated from field: rill.admin.v1.Deployment prod_deployment = 2;
   */
  prodDeployment?: Deployment;

  /**
   * @generated from field: string jwt = 3;
   */
  jwt = "";

  /**
   * @generated from field: rill.admin.v1.ProjectPermissions project_permissions = 4;
   */
  projectPermissions?: ProjectPermissions;

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 2, name: "prod_deployment", kind: "message", T: Deployment },
    { no: 3, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_permissions", kind: "message", T: ProjectPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined, b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectByIDRequest
 */
export class GetProjectByIDRequest extends Message<GetProjectByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetProjectByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectByIDRequest {
    return new GetProjectByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectByIDRequest {
    return new GetProjectByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectByIDRequest {
    return new GetProjectByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectByIDRequest | PlainMessage<GetProjectByIDRequest> | undefined, b: GetProjectByIDRequest | PlainMessage<GetProjectByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectByIDRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectByIDResponse
 */
export class GetProjectByIDResponse extends Message<GetProjectByIDResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<GetProjectByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectByIDResponse {
    return new GetProjectByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectByIDResponse {
    return new GetProjectByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectByIDResponse {
    return new GetProjectByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectByIDResponse | PlainMessage<GetProjectByIDResponse> | undefined, b: GetProjectByIDResponse | PlainMessage<GetProjectByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectByIDResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchProjectNamesRequest
 */
export class SearchProjectNamesRequest extends Message<SearchProjectNamesRequest> {
  /**
   * @generated from field: string name_pattern = 1;
   */
  namePattern = "";

  /**
   * @generated from field: map<string, string> annotations = 5;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<SearchProjectNamesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchProjectNamesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProjectNamesRequest {
    return new SearchProjectNamesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProjectNamesRequest {
    return new SearchProjectNamesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProjectNamesRequest {
    return new SearchProjectNamesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProjectNamesRequest | PlainMessage<SearchProjectNamesRequest> | undefined, b: SearchProjectNamesRequest | PlainMessage<SearchProjectNamesRequest> | undefined): boolean {
    return proto3.util.equals(SearchProjectNamesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchProjectNamesResponse
 */
export class SearchProjectNamesResponse extends Message<SearchProjectNamesResponse> {
  /**
   * @generated from field: repeated string names = 1;
   */
  names: string[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchProjectNamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchProjectNamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProjectNamesResponse {
    return new SearchProjectNamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProjectNamesResponse {
    return new SearchProjectNamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProjectNamesResponse {
    return new SearchProjectNamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProjectNamesResponse | PlainMessage<SearchProjectNamesResponse> | undefined, b: SearchProjectNamesResponse | PlainMessage<SearchProjectNamesResponse> | undefined): boolean {
    return proto3.util.equals(SearchProjectNamesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectVariablesRequest
 */
export class GetProjectVariablesRequest extends Message<GetProjectVariablesRequest> {
  /**
   * Organization the project belongs to.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * Project to get variables for.
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Environment to get the variables for.
   * If empty, only variables shared across all environments are returned.
   *
   * @generated from field: string environment = 3;
   */
  environment = "";

  /**
   * If true, return variable values for all environments.
   * Can't be used together with the "environment" option.
   *
   * @generated from field: bool for_all_environments = 4;
   */
  forAllEnvironments = false;

  constructor(data?: PartialMessage<GetProjectVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "for_all_environments", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectVariablesRequest | PlainMessage<GetProjectVariablesRequest> | undefined, b: GetProjectVariablesRequest | PlainMessage<GetProjectVariablesRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectVariablesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectVariablesResponse
 */
export class GetProjectVariablesResponse extends Message<GetProjectVariablesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.ProjectVariable variables = 2;
   */
  variables: ProjectVariable[] = [];

  /**
   * Deprecated: Populated for backwards compatibility.
   * (Renamed from "variables" to "variables_map").
   *
   * @generated from field: map<string, string> variables_map = 1;
   */
  variablesMap: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetProjectVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "variables", kind: "message", T: ProjectVariable, repeated: true },
    { no: 1, name: "variables_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectVariablesResponse | PlainMessage<GetProjectVariablesResponse> | undefined, b: GetProjectVariablesResponse | PlainMessage<GetProjectVariablesResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectVariablesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProjectVariable
 */
export class ProjectVariable extends Message<ProjectVariable> {
  /**
   * Internal ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Variable name (case insensitive).
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Variable value.
   *
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * Environment the variable is set for.
   * If empty, the variable is shared for all environments.
   *
   * @generated from field: string environment = 4;
   */
  environment = "";

  /**
   * User ID that most recently updated the variable. May be empty.
   *
   * @generated from field: string updated_by_user_id = 5;
   */
  updatedByUserId = "";

  /**
   * Timestamp when the variable was created.
   *
   * @generated from field: google.protobuf.Timestamp created_on = 6;
   */
  createdOn?: Timestamp;

  /**
   * Timestamp when the variable was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_on = 7;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<ProjectVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProjectVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_by_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_on", kind: "message", T: Timestamp },
    { no: 7, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectVariable {
    return new ProjectVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectVariable {
    return new ProjectVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectVariable {
    return new ProjectVariable().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectVariable | PlainMessage<ProjectVariable> | undefined, b: ProjectVariable | PlainMessage<ProjectVariable> | undefined): boolean {
    return proto3.util.equals(ProjectVariable, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectVariablesRequest
 */
export class UpdateProjectVariablesRequest extends Message<UpdateProjectVariablesRequest> {
  /**
   * Organization the project belongs to.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * Project to update variables for.
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Environment to set the variables for.
   * If empty, the variable(s) will be used as defaults for all environments.
   *
   * @generated from field: string environment = 4;
   */
  environment = "";

  /**
   * New variable values.
   * It is NOT NECESSARY to pass all variables, existing variables not included in the request will be left unchanged.
   *
   * @generated from field: map<string, string> variables = 3;
   */
  variables: { [key: string]: string } = {};

  /**
   * Variables to delete.
   *
   * @generated from field: repeated string unset_variables = 5;
   */
  unsetVariables: string[] = [];

  constructor(data?: PartialMessage<UpdateProjectVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "unset_variables", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectVariablesRequest | PlainMessage<UpdateProjectVariablesRequest> | undefined, b: UpdateProjectVariablesRequest | PlainMessage<UpdateProjectVariablesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectVariablesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectVariablesResponse
 */
export class UpdateProjectVariablesResponse extends Message<UpdateProjectVariablesResponse> {
  /**
   * Variables that were created or updated by the request.
   *
   * @generated from field: repeated rill.admin.v1.ProjectVariable variables = 2;
   */
  variables: ProjectVariable[] = [];

  constructor(data?: PartialMessage<UpdateProjectVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "variables", kind: "message", T: ProjectVariable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectVariablesResponse | PlainMessage<UpdateProjectVariablesResponse> | undefined, b: UpdateProjectVariablesResponse | PlainMessage<UpdateProjectVariablesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProjectVariablesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchProjectUsersRequest
 */
export class SearchProjectUsersRequest extends Message<SearchProjectUsersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email_query = 3;
   */
  emailQuery = "";

  /**
   * @generated from field: uint32 page_size = 4;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  constructor(data?: PartialMessage<SearchProjectUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchProjectUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email_query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProjectUsersRequest {
    return new SearchProjectUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProjectUsersRequest {
    return new SearchProjectUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProjectUsersRequest {
    return new SearchProjectUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProjectUsersRequest | PlainMessage<SearchProjectUsersRequest> | undefined, b: SearchProjectUsersRequest | PlainMessage<SearchProjectUsersRequest> | undefined): boolean {
    return proto3.util.equals(SearchProjectUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchProjectUsersResponse
 */
export class SearchProjectUsersResponse extends Message<SearchProjectUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchProjectUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchProjectUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProjectUsersResponse {
    return new SearchProjectUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProjectUsersResponse {
    return new SearchProjectUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProjectUsersResponse {
    return new SearchProjectUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProjectUsersResponse | PlainMessage<SearchProjectUsersResponse> | undefined, b: SearchProjectUsersResponse | PlainMessage<SearchProjectUsersResponse> | undefined): boolean {
    return proto3.util.equals(SearchProjectUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetDeploymentCredentialsRequest
 */
export class GetDeploymentCredentialsRequest extends Message<GetDeploymentCredentialsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * @generated from field: uint32 ttl_seconds = 7;
   */
  ttlSeconds = 0;

  /**
   * @generated from oneof rill.admin.v1.GetDeploymentCredentialsRequest.for
   */
  for: {
    /**
     * @generated from field: string user_id = 4;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string user_email = 6;
     */
    value: string;
    case: "userEmail";
  } | {
    /**
     * @generated from field: google.protobuf.Struct attributes = 5;
     */
    value: Struct;
    case: "attributes";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetDeploymentCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetDeploymentCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "for" },
    { no: 6, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "for" },
    { no: 5, name: "attributes", kind: "message", T: Struct, oneof: "for" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentCredentialsRequest {
    return new GetDeploymentCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentCredentialsRequest {
    return new GetDeploymentCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentCredentialsRequest {
    return new GetDeploymentCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentCredentialsRequest | PlainMessage<GetDeploymentCredentialsRequest> | undefined, b: GetDeploymentCredentialsRequest | PlainMessage<GetDeploymentCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentCredentialsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetDeploymentCredentialsResponse
 */
export class GetDeploymentCredentialsResponse extends Message<GetDeploymentCredentialsResponse> {
  /**
   * @generated from field: string runtime_host = 1;
   */
  runtimeHost = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: string access_token = 3;
   */
  accessToken = "";

  /**
   * @generated from field: uint32 ttl_seconds = 4;
   */
  ttlSeconds = 0;

  constructor(data?: PartialMessage<GetDeploymentCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetDeploymentCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentCredentialsResponse {
    return new GetDeploymentCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentCredentialsResponse {
    return new GetDeploymentCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentCredentialsResponse {
    return new GetDeploymentCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentCredentialsResponse | PlainMessage<GetDeploymentCredentialsResponse> | undefined, b: GetDeploymentCredentialsResponse | PlainMessage<GetDeploymentCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentCredentialsResponse, a, b);
  }
}

/**
 * GetIFrameRequest is the request payload for AdminService.GetIFrame.
 *
 * @generated from message rill.admin.v1.GetIFrameRequest
 */
export class GetIFrameRequest extends Message<GetIFrameRequest> {
  /**
   * Organization that owns the project to embed.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * Project that has the resource(s) to embed.
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Branch to embed. If not set, the production branch is used.
   *
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * TTL for the iframe's access token. If not set, defaults to 24 hours.
   *
   * @generated from field: uint32 ttl_seconds = 6;
   */
  ttlSeconds = 0;

  /**
   * User attributes to use for security policy evaluation.
   *
   * @generated from oneof rill.admin.v1.GetIFrameRequest.for
   */
  for: {
    /**
     * If set, will use the attributes of the user with this ID.
     *
     * @generated from field: string user_id = 9;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * If set, will generate attributes corresponding to a user with this email.
     *
     * @generated from field: string user_email = 10;
     */
    value: string;
    case: "userEmail";
  } | {
    /**
     * If set, will use the provided attributes outright.
     *
     * @generated from field: google.protobuf.Struct attributes = 11;
     */
    value: Struct;
    case: "attributes";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Type of resource to embed. If not set, defaults to "rill.runtime.v1.Explore".
   *
   * @generated from field: string type = 14;
   */
  type = "";

  /**
   * Deprecated: Alias for `type`.
   *
   * @generated from field: string kind = 4;
   */
  kind = "";

  /**
   * Name of the resource to embed. This should identify a resource that is valid for embedding, such as a dashboard or component.
   *
   * @generated from field: string resource = 5;
   */
  resource = "";

  /**
   * Theme to use for the embedded resource.
   *
   * @generated from field: string theme = 12;
   */
  theme = "";

  /**
   * Navigation denotes whether navigation between different resources should be enabled in the embed.
   *
   * @generated from field: bool navigation = 13;
   */
  navigation = false;

  /**
   * Blob containing UI state for rendering the initial embed. Not currently supported.
   *
   * @generated from field: string state = 7;
   */
  state = "";

  /**
   * DEPRECATED: Additional parameters to set outright in the generated URL query.
   *
   * @generated from field: map<string, string> query = 8;
   */
  query: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetIFrameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetIFrameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "for" },
    { no: 10, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "for" },
    { no: 11, name: "attributes", kind: "message", T: Struct, oneof: "for" },
    { no: 14, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "navigation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "query", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIFrameRequest {
    return new GetIFrameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIFrameRequest {
    return new GetIFrameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIFrameRequest {
    return new GetIFrameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIFrameRequest | PlainMessage<GetIFrameRequest> | undefined, b: GetIFrameRequest | PlainMessage<GetIFrameRequest> | undefined): boolean {
    return proto3.util.equals(GetIFrameRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetIFrameResponse
 */
export class GetIFrameResponse extends Message<GetIFrameResponse> {
  /**
   * @generated from field: string iframe_src = 1;
   */
  iframeSrc = "";

  /**
   * @generated from field: string runtime_host = 2;
   */
  runtimeHost = "";

  /**
   * @generated from field: string instance_id = 3;
   */
  instanceId = "";

  /**
   * @generated from field: string access_token = 4;
   */
  accessToken = "";

  /**
   * @generated from field: uint32 ttl_seconds = 5;
   */
  ttlSeconds = 0;

  constructor(data?: PartialMessage<GetIFrameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetIFrameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iframe_src", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "runtime_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIFrameResponse {
    return new GetIFrameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIFrameResponse {
    return new GetIFrameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIFrameResponse {
    return new GetIFrameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIFrameResponse | PlainMessage<GetIFrameResponse> | undefined, b: GetIFrameResponse | PlainMessage<GetIFrameResponse> | undefined): boolean {
    return proto3.util.equals(GetIFrameResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListServicesRequest
 */
export class ListServicesRequest extends Message<ListServicesRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  constructor(data?: PartialMessage<ListServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined, b: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined): boolean {
    return proto3.util.equals(ListServicesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListServicesResponse
 */
export class ListServicesResponse extends Message<ListServicesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Service services = 1;
   */
  services: Service[] = [];

  constructor(data?: PartialMessage<ListServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined, b: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined): boolean {
    return proto3.util.equals(ListServicesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateServiceRequest
 */
export class CreateServiceRequest extends Message<CreateServiceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string organization_name = 2;
   */
  organizationName = "";

  constructor(data?: PartialMessage<CreateServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceRequest | PlainMessage<CreateServiceRequest> | undefined, b: CreateServiceRequest | PlainMessage<CreateServiceRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateServiceResponse
 */
export class CreateServiceResponse extends Message<CreateServiceResponse> {
  /**
   * @generated from field: rill.admin.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<CreateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceResponse {
    return new CreateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceResponse {
    return new CreateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceResponse {
    return new CreateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceResponse | PlainMessage<CreateServiceResponse> | undefined, b: CreateServiceResponse | PlainMessage<CreateServiceResponse> | undefined): boolean {
    return proto3.util.equals(CreateServiceResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateServiceRequest
 */
export class UpdateServiceRequest extends Message<UpdateServiceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string organization_name = 2;
   */
  organizationName = "";

  /**
   * @generated from field: optional string new_name = 3;
   */
  newName?: string;

  constructor(data?: PartialMessage<UpdateServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServiceRequest {
    return new UpdateServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServiceRequest {
    return new UpdateServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServiceRequest {
    return new UpdateServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServiceRequest | PlainMessage<UpdateServiceRequest> | undefined, b: UpdateServiceRequest | PlainMessage<UpdateServiceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateServiceRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateServiceResponse
 */
export class UpdateServiceResponse extends Message<UpdateServiceResponse> {
  /**
   * @generated from field: rill.admin.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<UpdateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServiceResponse {
    return new UpdateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServiceResponse {
    return new UpdateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServiceResponse {
    return new UpdateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServiceResponse | PlainMessage<UpdateServiceResponse> | undefined, b: UpdateServiceResponse | PlainMessage<UpdateServiceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateServiceResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteServiceRequest
 */
export class DeleteServiceRequest extends Message<DeleteServiceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string organization_name = 2;
   */
  organizationName = "";

  constructor(data?: PartialMessage<DeleteServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceRequest | PlainMessage<DeleteServiceRequest> | undefined, b: DeleteServiceRequest | PlainMessage<DeleteServiceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServiceRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteServiceResponse
 */
export class DeleteServiceResponse extends Message<DeleteServiceResponse> {
  /**
   * @generated from field: rill.admin.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<DeleteServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceResponse {
    return new DeleteServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceResponse {
    return new DeleteServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceResponse {
    return new DeleteServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceResponse | PlainMessage<DeleteServiceResponse> | undefined, b: DeleteServiceResponse | PlainMessage<DeleteServiceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteServiceResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: bool public = 4;
   */
  public = false;

  /**
   * @generated from field: string provisioner = 5;
   */
  provisioner = "";

  /**
   * @generated from field: string prod_olap_driver = 6;
   */
  prodOlapDriver = "";

  /**
   * @generated from field: string prod_olap_dsn = 7;
   */
  prodOlapDsn = "";

  /**
   * @generated from field: int64 prod_slots = 8;
   */
  prodSlots = protoInt64.zero;

  /**
   * @generated from field: string subpath = 12;
   */
  subpath = "";

  /**
   * @generated from field: string prod_branch = 9;
   */
  prodBranch = "";

  /**
   * github_url is set for projects whose project files are stored in github. This is set to a github repo url.
   * Either github_url or archive_asset_id should be set.
   *
   * @generated from field: string github_url = 10;
   */
  githubUrl = "";

  /**
   * archive_asset_id is set for projects whose project files are not stored in github but are managed by rill.
   *
   * @generated from field: string archive_asset_id = 14;
   */
  archiveAssetId = "";

  /**
   * @generated from field: string prod_version = 13;
   */
  prodVersion = "";

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "provisioner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "prod_olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "prod_olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "archive_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "prod_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined, b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined, b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional bool public = 4;
   */
  public?: boolean;

  /**
   * @generated from field: optional string prod_branch = 5;
   */
  prodBranch?: string;

  /**
   * @generated from field: optional string github_url = 6;
   */
  githubUrl?: string;

  /**
   * @generated from field: optional string subpath = 13;
   */
  subpath?: string;

  /**
   * @generated from field: optional string archive_asset_id = 12;
   */
  archiveAssetId?: string;

  /**
   * @generated from field: optional int64 prod_slots = 7;
   */
  prodSlots?: bigint;

  /**
   * @generated from field: optional string provisioner = 8;
   */
  provisioner?: string;

  /**
   * @generated from field: optional string new_name = 9;
   */
  newName?: string;

  /**
   * @generated from field: optional int64 prod_ttl_seconds = 10;
   */
  prodTtlSeconds?: bigint;

  /**
   * @generated from field: optional string prod_version = 11;
   */
  prodVersion?: string;

  /**
   * @generated from field: bool superuser_force_access = 14;
   */
  superuserForceAccess = false;

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "archive_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 8, name: "provisioner", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "prod_ttl_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 11, name: "prod_version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "superuser_force_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined, b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectResponse
 */
export class UpdateProjectResponse extends Message<UpdateProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<UpdateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined, b: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateAssetRequest
 */
export class CreateAssetRequest extends Message<CreateAssetRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Eg. "rilldata__project_name"
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Eg. ".tar.gz"
   *
   * @generated from field: string extension = 4;
   */
  extension = "";

  /**
   * @generated from field: bool public = 5;
   */
  public = false;

  /**
   * @generated from field: int64 estimated_size_bytes = 6;
   */
  estimatedSizeBytes = protoInt64.zero;

  constructor(data?: PartialMessage<CreateAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "estimated_size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAssetRequest {
    return new CreateAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAssetRequest {
    return new CreateAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAssetRequest {
    return new CreateAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAssetRequest | PlainMessage<CreateAssetRequest> | undefined, b: CreateAssetRequest | PlainMessage<CreateAssetRequest> | undefined): boolean {
    return proto3.util.equals(CreateAssetRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateAssetResponse
 */
export class CreateAssetResponse extends Message<CreateAssetResponse> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * @generated from field: string signed_url = 2;
   */
  signedUrl = "";

  /**
   * @generated from field: map<string, string> signing_headers = 3;
   */
  signingHeaders: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signing_headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAssetResponse {
    return new CreateAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAssetResponse {
    return new CreateAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAssetResponse {
    return new CreateAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAssetResponse | PlainMessage<CreateAssetResponse> | undefined, b: CreateAssetResponse | PlainMessage<CreateAssetResponse> | undefined): boolean {
    return proto3.util.equals(CreateAssetResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RedeployProjectRequest
 */
export class RedeployProjectRequest extends Message<RedeployProjectRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: bool superuser_force_access = 3;
   */
  superuserForceAccess = false;

  constructor(data?: PartialMessage<RedeployProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RedeployProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "superuser_force_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployProjectRequest {
    return new RedeployProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployProjectRequest | PlainMessage<RedeployProjectRequest> | undefined, b: RedeployProjectRequest | PlainMessage<RedeployProjectRequest> | undefined): boolean {
    return proto3.util.equals(RedeployProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RedeployProjectResponse
 */
export class RedeployProjectResponse extends Message<RedeployProjectResponse> {
  constructor(data?: PartialMessage<RedeployProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RedeployProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeployProjectResponse {
    return new RedeployProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedeployProjectResponse | PlainMessage<RedeployProjectResponse> | undefined, b: RedeployProjectResponse | PlainMessage<RedeployProjectResponse> | undefined): boolean {
    return proto3.util.equals(RedeployProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.HibernateProjectRequest
 */
export class HibernateProjectRequest extends Message<HibernateProjectRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<HibernateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.HibernateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HibernateProjectRequest {
    return new HibernateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HibernateProjectRequest {
    return new HibernateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HibernateProjectRequest {
    return new HibernateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HibernateProjectRequest | PlainMessage<HibernateProjectRequest> | undefined, b: HibernateProjectRequest | PlainMessage<HibernateProjectRequest> | undefined): boolean {
    return proto3.util.equals(HibernateProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.HibernateProjectResponse
 */
export class HibernateProjectResponse extends Message<HibernateProjectResponse> {
  constructor(data?: PartialMessage<HibernateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.HibernateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HibernateProjectResponse {
    return new HibernateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HibernateProjectResponse {
    return new HibernateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HibernateProjectResponse {
    return new HibernateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HibernateProjectResponse | PlainMessage<HibernateProjectResponse> | undefined, b: HibernateProjectResponse | PlainMessage<HibernateProjectResponse> | undefined): boolean {
    return proto3.util.equals(HibernateProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReconcileRequest
 */
export class TriggerReconcileRequest extends Message<TriggerReconcileRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<TriggerReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReconcileRequest | PlainMessage<TriggerReconcileRequest> | undefined, b: TriggerReconcileRequest | PlainMessage<TriggerReconcileRequest> | undefined): boolean {
    return proto3.util.equals(TriggerReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReconcileResponse
 */
export class TriggerReconcileResponse extends Message<TriggerReconcileResponse> {
  constructor(data?: PartialMessage<TriggerReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReconcileResponse | PlainMessage<TriggerReconcileResponse> | undefined, b: TriggerReconcileResponse | PlainMessage<TriggerReconcileResponse> | undefined): boolean {
    return proto3.util.equals(TriggerReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRefreshSourcesRequest
 */
export class TriggerRefreshSourcesRequest extends Message<TriggerRefreshSourcesRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  constructor(data?: PartialMessage<TriggerRefreshSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRefreshSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshSourcesRequest | PlainMessage<TriggerRefreshSourcesRequest> | undefined, b: TriggerRefreshSourcesRequest | PlainMessage<TriggerRefreshSourcesRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshSourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRefreshSourcesResponse
 */
export class TriggerRefreshSourcesResponse extends Message<TriggerRefreshSourcesResponse> {
  constructor(data?: PartialMessage<TriggerRefreshSourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRefreshSourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshSourcesResponse | PlainMessage<TriggerRefreshSourcesResponse> | undefined, b: TriggerRefreshSourcesResponse | PlainMessage<TriggerRefreshSourcesResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshSourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRedeployRequest
 */
export class TriggerRedeployRequest extends Message<TriggerRedeployRequest> {
  /**
   * It's sufficient to pass org/project name OR deployment_id.
   * (To enable rehydrating hibernated projects.)
   *
   * @generated from field: string organization = 2;
   */
  organization = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<TriggerRedeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRedeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRedeployRequest | PlainMessage<TriggerRedeployRequest> | undefined, b: TriggerRedeployRequest | PlainMessage<TriggerRedeployRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRedeployRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRedeployResponse
 */
export class TriggerRedeployResponse extends Message<TriggerRedeployResponse> {
  constructor(data?: PartialMessage<TriggerRedeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRedeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRedeployResponse | PlainMessage<TriggerRedeployResponse> | undefined, b: TriggerRedeployResponse | PlainMessage<TriggerRedeployResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRedeployResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProvisionRequest
 */
export class ProvisionRequest extends Message<ProvisionRequest> {
  /**
   * Deployment to provision a resource for.
   * If it's blank and the request is made with a deployment access token, the deployment is inferred from the token.
   *
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * Type of resource to provision.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Name of the resource to provision.
   * It forms a unique key together with deployment and type, which is used to de-duplicate provision requests.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Arguments for the provisioner call.
   *
   * @generated from field: google.protobuf.Struct args = 4;
   */
  args?: Struct;

  constructor(data?: PartialMessage<ProvisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProvisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "args", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvisionRequest {
    return new ProvisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvisionRequest {
    return new ProvisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvisionRequest {
    return new ProvisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvisionRequest | PlainMessage<ProvisionRequest> | undefined, b: ProvisionRequest | PlainMessage<ProvisionRequest> | undefined): boolean {
    return proto3.util.equals(ProvisionRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProvisionResponse
 */
export class ProvisionResponse extends Message<ProvisionResponse> {
  /**
   * @generated from field: rill.admin.v1.ProvisionerResource resource = 1;
   */
  resource?: ProvisionerResource;

  constructor(data?: PartialMessage<ProvisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProvisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: ProvisionerResource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvisionResponse {
    return new ProvisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvisionResponse {
    return new ProvisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvisionResponse {
    return new ProvisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvisionResponse | PlainMessage<ProvisionResponse> | undefined, b: ProvisionResponse | PlainMessage<ProvisionResponse> | undefined): boolean {
    return proto3.util.equals(ProvisionResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMemberUsersRequest
 */
export class ListOrganizationMemberUsersRequest extends Message<ListOrganizationMemberUsersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMemberUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMemberUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMemberUsersRequest {
    return new ListOrganizationMemberUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsersRequest {
    return new ListOrganizationMemberUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsersRequest {
    return new ListOrganizationMemberUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMemberUsersRequest | PlainMessage<ListOrganizationMemberUsersRequest> | undefined, b: ListOrganizationMemberUsersRequest | PlainMessage<ListOrganizationMemberUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMemberUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMemberUsersResponse
 */
export class ListOrganizationMemberUsersResponse extends Message<ListOrganizationMemberUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MemberUser members = 1;
   */
  members: MemberUser[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMemberUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMemberUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MemberUser, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMemberUsersResponse {
    return new ListOrganizationMemberUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsersResponse {
    return new ListOrganizationMemberUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsersResponse {
    return new ListOrganizationMemberUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMemberUsersResponse | PlainMessage<ListOrganizationMemberUsersResponse> | undefined, b: ListOrganizationMemberUsersResponse | PlainMessage<ListOrganizationMemberUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMemberUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationInvitesRequest
 */
export class ListOrganizationInvitesRequest extends Message<ListOrganizationInvitesRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationInvitesRequest | PlainMessage<ListOrganizationInvitesRequest> | undefined, b: ListOrganizationInvitesRequest | PlainMessage<ListOrganizationInvitesRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationInvitesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationInvitesResponse
 */
export class ListOrganizationInvitesResponse extends Message<ListOrganizationInvitesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.UserInvite invites = 1;
   */
  invites: UserInvite[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: UserInvite, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationInvitesResponse | PlainMessage<ListOrganizationInvitesResponse> | undefined, b: ListOrganizationInvitesResponse | PlainMessage<ListOrganizationInvitesResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationInvitesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberUserRequest
 */
export class AddOrganizationMemberUserRequest extends Message<AddOrganizationMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  /**
   * @generated from field: bool superuser_force_access = 4;
   */
  superuserForceAccess = false;

  constructor(data?: PartialMessage<AddOrganizationMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "superuser_force_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberUserRequest {
    return new AddOrganizationMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberUserRequest {
    return new AddOrganizationMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberUserRequest {
    return new AddOrganizationMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberUserRequest | PlainMessage<AddOrganizationMemberUserRequest> | undefined, b: AddOrganizationMemberUserRequest | PlainMessage<AddOrganizationMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberUserResponse
 */
export class AddOrganizationMemberUserResponse extends Message<AddOrganizationMemberUserResponse> {
  /**
   * @generated from field: bool pending_signup = 1;
   */
  pendingSignup = false;

  constructor(data?: PartialMessage<AddOrganizationMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_signup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberUserResponse {
    return new AddOrganizationMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberUserResponse {
    return new AddOrganizationMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberUserResponse {
    return new AddOrganizationMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberUserResponse | PlainMessage<AddOrganizationMemberUserResponse> | undefined, b: AddOrganizationMemberUserResponse | PlainMessage<AddOrganizationMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberUserRequest
 */
export class RemoveOrganizationMemberUserRequest extends Message<RemoveOrganizationMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: bool keep_project_roles = 3;
   */
  keepProjectRoles = false;

  constructor(data?: PartialMessage<RemoveOrganizationMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keep_project_roles", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberUserRequest {
    return new RemoveOrganizationMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUserRequest {
    return new RemoveOrganizationMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUserRequest {
    return new RemoveOrganizationMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberUserRequest | PlainMessage<RemoveOrganizationMemberUserRequest> | undefined, b: RemoveOrganizationMemberUserRequest | PlainMessage<RemoveOrganizationMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberUserResponse
 */
export class RemoveOrganizationMemberUserResponse extends Message<RemoveOrganizationMemberUserResponse> {
  constructor(data?: PartialMessage<RemoveOrganizationMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberUserResponse {
    return new RemoveOrganizationMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUserResponse {
    return new RemoveOrganizationMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUserResponse {
    return new RemoveOrganizationMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberUserResponse | PlainMessage<RemoveOrganizationMemberUserResponse> | undefined, b: RemoveOrganizationMemberUserResponse | PlainMessage<RemoveOrganizationMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.LeaveOrganizationRequest
 */
export class LeaveOrganizationRequest extends Message<LeaveOrganizationRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<LeaveOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.LeaveOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined, b: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.LeaveOrganizationResponse
 */
export class LeaveOrganizationResponse extends Message<LeaveOrganizationResponse> {
  constructor(data?: PartialMessage<LeaveOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.LeaveOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined, b: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberUserRoleRequest
 */
export class SetOrganizationMemberUserRoleRequest extends Message<SetOrganizationMemberUserRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<SetOrganizationMemberUserRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberUserRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberUserRoleRequest {
    return new SetOrganizationMemberUserRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberUserRoleRequest {
    return new SetOrganizationMemberUserRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberUserRoleRequest {
    return new SetOrganizationMemberUserRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberUserRoleRequest | PlainMessage<SetOrganizationMemberUserRoleRequest> | undefined, b: SetOrganizationMemberUserRoleRequest | PlainMessage<SetOrganizationMemberUserRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberUserRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberUserRoleResponse
 */
export class SetOrganizationMemberUserRoleResponse extends Message<SetOrganizationMemberUserRoleResponse> {
  constructor(data?: PartialMessage<SetOrganizationMemberUserRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberUserRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberUserRoleResponse {
    return new SetOrganizationMemberUserRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberUserRoleResponse {
    return new SetOrganizationMemberUserRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberUserRoleResponse {
    return new SetOrganizationMemberUserRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberUserRoleResponse | PlainMessage<SetOrganizationMemberUserRoleResponse> | undefined, b: SetOrganizationMemberUserRoleResponse | PlainMessage<SetOrganizationMemberUserRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberUserRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListSuperusersRequest
 */
export class ListSuperusersRequest extends Message<ListSuperusersRequest> {
  constructor(data?: PartialMessage<ListSuperusersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListSuperusersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSuperusersRequest | PlainMessage<ListSuperusersRequest> | undefined, b: ListSuperusersRequest | PlainMessage<ListSuperusersRequest> | undefined): boolean {
    return proto3.util.equals(ListSuperusersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListSuperusersResponse
 */
export class ListSuperusersResponse extends Message<ListSuperusersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ListSuperusersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListSuperusersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSuperusersResponse | PlainMessage<ListSuperusersResponse> | undefined, b: ListSuperusersResponse | PlainMessage<ListSuperusersResponse> | undefined): boolean {
    return proto3.util.equals(ListSuperusersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetSuperuserRequest
 */
export class SetSuperuserRequest extends Message<SetSuperuserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: bool superuser = 2;
   */
  superuser = false;

  constructor(data?: PartialMessage<SetSuperuserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetSuperuserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "superuser", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSuperuserRequest | PlainMessage<SetSuperuserRequest> | undefined, b: SetSuperuserRequest | PlainMessage<SetSuperuserRequest> | undefined): boolean {
    return proto3.util.equals(SetSuperuserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetSuperuserResponse
 */
export class SetSuperuserResponse extends Message<SetSuperuserResponse> {
  constructor(data?: PartialMessage<SetSuperuserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetSuperuserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSuperuserResponse | PlainMessage<SetSuperuserResponse> | undefined, b: SetSuperuserResponse | PlainMessage<SetSuperuserResponse> | undefined): boolean {
    return proto3.util.equals(SetSuperuserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoGetResourceRequest
 */
export class SudoGetResourceRequest extends Message<SudoGetResourceRequest> {
  /**
   * @generated from oneof rill.admin.v1.SudoGetResourceRequest.id
   */
  id: {
    /**
     * @generated from field: string user_id = 1;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string org_id = 2;
     */
    value: string;
    case: "orgId";
  } | {
    /**
     * @generated from field: string project_id = 3;
     */
    value: string;
    case: "projectId";
  } | {
    /**
     * @generated from field: string deployment_id = 4;
     */
    value: string;
    case: "deploymentId";
  } | {
    /**
     * @generated from field: string instance_id = 5;
     */
    value: string;
    case: "instanceId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SudoGetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoGetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 2, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 4, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 5, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoGetResourceRequest | PlainMessage<SudoGetResourceRequest> | undefined, b: SudoGetResourceRequest | PlainMessage<SudoGetResourceRequest> | undefined): boolean {
    return proto3.util.equals(SudoGetResourceRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoGetResourceResponse
 */
export class SudoGetResourceResponse extends Message<SudoGetResourceResponse> {
  /**
   * @generated from oneof rill.admin.v1.SudoGetResourceResponse.resource
   */
  resource: {
    /**
     * @generated from field: rill.admin.v1.User user = 1;
     */
    value: User;
    case: "user";
  } | {
    /**
     * @generated from field: rill.admin.v1.Organization org = 2;
     */
    value: Organization;
    case: "org";
  } | {
    /**
     * @generated from field: rill.admin.v1.Project project = 3;
     */
    value: Project;
    case: "project";
  } | {
    /**
     * @generated from field: rill.admin.v1.Deployment deployment = 4;
     */
    value: Deployment;
    case: "deployment";
  } | {
    /**
     * @generated from field: rill.admin.v1.Deployment instance = 5;
     */
    value: Deployment;
    case: "instance";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SudoGetResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoGetResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User, oneof: "resource" },
    { no: 2, name: "org", kind: "message", T: Organization, oneof: "resource" },
    { no: 3, name: "project", kind: "message", T: Project, oneof: "resource" },
    { no: 4, name: "deployment", kind: "message", T: Deployment, oneof: "resource" },
    { no: 5, name: "instance", kind: "message", T: Deployment, oneof: "resource" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoGetResourceResponse | PlainMessage<SudoGetResourceResponse> | undefined, b: SudoGetResourceResponse | PlainMessage<SudoGetResourceResponse> | undefined): boolean {
    return proto3.util.equals(SudoGetResourceResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationQuotasRequest
 */
export class SudoUpdateOrganizationQuotasRequest extends Message<SudoUpdateOrganizationQuotasRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: optional int32 projects = 2;
   */
  projects?: number;

  /**
   * @generated from field: optional int32 deployments = 3;
   */
  deployments?: number;

  /**
   * @generated from field: optional int32 slots_total = 4;
   */
  slotsTotal?: number;

  /**
   * @generated from field: optional int32 slots_per_deployment = 5;
   */
  slotsPerDeployment?: number;

  /**
   * @generated from field: optional int32 outstanding_invites = 6;
   */
  outstandingInvites?: number;

  /**
   * @generated from field: optional int64 storage_limit_bytes_per_deployment = 7;
   */
  storageLimitBytesPerDeployment?: bigint;

  constructor(data?: PartialMessage<SudoUpdateOrganizationQuotasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationQuotasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "projects", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "deployments", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "slots_total", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "slots_per_deployment", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "outstanding_invites", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "storage_limit_bytes_per_deployment", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationQuotasRequest {
    return new SudoUpdateOrganizationQuotasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationQuotasRequest {
    return new SudoUpdateOrganizationQuotasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationQuotasRequest {
    return new SudoUpdateOrganizationQuotasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationQuotasRequest | PlainMessage<SudoUpdateOrganizationQuotasRequest> | undefined, b: SudoUpdateOrganizationQuotasRequest | PlainMessage<SudoUpdateOrganizationQuotasRequest> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationQuotasRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationQuotasResponse
 */
export class SudoUpdateOrganizationQuotasResponse extends Message<SudoUpdateOrganizationQuotasResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<SudoUpdateOrganizationQuotasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationQuotasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationQuotasResponse {
    return new SudoUpdateOrganizationQuotasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationQuotasResponse {
    return new SudoUpdateOrganizationQuotasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationQuotasResponse {
    return new SudoUpdateOrganizationQuotasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationQuotasResponse | PlainMessage<SudoUpdateOrganizationQuotasResponse> | undefined, b: SudoUpdateOrganizationQuotasResponse | PlainMessage<SudoUpdateOrganizationQuotasResponse> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationQuotasResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationBillingCustomerRequest
 */
export class SudoUpdateOrganizationBillingCustomerRequest extends Message<SudoUpdateOrganizationBillingCustomerRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: optional string billing_customer_id = 2;
   */
  billingCustomerId?: string;

  /**
   * @generated from field: optional string payment_customer_id = 3;
   */
  paymentCustomerId?: string;

  constructor(data?: PartialMessage<SudoUpdateOrganizationBillingCustomerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationBillingCustomerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "billing_customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "payment_customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationBillingCustomerRequest {
    return new SudoUpdateOrganizationBillingCustomerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationBillingCustomerRequest {
    return new SudoUpdateOrganizationBillingCustomerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationBillingCustomerRequest {
    return new SudoUpdateOrganizationBillingCustomerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationBillingCustomerRequest | PlainMessage<SudoUpdateOrganizationBillingCustomerRequest> | undefined, b: SudoUpdateOrganizationBillingCustomerRequest | PlainMessage<SudoUpdateOrganizationBillingCustomerRequest> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationBillingCustomerRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationBillingCustomerResponse
 */
export class SudoUpdateOrganizationBillingCustomerResponse extends Message<SudoUpdateOrganizationBillingCustomerResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.Subscription subscription = 2;
   */
  subscription?: Subscription;

  constructor(data?: PartialMessage<SudoUpdateOrganizationBillingCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationBillingCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "subscription", kind: "message", T: Subscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationBillingCustomerResponse {
    return new SudoUpdateOrganizationBillingCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationBillingCustomerResponse {
    return new SudoUpdateOrganizationBillingCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationBillingCustomerResponse {
    return new SudoUpdateOrganizationBillingCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationBillingCustomerResponse | PlainMessage<SudoUpdateOrganizationBillingCustomerResponse> | undefined, b: SudoUpdateOrganizationBillingCustomerResponse | PlainMessage<SudoUpdateOrganizationBillingCustomerResponse> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationBillingCustomerResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoExtendTrialRequest
 */
export class SudoExtendTrialRequest extends Message<SudoExtendTrialRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: int32 days = 2;
   */
  days = 0;

  constructor(data?: PartialMessage<SudoExtendTrialRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoExtendTrialRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoExtendTrialRequest {
    return new SudoExtendTrialRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoExtendTrialRequest {
    return new SudoExtendTrialRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoExtendTrialRequest {
    return new SudoExtendTrialRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoExtendTrialRequest | PlainMessage<SudoExtendTrialRequest> | undefined, b: SudoExtendTrialRequest | PlainMessage<SudoExtendTrialRequest> | undefined): boolean {
    return proto3.util.equals(SudoExtendTrialRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoExtendTrialResponse
 */
export class SudoExtendTrialResponse extends Message<SudoExtendTrialResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp trial_end = 1;
   */
  trialEnd?: Timestamp;

  constructor(data?: PartialMessage<SudoExtendTrialResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoExtendTrialResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trial_end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoExtendTrialResponse {
    return new SudoExtendTrialResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoExtendTrialResponse {
    return new SudoExtendTrialResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoExtendTrialResponse {
    return new SudoExtendTrialResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoExtendTrialResponse | PlainMessage<SudoExtendTrialResponse> | undefined, b: SudoExtendTrialResponse | PlainMessage<SudoExtendTrialResponse> | undefined): boolean {
    return proto3.util.equals(SudoExtendTrialResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationCustomDomainRequest
 */
export class SudoUpdateOrganizationCustomDomainRequest extends Message<SudoUpdateOrganizationCustomDomainRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string custom_domain = 2;
   */
  customDomain = "";

  constructor(data?: PartialMessage<SudoUpdateOrganizationCustomDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationCustomDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "custom_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationCustomDomainRequest {
    return new SudoUpdateOrganizationCustomDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationCustomDomainRequest {
    return new SudoUpdateOrganizationCustomDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationCustomDomainRequest {
    return new SudoUpdateOrganizationCustomDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationCustomDomainRequest | PlainMessage<SudoUpdateOrganizationCustomDomainRequest> | undefined, b: SudoUpdateOrganizationCustomDomainRequest | PlainMessage<SudoUpdateOrganizationCustomDomainRequest> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationCustomDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateOrganizationCustomDomainResponse
 */
export class SudoUpdateOrganizationCustomDomainResponse extends Message<SudoUpdateOrganizationCustomDomainResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<SudoUpdateOrganizationCustomDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateOrganizationCustomDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateOrganizationCustomDomainResponse {
    return new SudoUpdateOrganizationCustomDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationCustomDomainResponse {
    return new SudoUpdateOrganizationCustomDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateOrganizationCustomDomainResponse {
    return new SudoUpdateOrganizationCustomDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateOrganizationCustomDomainResponse | PlainMessage<SudoUpdateOrganizationCustomDomainResponse> | undefined, b: SudoUpdateOrganizationCustomDomainResponse | PlainMessage<SudoUpdateOrganizationCustomDomainResponse> | undefined): boolean {
    return proto3.util.equals(SudoUpdateOrganizationCustomDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateUserQuotasRequest
 */
export class SudoUpdateUserQuotasRequest extends Message<SudoUpdateUserQuotasRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: optional int32 singleuser_orgs = 2;
   */
  singleuserOrgs?: number;

  /**
   * @generated from field: optional int32 trial_orgs = 3;
   */
  trialOrgs?: number;

  constructor(data?: PartialMessage<SudoUpdateUserQuotasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateUserQuotasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "singleuser_orgs", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "trial_orgs", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateUserQuotasRequest {
    return new SudoUpdateUserQuotasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateUserQuotasRequest {
    return new SudoUpdateUserQuotasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateUserQuotasRequest {
    return new SudoUpdateUserQuotasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateUserQuotasRequest | PlainMessage<SudoUpdateUserQuotasRequest> | undefined, b: SudoUpdateUserQuotasRequest | PlainMessage<SudoUpdateUserQuotasRequest> | undefined): boolean {
    return proto3.util.equals(SudoUpdateUserQuotasRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateUserQuotasResponse
 */
export class SudoUpdateUserQuotasResponse extends Message<SudoUpdateUserQuotasResponse> {
  /**
   * @generated from field: rill.admin.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<SudoUpdateUserQuotasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateUserQuotasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateUserQuotasResponse {
    return new SudoUpdateUserQuotasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateUserQuotasResponse {
    return new SudoUpdateUserQuotasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateUserQuotasResponse {
    return new SudoUpdateUserQuotasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateUserQuotasResponse | PlainMessage<SudoUpdateUserQuotasResponse> | undefined, b: SudoUpdateUserQuotasResponse | PlainMessage<SudoUpdateUserQuotasResponse> | undefined): boolean {
    return proto3.util.equals(SudoUpdateUserQuotasResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateAnnotationsRequest
 */
export class SudoUpdateAnnotationsRequest extends Message<SudoUpdateAnnotationsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: map<string, string> annotations = 3;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SudoUpdateAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateAnnotationsRequest {
    return new SudoUpdateAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateAnnotationsRequest {
    return new SudoUpdateAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateAnnotationsRequest {
    return new SudoUpdateAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateAnnotationsRequest | PlainMessage<SudoUpdateAnnotationsRequest> | undefined, b: SudoUpdateAnnotationsRequest | PlainMessage<SudoUpdateAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(SudoUpdateAnnotationsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoUpdateAnnotationsResponse
 */
export class SudoUpdateAnnotationsResponse extends Message<SudoUpdateAnnotationsResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<SudoUpdateAnnotationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoUpdateAnnotationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoUpdateAnnotationsResponse {
    return new SudoUpdateAnnotationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoUpdateAnnotationsResponse {
    return new SudoUpdateAnnotationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoUpdateAnnotationsResponse {
    return new SudoUpdateAnnotationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoUpdateAnnotationsResponse | PlainMessage<SudoUpdateAnnotationsResponse> | undefined, b: SudoUpdateAnnotationsResponse | PlainMessage<SudoUpdateAnnotationsResponse> | undefined): boolean {
    return proto3.util.equals(SudoUpdateAnnotationsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoIssueRuntimeManagerTokenRequest
 */
export class SudoIssueRuntimeManagerTokenRequest extends Message<SudoIssueRuntimeManagerTokenRequest> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<SudoIssueRuntimeManagerTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoIssueRuntimeManagerTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoIssueRuntimeManagerTokenRequest {
    return new SudoIssueRuntimeManagerTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoIssueRuntimeManagerTokenRequest {
    return new SudoIssueRuntimeManagerTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoIssueRuntimeManagerTokenRequest {
    return new SudoIssueRuntimeManagerTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoIssueRuntimeManagerTokenRequest | PlainMessage<SudoIssueRuntimeManagerTokenRequest> | undefined, b: SudoIssueRuntimeManagerTokenRequest | PlainMessage<SudoIssueRuntimeManagerTokenRequest> | undefined): boolean {
    return proto3.util.equals(SudoIssueRuntimeManagerTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoIssueRuntimeManagerTokenResponse
 */
export class SudoIssueRuntimeManagerTokenResponse extends Message<SudoIssueRuntimeManagerTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<SudoIssueRuntimeManagerTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoIssueRuntimeManagerTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoIssueRuntimeManagerTokenResponse {
    return new SudoIssueRuntimeManagerTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoIssueRuntimeManagerTokenResponse {
    return new SudoIssueRuntimeManagerTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoIssueRuntimeManagerTokenResponse {
    return new SudoIssueRuntimeManagerTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoIssueRuntimeManagerTokenResponse | PlainMessage<SudoIssueRuntimeManagerTokenResponse> | undefined, b: SudoIssueRuntimeManagerTokenResponse | PlainMessage<SudoIssueRuntimeManagerTokenResponse> | undefined): boolean {
    return proto3.util.equals(SudoIssueRuntimeManagerTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoDeleteOrganizationBillingIssueRequest
 */
export class SudoDeleteOrganizationBillingIssueRequest extends Message<SudoDeleteOrganizationBillingIssueRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: rill.admin.v1.BillingIssueType type = 2;
   */
  type = BillingIssueType.UNSPECIFIED;

  constructor(data?: PartialMessage<SudoDeleteOrganizationBillingIssueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoDeleteOrganizationBillingIssueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(BillingIssueType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoDeleteOrganizationBillingIssueRequest {
    return new SudoDeleteOrganizationBillingIssueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoDeleteOrganizationBillingIssueRequest {
    return new SudoDeleteOrganizationBillingIssueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoDeleteOrganizationBillingIssueRequest {
    return new SudoDeleteOrganizationBillingIssueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoDeleteOrganizationBillingIssueRequest | PlainMessage<SudoDeleteOrganizationBillingIssueRequest> | undefined, b: SudoDeleteOrganizationBillingIssueRequest | PlainMessage<SudoDeleteOrganizationBillingIssueRequest> | undefined): boolean {
    return proto3.util.equals(SudoDeleteOrganizationBillingIssueRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoDeleteOrganizationBillingIssueResponse
 */
export class SudoDeleteOrganizationBillingIssueResponse extends Message<SudoDeleteOrganizationBillingIssueResponse> {
  constructor(data?: PartialMessage<SudoDeleteOrganizationBillingIssueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoDeleteOrganizationBillingIssueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoDeleteOrganizationBillingIssueResponse {
    return new SudoDeleteOrganizationBillingIssueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoDeleteOrganizationBillingIssueResponse {
    return new SudoDeleteOrganizationBillingIssueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoDeleteOrganizationBillingIssueResponse {
    return new SudoDeleteOrganizationBillingIssueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoDeleteOrganizationBillingIssueResponse | PlainMessage<SudoDeleteOrganizationBillingIssueResponse> | undefined, b: SudoDeleteOrganizationBillingIssueResponse | PlainMessage<SudoDeleteOrganizationBillingIssueResponse> | undefined): boolean {
    return proto3.util.equals(SudoDeleteOrganizationBillingIssueResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoTriggerBillingRepairRequest
 */
export class SudoTriggerBillingRepairRequest extends Message<SudoTriggerBillingRepairRequest> {
  constructor(data?: PartialMessage<SudoTriggerBillingRepairRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoTriggerBillingRepairRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoTriggerBillingRepairRequest {
    return new SudoTriggerBillingRepairRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoTriggerBillingRepairRequest {
    return new SudoTriggerBillingRepairRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoTriggerBillingRepairRequest {
    return new SudoTriggerBillingRepairRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoTriggerBillingRepairRequest | PlainMessage<SudoTriggerBillingRepairRequest> | undefined, b: SudoTriggerBillingRepairRequest | PlainMessage<SudoTriggerBillingRepairRequest> | undefined): boolean {
    return proto3.util.equals(SudoTriggerBillingRepairRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SudoTriggerBillingRepairResponse
 */
export class SudoTriggerBillingRepairResponse extends Message<SudoTriggerBillingRepairResponse> {
  constructor(data?: PartialMessage<SudoTriggerBillingRepairResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoTriggerBillingRepairResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoTriggerBillingRepairResponse {
    return new SudoTriggerBillingRepairResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoTriggerBillingRepairResponse {
    return new SudoTriggerBillingRepairResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoTriggerBillingRepairResponse {
    return new SudoTriggerBillingRepairResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoTriggerBillingRepairResponse | PlainMessage<SudoTriggerBillingRepairResponse> | undefined, b: SudoTriggerBillingRepairResponse | PlainMessage<SudoTriggerBillingRepairResponse> | undefined): boolean {
    return proto3.util.equals(SudoTriggerBillingRepairResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMemberUsersRequest
 */
export class ListProjectMemberUsersRequest extends Message<ListProjectMemberUsersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectMemberUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMemberUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMemberUsersRequest {
    return new ListProjectMemberUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMemberUsersRequest {
    return new ListProjectMemberUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMemberUsersRequest {
    return new ListProjectMemberUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMemberUsersRequest | PlainMessage<ListProjectMemberUsersRequest> | undefined, b: ListProjectMemberUsersRequest | PlainMessage<ListProjectMemberUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectMemberUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMemberUsersResponse
 */
export class ListProjectMemberUsersResponse extends Message<ListProjectMemberUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MemberUser members = 1;
   */
  members: MemberUser[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectMemberUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMemberUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MemberUser, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMemberUsersResponse {
    return new ListProjectMemberUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMemberUsersResponse {
    return new ListProjectMemberUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMemberUsersResponse {
    return new ListProjectMemberUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMemberUsersResponse | PlainMessage<ListProjectMemberUsersResponse> | undefined, b: ListProjectMemberUsersResponse | PlainMessage<ListProjectMemberUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectMemberUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectInvitesRequest
 */
export class ListProjectInvitesRequest extends Message<ListProjectInvitesRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectInvitesRequest | PlainMessage<ListProjectInvitesRequest> | undefined, b: ListProjectInvitesRequest | PlainMessage<ListProjectInvitesRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectInvitesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectInvitesResponse
 */
export class ListProjectInvitesResponse extends Message<ListProjectInvitesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.UserInvite invites = 1;
   */
  invites: UserInvite[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: UserInvite, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectInvitesResponse | PlainMessage<ListProjectInvitesResponse> | undefined, b: ListProjectInvitesResponse | PlainMessage<ListProjectInvitesResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectInvitesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberUserRequest
 */
export class AddProjectMemberUserRequest extends Message<AddProjectMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<AddProjectMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberUserRequest {
    return new AddProjectMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberUserRequest {
    return new AddProjectMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberUserRequest {
    return new AddProjectMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberUserRequest | PlainMessage<AddProjectMemberUserRequest> | undefined, b: AddProjectMemberUserRequest | PlainMessage<AddProjectMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberUserResponse
 */
export class AddProjectMemberUserResponse extends Message<AddProjectMemberUserResponse> {
  /**
   * @generated from field: bool pending_signup = 1;
   */
  pendingSignup = false;

  constructor(data?: PartialMessage<AddProjectMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_signup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberUserResponse {
    return new AddProjectMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberUserResponse {
    return new AddProjectMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberUserResponse {
    return new AddProjectMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberUserResponse | PlainMessage<AddProjectMemberUserResponse> | undefined, b: AddProjectMemberUserResponse | PlainMessage<AddProjectMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberUserRequest
 */
export class RemoveProjectMemberUserRequest extends Message<RemoveProjectMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<RemoveProjectMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberUserRequest {
    return new RemoveProjectMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberUserRequest {
    return new RemoveProjectMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberUserRequest {
    return new RemoveProjectMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberUserRequest | PlainMessage<RemoveProjectMemberUserRequest> | undefined, b: RemoveProjectMemberUserRequest | PlainMessage<RemoveProjectMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberUserResponse
 */
export class RemoveProjectMemberUserResponse extends Message<RemoveProjectMemberUserResponse> {
  constructor(data?: PartialMessage<RemoveProjectMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberUserResponse {
    return new RemoveProjectMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberUserResponse {
    return new RemoveProjectMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberUserResponse {
    return new RemoveProjectMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberUserResponse | PlainMessage<RemoveProjectMemberUserResponse> | undefined, b: RemoveProjectMemberUserResponse | PlainMessage<RemoveProjectMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberUserRoleRequest
 */
export class SetProjectMemberUserRoleRequest extends Message<SetProjectMemberUserRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<SetProjectMemberUserRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberUserRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberUserRoleRequest {
    return new SetProjectMemberUserRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberUserRoleRequest {
    return new SetProjectMemberUserRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberUserRoleRequest {
    return new SetProjectMemberUserRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberUserRoleRequest | PlainMessage<SetProjectMemberUserRoleRequest> | undefined, b: SetProjectMemberUserRoleRequest | PlainMessage<SetProjectMemberUserRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberUserRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberUserRoleResponse
 */
export class SetProjectMemberUserRoleResponse extends Message<SetProjectMemberUserRoleResponse> {
  constructor(data?: PartialMessage<SetProjectMemberUserRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberUserRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberUserRoleResponse {
    return new SetProjectMemberUserRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberUserRoleResponse {
    return new SetProjectMemberUserRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberUserRoleResponse {
    return new SetProjectMemberUserRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberUserRoleResponse | PlainMessage<SetProjectMemberUserRoleResponse> | undefined, b: SetProjectMemberUserRoleResponse | PlainMessage<SetProjectMemberUserRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberUserRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateUsergroupRequest
 */
export class CreateUsergroupRequest extends Message<CreateUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CreateUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUsergroupRequest {
    return new CreateUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUsergroupRequest {
    return new CreateUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUsergroupRequest {
    return new CreateUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUsergroupRequest | PlainMessage<CreateUsergroupRequest> | undefined, b: CreateUsergroupRequest | PlainMessage<CreateUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(CreateUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateUsergroupResponse
 */
export class CreateUsergroupResponse extends Message<CreateUsergroupResponse> {
  constructor(data?: PartialMessage<CreateUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUsergroupResponse {
    return new CreateUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUsergroupResponse {
    return new CreateUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUsergroupResponse {
    return new CreateUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUsergroupResponse | PlainMessage<CreateUsergroupResponse> | undefined, b: CreateUsergroupResponse | PlainMessage<CreateUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(CreateUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetUsergroupRequest
 */
export class GetUsergroupRequest extends Message<GetUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<GetUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsergroupRequest {
    return new GetUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsergroupRequest {
    return new GetUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsergroupRequest {
    return new GetUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsergroupRequest | PlainMessage<GetUsergroupRequest> | undefined, b: GetUsergroupRequest | PlainMessage<GetUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(GetUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetUsergroupResponse
 */
export class GetUsergroupResponse extends Message<GetUsergroupResponse> {
  /**
   * @generated from field: rill.admin.v1.Usergroup usergroup = 1;
   */
  usergroup?: Usergroup;

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<GetUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usergroup", kind: "message", T: Usergroup },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsergroupResponse {
    return new GetUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsergroupResponse {
    return new GetUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsergroupResponse {
    return new GetUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsergroupResponse | PlainMessage<GetUsergroupResponse> | undefined, b: GetUsergroupResponse | PlainMessage<GetUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(GetUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RenameUsergroupRequest
 */
export class RenameUsergroupRequest extends Message<RenameUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<RenameUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RenameUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameUsergroupRequest {
    return new RenameUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameUsergroupRequest {
    return new RenameUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameUsergroupRequest {
    return new RenameUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameUsergroupRequest | PlainMessage<RenameUsergroupRequest> | undefined, b: RenameUsergroupRequest | PlainMessage<RenameUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(RenameUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RenameUsergroupResponse
 */
export class RenameUsergroupResponse extends Message<RenameUsergroupResponse> {
  constructor(data?: PartialMessage<RenameUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RenameUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameUsergroupResponse {
    return new RenameUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameUsergroupResponse {
    return new RenameUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameUsergroupResponse {
    return new RenameUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameUsergroupResponse | PlainMessage<RenameUsergroupResponse> | undefined, b: RenameUsergroupResponse | PlainMessage<RenameUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(RenameUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditUsergroupRequest
 */
export class EditUsergroupRequest extends Message<EditUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<EditUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditUsergroupRequest {
    return new EditUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditUsergroupRequest {
    return new EditUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditUsergroupRequest {
    return new EditUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditUsergroupRequest | PlainMessage<EditUsergroupRequest> | undefined, b: EditUsergroupRequest | PlainMessage<EditUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(EditUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditUsergroupResponse
 */
export class EditUsergroupResponse extends Message<EditUsergroupResponse> {
  constructor(data?: PartialMessage<EditUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditUsergroupResponse {
    return new EditUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditUsergroupResponse {
    return new EditUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditUsergroupResponse {
    return new EditUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditUsergroupResponse | PlainMessage<EditUsergroupResponse> | undefined, b: EditUsergroupResponse | PlainMessage<EditUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(EditUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMemberUsergroupsRequest
 */
export class ListOrganizationMemberUsergroupsRequest extends Message<ListOrganizationMemberUsergroupsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMemberUsergroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMemberUsergroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMemberUsergroupsRequest {
    return new ListOrganizationMemberUsergroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsergroupsRequest {
    return new ListOrganizationMemberUsergroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsergroupsRequest {
    return new ListOrganizationMemberUsergroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMemberUsergroupsRequest | PlainMessage<ListOrganizationMemberUsergroupsRequest> | undefined, b: ListOrganizationMemberUsergroupsRequest | PlainMessage<ListOrganizationMemberUsergroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMemberUsergroupsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMemberUsergroupsResponse
 */
export class ListOrganizationMemberUsergroupsResponse extends Message<ListOrganizationMemberUsergroupsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MemberUsergroup members = 1;
   */
  members: MemberUsergroup[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMemberUsergroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMemberUsergroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MemberUsergroup, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMemberUsergroupsResponse {
    return new ListOrganizationMemberUsergroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsergroupsResponse {
    return new ListOrganizationMemberUsergroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMemberUsergroupsResponse {
    return new ListOrganizationMemberUsergroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMemberUsergroupsResponse | PlainMessage<ListOrganizationMemberUsergroupsResponse> | undefined, b: ListOrganizationMemberUsergroupsResponse | PlainMessage<ListOrganizationMemberUsergroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMemberUsergroupsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMemberUsergroupsRequest
 */
export class ListProjectMemberUsergroupsRequest extends Message<ListProjectMemberUsergroupsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectMemberUsergroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMemberUsergroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMemberUsergroupsRequest {
    return new ListProjectMemberUsergroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMemberUsergroupsRequest {
    return new ListProjectMemberUsergroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMemberUsergroupsRequest {
    return new ListProjectMemberUsergroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMemberUsergroupsRequest | PlainMessage<ListProjectMemberUsergroupsRequest> | undefined, b: ListProjectMemberUsergroupsRequest | PlainMessage<ListProjectMemberUsergroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectMemberUsergroupsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMemberUsergroupsResponse
 */
export class ListProjectMemberUsergroupsResponse extends Message<ListProjectMemberUsergroupsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MemberUsergroup members = 1;
   */
  members: MemberUsergroup[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectMemberUsergroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMemberUsergroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MemberUsergroup, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMemberUsergroupsResponse {
    return new ListProjectMemberUsergroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMemberUsergroupsResponse {
    return new ListProjectMemberUsergroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMemberUsergroupsResponse {
    return new ListProjectMemberUsergroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMemberUsergroupsResponse | PlainMessage<ListProjectMemberUsergroupsResponse> | undefined, b: ListProjectMemberUsergroupsResponse | PlainMessage<ListProjectMemberUsergroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectMemberUsergroupsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteUsergroupRequest
 */
export class DeleteUsergroupRequest extends Message<DeleteUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  constructor(data?: PartialMessage<DeleteUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUsergroupRequest {
    return new DeleteUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUsergroupRequest {
    return new DeleteUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUsergroupRequest {
    return new DeleteUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUsergroupRequest | PlainMessage<DeleteUsergroupRequest> | undefined, b: DeleteUsergroupRequest | PlainMessage<DeleteUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteUsergroupResponse
 */
export class DeleteUsergroupResponse extends Message<DeleteUsergroupResponse> {
  constructor(data?: PartialMessage<DeleteUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUsergroupResponse {
    return new DeleteUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUsergroupResponse {
    return new DeleteUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUsergroupResponse {
    return new DeleteUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUsergroupResponse | PlainMessage<DeleteUsergroupResponse> | undefined, b: DeleteUsergroupResponse | PlainMessage<DeleteUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberUsergroupRequest
 */
export class AddOrganizationMemberUsergroupRequest extends Message<AddOrganizationMemberUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<AddOrganizationMemberUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberUsergroupRequest {
    return new AddOrganizationMemberUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberUsergroupRequest {
    return new AddOrganizationMemberUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberUsergroupRequest {
    return new AddOrganizationMemberUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberUsergroupRequest | PlainMessage<AddOrganizationMemberUsergroupRequest> | undefined, b: AddOrganizationMemberUsergroupRequest | PlainMessage<AddOrganizationMemberUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberUsergroupResponse
 */
export class AddOrganizationMemberUsergroupResponse extends Message<AddOrganizationMemberUsergroupResponse> {
  constructor(data?: PartialMessage<AddOrganizationMemberUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberUsergroupResponse {
    return new AddOrganizationMemberUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberUsergroupResponse {
    return new AddOrganizationMemberUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberUsergroupResponse {
    return new AddOrganizationMemberUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberUsergroupResponse | PlainMessage<AddOrganizationMemberUsergroupResponse> | undefined, b: AddOrganizationMemberUsergroupResponse | PlainMessage<AddOrganizationMemberUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberUsergroupRoleRequest
 */
export class SetOrganizationMemberUsergroupRoleRequest extends Message<SetOrganizationMemberUsergroupRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<SetOrganizationMemberUsergroupRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberUsergroupRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberUsergroupRoleRequest {
    return new SetOrganizationMemberUsergroupRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberUsergroupRoleRequest {
    return new SetOrganizationMemberUsergroupRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberUsergroupRoleRequest {
    return new SetOrganizationMemberUsergroupRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberUsergroupRoleRequest | PlainMessage<SetOrganizationMemberUsergroupRoleRequest> | undefined, b: SetOrganizationMemberUsergroupRoleRequest | PlainMessage<SetOrganizationMemberUsergroupRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberUsergroupRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberUsergroupRoleResponse
 */
export class SetOrganizationMemberUsergroupRoleResponse extends Message<SetOrganizationMemberUsergroupRoleResponse> {
  constructor(data?: PartialMessage<SetOrganizationMemberUsergroupRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberUsergroupRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberUsergroupRoleResponse {
    return new SetOrganizationMemberUsergroupRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberUsergroupRoleResponse {
    return new SetOrganizationMemberUsergroupRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberUsergroupRoleResponse {
    return new SetOrganizationMemberUsergroupRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberUsergroupRoleResponse | PlainMessage<SetOrganizationMemberUsergroupRoleResponse> | undefined, b: SetOrganizationMemberUsergroupRoleResponse | PlainMessage<SetOrganizationMemberUsergroupRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberUsergroupRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberUsergroupRequest
 */
export class RemoveOrganizationMemberUsergroupRequest extends Message<RemoveOrganizationMemberUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  constructor(data?: PartialMessage<RemoveOrganizationMemberUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberUsergroupRequest {
    return new RemoveOrganizationMemberUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUsergroupRequest {
    return new RemoveOrganizationMemberUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUsergroupRequest {
    return new RemoveOrganizationMemberUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberUsergroupRequest | PlainMessage<RemoveOrganizationMemberUsergroupRequest> | undefined, b: RemoveOrganizationMemberUsergroupRequest | PlainMessage<RemoveOrganizationMemberUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberUsergroupResponse
 */
export class RemoveOrganizationMemberUsergroupResponse extends Message<RemoveOrganizationMemberUsergroupResponse> {
  constructor(data?: PartialMessage<RemoveOrganizationMemberUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberUsergroupResponse {
    return new RemoveOrganizationMemberUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUsergroupResponse {
    return new RemoveOrganizationMemberUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberUsergroupResponse {
    return new RemoveOrganizationMemberUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberUsergroupResponse | PlainMessage<RemoveOrganizationMemberUsergroupResponse> | undefined, b: RemoveOrganizationMemberUsergroupResponse | PlainMessage<RemoveOrganizationMemberUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberUsergroupRequest
 */
export class AddProjectMemberUsergroupRequest extends Message<AddProjectMemberUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string usergroup = 3;
   */
  usergroup = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<AddProjectMemberUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberUsergroupRequest {
    return new AddProjectMemberUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberUsergroupRequest {
    return new AddProjectMemberUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberUsergroupRequest {
    return new AddProjectMemberUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberUsergroupRequest | PlainMessage<AddProjectMemberUsergroupRequest> | undefined, b: AddProjectMemberUsergroupRequest | PlainMessage<AddProjectMemberUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberUsergroupResponse
 */
export class AddProjectMemberUsergroupResponse extends Message<AddProjectMemberUsergroupResponse> {
  constructor(data?: PartialMessage<AddProjectMemberUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberUsergroupResponse {
    return new AddProjectMemberUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberUsergroupResponse {
    return new AddProjectMemberUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberUsergroupResponse {
    return new AddProjectMemberUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberUsergroupResponse | PlainMessage<AddProjectMemberUsergroupResponse> | undefined, b: AddProjectMemberUsergroupResponse | PlainMessage<AddProjectMemberUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberUsergroupRoleRequest
 */
export class SetProjectMemberUsergroupRoleRequest extends Message<SetProjectMemberUsergroupRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string usergroup = 3;
   */
  usergroup = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<SetProjectMemberUsergroupRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberUsergroupRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberUsergroupRoleRequest {
    return new SetProjectMemberUsergroupRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberUsergroupRoleRequest {
    return new SetProjectMemberUsergroupRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberUsergroupRoleRequest {
    return new SetProjectMemberUsergroupRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberUsergroupRoleRequest | PlainMessage<SetProjectMemberUsergroupRoleRequest> | undefined, b: SetProjectMemberUsergroupRoleRequest | PlainMessage<SetProjectMemberUsergroupRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberUsergroupRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberUsergroupRoleResponse
 */
export class SetProjectMemberUsergroupRoleResponse extends Message<SetProjectMemberUsergroupRoleResponse> {
  constructor(data?: PartialMessage<SetProjectMemberUsergroupRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberUsergroupRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberUsergroupRoleResponse {
    return new SetProjectMemberUsergroupRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberUsergroupRoleResponse {
    return new SetProjectMemberUsergroupRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberUsergroupRoleResponse {
    return new SetProjectMemberUsergroupRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberUsergroupRoleResponse | PlainMessage<SetProjectMemberUsergroupRoleResponse> | undefined, b: SetProjectMemberUsergroupRoleResponse | PlainMessage<SetProjectMemberUsergroupRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberUsergroupRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberUsergroupRequest
 */
export class RemoveProjectMemberUsergroupRequest extends Message<RemoveProjectMemberUsergroupRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string usergroup = 3;
   */
  usergroup = "";

  constructor(data?: PartialMessage<RemoveProjectMemberUsergroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberUsergroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberUsergroupRequest {
    return new RemoveProjectMemberUsergroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberUsergroupRequest {
    return new RemoveProjectMemberUsergroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberUsergroupRequest {
    return new RemoveProjectMemberUsergroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberUsergroupRequest | PlainMessage<RemoveProjectMemberUsergroupRequest> | undefined, b: RemoveProjectMemberUsergroupRequest | PlainMessage<RemoveProjectMemberUsergroupRequest> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberUsergroupRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberUsergroupResponse
 */
export class RemoveProjectMemberUsergroupResponse extends Message<RemoveProjectMemberUsergroupResponse> {
  constructor(data?: PartialMessage<RemoveProjectMemberUsergroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberUsergroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberUsergroupResponse {
    return new RemoveProjectMemberUsergroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberUsergroupResponse {
    return new RemoveProjectMemberUsergroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberUsergroupResponse {
    return new RemoveProjectMemberUsergroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberUsergroupResponse | PlainMessage<RemoveProjectMemberUsergroupResponse> | undefined, b: RemoveProjectMemberUsergroupResponse | PlainMessage<RemoveProjectMemberUsergroupResponse> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberUsergroupResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddUsergroupMemberUserRequest
 */
export class AddUsergroupMemberUserRequest extends Message<AddUsergroupMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<AddUsergroupMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddUsergroupMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUsergroupMemberUserRequest {
    return new AddUsergroupMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUsergroupMemberUserRequest {
    return new AddUsergroupMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUsergroupMemberUserRequest {
    return new AddUsergroupMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddUsergroupMemberUserRequest | PlainMessage<AddUsergroupMemberUserRequest> | undefined, b: AddUsergroupMemberUserRequest | PlainMessage<AddUsergroupMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(AddUsergroupMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddUsergroupMemberUserResponse
 */
export class AddUsergroupMemberUserResponse extends Message<AddUsergroupMemberUserResponse> {
  constructor(data?: PartialMessage<AddUsergroupMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddUsergroupMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUsergroupMemberUserResponse {
    return new AddUsergroupMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUsergroupMemberUserResponse {
    return new AddUsergroupMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUsergroupMemberUserResponse {
    return new AddUsergroupMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddUsergroupMemberUserResponse | PlainMessage<AddUsergroupMemberUserResponse> | undefined, b: AddUsergroupMemberUserResponse | PlainMessage<AddUsergroupMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(AddUsergroupMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListUsergroupMemberUsersRequest
 */
export class ListUsergroupMemberUsersRequest extends Message<ListUsergroupMemberUsersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListUsergroupMemberUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListUsergroupMemberUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsergroupMemberUsersRequest {
    return new ListUsergroupMemberUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsergroupMemberUsersRequest {
    return new ListUsergroupMemberUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsergroupMemberUsersRequest {
    return new ListUsergroupMemberUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsergroupMemberUsersRequest | PlainMessage<ListUsergroupMemberUsersRequest> | undefined, b: ListUsergroupMemberUsersRequest | PlainMessage<ListUsergroupMemberUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsergroupMemberUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListUsergroupMemberUsersResponse
 */
export class ListUsergroupMemberUsersResponse extends Message<ListUsergroupMemberUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MemberUser members = 1;
   */
  members: MemberUser[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUsergroupMemberUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListUsergroupMemberUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MemberUser, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsergroupMemberUsersResponse {
    return new ListUsergroupMemberUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsergroupMemberUsersResponse {
    return new ListUsergroupMemberUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsergroupMemberUsersResponse {
    return new ListUsergroupMemberUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsergroupMemberUsersResponse | PlainMessage<ListUsergroupMemberUsersResponse> | undefined, b: ListUsergroupMemberUsersResponse | PlainMessage<ListUsergroupMemberUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListUsergroupMemberUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveUsergroupMemberUserRequest
 */
export class RemoveUsergroupMemberUserRequest extends Message<RemoveUsergroupMemberUserRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string usergroup = 2;
   */
  usergroup = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<RemoveUsergroupMemberUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveUsergroupMemberUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usergroup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUsergroupMemberUserRequest {
    return new RemoveUsergroupMemberUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUsergroupMemberUserRequest {
    return new RemoveUsergroupMemberUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUsergroupMemberUserRequest {
    return new RemoveUsergroupMemberUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUsergroupMemberUserRequest | PlainMessage<RemoveUsergroupMemberUserRequest> | undefined, b: RemoveUsergroupMemberUserRequest | PlainMessage<RemoveUsergroupMemberUserRequest> | undefined): boolean {
    return proto3.util.equals(RemoveUsergroupMemberUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveUsergroupMemberUserResponse
 */
export class RemoveUsergroupMemberUserResponse extends Message<RemoveUsergroupMemberUserResponse> {
  constructor(data?: PartialMessage<RemoveUsergroupMemberUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveUsergroupMemberUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUsergroupMemberUserResponse {
    return new RemoveUsergroupMemberUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUsergroupMemberUserResponse {
    return new RemoveUsergroupMemberUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUsergroupMemberUserResponse {
    return new RemoveUsergroupMemberUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUsergroupMemberUserResponse | PlainMessage<RemoveUsergroupMemberUserResponse> | undefined, b: RemoveUsergroupMemberUserResponse | PlainMessage<RemoveUsergroupMemberUserResponse> | undefined): boolean {
    return proto3.util.equals(RemoveUsergroupMemberUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentUserRequest
 */
export class GetCurrentUserRequest extends Message<GetCurrentUserRequest> {
  constructor(data?: PartialMessage<GetCurrentUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined, b: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentUserResponse
 */
export class GetCurrentUserResponse extends Message<GetCurrentUserResponse> {
  /**
   * @generated from field: rill.admin.v1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: rill.admin.v1.UserPreferences preferences = 2;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<GetCurrentUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined, b: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: rill.admin.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UserPreferences
 */
export class UserPreferences extends Message<UserPreferences> {
  /**
   * @generated from field: optional string time_zone = 1;
   */
  timeZone?: string;

  constructor(data?: PartialMessage<UserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPreferences {
    return new UserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: UserPreferences | PlainMessage<UserPreferences> | undefined, b: UserPreferences | PlainMessage<UserPreferences> | undefined): boolean {
    return proto3.util.equals(UserPreferences, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateUserPreferencesRequest
 */
export class UpdateUserPreferencesRequest extends Message<UpdateUserPreferencesRequest> {
  /**
   * @generated from field: rill.admin.v1.UserPreferences preferences = 1;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<UpdateUserPreferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateUserPreferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPreferencesRequest {
    return new UpdateUserPreferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPreferencesRequest {
    return new UpdateUserPreferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPreferencesRequest {
    return new UpdateUserPreferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserPreferencesRequest | PlainMessage<UpdateUserPreferencesRequest> | undefined, b: UpdateUserPreferencesRequest | PlainMessage<UpdateUserPreferencesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserPreferencesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateUserPreferencesResponse
 */
export class UpdateUserPreferencesResponse extends Message<UpdateUserPreferencesResponse> {
  /**
   * @generated from field: rill.admin.v1.UserPreferences preferences = 1;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<UpdateUserPreferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateUserPreferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPreferencesResponse {
    return new UpdateUserPreferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPreferencesResponse {
    return new UpdateUserPreferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPreferencesResponse {
    return new UpdateUserPreferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserPreferencesResponse | PlainMessage<UpdateUserPreferencesResponse> | undefined, b: UpdateUserPreferencesResponse | PlainMessage<UpdateUserPreferencesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserPreferencesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteUserRequest
 */
export class DeleteUserRequest extends Message<DeleteUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<DeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined, b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteUserResponse
 */
export class DeleteUserResponse extends Message<DeleteUserResponse> {
  constructor(data?: PartialMessage<DeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined, b: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListBookmarksRequest
 */
export class ListBookmarksRequest extends Message<ListBookmarksRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string resource_kind = 2;
   */
  resourceKind = "";

  /**
   * @generated from field: string resource_name = 3;
   */
  resourceName = "";

  constructor(data?: PartialMessage<ListBookmarksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListBookmarksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined, b: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined): boolean {
    return proto3.util.equals(ListBookmarksRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListBookmarksResponse
 */
export class ListBookmarksResponse extends Message<ListBookmarksResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Bookmark bookmarks = 1;
   */
  bookmarks: Bookmark[] = [];

  constructor(data?: PartialMessage<ListBookmarksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListBookmarksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmarks", kind: "message", T: Bookmark, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksResponse | PlainMessage<ListBookmarksResponse> | undefined, b: ListBookmarksResponse | PlainMessage<ListBookmarksResponse> | undefined): boolean {
    return proto3.util.equals(ListBookmarksResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBookmarkRequest
 */
export class GetBookmarkRequest extends Message<GetBookmarkRequest> {
  /**
   * @generated from field: string bookmark_id = 1;
   */
  bookmarkId = "";

  constructor(data?: PartialMessage<GetBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarkRequest | PlainMessage<GetBookmarkRequest> | undefined, b: GetBookmarkRequest | PlainMessage<GetBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(GetBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBookmarkResponse
 */
export class GetBookmarkResponse extends Message<GetBookmarkResponse> {
  /**
   * @generated from field: rill.admin.v1.Bookmark bookmark = 1;
   */
  bookmark?: Bookmark;

  constructor(data?: PartialMessage<GetBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "message", T: Bookmark },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarkResponse | PlainMessage<GetBookmarkResponse> | undefined, b: GetBookmarkResponse | PlainMessage<GetBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(GetBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateBookmarkRequest
 */
export class CreateBookmarkRequest extends Message<CreateBookmarkRequest> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string resource_kind = 4;
   */
  resourceKind = "";

  /**
   * @generated from field: string resource_name = 5;
   */
  resourceName = "";

  /**
   * @generated from field: string project_id = 6;
   */
  projectId = "";

  /**
   * @generated from field: bool default = 7;
   */
  default = false;

  /**
   * @generated from field: bool shared = 8;
   */
  shared = false;

  constructor(data?: PartialMessage<CreateBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "resource_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "shared", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBookmarkRequest {
    return new CreateBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBookmarkRequest {
    return new CreateBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBookmarkRequest {
    return new CreateBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBookmarkRequest | PlainMessage<CreateBookmarkRequest> | undefined, b: CreateBookmarkRequest | PlainMessage<CreateBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(CreateBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateBookmarkResponse
 */
export class CreateBookmarkResponse extends Message<CreateBookmarkResponse> {
  /**
   * @generated from field: rill.admin.v1.Bookmark bookmark = 1;
   */
  bookmark?: Bookmark;

  constructor(data?: PartialMessage<CreateBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark", kind: "message", T: Bookmark },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBookmarkResponse {
    return new CreateBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBookmarkResponse {
    return new CreateBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBookmarkResponse {
    return new CreateBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBookmarkResponse | PlainMessage<CreateBookmarkResponse> | undefined, b: CreateBookmarkResponse | PlainMessage<CreateBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(CreateBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateBookmarkRequest
 */
export class UpdateBookmarkRequest extends Message<UpdateBookmarkRequest> {
  /**
   * @generated from field: string bookmark_id = 1;
   */
  bookmarkId = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bool default = 5;
   */
  default = false;

  /**
   * @generated from field: bool shared = 6;
   */
  shared = false;

  constructor(data?: PartialMessage<UpdateBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "shared", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined, b: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateBookmarkResponse
 */
export class UpdateBookmarkResponse extends Message<UpdateBookmarkResponse> {
  constructor(data?: PartialMessage<UpdateBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined, b: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveBookmarkRequest
 */
export class RemoveBookmarkRequest extends Message<RemoveBookmarkRequest> {
  /**
   * @generated from field: string bookmark_id = 1;
   */
  bookmarkId = "";

  constructor(data?: PartialMessage<RemoveBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bookmark_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveBookmarkRequest {
    return new RemoveBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveBookmarkRequest | PlainMessage<RemoveBookmarkRequest> | undefined, b: RemoveBookmarkRequest | PlainMessage<RemoveBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(RemoveBookmarkRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveBookmarkResponse
 */
export class RemoveBookmarkResponse extends Message<RemoveBookmarkResponse> {
  constructor(data?: PartialMessage<RemoveBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveBookmarkResponse {
    return new RemoveBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveBookmarkResponse | PlainMessage<RemoveBookmarkResponse> | undefined, b: RemoveBookmarkResponse | PlainMessage<RemoveBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(RemoveBookmarkResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchUsersRequest
 */
export class SearchUsersRequest extends Message<SearchUsersRequest> {
  /**
   * @generated from field: string email_pattern = 1;
   */
  emailPattern = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<SearchUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchUsersRequest | PlainMessage<SearchUsersRequest> | undefined, b: SearchUsersRequest | PlainMessage<SearchUsersRequest> | undefined): boolean {
    return proto3.util.equals(SearchUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchUsersResponse
 */
export class SearchUsersResponse extends Message<SearchUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchUsersResponse | PlainMessage<SearchUsersResponse> | undefined, b: SearchUsersResponse | PlainMessage<SearchUsersResponse> | undefined): boolean {
    return proto3.util.equals(SearchUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeCurrentAuthTokenRequest
 */
export class RevokeCurrentAuthTokenRequest extends Message<RevokeCurrentAuthTokenRequest> {
  constructor(data?: PartialMessage<RevokeCurrentAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeCurrentAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeCurrentAuthTokenRequest | PlainMessage<RevokeCurrentAuthTokenRequest> | undefined, b: RevokeCurrentAuthTokenRequest | PlainMessage<RevokeCurrentAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(RevokeCurrentAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeCurrentAuthTokenResponse
 */
export class RevokeCurrentAuthTokenResponse extends Message<RevokeCurrentAuthTokenResponse> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  constructor(data?: PartialMessage<RevokeCurrentAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeCurrentAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeCurrentAuthTokenResponse | PlainMessage<RevokeCurrentAuthTokenResponse> | undefined, b: RevokeCurrentAuthTokenResponse | PlainMessage<RevokeCurrentAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(RevokeCurrentAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueRepresentativeAuthTokenRequest
 */
export class IssueRepresentativeAuthTokenRequest extends Message<IssueRepresentativeAuthTokenRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: int64 ttl_minutes = 2;
   */
  ttlMinutes = protoInt64.zero;

  constructor(data?: PartialMessage<IssueRepresentativeAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueRepresentativeAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ttl_minutes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueRepresentativeAuthTokenRequest | PlainMessage<IssueRepresentativeAuthTokenRequest> | undefined, b: IssueRepresentativeAuthTokenRequest | PlainMessage<IssueRepresentativeAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(IssueRepresentativeAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueRepresentativeAuthTokenResponse
 */
export class IssueRepresentativeAuthTokenResponse extends Message<IssueRepresentativeAuthTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<IssueRepresentativeAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueRepresentativeAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueRepresentativeAuthTokenResponse | PlainMessage<IssueRepresentativeAuthTokenResponse> | undefined, b: IssueRepresentativeAuthTokenResponse | PlainMessage<IssueRepresentativeAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(IssueRepresentativeAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeServiceAuthTokenRequest
 */
export class RevokeServiceAuthTokenRequest extends Message<RevokeServiceAuthTokenRequest> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  constructor(data?: PartialMessage<RevokeServiceAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeServiceAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeServiceAuthTokenRequest {
    return new RevokeServiceAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeServiceAuthTokenRequest {
    return new RevokeServiceAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeServiceAuthTokenRequest {
    return new RevokeServiceAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeServiceAuthTokenRequest | PlainMessage<RevokeServiceAuthTokenRequest> | undefined, b: RevokeServiceAuthTokenRequest | PlainMessage<RevokeServiceAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(RevokeServiceAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeServiceAuthTokenResponse
 */
export class RevokeServiceAuthTokenResponse extends Message<RevokeServiceAuthTokenResponse> {
  constructor(data?: PartialMessage<RevokeServiceAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeServiceAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeServiceAuthTokenResponse {
    return new RevokeServiceAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeServiceAuthTokenResponse {
    return new RevokeServiceAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeServiceAuthTokenResponse {
    return new RevokeServiceAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeServiceAuthTokenResponse | PlainMessage<RevokeServiceAuthTokenResponse> | undefined, b: RevokeServiceAuthTokenResponse | PlainMessage<RevokeServiceAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(RevokeServiceAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueServiceAuthTokenRequest
 */
export class IssueServiceAuthTokenRequest extends Message<IssueServiceAuthTokenRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string service_name = 2;
   */
  serviceName = "";

  constructor(data?: PartialMessage<IssueServiceAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueServiceAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueServiceAuthTokenRequest {
    return new IssueServiceAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueServiceAuthTokenRequest {
    return new IssueServiceAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueServiceAuthTokenRequest {
    return new IssueServiceAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueServiceAuthTokenRequest | PlainMessage<IssueServiceAuthTokenRequest> | undefined, b: IssueServiceAuthTokenRequest | PlainMessage<IssueServiceAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(IssueServiceAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueServiceAuthTokenResponse
 */
export class IssueServiceAuthTokenResponse extends Message<IssueServiceAuthTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<IssueServiceAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueServiceAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueServiceAuthTokenResponse {
    return new IssueServiceAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueServiceAuthTokenResponse {
    return new IssueServiceAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueServiceAuthTokenResponse {
    return new IssueServiceAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueServiceAuthTokenResponse | PlainMessage<IssueServiceAuthTokenResponse> | undefined, b: IssueServiceAuthTokenResponse | PlainMessage<IssueServiceAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(IssueServiceAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListServiceAuthTokensRequest
 */
export class ListServiceAuthTokensRequest extends Message<ListServiceAuthTokensRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string service_name = 2;
   */
  serviceName = "";

  constructor(data?: PartialMessage<ListServiceAuthTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListServiceAuthTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAuthTokensRequest {
    return new ListServiceAuthTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAuthTokensRequest {
    return new ListServiceAuthTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAuthTokensRequest {
    return new ListServiceAuthTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAuthTokensRequest | PlainMessage<ListServiceAuthTokensRequest> | undefined, b: ListServiceAuthTokensRequest | PlainMessage<ListServiceAuthTokensRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceAuthTokensRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListServiceAuthTokensResponse
 */
export class ListServiceAuthTokensResponse extends Message<ListServiceAuthTokensResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.ServiceToken tokens = 1;
   */
  tokens: ServiceToken[] = [];

  constructor(data?: PartialMessage<ListServiceAuthTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListServiceAuthTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: ServiceToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAuthTokensResponse {
    return new ListServiceAuthTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAuthTokensResponse {
    return new ListServiceAuthTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAuthTokensResponse {
    return new ListServiceAuthTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAuthTokensResponse | PlainMessage<ListServiceAuthTokensResponse> | undefined, b: ListServiceAuthTokensResponse | PlainMessage<ListServiceAuthTokensResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceAuthTokensResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueMagicAuthTokenRequest
 */
export class IssueMagicAuthTokenRequest extends Message<IssueMagicAuthTokenRequest> {
  /**
   * Organization that owns the project.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * Project to create the magic auth token in.
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * TTL for the token in minutes. Set to 0 for no expiry. Defaults to no expiry.
   *
   * @generated from field: int64 ttl_minutes = 3;
   */
  ttlMinutes = protoInt64.zero;

  /**
   * Type of resource to grant access to. Currently only supports "rill.runtime.v1.Explore".
   *
   * @generated from field: string resource_type = 8;
   */
  resourceType = "";

  /**
   * Name of the resource to grant access to.
   *
   * @generated from field: string resource_name = 9;
   */
  resourceName = "";

  /**
   * Optional filter to apply as a row filter in queries.
   * This will be translated to a rill.runtime.v1.SecurityRuleRowFilter, which currently applies to metric views queries.
   *
   * @generated from field: rill.runtime.v1.Expression filter = 5;
   */
  filter?: Expression;

  /**
   * Optional list of fields to limit access to. If empty, no field access rule will be added.
   * This will be translated to a rill.runtime.v1.SecurityRuleFieldAccess, which currently applies to dimension and measure names for explores and metrics views.
   *
   * @generated from field: repeated string fields = 6;
   */
  fields: string[] = [];

  /**
   * Optional state to store with the token. Can be fetched with GetCurrentMagicAuthToken.
   *
   * @generated from field: string state = 7;
   */
  state = "";

  /**
   * Optional display name to store with the token.
   *
   * @generated from field: string display_name = 10;
   */
  displayName = "";

  constructor(data?: PartialMessage<IssueMagicAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueMagicAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ttl_minutes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "filter", kind: "message", T: Expression },
    { no: 6, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueMagicAuthTokenRequest {
    return new IssueMagicAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueMagicAuthTokenRequest {
    return new IssueMagicAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueMagicAuthTokenRequest {
    return new IssueMagicAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueMagicAuthTokenRequest | PlainMessage<IssueMagicAuthTokenRequest> | undefined, b: IssueMagicAuthTokenRequest | PlainMessage<IssueMagicAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(IssueMagicAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueMagicAuthTokenResponse
 */
export class IssueMagicAuthTokenResponse extends Message<IssueMagicAuthTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<IssueMagicAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueMagicAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueMagicAuthTokenResponse {
    return new IssueMagicAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueMagicAuthTokenResponse {
    return new IssueMagicAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueMagicAuthTokenResponse {
    return new IssueMagicAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueMagicAuthTokenResponse | PlainMessage<IssueMagicAuthTokenResponse> | undefined, b: IssueMagicAuthTokenResponse | PlainMessage<IssueMagicAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(IssueMagicAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListMagicAuthTokensRequest
 */
export class ListMagicAuthTokensRequest extends Message<ListMagicAuthTokensRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListMagicAuthTokensRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListMagicAuthTokensRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMagicAuthTokensRequest {
    return new ListMagicAuthTokensRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMagicAuthTokensRequest {
    return new ListMagicAuthTokensRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMagicAuthTokensRequest {
    return new ListMagicAuthTokensRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMagicAuthTokensRequest | PlainMessage<ListMagicAuthTokensRequest> | undefined, b: ListMagicAuthTokensRequest | PlainMessage<ListMagicAuthTokensRequest> | undefined): boolean {
    return proto3.util.equals(ListMagicAuthTokensRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListMagicAuthTokensResponse
 */
export class ListMagicAuthTokensResponse extends Message<ListMagicAuthTokensResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.MagicAuthToken tokens = 1;
   */
  tokens: MagicAuthToken[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListMagicAuthTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListMagicAuthTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: MagicAuthToken, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMagicAuthTokensResponse {
    return new ListMagicAuthTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMagicAuthTokensResponse {
    return new ListMagicAuthTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMagicAuthTokensResponse {
    return new ListMagicAuthTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMagicAuthTokensResponse | PlainMessage<ListMagicAuthTokensResponse> | undefined, b: ListMagicAuthTokensResponse | PlainMessage<ListMagicAuthTokensResponse> | undefined): boolean {
    return proto3.util.equals(ListMagicAuthTokensResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentMagicAuthTokenRequest
 */
export class GetCurrentMagicAuthTokenRequest extends Message<GetCurrentMagicAuthTokenRequest> {
  constructor(data?: PartialMessage<GetCurrentMagicAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentMagicAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentMagicAuthTokenRequest {
    return new GetCurrentMagicAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentMagicAuthTokenRequest {
    return new GetCurrentMagicAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentMagicAuthTokenRequest {
    return new GetCurrentMagicAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentMagicAuthTokenRequest | PlainMessage<GetCurrentMagicAuthTokenRequest> | undefined, b: GetCurrentMagicAuthTokenRequest | PlainMessage<GetCurrentMagicAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentMagicAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentMagicAuthTokenResponse
 */
export class GetCurrentMagicAuthTokenResponse extends Message<GetCurrentMagicAuthTokenResponse> {
  /**
   * @generated from field: rill.admin.v1.MagicAuthToken token = 1;
   */
  token?: MagicAuthToken;

  constructor(data?: PartialMessage<GetCurrentMagicAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentMagicAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: MagicAuthToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentMagicAuthTokenResponse {
    return new GetCurrentMagicAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentMagicAuthTokenResponse {
    return new GetCurrentMagicAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentMagicAuthTokenResponse {
    return new GetCurrentMagicAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentMagicAuthTokenResponse | PlainMessage<GetCurrentMagicAuthTokenResponse> | undefined, b: GetCurrentMagicAuthTokenResponse | PlainMessage<GetCurrentMagicAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentMagicAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeMagicAuthTokenRequest
 */
export class RevokeMagicAuthTokenRequest extends Message<RevokeMagicAuthTokenRequest> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  constructor(data?: PartialMessage<RevokeMagicAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeMagicAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeMagicAuthTokenRequest {
    return new RevokeMagicAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeMagicAuthTokenRequest {
    return new RevokeMagicAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeMagicAuthTokenRequest {
    return new RevokeMagicAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeMagicAuthTokenRequest | PlainMessage<RevokeMagicAuthTokenRequest> | undefined, b: RevokeMagicAuthTokenRequest | PlainMessage<RevokeMagicAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(RevokeMagicAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeMagicAuthTokenResponse
 */
export class RevokeMagicAuthTokenResponse extends Message<RevokeMagicAuthTokenResponse> {
  constructor(data?: PartialMessage<RevokeMagicAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeMagicAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeMagicAuthTokenResponse {
    return new RevokeMagicAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeMagicAuthTokenResponse {
    return new RevokeMagicAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeMagicAuthTokenResponse {
    return new RevokeMagicAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeMagicAuthTokenResponse | PlainMessage<RevokeMagicAuthTokenResponse> | undefined, b: RevokeMagicAuthTokenResponse | PlainMessage<RevokeMagicAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(RevokeMagicAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubRepoStatusRequest
 */
export class GetGithubRepoStatusRequest extends Message<GetGithubRepoStatusRequest> {
  /**
   * @generated from field: string github_url = 1;
   */
  githubUrl = "";

  constructor(data?: PartialMessage<GetGithubRepoStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubRepoStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubRepoStatusRequest | PlainMessage<GetGithubRepoStatusRequest> | undefined, b: GetGithubRepoStatusRequest | PlainMessage<GetGithubRepoStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetGithubRepoStatusRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubRepoStatusResponse
 */
export class GetGithubRepoStatusResponse extends Message<GetGithubRepoStatusResponse> {
  /**
   * @generated from field: bool has_access = 1;
   */
  hasAccess = false;

  /**
   * @generated from field: string grant_access_url = 2;
   */
  grantAccessUrl = "";

  /**
   * @generated from field: string default_branch = 3;
   */
  defaultBranch = "";

  constructor(data?: PartialMessage<GetGithubRepoStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubRepoStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "grant_access_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubRepoStatusResponse | PlainMessage<GetGithubRepoStatusResponse> | undefined, b: GetGithubRepoStatusResponse | PlainMessage<GetGithubRepoStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetGithubRepoStatusResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubUserStatusRequest
 */
export class GetGithubUserStatusRequest extends Message<GetGithubUserStatusRequest> {
  constructor(data?: PartialMessage<GetGithubUserStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubUserStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubUserStatusRequest {
    return new GetGithubUserStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubUserStatusRequest {
    return new GetGithubUserStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubUserStatusRequest {
    return new GetGithubUserStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubUserStatusRequest | PlainMessage<GetGithubUserStatusRequest> | undefined, b: GetGithubUserStatusRequest | PlainMessage<GetGithubUserStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetGithubUserStatusRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubUserStatusResponse
 */
export class GetGithubUserStatusResponse extends Message<GetGithubUserStatusResponse> {
  /**
   * @generated from field: bool has_access = 1;
   */
  hasAccess = false;

  /**
   * @generated from field: string grant_access_url = 2;
   */
  grantAccessUrl = "";

  /**
   * @generated from field: string access_token = 3;
   */
  accessToken = "";

  /**
   * @generated from field: string account = 4;
   */
  account = "";

  /**
   * @generated from field: rill.admin.v1.GithubPermission user_installation_permission = 6;
   */
  userInstallationPermission = GithubPermission.UNSPECIFIED;

  /**
   * @generated from field: map<string, rill.admin.v1.GithubPermission> organization_installation_permissions = 7;
   */
  organizationInstallationPermissions: { [key: string]: GithubPermission } = {};

  /**
   * DEPRECATED: Use organization_installation_permissions instead.
   *
   * @generated from field: repeated string organizations = 5 [deprecated = true];
   * @deprecated
   */
  organizations: string[] = [];

  constructor(data?: PartialMessage<GetGithubUserStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubUserStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "grant_access_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user_installation_permission", kind: "enum", T: proto3.getEnumType(GithubPermission) },
    { no: 7, name: "organization_installation_permissions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(GithubPermission)} },
    { no: 5, name: "organizations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubUserStatusResponse {
    return new GetGithubUserStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubUserStatusResponse {
    return new GetGithubUserStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubUserStatusResponse {
    return new GetGithubUserStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubUserStatusResponse | PlainMessage<GetGithubUserStatusResponse> | undefined, b: GetGithubUserStatusResponse | PlainMessage<GetGithubUserStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetGithubUserStatusResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListGithubUserReposRequest
 */
export class ListGithubUserReposRequest extends Message<ListGithubUserReposRequest> {
  constructor(data?: PartialMessage<ListGithubUserReposRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListGithubUserReposRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGithubUserReposRequest {
    return new ListGithubUserReposRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGithubUserReposRequest {
    return new ListGithubUserReposRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGithubUserReposRequest {
    return new ListGithubUserReposRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListGithubUserReposRequest | PlainMessage<ListGithubUserReposRequest> | undefined, b: ListGithubUserReposRequest | PlainMessage<ListGithubUserReposRequest> | undefined): boolean {
    return proto3.util.equals(ListGithubUserReposRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListGithubUserReposResponse
 */
export class ListGithubUserReposResponse extends Message<ListGithubUserReposResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.ListGithubUserReposResponse.Repo repos = 1;
   */
  repos: ListGithubUserReposResponse_Repo[] = [];

  constructor(data?: PartialMessage<ListGithubUserReposResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListGithubUserReposResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repos", kind: "message", T: ListGithubUserReposResponse_Repo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGithubUserReposResponse {
    return new ListGithubUserReposResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGithubUserReposResponse {
    return new ListGithubUserReposResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGithubUserReposResponse {
    return new ListGithubUserReposResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListGithubUserReposResponse | PlainMessage<ListGithubUserReposResponse> | undefined, b: ListGithubUserReposResponse | PlainMessage<ListGithubUserReposResponse> | undefined): boolean {
    return proto3.util.equals(ListGithubUserReposResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListGithubUserReposResponse.Repo
 */
export class ListGithubUserReposResponse_Repo extends Message<ListGithubUserReposResponse_Repo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: string default_branch = 5;
   */
  defaultBranch = "";

  constructor(data?: PartialMessage<ListGithubUserReposResponse_Repo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListGithubUserReposResponse.Repo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "default_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGithubUserReposResponse_Repo {
    return new ListGithubUserReposResponse_Repo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGithubUserReposResponse_Repo {
    return new ListGithubUserReposResponse_Repo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGithubUserReposResponse_Repo {
    return new ListGithubUserReposResponse_Repo().fromJsonString(jsonString, options);
  }

  static equals(a: ListGithubUserReposResponse_Repo | PlainMessage<ListGithubUserReposResponse_Repo> | undefined, b: ListGithubUserReposResponse_Repo | PlainMessage<ListGithubUserReposResponse_Repo> | undefined): boolean {
    return proto3.util.equals(ListGithubUserReposResponse_Repo, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ConnectProjectToGithubRequest
 */
export class ConnectProjectToGithubRequest extends Message<ConnectProjectToGithubRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string repo = 3;
   */
  repo = "";

  /**
   * @generated from field: string branch = 4;
   */
  branch = "";

  /**
   * @generated from field: string subpath = 5;
   */
  subpath = "";

  /**
   * @generated from field: bool force = 6;
   */
  force = false;

  constructor(data?: PartialMessage<ConnectProjectToGithubRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ConnectProjectToGithubRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectProjectToGithubRequest {
    return new ConnectProjectToGithubRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectProjectToGithubRequest {
    return new ConnectProjectToGithubRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectProjectToGithubRequest {
    return new ConnectProjectToGithubRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectProjectToGithubRequest | PlainMessage<ConnectProjectToGithubRequest> | undefined, b: ConnectProjectToGithubRequest | PlainMessage<ConnectProjectToGithubRequest> | undefined): boolean {
    return proto3.util.equals(ConnectProjectToGithubRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ConnectProjectToGithubResponse
 */
export class ConnectProjectToGithubResponse extends Message<ConnectProjectToGithubResponse> {
  constructor(data?: PartialMessage<ConnectProjectToGithubResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ConnectProjectToGithubResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectProjectToGithubResponse {
    return new ConnectProjectToGithubResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectProjectToGithubResponse {
    return new ConnectProjectToGithubResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectProjectToGithubResponse {
    return new ConnectProjectToGithubResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectProjectToGithubResponse | PlainMessage<ConnectProjectToGithubResponse> | undefined, b: ConnectProjectToGithubResponse | PlainMessage<ConnectProjectToGithubResponse> | undefined): boolean {
    return proto3.util.equals(ConnectProjectToGithubResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UploadProjectAssetsRequest
 */
export class UploadProjectAssetsRequest extends Message<UploadProjectAssetsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<UploadProjectAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UploadProjectAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadProjectAssetsRequest {
    return new UploadProjectAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadProjectAssetsRequest {
    return new UploadProjectAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadProjectAssetsRequest {
    return new UploadProjectAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadProjectAssetsRequest | PlainMessage<UploadProjectAssetsRequest> | undefined, b: UploadProjectAssetsRequest | PlainMessage<UploadProjectAssetsRequest> | undefined): boolean {
    return proto3.util.equals(UploadProjectAssetsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UploadProjectAssetsResponse
 */
export class UploadProjectAssetsResponse extends Message<UploadProjectAssetsResponse> {
  constructor(data?: PartialMessage<UploadProjectAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UploadProjectAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadProjectAssetsResponse {
    return new UploadProjectAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadProjectAssetsResponse {
    return new UploadProjectAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadProjectAssetsResponse {
    return new UploadProjectAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadProjectAssetsResponse | PlainMessage<UploadProjectAssetsResponse> | undefined, b: UploadProjectAssetsResponse | PlainMessage<UploadProjectAssetsResponse> | undefined): boolean {
    return proto3.util.equals(UploadProjectAssetsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCloneCredentialsRequest
 */
export class GetCloneCredentialsRequest extends Message<GetCloneCredentialsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<GetCloneCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCloneCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCloneCredentialsRequest {
    return new GetCloneCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCloneCredentialsRequest {
    return new GetCloneCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCloneCredentialsRequest {
    return new GetCloneCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCloneCredentialsRequest | PlainMessage<GetCloneCredentialsRequest> | undefined, b: GetCloneCredentialsRequest | PlainMessage<GetCloneCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetCloneCredentialsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCloneCredentialsResponse
 */
export class GetCloneCredentialsResponse extends Message<GetCloneCredentialsResponse> {
  /**
   * @generated from field: string git_repo_url = 1;
   */
  gitRepoUrl = "";

  /**
   * @generated from field: string git_username = 2;
   */
  gitUsername = "";

  /**
   * @generated from field: string git_password = 3;
   */
  gitPassword = "";

  /**
   * @generated from field: string git_subpath = 4;
   */
  gitSubpath = "";

  /**
   * @generated from field: string git_prod_branch = 5;
   */
  gitProdBranch = "";

  /**
   * either archive_download_url or git related details will be set
   *
   * @generated from field: string archive_download_url = 6;
   */
  archiveDownloadUrl = "";

  constructor(data?: PartialMessage<GetCloneCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCloneCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "git_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "git_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "git_subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "git_prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "archive_download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCloneCredentialsResponse {
    return new GetCloneCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCloneCredentialsResponse {
    return new GetCloneCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCloneCredentialsResponse {
    return new GetCloneCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCloneCredentialsResponse | PlainMessage<GetCloneCredentialsResponse> | undefined, b: GetCloneCredentialsResponse | PlainMessage<GetCloneCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetCloneCredentialsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateWhitelistedDomainRequest
 */
export class CreateWhitelistedDomainRequest extends Message<CreateWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<CreateWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWhitelistedDomainRequest | PlainMessage<CreateWhitelistedDomainRequest> | undefined, b: CreateWhitelistedDomainRequest | PlainMessage<CreateWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(CreateWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateWhitelistedDomainResponse
 */
export class CreateWhitelistedDomainResponse extends Message<CreateWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<CreateWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWhitelistedDomainResponse | PlainMessage<CreateWhitelistedDomainResponse> | undefined, b: CreateWhitelistedDomainResponse | PlainMessage<CreateWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(CreateWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveWhitelistedDomainRequest
 */
export class RemoveWhitelistedDomainRequest extends Message<RemoveWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<RemoveWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWhitelistedDomainRequest | PlainMessage<RemoveWhitelistedDomainRequest> | undefined, b: RemoveWhitelistedDomainRequest | PlainMessage<RemoveWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(RemoveWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveWhitelistedDomainResponse
 */
export class RemoveWhitelistedDomainResponse extends Message<RemoveWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<RemoveWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWhitelistedDomainResponse | PlainMessage<RemoveWhitelistedDomainResponse> | undefined, b: RemoveWhitelistedDomainResponse | PlainMessage<RemoveWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(RemoveWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListWhitelistedDomainsRequest
 */
export class ListWhitelistedDomainsRequest extends Message<ListWhitelistedDomainsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<ListWhitelistedDomainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListWhitelistedDomainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWhitelistedDomainsRequest | PlainMessage<ListWhitelistedDomainsRequest> | undefined, b: ListWhitelistedDomainsRequest | PlainMessage<ListWhitelistedDomainsRequest> | undefined): boolean {
    return proto3.util.equals(ListWhitelistedDomainsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListWhitelistedDomainsResponse
 */
export class ListWhitelistedDomainsResponse extends Message<ListWhitelistedDomainsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.WhitelistedDomain domains = 1;
   */
  domains: WhitelistedDomain[] = [];

  constructor(data?: PartialMessage<ListWhitelistedDomainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListWhitelistedDomainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "message", T: WhitelistedDomain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWhitelistedDomainsResponse | PlainMessage<ListWhitelistedDomainsResponse> | undefined, b: ListWhitelistedDomainsResponse | PlainMessage<ListWhitelistedDomainsResponse> | undefined): boolean {
    return proto3.util.equals(ListWhitelistedDomainsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectWhitelistedDomainRequest
 */
export class CreateProjectWhitelistedDomainRequest extends Message<CreateProjectWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string domain = 3;
   */
  domain = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<CreateProjectWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectWhitelistedDomainRequest {
    return new CreateProjectWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectWhitelistedDomainRequest {
    return new CreateProjectWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectWhitelistedDomainRequest {
    return new CreateProjectWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectWhitelistedDomainRequest | PlainMessage<CreateProjectWhitelistedDomainRequest> | undefined, b: CreateProjectWhitelistedDomainRequest | PlainMessage<CreateProjectWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectWhitelistedDomainResponse
 */
export class CreateProjectWhitelistedDomainResponse extends Message<CreateProjectWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<CreateProjectWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectWhitelistedDomainResponse {
    return new CreateProjectWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectWhitelistedDomainResponse {
    return new CreateProjectWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectWhitelistedDomainResponse {
    return new CreateProjectWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectWhitelistedDomainResponse | PlainMessage<CreateProjectWhitelistedDomainResponse> | undefined, b: CreateProjectWhitelistedDomainResponse | PlainMessage<CreateProjectWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectWhitelistedDomainRequest
 */
export class RemoveProjectWhitelistedDomainRequest extends Message<RemoveProjectWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string domain = 3;
   */
  domain = "";

  constructor(data?: PartialMessage<RemoveProjectWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectWhitelistedDomainRequest {
    return new RemoveProjectWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectWhitelistedDomainRequest {
    return new RemoveProjectWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectWhitelistedDomainRequest {
    return new RemoveProjectWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectWhitelistedDomainRequest | PlainMessage<RemoveProjectWhitelistedDomainRequest> | undefined, b: RemoveProjectWhitelistedDomainRequest | PlainMessage<RemoveProjectWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(RemoveProjectWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectWhitelistedDomainResponse
 */
export class RemoveProjectWhitelistedDomainResponse extends Message<RemoveProjectWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<RemoveProjectWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectWhitelistedDomainResponse {
    return new RemoveProjectWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectWhitelistedDomainResponse {
    return new RemoveProjectWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectWhitelistedDomainResponse {
    return new RemoveProjectWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectWhitelistedDomainResponse | PlainMessage<RemoveProjectWhitelistedDomainResponse> | undefined, b: RemoveProjectWhitelistedDomainResponse | PlainMessage<RemoveProjectWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(RemoveProjectWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectWhitelistedDomainsRequest
 */
export class ListProjectWhitelistedDomainsRequest extends Message<ListProjectWhitelistedDomainsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ListProjectWhitelistedDomainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectWhitelistedDomainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectWhitelistedDomainsRequest {
    return new ListProjectWhitelistedDomainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectWhitelistedDomainsRequest {
    return new ListProjectWhitelistedDomainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectWhitelistedDomainsRequest {
    return new ListProjectWhitelistedDomainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectWhitelistedDomainsRequest | PlainMessage<ListProjectWhitelistedDomainsRequest> | undefined, b: ListProjectWhitelistedDomainsRequest | PlainMessage<ListProjectWhitelistedDomainsRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectWhitelistedDomainsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectWhitelistedDomainsResponse
 */
export class ListProjectWhitelistedDomainsResponse extends Message<ListProjectWhitelistedDomainsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.WhitelistedDomain domains = 1;
   */
  domains: WhitelistedDomain[] = [];

  constructor(data?: PartialMessage<ListProjectWhitelistedDomainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectWhitelistedDomainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "message", T: WhitelistedDomain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectWhitelistedDomainsResponse {
    return new ListProjectWhitelistedDomainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectWhitelistedDomainsResponse {
    return new ListProjectWhitelistedDomainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectWhitelistedDomainsResponse {
    return new ListProjectWhitelistedDomainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectWhitelistedDomainsResponse | PlainMessage<ListProjectWhitelistedDomainsResponse> | undefined, b: ListProjectWhitelistedDomainsResponse | PlainMessage<ListProjectWhitelistedDomainsResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectWhitelistedDomainsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetRepoMetaRequest
 */
export class GetRepoMetaRequest extends Message<GetRepoMetaRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  constructor(data?: PartialMessage<GetRepoMetaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetRepoMetaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepoMetaRequest {
    return new GetRepoMetaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepoMetaRequest {
    return new GetRepoMetaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepoMetaRequest {
    return new GetRepoMetaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepoMetaRequest | PlainMessage<GetRepoMetaRequest> | undefined, b: GetRepoMetaRequest | PlainMessage<GetRepoMetaRequest> | undefined): boolean {
    return proto3.util.equals(GetRepoMetaRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetRepoMetaResponse
 */
export class GetRepoMetaResponse extends Message<GetRepoMetaResponse> {
  /**
   * If the Git-related fields are set, the archive-related fields will not be set (and vice versa).
   *
   * @generated from field: string git_url = 1;
   */
  gitUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp git_url_expires_on = 2;
   */
  gitUrlExpiresOn?: Timestamp;

  /**
   * @generated from field: string git_subpath = 3;
   */
  gitSubpath = "";

  /**
   * @generated from field: string archive_download_url = 4;
   */
  archiveDownloadUrl = "";

  /**
   * @generated from field: string archive_id = 5;
   */
  archiveId = "";

  /**
   * @generated from field: google.protobuf.Timestamp archive_created_on = 6;
   */
  archiveCreatedOn?: Timestamp;

  constructor(data?: PartialMessage<GetRepoMetaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetRepoMetaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "git_url_expires_on", kind: "message", T: Timestamp },
    { no: 3, name: "git_subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "archive_download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "archive_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "archive_created_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepoMetaResponse {
    return new GetRepoMetaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepoMetaResponse {
    return new GetRepoMetaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepoMetaResponse {
    return new GetRepoMetaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepoMetaResponse | PlainMessage<GetRepoMetaResponse> | undefined, b: GetRepoMetaResponse | PlainMessage<GetRepoMetaResponse> | undefined): boolean {
    return proto3.util.equals(GetRepoMetaResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.PullVirtualRepoRequest
 */
export class PullVirtualRepoRequest extends Message<PullVirtualRepoRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<PullVirtualRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PullVirtualRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullVirtualRepoRequest {
    return new PullVirtualRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullVirtualRepoRequest {
    return new PullVirtualRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullVirtualRepoRequest {
    return new PullVirtualRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullVirtualRepoRequest | PlainMessage<PullVirtualRepoRequest> | undefined, b: PullVirtualRepoRequest | PlainMessage<PullVirtualRepoRequest> | undefined): boolean {
    return proto3.util.equals(PullVirtualRepoRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.PullVirtualRepoResponse
 */
export class PullVirtualRepoResponse extends Message<PullVirtualRepoResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.VirtualFile files = 1;
   */
  files: VirtualFile[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<PullVirtualRepoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PullVirtualRepoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: VirtualFile, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullVirtualRepoResponse {
    return new PullVirtualRepoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullVirtualRepoResponse {
    return new PullVirtualRepoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullVirtualRepoResponse {
    return new PullVirtualRepoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullVirtualRepoResponse | PlainMessage<PullVirtualRepoResponse> | undefined, b: PullVirtualRepoResponse | PlainMessage<PullVirtualRepoResponse> | undefined): boolean {
    return proto3.util.equals(PullVirtualRepoResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetReportMetaRequest
 */
export class GetReportMetaRequest extends Message<GetReportMetaRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * @generated from field: string report = 3;
   */
  report = "";

  /**
   * @generated from field: string owner_id = 5;
   */
  ownerId = "";

  /**
   * @generated from field: google.protobuf.Timestamp execution_time = 6;
   */
  executionTime?: Timestamp;

  /**
   * @generated from field: repeated string email_recipients = 7;
   */
  emailRecipients: string[] = [];

  constructor(data?: PartialMessage<GetReportMetaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetReportMetaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "report", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "execution_time", kind: "message", T: Timestamp },
    { no: 7, name: "email_recipients", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportMetaRequest {
    return new GetReportMetaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportMetaRequest {
    return new GetReportMetaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportMetaRequest {
    return new GetReportMetaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportMetaRequest | PlainMessage<GetReportMetaRequest> | undefined, b: GetReportMetaRequest | PlainMessage<GetReportMetaRequest> | undefined): boolean {
    return proto3.util.equals(GetReportMetaRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetReportMetaResponse
 */
export class GetReportMetaResponse extends Message<GetReportMetaResponse> {
  /**
   * @generated from field: rill.admin.v1.GetReportMetaResponse.URLs base_urls = 1;
   */
  baseUrls?: GetReportMetaResponse_URLs;

  /**
   * @generated from field: map<string, rill.admin.v1.GetReportMetaResponse.URLs> recipient_urls = 2;
   */
  recipientUrls: { [key: string]: GetReportMetaResponse_URLs } = {};

  constructor(data?: PartialMessage<GetReportMetaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetReportMetaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_urls", kind: "message", T: GetReportMetaResponse_URLs },
    { no: 2, name: "recipient_urls", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GetReportMetaResponse_URLs} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportMetaResponse {
    return new GetReportMetaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportMetaResponse {
    return new GetReportMetaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportMetaResponse {
    return new GetReportMetaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportMetaResponse | PlainMessage<GetReportMetaResponse> | undefined, b: GetReportMetaResponse | PlainMessage<GetReportMetaResponse> | undefined): boolean {
    return proto3.util.equals(GetReportMetaResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetReportMetaResponse.URLs
 */
export class GetReportMetaResponse_URLs extends Message<GetReportMetaResponse_URLs> {
  /**
   * @generated from field: string open_url = 1;
   */
  openUrl = "";

  /**
   * @generated from field: string export_url = 2;
   */
  exportUrl = "";

  /**
   * @generated from field: string edit_url = 3;
   */
  editUrl = "";

  constructor(data?: PartialMessage<GetReportMetaResponse_URLs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetReportMetaResponse.URLs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "open_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "export_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "edit_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReportMetaResponse_URLs {
    return new GetReportMetaResponse_URLs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReportMetaResponse_URLs {
    return new GetReportMetaResponse_URLs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReportMetaResponse_URLs {
    return new GetReportMetaResponse_URLs().fromJsonString(jsonString, options);
  }

  static equals(a: GetReportMetaResponse_URLs | PlainMessage<GetReportMetaResponse_URLs> | undefined, b: GetReportMetaResponse_URLs | PlainMessage<GetReportMetaResponse_URLs> | undefined): boolean {
    return proto3.util.equals(GetReportMetaResponse_URLs, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetAlertMetaRequest
 */
export class GetAlertMetaRequest extends Message<GetAlertMetaRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * @generated from field: string alert = 3;
   */
  alert = "";

  /**
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from oneof rill.admin.v1.GetAlertMetaRequest.query_for
   */
  queryFor: {
    /**
     * @generated from field: string query_for_user_id = 5;
     */
    value: string;
    case: "queryForUserId";
  } | {
    /**
     * @generated from field: string query_for_user_email = 6;
     */
    value: string;
    case: "queryForUserEmail";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetAlertMetaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetAlertMetaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "alert", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "query_for_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_for" },
    { no: 6, name: "query_for_user_email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_for" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertMetaRequest {
    return new GetAlertMetaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertMetaRequest {
    return new GetAlertMetaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertMetaRequest {
    return new GetAlertMetaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertMetaRequest | PlainMessage<GetAlertMetaRequest> | undefined, b: GetAlertMetaRequest | PlainMessage<GetAlertMetaRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertMetaRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetAlertMetaResponse
 */
export class GetAlertMetaResponse extends Message<GetAlertMetaResponse> {
  /**
   * @generated from field: string open_url = 1;
   */
  openUrl = "";

  /**
   * @generated from field: string edit_url = 2;
   */
  editUrl = "";

  /**
   * @generated from field: google.protobuf.Struct query_for_attributes = 3;
   */
  queryForAttributes?: Struct;

  constructor(data?: PartialMessage<GetAlertMetaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetAlertMetaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "open_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "edit_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query_for_attributes", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertMetaResponse {
    return new GetAlertMetaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertMetaResponse {
    return new GetAlertMetaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertMetaResponse {
    return new GetAlertMetaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertMetaResponse | PlainMessage<GetAlertMetaResponse> | undefined, b: GetAlertMetaResponse | PlainMessage<GetAlertMetaResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertMetaResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateReportRequest
 */
export class CreateReportRequest extends Message<CreateReportRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: rill.admin.v1.ReportOptions options = 3;
   */
  options?: ReportOptions;

  constructor(data?: PartialMessage<CreateReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: ReportOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReportRequest | PlainMessage<CreateReportRequest> | undefined, b: CreateReportRequest | PlainMessage<CreateReportRequest> | undefined): boolean {
    return proto3.util.equals(CreateReportRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateReportResponse
 */
export class CreateReportResponse extends Message<CreateReportResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReportResponse | PlainMessage<CreateReportResponse> | undefined, b: CreateReportResponse | PlainMessage<CreateReportResponse> | undefined): boolean {
    return proto3.util.equals(CreateReportResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditReportRequest
 */
export class EditReportRequest extends Message<EditReportRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: rill.admin.v1.ReportOptions options = 4;
   */
  options?: ReportOptions;

  constructor(data?: PartialMessage<EditReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "options", kind: "message", T: ReportOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditReportRequest {
    return new EditReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditReportRequest {
    return new EditReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditReportRequest {
    return new EditReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditReportRequest | PlainMessage<EditReportRequest> | undefined, b: EditReportRequest | PlainMessage<EditReportRequest> | undefined): boolean {
    return proto3.util.equals(EditReportRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditReportResponse
 */
export class EditReportResponse extends Message<EditReportResponse> {
  constructor(data?: PartialMessage<EditReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditReportResponse {
    return new EditReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditReportResponse {
    return new EditReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditReportResponse {
    return new EditReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditReportResponse | PlainMessage<EditReportResponse> | undefined, b: EditReportResponse | PlainMessage<EditReportResponse> | undefined): boolean {
    return proto3.util.equals(EditReportResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UnsubscribeReportRequest
 */
export class UnsubscribeReportRequest extends Message<UnsubscribeReportRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UnsubscribeReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UnsubscribeReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeReportRequest {
    return new UnsubscribeReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeReportRequest {
    return new UnsubscribeReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeReportRequest {
    return new UnsubscribeReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeReportRequest | PlainMessage<UnsubscribeReportRequest> | undefined, b: UnsubscribeReportRequest | PlainMessage<UnsubscribeReportRequest> | undefined): boolean {
    return proto3.util.equals(UnsubscribeReportRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UnsubscribeReportResponse
 */
export class UnsubscribeReportResponse extends Message<UnsubscribeReportResponse> {
  constructor(data?: PartialMessage<UnsubscribeReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UnsubscribeReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeReportResponse {
    return new UnsubscribeReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeReportResponse {
    return new UnsubscribeReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeReportResponse {
    return new UnsubscribeReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeReportResponse | PlainMessage<UnsubscribeReportResponse> | undefined, b: UnsubscribeReportResponse | PlainMessage<UnsubscribeReportResponse> | undefined): boolean {
    return proto3.util.equals(UnsubscribeReportResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteReportRequest
 */
export class DeleteReportRequest extends Message<DeleteReportRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteReportRequest {
    return new DeleteReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteReportRequest | PlainMessage<DeleteReportRequest> | undefined, b: DeleteReportRequest | PlainMessage<DeleteReportRequest> | undefined): boolean {
    return proto3.util.equals(DeleteReportRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteReportResponse
 */
export class DeleteReportResponse extends Message<DeleteReportResponse> {
  constructor(data?: PartialMessage<DeleteReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteReportResponse {
    return new DeleteReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteReportResponse {
    return new DeleteReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteReportResponse {
    return new DeleteReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteReportResponse | PlainMessage<DeleteReportResponse> | undefined, b: DeleteReportResponse | PlainMessage<DeleteReportResponse> | undefined): boolean {
    return proto3.util.equals(DeleteReportResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReportRequest
 */
export class TriggerReportRequest extends Message<TriggerReportRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<TriggerReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReportRequest {
    return new TriggerReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReportRequest {
    return new TriggerReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReportRequest {
    return new TriggerReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReportRequest | PlainMessage<TriggerReportRequest> | undefined, b: TriggerReportRequest | PlainMessage<TriggerReportRequest> | undefined): boolean {
    return proto3.util.equals(TriggerReportRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReportResponse
 */
export class TriggerReportResponse extends Message<TriggerReportResponse> {
  constructor(data?: PartialMessage<TriggerReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReportResponse {
    return new TriggerReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReportResponse {
    return new TriggerReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReportResponse {
    return new TriggerReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReportResponse | PlainMessage<TriggerReportResponse> | undefined, b: TriggerReportResponse | PlainMessage<TriggerReportResponse> | undefined): boolean {
    return proto3.util.equals(TriggerReportResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GenerateReportYAMLRequest
 */
export class GenerateReportYAMLRequest extends Message<GenerateReportYAMLRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: rill.admin.v1.ReportOptions options = 3;
   */
  options?: ReportOptions;

  constructor(data?: PartialMessage<GenerateReportYAMLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GenerateReportYAMLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: ReportOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateReportYAMLRequest {
    return new GenerateReportYAMLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateReportYAMLRequest {
    return new GenerateReportYAMLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateReportYAMLRequest {
    return new GenerateReportYAMLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateReportYAMLRequest | PlainMessage<GenerateReportYAMLRequest> | undefined, b: GenerateReportYAMLRequest | PlainMessage<GenerateReportYAMLRequest> | undefined): boolean {
    return proto3.util.equals(GenerateReportYAMLRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GenerateReportYAMLResponse
 */
export class GenerateReportYAMLResponse extends Message<GenerateReportYAMLResponse> {
  /**
   * @generated from field: string yaml = 1;
   */
  yaml = "";

  constructor(data?: PartialMessage<GenerateReportYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GenerateReportYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateReportYAMLResponse {
    return new GenerateReportYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateReportYAMLResponse {
    return new GenerateReportYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateReportYAMLResponse {
    return new GenerateReportYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateReportYAMLResponse | PlainMessage<GenerateReportYAMLResponse> | undefined, b: GenerateReportYAMLResponse | PlainMessage<GenerateReportYAMLResponse> | undefined): boolean {
    return proto3.util.equals(GenerateReportYAMLResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateAlertRequest
 */
export class CreateAlertRequest extends Message<CreateAlertRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: rill.admin.v1.AlertOptions options = 3;
   */
  options?: AlertOptions;

  constructor(data?: PartialMessage<CreateAlertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateAlertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: AlertOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertRequest {
    return new CreateAlertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertRequest {
    return new CreateAlertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertRequest {
    return new CreateAlertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertRequest | PlainMessage<CreateAlertRequest> | undefined, b: CreateAlertRequest | PlainMessage<CreateAlertRequest> | undefined): boolean {
    return proto3.util.equals(CreateAlertRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateAlertResponse
 */
export class CreateAlertResponse extends Message<CreateAlertResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateAlertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateAlertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertResponse {
    return new CreateAlertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertResponse {
    return new CreateAlertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertResponse {
    return new CreateAlertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertResponse | PlainMessage<CreateAlertResponse> | undefined, b: CreateAlertResponse | PlainMessage<CreateAlertResponse> | undefined): boolean {
    return proto3.util.equals(CreateAlertResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditAlertRequest
 */
export class EditAlertRequest extends Message<EditAlertRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: rill.admin.v1.AlertOptions options = 4;
   */
  options?: AlertOptions;

  constructor(data?: PartialMessage<EditAlertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditAlertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "options", kind: "message", T: AlertOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditAlertRequest {
    return new EditAlertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditAlertRequest {
    return new EditAlertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditAlertRequest {
    return new EditAlertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditAlertRequest | PlainMessage<EditAlertRequest> | undefined, b: EditAlertRequest | PlainMessage<EditAlertRequest> | undefined): boolean {
    return proto3.util.equals(EditAlertRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.EditAlertResponse
 */
export class EditAlertResponse extends Message<EditAlertResponse> {
  constructor(data?: PartialMessage<EditAlertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.EditAlertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditAlertResponse {
    return new EditAlertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditAlertResponse {
    return new EditAlertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditAlertResponse {
    return new EditAlertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditAlertResponse | PlainMessage<EditAlertResponse> | undefined, b: EditAlertResponse | PlainMessage<EditAlertResponse> | undefined): boolean {
    return proto3.util.equals(EditAlertResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UnsubscribeAlertRequest
 */
export class UnsubscribeAlertRequest extends Message<UnsubscribeAlertRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UnsubscribeAlertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UnsubscribeAlertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeAlertRequest {
    return new UnsubscribeAlertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeAlertRequest {
    return new UnsubscribeAlertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeAlertRequest {
    return new UnsubscribeAlertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeAlertRequest | PlainMessage<UnsubscribeAlertRequest> | undefined, b: UnsubscribeAlertRequest | PlainMessage<UnsubscribeAlertRequest> | undefined): boolean {
    return proto3.util.equals(UnsubscribeAlertRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UnsubscribeAlertResponse
 */
export class UnsubscribeAlertResponse extends Message<UnsubscribeAlertResponse> {
  constructor(data?: PartialMessage<UnsubscribeAlertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UnsubscribeAlertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeAlertResponse {
    return new UnsubscribeAlertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeAlertResponse {
    return new UnsubscribeAlertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeAlertResponse {
    return new UnsubscribeAlertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeAlertResponse | PlainMessage<UnsubscribeAlertResponse> | undefined, b: UnsubscribeAlertResponse | PlainMessage<UnsubscribeAlertResponse> | undefined): boolean {
    return proto3.util.equals(UnsubscribeAlertResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteAlertRequest
 */
export class DeleteAlertRequest extends Message<DeleteAlertRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAlertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteAlertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertRequest {
    return new DeleteAlertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertRequest {
    return new DeleteAlertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertRequest {
    return new DeleteAlertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertRequest | PlainMessage<DeleteAlertRequest> | undefined, b: DeleteAlertRequest | PlainMessage<DeleteAlertRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAlertRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteAlertResponse
 */
export class DeleteAlertResponse extends Message<DeleteAlertResponse> {
  constructor(data?: PartialMessage<DeleteAlertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteAlertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertResponse {
    return new DeleteAlertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertResponse {
    return new DeleteAlertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertResponse {
    return new DeleteAlertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertResponse | PlainMessage<DeleteAlertResponse> | undefined, b: DeleteAlertResponse | PlainMessage<DeleteAlertResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAlertResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GenerateAlertYAMLRequest
 */
export class GenerateAlertYAMLRequest extends Message<GenerateAlertYAMLRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: rill.admin.v1.AlertOptions options = 3;
   */
  options?: AlertOptions;

  constructor(data?: PartialMessage<GenerateAlertYAMLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GenerateAlertYAMLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: AlertOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateAlertYAMLRequest {
    return new GenerateAlertYAMLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateAlertYAMLRequest {
    return new GenerateAlertYAMLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateAlertYAMLRequest {
    return new GenerateAlertYAMLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateAlertYAMLRequest | PlainMessage<GenerateAlertYAMLRequest> | undefined, b: GenerateAlertYAMLRequest | PlainMessage<GenerateAlertYAMLRequest> | undefined): boolean {
    return proto3.util.equals(GenerateAlertYAMLRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GenerateAlertYAMLResponse
 */
export class GenerateAlertYAMLResponse extends Message<GenerateAlertYAMLResponse> {
  /**
   * @generated from field: string yaml = 1;
   */
  yaml = "";

  constructor(data?: PartialMessage<GenerateAlertYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GenerateAlertYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateAlertYAMLResponse {
    return new GenerateAlertYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateAlertYAMLResponse {
    return new GenerateAlertYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateAlertYAMLResponse {
    return new GenerateAlertYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateAlertYAMLResponse | PlainMessage<GenerateAlertYAMLResponse> | undefined, b: GenerateAlertYAMLResponse | PlainMessage<GenerateAlertYAMLResponse> | undefined): boolean {
    return proto3.util.equals(GenerateAlertYAMLResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetAlertYAMLRequest
 */
export class GetAlertYAMLRequest extends Message<GetAlertYAMLRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<GetAlertYAMLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetAlertYAMLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertYAMLRequest {
    return new GetAlertYAMLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertYAMLRequest {
    return new GetAlertYAMLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertYAMLRequest {
    return new GetAlertYAMLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertYAMLRequest | PlainMessage<GetAlertYAMLRequest> | undefined, b: GetAlertYAMLRequest | PlainMessage<GetAlertYAMLRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertYAMLRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetAlertYAMLResponse
 */
export class GetAlertYAMLResponse extends Message<GetAlertYAMLResponse> {
  /**
   * @generated from field: string yaml = 1;
   */
  yaml = "";

  constructor(data?: PartialMessage<GetAlertYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetAlertYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertYAMLResponse {
    return new GetAlertYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertYAMLResponse {
    return new GetAlertYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertYAMLResponse {
    return new GetAlertYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertYAMLResponse | PlainMessage<GetAlertYAMLResponse> | undefined, b: GetAlertYAMLResponse | PlainMessage<GetAlertYAMLResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertYAMLResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBillingSubscriptionRequest
 */
export class GetBillingSubscriptionRequest extends Message<GetBillingSubscriptionRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<GetBillingSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBillingSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingSubscriptionRequest {
    return new GetBillingSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingSubscriptionRequest {
    return new GetBillingSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingSubscriptionRequest {
    return new GetBillingSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingSubscriptionRequest | PlainMessage<GetBillingSubscriptionRequest> | undefined, b: GetBillingSubscriptionRequest | PlainMessage<GetBillingSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetBillingSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBillingSubscriptionResponse
 */
export class GetBillingSubscriptionResponse extends Message<GetBillingSubscriptionResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.Subscription subscription = 2;
   */
  subscription?: Subscription;

  /**
   * @generated from field: string billing_portal_url = 3;
   */
  billingPortalUrl = "";

  constructor(data?: PartialMessage<GetBillingSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBillingSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "subscription", kind: "message", T: Subscription },
    { no: 3, name: "billing_portal_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingSubscriptionResponse {
    return new GetBillingSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingSubscriptionResponse {
    return new GetBillingSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingSubscriptionResponse {
    return new GetBillingSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingSubscriptionResponse | PlainMessage<GetBillingSubscriptionResponse> | undefined, b: GetBillingSubscriptionResponse | PlainMessage<GetBillingSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(GetBillingSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateBillingSubscriptionRequest
 */
export class UpdateBillingSubscriptionRequest extends Message<UpdateBillingSubscriptionRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string plan_name = 2;
   */
  planName = "";

  /**
   * @generated from field: bool superuser_force_access = 3;
   */
  superuserForceAccess = false;

  constructor(data?: PartialMessage<UpdateBillingSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateBillingSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "superuser_force_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBillingSubscriptionRequest {
    return new UpdateBillingSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBillingSubscriptionRequest {
    return new UpdateBillingSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBillingSubscriptionRequest {
    return new UpdateBillingSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBillingSubscriptionRequest | PlainMessage<UpdateBillingSubscriptionRequest> | undefined, b: UpdateBillingSubscriptionRequest | PlainMessage<UpdateBillingSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBillingSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateBillingSubscriptionResponse
 */
export class UpdateBillingSubscriptionResponse extends Message<UpdateBillingSubscriptionResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.Subscription subscription = 2;
   */
  subscription?: Subscription;

  constructor(data?: PartialMessage<UpdateBillingSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateBillingSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "subscription", kind: "message", T: Subscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBillingSubscriptionResponse {
    return new UpdateBillingSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBillingSubscriptionResponse {
    return new UpdateBillingSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBillingSubscriptionResponse {
    return new UpdateBillingSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBillingSubscriptionResponse | PlainMessage<UpdateBillingSubscriptionResponse> | undefined, b: UpdateBillingSubscriptionResponse | PlainMessage<UpdateBillingSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateBillingSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CancelBillingSubscriptionRequest
 */
export class CancelBillingSubscriptionRequest extends Message<CancelBillingSubscriptionRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<CancelBillingSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CancelBillingSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBillingSubscriptionRequest {
    return new CancelBillingSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBillingSubscriptionRequest {
    return new CancelBillingSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBillingSubscriptionRequest {
    return new CancelBillingSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBillingSubscriptionRequest | PlainMessage<CancelBillingSubscriptionRequest> | undefined, b: CancelBillingSubscriptionRequest | PlainMessage<CancelBillingSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(CancelBillingSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CancelBillingSubscriptionResponse
 */
export class CancelBillingSubscriptionResponse extends Message<CancelBillingSubscriptionResponse> {
  constructor(data?: PartialMessage<CancelBillingSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CancelBillingSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBillingSubscriptionResponse {
    return new CancelBillingSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBillingSubscriptionResponse {
    return new CancelBillingSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBillingSubscriptionResponse {
    return new CancelBillingSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBillingSubscriptionResponse | PlainMessage<CancelBillingSubscriptionResponse> | undefined, b: CancelBillingSubscriptionResponse | PlainMessage<CancelBillingSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(CancelBillingSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RenewBillingSubscriptionRequest
 */
export class RenewBillingSubscriptionRequest extends Message<RenewBillingSubscriptionRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string plan_name = 2;
   */
  planName = "";

  /**
   * @generated from field: bool superuser_force_access = 3;
   */
  superuserForceAccess = false;

  constructor(data?: PartialMessage<RenewBillingSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RenewBillingSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "superuser_force_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewBillingSubscriptionRequest {
    return new RenewBillingSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewBillingSubscriptionRequest {
    return new RenewBillingSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewBillingSubscriptionRequest {
    return new RenewBillingSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenewBillingSubscriptionRequest | PlainMessage<RenewBillingSubscriptionRequest> | undefined, b: RenewBillingSubscriptionRequest | PlainMessage<RenewBillingSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(RenewBillingSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RenewBillingSubscriptionResponse
 */
export class RenewBillingSubscriptionResponse extends Message<RenewBillingSubscriptionResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.Subscription subscription = 2;
   */
  subscription?: Subscription;

  constructor(data?: PartialMessage<RenewBillingSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RenewBillingSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "subscription", kind: "message", T: Subscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewBillingSubscriptionResponse {
    return new RenewBillingSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewBillingSubscriptionResponse {
    return new RenewBillingSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewBillingSubscriptionResponse {
    return new RenewBillingSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenewBillingSubscriptionResponse | PlainMessage<RenewBillingSubscriptionResponse> | undefined, b: RenewBillingSubscriptionResponse | PlainMessage<RenewBillingSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(RenewBillingSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetPaymentsPortalURLRequest
 */
export class GetPaymentsPortalURLRequest extends Message<GetPaymentsPortalURLRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string return_url = 2;
   */
  returnUrl = "";

  constructor(data?: PartialMessage<GetPaymentsPortalURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetPaymentsPortalURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "return_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentsPortalURLRequest {
    return new GetPaymentsPortalURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentsPortalURLRequest {
    return new GetPaymentsPortalURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentsPortalURLRequest {
    return new GetPaymentsPortalURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPaymentsPortalURLRequest | PlainMessage<GetPaymentsPortalURLRequest> | undefined, b: GetPaymentsPortalURLRequest | PlainMessage<GetPaymentsPortalURLRequest> | undefined): boolean {
    return proto3.util.equals(GetPaymentsPortalURLRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetPaymentsPortalURLResponse
 */
export class GetPaymentsPortalURLResponse extends Message<GetPaymentsPortalURLResponse> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<GetPaymentsPortalURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetPaymentsPortalURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPaymentsPortalURLResponse {
    return new GetPaymentsPortalURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPaymentsPortalURLResponse {
    return new GetPaymentsPortalURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPaymentsPortalURLResponse {
    return new GetPaymentsPortalURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPaymentsPortalURLResponse | PlainMessage<GetPaymentsPortalURLResponse> | undefined, b: GetPaymentsPortalURLResponse | PlainMessage<GetPaymentsPortalURLResponse> | undefined): boolean {
    return proto3.util.equals(GetPaymentsPortalURLResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListPublicBillingPlansRequest
 */
export class ListPublicBillingPlansRequest extends Message<ListPublicBillingPlansRequest> {
  constructor(data?: PartialMessage<ListPublicBillingPlansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListPublicBillingPlansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicBillingPlansRequest {
    return new ListPublicBillingPlansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicBillingPlansRequest {
    return new ListPublicBillingPlansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicBillingPlansRequest {
    return new ListPublicBillingPlansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicBillingPlansRequest | PlainMessage<ListPublicBillingPlansRequest> | undefined, b: ListPublicBillingPlansRequest | PlainMessage<ListPublicBillingPlansRequest> | undefined): boolean {
    return proto3.util.equals(ListPublicBillingPlansRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListPublicBillingPlansResponse
 */
export class ListPublicBillingPlansResponse extends Message<ListPublicBillingPlansResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.BillingPlan plans = 1;
   */
  plans: BillingPlan[] = [];

  constructor(data?: PartialMessage<ListPublicBillingPlansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListPublicBillingPlansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plans", kind: "message", T: BillingPlan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicBillingPlansResponse {
    return new ListPublicBillingPlansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicBillingPlansResponse {
    return new ListPublicBillingPlansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicBillingPlansResponse {
    return new ListPublicBillingPlansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicBillingPlansResponse | PlainMessage<ListPublicBillingPlansResponse> | undefined, b: ListPublicBillingPlansResponse | PlainMessage<ListPublicBillingPlansResponse> | undefined): boolean {
    return proto3.util.equals(ListPublicBillingPlansResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBillingProjectCredentialsRequest
 */
export class GetBillingProjectCredentialsRequest extends Message<GetBillingProjectCredentialsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<GetBillingProjectCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBillingProjectCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingProjectCredentialsRequest {
    return new GetBillingProjectCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingProjectCredentialsRequest {
    return new GetBillingProjectCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingProjectCredentialsRequest {
    return new GetBillingProjectCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingProjectCredentialsRequest | PlainMessage<GetBillingProjectCredentialsRequest> | undefined, b: GetBillingProjectCredentialsRequest | PlainMessage<GetBillingProjectCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetBillingProjectCredentialsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetBillingProjectCredentialsResponse
 */
export class GetBillingProjectCredentialsResponse extends Message<GetBillingProjectCredentialsResponse> {
  /**
   * @generated from field: string runtime_host = 1;
   */
  runtimeHost = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: string access_token = 3;
   */
  accessToken = "";

  /**
   * @generated from field: uint32 ttl_seconds = 4;
   */
  ttlSeconds = 0;

  constructor(data?: PartialMessage<GetBillingProjectCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetBillingProjectCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ttl_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingProjectCredentialsResponse {
    return new GetBillingProjectCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingProjectCredentialsResponse {
    return new GetBillingProjectCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingProjectCredentialsResponse {
    return new GetBillingProjectCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingProjectCredentialsResponse | PlainMessage<GetBillingProjectCredentialsResponse> | undefined, b: GetBillingProjectCredentialsResponse | PlainMessage<GetBillingProjectCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetBillingProjectCredentialsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TelemetryRequest
 */
export class TelemetryRequest extends Message<TelemetryRequest> {
  /**
   * Name passed to activity module's name arg
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Value passed to activity module's value arg
   *
   * @generated from field: float value = 2;
   */
  value = 0;

  /**
   * Free form struct of the actual event
   *
   * @generated from field: google.protobuf.Struct event = 3;
   */
  event?: Struct;

  constructor(data?: PartialMessage<TelemetryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TelemetryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "event", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TelemetryRequest {
    return new TelemetryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TelemetryRequest {
    return new TelemetryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TelemetryRequest {
    return new TelemetryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TelemetryRequest | PlainMessage<TelemetryRequest> | undefined, b: TelemetryRequest | PlainMessage<TelemetryRequest> | undefined): boolean {
    return proto3.util.equals(TelemetryRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TelemetryResponse
 */
export class TelemetryResponse extends Message<TelemetryResponse> {
  constructor(data?: PartialMessage<TelemetryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TelemetryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TelemetryResponse {
    return new TelemetryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TelemetryResponse {
    return new TelemetryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TelemetryResponse {
    return new TelemetryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TelemetryResponse | PlainMessage<TelemetryResponse> | undefined, b: TelemetryResponse | PlainMessage<TelemetryResponse> | undefined): boolean {
    return proto3.util.equals(TelemetryResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RequestProjectAccessRequest
 */
export class RequestProjectAccessRequest extends Message<RequestProjectAccessRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<RequestProjectAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RequestProjectAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestProjectAccessRequest {
    return new RequestProjectAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestProjectAccessRequest {
    return new RequestProjectAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestProjectAccessRequest {
    return new RequestProjectAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RequestProjectAccessRequest | PlainMessage<RequestProjectAccessRequest> | undefined, b: RequestProjectAccessRequest | PlainMessage<RequestProjectAccessRequest> | undefined): boolean {
    return proto3.util.equals(RequestProjectAccessRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RequestProjectAccessResponse
 */
export class RequestProjectAccessResponse extends Message<RequestProjectAccessResponse> {
  constructor(data?: PartialMessage<RequestProjectAccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RequestProjectAccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestProjectAccessResponse {
    return new RequestProjectAccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestProjectAccessResponse {
    return new RequestProjectAccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestProjectAccessResponse {
    return new RequestProjectAccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestProjectAccessResponse | PlainMessage<RequestProjectAccessResponse> | undefined, b: RequestProjectAccessResponse | PlainMessage<RequestProjectAccessResponse> | undefined): boolean {
    return proto3.util.equals(RequestProjectAccessResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectAccessRequestRequest
 */
export class GetProjectAccessRequestRequest extends Message<GetProjectAccessRequestRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetProjectAccessRequestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectAccessRequestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectAccessRequestRequest {
    return new GetProjectAccessRequestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectAccessRequestRequest {
    return new GetProjectAccessRequestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectAccessRequestRequest {
    return new GetProjectAccessRequestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectAccessRequestRequest | PlainMessage<GetProjectAccessRequestRequest> | undefined, b: GetProjectAccessRequestRequest | PlainMessage<GetProjectAccessRequestRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectAccessRequestRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectAccessRequestResponse
 */
export class GetProjectAccessRequestResponse extends Message<GetProjectAccessRequestResponse> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<GetProjectAccessRequestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectAccessRequestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectAccessRequestResponse {
    return new GetProjectAccessRequestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectAccessRequestResponse {
    return new GetProjectAccessRequestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectAccessRequestResponse {
    return new GetProjectAccessRequestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectAccessRequestResponse | PlainMessage<GetProjectAccessRequestResponse> | undefined, b: GetProjectAccessRequestResponse | PlainMessage<GetProjectAccessRequestResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectAccessRequestResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ApproveProjectAccessRequest
 */
export class ApproveProjectAccessRequest extends Message<ApproveProjectAccessRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<ApproveProjectAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ApproveProjectAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveProjectAccessRequest {
    return new ApproveProjectAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveProjectAccessRequest {
    return new ApproveProjectAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveProjectAccessRequest {
    return new ApproveProjectAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveProjectAccessRequest | PlainMessage<ApproveProjectAccessRequest> | undefined, b: ApproveProjectAccessRequest | PlainMessage<ApproveProjectAccessRequest> | undefined): boolean {
    return proto3.util.equals(ApproveProjectAccessRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ApproveProjectAccessResponse
 */
export class ApproveProjectAccessResponse extends Message<ApproveProjectAccessResponse> {
  constructor(data?: PartialMessage<ApproveProjectAccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ApproveProjectAccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveProjectAccessResponse {
    return new ApproveProjectAccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveProjectAccessResponse {
    return new ApproveProjectAccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveProjectAccessResponse {
    return new ApproveProjectAccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveProjectAccessResponse | PlainMessage<ApproveProjectAccessResponse> | undefined, b: ApproveProjectAccessResponse | PlainMessage<ApproveProjectAccessResponse> | undefined): boolean {
    return proto3.util.equals(ApproveProjectAccessResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DenyProjectAccessRequest
 */
export class DenyProjectAccessRequest extends Message<DenyProjectAccessRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DenyProjectAccessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DenyProjectAccessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenyProjectAccessRequest {
    return new DenyProjectAccessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenyProjectAccessRequest {
    return new DenyProjectAccessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenyProjectAccessRequest {
    return new DenyProjectAccessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DenyProjectAccessRequest | PlainMessage<DenyProjectAccessRequest> | undefined, b: DenyProjectAccessRequest | PlainMessage<DenyProjectAccessRequest> | undefined): boolean {
    return proto3.util.equals(DenyProjectAccessRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DenyProjectAccessResponse
 */
export class DenyProjectAccessResponse extends Message<DenyProjectAccessResponse> {
  constructor(data?: PartialMessage<DenyProjectAccessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DenyProjectAccessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenyProjectAccessResponse {
    return new DenyProjectAccessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenyProjectAccessResponse {
    return new DenyProjectAccessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenyProjectAccessResponse {
    return new DenyProjectAccessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DenyProjectAccessResponse | PlainMessage<DenyProjectAccessResponse> | undefined, b: DenyProjectAccessResponse | PlainMessage<DenyProjectAccessResponse> | undefined): boolean {
    return proto3.util.equals(DenyProjectAccessResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationBillingIssuesRequest
 */
export class ListOrganizationBillingIssuesRequest extends Message<ListOrganizationBillingIssuesRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<ListOrganizationBillingIssuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationBillingIssuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationBillingIssuesRequest {
    return new ListOrganizationBillingIssuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationBillingIssuesRequest {
    return new ListOrganizationBillingIssuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationBillingIssuesRequest {
    return new ListOrganizationBillingIssuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationBillingIssuesRequest | PlainMessage<ListOrganizationBillingIssuesRequest> | undefined, b: ListOrganizationBillingIssuesRequest | PlainMessage<ListOrganizationBillingIssuesRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationBillingIssuesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationBillingIssuesResponse
 */
export class ListOrganizationBillingIssuesResponse extends Message<ListOrganizationBillingIssuesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.BillingIssue issues = 1;
   */
  issues: BillingIssue[] = [];

  constructor(data?: PartialMessage<ListOrganizationBillingIssuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationBillingIssuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issues", kind: "message", T: BillingIssue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationBillingIssuesResponse {
    return new ListOrganizationBillingIssuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationBillingIssuesResponse {
    return new ListOrganizationBillingIssuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationBillingIssuesResponse {
    return new ListOrganizationBillingIssuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationBillingIssuesResponse | PlainMessage<ListOrganizationBillingIssuesResponse> | undefined, b: ListOrganizationBillingIssuesResponse | PlainMessage<ListOrganizationBillingIssuesResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationBillingIssuesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: string photo_url = 4;
   */
  photoUrl = "";

  /**
   * @generated from field: rill.admin.v1.UserQuotas quotas = 5;
   */
  quotas?: UserQuotas;

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 6;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 7;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "photo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quotas", kind: "message", T: UserQuotas },
    { no: 6, name: "created_on", kind: "message", T: Timestamp },
    { no: 7, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Service
 */
export class Service extends Message<Service> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string org_id = 3;
   */
  orgId = "";

  /**
   * @generated from field: string org_name = 4;
   */
  orgName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 5;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 6;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_on", kind: "message", T: Timestamp },
    { no: 6, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Globally unique
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display_name = 11;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string logo_url = 12;
   */
  logoUrl = "";

  /**
   * @generated from field: string favicon_url = 13;
   */
  faviconUrl = "";

  /**
   * @generated from field: string custom_domain = 10;
   */
  customDomain = "";

  /**
   * @generated from field: rill.admin.v1.OrganizationQuotas quotas = 4;
   */
  quotas?: OrganizationQuotas;

  /**
   * @generated from field: string billing_customer_id = 7;
   */
  billingCustomerId = "";

  /**
   * @generated from field: string payment_customer_id = 8;
   */
  paymentCustomerId = "";

  /**
   * @generated from field: string billing_email = 9;
   */
  billingEmail = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 5;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 6;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "logo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "favicon_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "custom_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quotas", kind: "message", T: OrganizationQuotas },
    { no: 7, name: "billing_customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "payment_customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "billing_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_on", kind: "message", T: Timestamp },
    { no: 6, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: rill.admin.v1.BillingPlan plan = 2;
   */
  plan?: BillingPlan;

  /**
   * @generated from field: google.protobuf.Timestamp start_date = 3;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 4;
   */
  endDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp current_billing_cycle_start_date = 5;
   */
  currentBillingCycleStartDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp current_billing_cycle_end_date = 6;
   */
  currentBillingCycleEndDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp trial_end_date = 7;
   */
  trialEndDate?: Timestamp;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan", kind: "message", T: BillingPlan },
    { no: 3, name: "start_date", kind: "message", T: Timestamp },
    { no: 4, name: "end_date", kind: "message", T: Timestamp },
    { no: 5, name: "current_billing_cycle_start_date", kind: "message", T: Timestamp },
    { no: 6, name: "current_billing_cycle_end_date", kind: "message", T: Timestamp },
    { no: 7, name: "trial_end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UserQuotas
 */
export class UserQuotas extends Message<UserQuotas> {
  /**
   * @generated from field: int32 singleuser_orgs = 1;
   */
  singleuserOrgs = 0;

  /**
   * @generated from field: int32 trial_orgs = 2;
   */
  trialOrgs = 0;

  constructor(data?: PartialMessage<UserQuotas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UserQuotas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "singleuser_orgs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "trial_orgs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserQuotas {
    return new UserQuotas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserQuotas {
    return new UserQuotas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserQuotas {
    return new UserQuotas().fromJsonString(jsonString, options);
  }

  static equals(a: UserQuotas | PlainMessage<UserQuotas> | undefined, b: UserQuotas | PlainMessage<UserQuotas> | undefined): boolean {
    return proto3.util.equals(UserQuotas, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.OrganizationQuotas
 */
export class OrganizationQuotas extends Message<OrganizationQuotas> {
  /**
   * @generated from field: int32 projects = 1;
   */
  projects = 0;

  /**
   * @generated from field: int32 deployments = 2;
   */
  deployments = 0;

  /**
   * @generated from field: int32 slots_total = 3;
   */
  slotsTotal = 0;

  /**
   * @generated from field: int32 slots_per_deployment = 4;
   */
  slotsPerDeployment = 0;

  /**
   * @generated from field: int32 outstanding_invites = 5;
   */
  outstandingInvites = 0;

  /**
   * @generated from field: int64 storage_limit_bytes_per_deployment = 6;
   */
  storageLimitBytesPerDeployment = protoInt64.zero;

  constructor(data?: PartialMessage<OrganizationQuotas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.OrganizationQuotas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "deployments", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "slots_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "slots_per_deployment", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "outstanding_invites", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "storage_limit_bytes_per_deployment", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationQuotas {
    return new OrganizationQuotas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationQuotas {
    return new OrganizationQuotas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationQuotas {
    return new OrganizationQuotas().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationQuotas | PlainMessage<OrganizationQuotas> | undefined, b: OrganizationQuotas | PlainMessage<OrganizationQuotas> | undefined): boolean {
    return proto3.util.equals(OrganizationQuotas, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Unique in organization
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string org_id = 3;
   */
  orgId = "";

  /**
   * @generated from field: string org_name = 4;
   */
  orgName = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: bool public = 6;
   */
  public = false;

  /**
   * @generated from field: string created_by_user_id = 22;
   */
  createdByUserId = "";

  /**
   * @generated from field: string provisioner = 7;
   */
  provisioner = "";

  /**
   * @generated from field: string github_url = 8;
   */
  githubUrl = "";

  /**
   * @generated from field: string subpath = 17;
   */
  subpath = "";

  /**
   * @generated from field: string prod_branch = 9;
   */
  prodBranch = "";

  /**
   * @generated from field: string archive_asset_id = 23;
   */
  archiveAssetId = "";

  /**
   * @generated from field: string prod_olap_driver = 10;
   */
  prodOlapDriver = "";

  /**
   * @generated from field: string prod_olap_dsn = 11;
   */
  prodOlapDsn = "";

  /**
   * @generated from field: int64 prod_slots = 12;
   */
  prodSlots = protoInt64.zero;

  /**
   * @generated from field: string prod_deployment_id = 13;
   */
  prodDeploymentId = "";

  /**
   * Note: Does NOT incorporate the parent org's custom domain.
   *
   * @generated from field: string frontend_url = 16;
   */
  frontendUrl = "";

  /**
   * @generated from field: int64 prod_ttl_seconds = 18;
   */
  prodTtlSeconds = protoInt64.zero;

  /**
   * @generated from field: map<string, string> annotations = 20;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: string prod_version = 21;
   */
  prodVersion = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 14;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 15;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "created_by_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "provisioner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "archive_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "prod_olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "prod_olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "prod_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "frontend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "prod_ttl_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 21, name: "prod_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "created_on", kind: "message", T: Timestamp },
    { no: 15, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 4;
   */
  branch = "";

  /**
   * @generated from field: string runtime_host = 5;
   */
  runtimeHost = "";

  /**
   * @generated from field: string runtime_instance_id = 6;
   */
  runtimeInstanceId = "";

  /**
   * @generated from field: rill.admin.v1.DeploymentStatus status = 7;
   */
  status = DeploymentStatus.UNSPECIFIED;

  /**
   * @generated from field: string status_message = 8;
   */
  statusMessage = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 9;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 10;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "runtime_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "runtime_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 8, name: "status_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "created_on", kind: "message", T: Timestamp },
    { no: 10, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: Deployment | PlainMessage<Deployment> | undefined, b: Deployment | PlainMessage<Deployment> | undefined): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProvisionerResource
 */
export class ProvisionerResource extends Message<ProvisionerResource> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Struct args = 5;
   */
  args?: Struct;

  /**
   * @generated from field: google.protobuf.Struct config = 6;
   */
  config?: Struct;

  constructor(data?: PartialMessage<ProvisionerResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProvisionerResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "args", kind: "message", T: Struct },
    { no: 6, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvisionerResource {
    return new ProvisionerResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvisionerResource {
    return new ProvisionerResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvisionerResource {
    return new ProvisionerResource().fromJsonString(jsonString, options);
  }

  static equals(a: ProvisionerResource | PlainMessage<ProvisionerResource> | undefined, b: ProvisionerResource | PlainMessage<ProvisionerResource> | undefined): boolean {
    return proto3.util.equals(ProvisionerResource, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.OrganizationPermissions
 */
export class OrganizationPermissions extends Message<OrganizationPermissions> {
  /**
   * @generated from field: bool read_org = 1;
   */
  readOrg = false;

  /**
   * @generated from field: bool manage_org = 2;
   */
  manageOrg = false;

  /**
   * @generated from field: bool read_projects = 3;
   */
  readProjects = false;

  /**
   * @generated from field: bool create_projects = 4;
   */
  createProjects = false;

  /**
   * @generated from field: bool manage_projects = 5;
   */
  manageProjects = false;

  /**
   * @generated from field: bool read_org_members = 6;
   */
  readOrgMembers = false;

  /**
   * @generated from field: bool manage_org_members = 7;
   */
  manageOrgMembers = false;

  constructor(data?: PartialMessage<OrganizationPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.OrganizationPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read_org", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "manage_org", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "read_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "create_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "manage_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "read_org_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "manage_org_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationPermissions | PlainMessage<OrganizationPermissions> | undefined, b: OrganizationPermissions | PlainMessage<OrganizationPermissions> | undefined): boolean {
    return proto3.util.equals(OrganizationPermissions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProjectPermissions
 */
export class ProjectPermissions extends Message<ProjectPermissions> {
  /**
   * @generated from field: bool read_project = 1;
   */
  readProject = false;

  /**
   * @generated from field: bool manage_project = 2;
   */
  manageProject = false;

  /**
   * @generated from field: bool read_prod = 3;
   */
  readProd = false;

  /**
   * @generated from field: bool read_prod_status = 4;
   */
  readProdStatus = false;

  /**
   * @generated from field: bool manage_prod = 5;
   */
  manageProd = false;

  /**
   * @generated from field: bool read_dev = 6;
   */
  readDev = false;

  /**
   * @generated from field: bool read_dev_status = 7;
   */
  readDevStatus = false;

  /**
   * @generated from field: bool manage_dev = 8;
   */
  manageDev = false;

  /**
   * @generated from field: bool read_provisioner_resources = 19;
   */
  readProvisionerResources = false;

  /**
   * @generated from field: bool manage_provisioner_resources = 20;
   */
  manageProvisionerResources = false;

  /**
   * @generated from field: bool read_project_members = 9;
   */
  readProjectMembers = false;

  /**
   * @generated from field: bool manage_project_members = 10;
   */
  manageProjectMembers = false;

  /**
   * @generated from field: bool create_magic_auth_tokens = 15;
   */
  createMagicAuthTokens = false;

  /**
   * @generated from field: bool manage_magic_auth_tokens = 16;
   */
  manageMagicAuthTokens = false;

  /**
   * @generated from field: bool create_reports = 11;
   */
  createReports = false;

  /**
   * @generated from field: bool manage_reports = 12;
   */
  manageReports = false;

  /**
   * @generated from field: bool create_alerts = 13;
   */
  createAlerts = false;

  /**
   * @generated from field: bool manage_alerts = 14;
   */
  manageAlerts = false;

  /**
   * @generated from field: bool create_bookmarks = 17;
   */
  createBookmarks = false;

  /**
   * @generated from field: bool manage_bookmarks = 18;
   */
  manageBookmarks = false;

  constructor(data?: PartialMessage<ProjectPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProjectPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "manage_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "read_prod", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "read_prod_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "manage_prod", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "read_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "read_dev_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "manage_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "read_provisioner_resources", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "manage_provisioner_resources", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "read_project_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "manage_project_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "create_magic_auth_tokens", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "manage_magic_auth_tokens", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "create_reports", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "manage_reports", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "create_alerts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "manage_alerts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "create_bookmarks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "manage_bookmarks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectPermissions | PlainMessage<ProjectPermissions> | undefined, b: ProjectPermissions | PlainMessage<ProjectPermissions> | undefined): boolean {
    return proto3.util.equals(ProjectPermissions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.MemberUser
 */
export class MemberUser extends Message<MemberUser> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string user_email = 3;
   */
  userEmail = "";

  /**
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: string user_photo_url = 7;
   */
  userPhotoUrl = "";

  /**
   * @generated from field: string role_name = 4;
   */
  roleName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 5;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 6;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<MemberUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.MemberUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "user_photo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_on", kind: "message", T: Timestamp },
    { no: 6, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberUser {
    return new MemberUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberUser {
    return new MemberUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberUser {
    return new MemberUser().fromJsonString(jsonString, options);
  }

  static equals(a: MemberUser | PlainMessage<MemberUser> | undefined, b: MemberUser | PlainMessage<MemberUser> | undefined): boolean {
    return proto3.util.equals(MemberUser, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UserInvite
 */
export class UserInvite extends Message<UserInvite> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * @generated from field: string invited_by = 3;
   */
  invitedBy = "";

  constructor(data?: PartialMessage<UserInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UserInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "invited_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInvite {
    return new UserInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInvite {
    return new UserInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInvite {
    return new UserInvite().fromJsonString(jsonString, options);
  }

  static equals(a: UserInvite | PlainMessage<UserInvite> | undefined, b: UserInvite | PlainMessage<UserInvite> | undefined): boolean {
    return proto3.util.equals(UserInvite, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.WhitelistedDomain
 */
export class WhitelistedDomain extends Message<WhitelistedDomain> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<WhitelistedDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.WhitelistedDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistedDomain | PlainMessage<WhitelistedDomain> | undefined, b: WhitelistedDomain | PlainMessage<WhitelistedDomain> | undefined): boolean {
    return proto3.util.equals(WhitelistedDomain, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Bookmark
 */
export class Bookmark extends Message<Bookmark> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 9;
   */
  description = "";

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string resource_kind = 10;
   */
  resourceKind = "";

  /**
   * @generated from field: string resource_name = 4;
   */
  resourceName = "";

  /**
   * @generated from field: string project_id = 5;
   */
  projectId = "";

  /**
   * @generated from field: string user_id = 6;
   */
  userId = "";

  /**
   * @generated from field: bool default = 11;
   */
  default = false;

  /**
   * @generated from field: bool shared = 12;
   */
  shared = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 7;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 8;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Bookmark>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Bookmark";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "resource_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "shared", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_on", kind: "message", T: Timestamp },
    { no: 8, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bookmark {
    return new Bookmark().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bookmark {
    return new Bookmark().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bookmark {
    return new Bookmark().fromJsonString(jsonString, options);
  }

  static equals(a: Bookmark | PlainMessage<Bookmark> | undefined, b: Bookmark | PlainMessage<Bookmark> | undefined): boolean {
    return proto3.util.equals(Bookmark, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ServiceToken
 */
export class ServiceToken extends Message<ServiceToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 2;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expires_on = 3;
   */
  expiresOn?: Timestamp;

  constructor(data?: PartialMessage<ServiceToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ServiceToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_on", kind: "message", T: Timestamp },
    { no: 3, name: "expires_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceToken {
    return new ServiceToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceToken {
    return new ServiceToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceToken {
    return new ServiceToken().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceToken | PlainMessage<ServiceToken> | undefined, b: ServiceToken | PlainMessage<ServiceToken> | undefined): boolean {
    return proto3.util.equals(ServiceToken, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.MagicAuthToken
 */
export class MagicAuthToken extends Message<MagicAuthToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string url = 13;
   */
  url = "";

  /**
   * @generated from field: string token = 14;
   */
  token = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 3;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expires_on = 4;
   */
  expiresOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp used_on = 5;
   */
  usedOn?: Timestamp;

  /**
   * @generated from field: string created_by_user_id = 6;
   */
  createdByUserId = "";

  /**
   * @generated from field: string created_by_user_email = 7;
   */
  createdByUserEmail = "";

  /**
   * @generated from field: google.protobuf.Struct attributes = 8;
   */
  attributes?: Struct;

  /**
   * @generated from field: string resource_type = 15;
   */
  resourceType = "";

  /**
   * @generated from field: string resource_name = 9;
   */
  resourceName = "";

  /**
   * @generated from field: rill.runtime.v1.Expression filter = 10;
   */
  filter?: Expression;

  /**
   * @generated from field: repeated string fields = 11;
   */
  fields: string[] = [];

  /**
   * @generated from field: string state = 12;
   */
  state = "";

  /**
   * @generated from field: string display_name = 16;
   */
  displayName = "";

  constructor(data?: PartialMessage<MagicAuthToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.MagicAuthToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_on", kind: "message", T: Timestamp },
    { no: 4, name: "expires_on", kind: "message", T: Timestamp },
    { no: 5, name: "used_on", kind: "message", T: Timestamp },
    { no: 6, name: "created_by_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created_by_user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "attributes", kind: "message", T: Struct },
    { no: 15, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "filter", kind: "message", T: Expression },
    { no: 11, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MagicAuthToken {
    return new MagicAuthToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MagicAuthToken {
    return new MagicAuthToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MagicAuthToken {
    return new MagicAuthToken().fromJsonString(jsonString, options);
  }

  static equals(a: MagicAuthToken | PlainMessage<MagicAuthToken> | undefined, b: MagicAuthToken | PlainMessage<MagicAuthToken> | undefined): boolean {
    return proto3.util.equals(MagicAuthToken, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.VirtualFile
 */
export class VirtualFile extends Message<VirtualFile> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bool deleted = 3;
   */
  deleted = false;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 4;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<VirtualFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.VirtualFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VirtualFile {
    return new VirtualFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VirtualFile {
    return new VirtualFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VirtualFile {
    return new VirtualFile().fromJsonString(jsonString, options);
  }

  static equals(a: VirtualFile | PlainMessage<VirtualFile> | undefined, b: VirtualFile | PlainMessage<VirtualFile> | undefined): boolean {
    return proto3.util.equals(VirtualFile, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ReportOptions
 */
export class ReportOptions extends Message<ReportOptions> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string refresh_cron = 2;
   */
  refreshCron = "";

  /**
   * @generated from field: string refresh_time_zone = 9;
   */
  refreshTimeZone = "";

  /**
   * @generated from field: string interval_duration = 13;
   */
  intervalDuration = "";

  /**
   * @generated from field: string query_name = 3;
   */
  queryName = "";

  /**
   * @generated from field: string query_args_json = 4;
   */
  queryArgsJson = "";

  /**
   * @generated from field: uint64 export_limit = 5;
   */
  exportLimit = protoInt64.zero;

  /**
   * @generated from field: rill.runtime.v1.ExportFormat export_format = 6;
   */
  exportFormat = ExportFormat.UNSPECIFIED;

  /**
   * @generated from field: repeated string email_recipients = 8;
   */
  emailRecipients: string[] = [];

  /**
   * @generated from field: repeated string slack_users = 10;
   */
  slackUsers: string[] = [];

  /**
   * @generated from field: repeated string slack_channels = 11;
   */
  slackChannels: string[] = [];

  /**
   * @generated from field: repeated string slack_webhooks = 12;
   */
  slackWebhooks: string[] = [];

  /**
   * Annotation for the subpath of <UI host>/org/project to open for the report.
   *
   * @generated from field: string web_open_path = 15;
   */
  webOpenPath = "";

  /**
   * Annotation for the base64-encoded UI state to open for the report.
   *
   * @generated from field: string web_open_state = 14;
   */
  webOpenState = "";

  constructor(data?: PartialMessage<ReportOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ReportOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_cron", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "refresh_time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "interval_duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query_args_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "export_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "export_format", kind: "enum", T: proto3.getEnumType(ExportFormat) },
    { no: 8, name: "email_recipients", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "slack_users", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "slack_channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "slack_webhooks", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "web_open_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "web_open_state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportOptions {
    return new ReportOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportOptions {
    return new ReportOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportOptions {
    return new ReportOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ReportOptions | PlainMessage<ReportOptions> | undefined, b: ReportOptions | PlainMessage<ReportOptions> | undefined): boolean {
    return proto3.util.equals(ReportOptions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AlertOptions
 */
export class AlertOptions extends Message<AlertOptions> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: string interval_duration = 2;
   */
  intervalDuration = "";

  /**
   * @generated from field: string resolver = 13;
   */
  resolver = "";

  /**
   * @generated from field: google.protobuf.Struct resolver_properties = 14;
   */
  resolverProperties?: Struct;

  /**
   * DEPRECATED: Use resolver and resolver_properties instead.
   *
   * @generated from field: string query_name = 3;
   */
  queryName = "";

  /**
   * DEPRECATED: Use resolver and resolver_properties instead.
   *
   * @generated from field: string query_args_json = 4;
   */
  queryArgsJson = "";

  /**
   * @generated from field: string metrics_view_name = 5;
   */
  metricsViewName = "";

  /**
   * @generated from field: bool renotify = 6;
   */
  renotify = false;

  /**
   * @generated from field: uint32 renotify_after_seconds = 7;
   */
  renotifyAfterSeconds = 0;

  /**
   * @generated from field: repeated string email_recipients = 8;
   */
  emailRecipients: string[] = [];

  /**
   * @generated from field: repeated string slack_users = 9;
   */
  slackUsers: string[] = [];

  /**
   * @generated from field: repeated string slack_channels = 10;
   */
  slackChannels: string[] = [];

  /**
   * @generated from field: repeated string slack_webhooks = 11;
   */
  slackWebhooks: string[] = [];

  /**
   * Annotation for the subpath of <UI host>/org/project to open for the report.
   *
   * @generated from field: string web_open_path = 15;
   */
  webOpenPath = "";

  /**
   * Annotation for the base64-encoded UI state to open for the report.
   *
   * @generated from field: string web_open_state = 12;
   */
  webOpenState = "";

  constructor(data?: PartialMessage<AlertOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AlertOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interval_duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "resolver_properties", kind: "message", T: Struct },
    { no: 3, name: "query_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query_args_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "renotify", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "renotify_after_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "email_recipients", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "slack_users", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "slack_channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "slack_webhooks", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "web_open_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "web_open_state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertOptions {
    return new AlertOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertOptions {
    return new AlertOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertOptions {
    return new AlertOptions().fromJsonString(jsonString, options);
  }

  static equals(a: AlertOptions | PlainMessage<AlertOptions> | undefined, b: AlertOptions | PlainMessage<AlertOptions> | undefined): boolean {
    return proto3.util.equals(AlertOptions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingPlan
 */
export class BillingPlan extends Message<BillingPlan> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: rill.admin.v1.BillingPlanType plan_type = 9;
   */
  planType = BillingPlanType.UNSPECIFIED;

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: uint32 trial_period_days = 5;
   */
  trialPeriodDays = 0;

  /**
   * @generated from field: bool default = 6;
   */
  default = false;

  /**
   * @generated from field: rill.admin.v1.Quotas quotas = 7;
   */
  quotas?: Quotas;

  /**
   * TODO expose pricing information
   *
   * @generated from field: bool public = 8;
   */
  public = false;

  constructor(data?: PartialMessage<BillingPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "plan_type", kind: "enum", T: proto3.getEnumType(BillingPlanType) },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trial_period_days", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "quotas", kind: "message", T: Quotas },
    { no: 8, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingPlan {
    return new BillingPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingPlan {
    return new BillingPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingPlan {
    return new BillingPlan().fromJsonString(jsonString, options);
  }

  static equals(a: BillingPlan | PlainMessage<BillingPlan> | undefined, b: BillingPlan | PlainMessage<BillingPlan> | undefined): boolean {
    return proto3.util.equals(BillingPlan, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Quotas
 */
export class Quotas extends Message<Quotas> {
  /**
   * @generated from field: string projects = 1;
   */
  projects = "";

  /**
   * @generated from field: string deployments = 2;
   */
  deployments = "";

  /**
   * @generated from field: string slots_total = 3;
   */
  slotsTotal = "";

  /**
   * @generated from field: string slots_per_deployment = 4;
   */
  slotsPerDeployment = "";

  /**
   * @generated from field: string outstanding_invites = 5;
   */
  outstandingInvites = "";

  /**
   * @generated from field: string storage_limit_bytes_per_deployment = 6;
   */
  storageLimitBytesPerDeployment = "";

  constructor(data?: PartialMessage<Quotas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Quotas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployments", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slots_total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slots_per_deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "outstanding_invites", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "storage_limit_bytes_per_deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Quotas {
    return new Quotas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Quotas {
    return new Quotas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Quotas {
    return new Quotas().fromJsonString(jsonString, options);
  }

  static equals(a: Quotas | PlainMessage<Quotas> | undefined, b: Quotas | PlainMessage<Quotas> | undefined): boolean {
    return proto3.util.equals(Quotas, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Usergroup
 */
export class Usergroup extends Message<Usergroup> {
  /**
   * @generated from field: string group_id = 1;
   */
  groupId = "";

  /**
   * @generated from field: string group_name = 2;
   */
  groupName = "";

  /**
   * @generated from field: string group_description = 3;
   */
  groupDescription = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 4;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 5;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Usergroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Usergroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_on", kind: "message", T: Timestamp },
    { no: 5, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Usergroup {
    return new Usergroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Usergroup {
    return new Usergroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Usergroup {
    return new Usergroup().fromJsonString(jsonString, options);
  }

  static equals(a: Usergroup | PlainMessage<Usergroup> | undefined, b: Usergroup | PlainMessage<Usergroup> | undefined): boolean {
    return proto3.util.equals(Usergroup, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.MemberUsergroup
 */
export class MemberUsergroup extends Message<MemberUsergroup> {
  /**
   * @generated from field: string group_id = 1;
   */
  groupId = "";

  /**
   * @generated from field: string group_name = 2;
   */
  groupName = "";

  /**
   * @generated from field: string role_name = 3;
   */
  roleName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 4;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 5;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<MemberUsergroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.MemberUsergroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_on", kind: "message", T: Timestamp },
    { no: 5, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberUsergroup {
    return new MemberUsergroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberUsergroup {
    return new MemberUsergroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberUsergroup {
    return new MemberUsergroup().fromJsonString(jsonString, options);
  }

  static equals(a: MemberUsergroup | PlainMessage<MemberUsergroup> | undefined, b: MemberUsergroup | PlainMessage<MemberUsergroup> | undefined): boolean {
    return proto3.util.equals(MemberUsergroup, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssue
 */
export class BillingIssue extends Message<BillingIssue> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: rill.admin.v1.BillingIssueType type = 2;
   */
  type = BillingIssueType.UNSPECIFIED;

  /**
   * @generated from field: rill.admin.v1.BillingIssueLevel level = 3;
   */
  level = BillingIssueLevel.UNSPECIFIED;

  /**
   * @generated from field: rill.admin.v1.BillingIssueMetadata metadata = 4;
   */
  metadata?: BillingIssueMetadata;

  /**
   * @generated from field: google.protobuf.Timestamp event_time = 5;
   */
  eventTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 6;
   */
  createdOn?: Timestamp;

  constructor(data?: PartialMessage<BillingIssue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(BillingIssueType) },
    { no: 3, name: "level", kind: "enum", T: proto3.getEnumType(BillingIssueLevel) },
    { no: 4, name: "metadata", kind: "message", T: BillingIssueMetadata },
    { no: 5, name: "event_time", kind: "message", T: Timestamp },
    { no: 6, name: "created_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssue {
    return new BillingIssue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssue {
    return new BillingIssue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssue {
    return new BillingIssue().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssue | PlainMessage<BillingIssue> | undefined, b: BillingIssue | PlainMessage<BillingIssue> | undefined): boolean {
    return proto3.util.equals(BillingIssue, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadata
 */
export class BillingIssueMetadata extends Message<BillingIssueMetadata> {
  /**
   * @generated from oneof rill.admin.v1.BillingIssueMetadata.metadata
   */
  metadata: {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataOnTrial on_trial = 1;
     */
    value: BillingIssueMetadataOnTrial;
    case: "onTrial";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataTrialEnded trial_ended = 2;
     */
    value: BillingIssueMetadataTrialEnded;
    case: "trialEnded";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataNoPaymentMethod no_payment_method = 3;
     */
    value: BillingIssueMetadataNoPaymentMethod;
    case: "noPaymentMethod";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataNoBillableAddress no_billable_address = 4;
     */
    value: BillingIssueMetadataNoBillableAddress;
    case: "noBillableAddress";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataPaymentFailed payment_failed = 5;
     */
    value: BillingIssueMetadataPaymentFailed;
    case: "paymentFailed";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataSubscriptionCancelled subscription_cancelled = 6;
     */
    value: BillingIssueMetadataSubscriptionCancelled;
    case: "subscriptionCancelled";
  } | {
    /**
     * @generated from field: rill.admin.v1.BillingIssueMetadataNeverSubscribed never_subscribed = 7;
     */
    value: BillingIssueMetadataNeverSubscribed;
    case: "neverSubscribed";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BillingIssueMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "on_trial", kind: "message", T: BillingIssueMetadataOnTrial, oneof: "metadata" },
    { no: 2, name: "trial_ended", kind: "message", T: BillingIssueMetadataTrialEnded, oneof: "metadata" },
    { no: 3, name: "no_payment_method", kind: "message", T: BillingIssueMetadataNoPaymentMethod, oneof: "metadata" },
    { no: 4, name: "no_billable_address", kind: "message", T: BillingIssueMetadataNoBillableAddress, oneof: "metadata" },
    { no: 5, name: "payment_failed", kind: "message", T: BillingIssueMetadataPaymentFailed, oneof: "metadata" },
    { no: 6, name: "subscription_cancelled", kind: "message", T: BillingIssueMetadataSubscriptionCancelled, oneof: "metadata" },
    { no: 7, name: "never_subscribed", kind: "message", T: BillingIssueMetadataNeverSubscribed, oneof: "metadata" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadata {
    return new BillingIssueMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadata {
    return new BillingIssueMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadata {
    return new BillingIssueMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadata | PlainMessage<BillingIssueMetadata> | undefined, b: BillingIssueMetadata | PlainMessage<BillingIssueMetadata> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadata, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataOnTrial
 */
export class BillingIssueMetadataOnTrial extends Message<BillingIssueMetadataOnTrial> {
  /**
   * @generated from field: google.protobuf.Timestamp end_date = 1;
   */
  endDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp grace_period_end_date = 2;
   */
  gracePeriodEndDate?: Timestamp;

  constructor(data?: PartialMessage<BillingIssueMetadataOnTrial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataOnTrial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "end_date", kind: "message", T: Timestamp },
    { no: 2, name: "grace_period_end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataOnTrial {
    return new BillingIssueMetadataOnTrial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataOnTrial {
    return new BillingIssueMetadataOnTrial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataOnTrial {
    return new BillingIssueMetadataOnTrial().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataOnTrial | PlainMessage<BillingIssueMetadataOnTrial> | undefined, b: BillingIssueMetadataOnTrial | PlainMessage<BillingIssueMetadataOnTrial> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataOnTrial, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataTrialEnded
 */
export class BillingIssueMetadataTrialEnded extends Message<BillingIssueMetadataTrialEnded> {
  /**
   * @generated from field: google.protobuf.Timestamp end_date = 1;
   */
  endDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp grace_period_end_date = 2;
   */
  gracePeriodEndDate?: Timestamp;

  constructor(data?: PartialMessage<BillingIssueMetadataTrialEnded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataTrialEnded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "end_date", kind: "message", T: Timestamp },
    { no: 2, name: "grace_period_end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataTrialEnded {
    return new BillingIssueMetadataTrialEnded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataTrialEnded {
    return new BillingIssueMetadataTrialEnded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataTrialEnded {
    return new BillingIssueMetadataTrialEnded().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataTrialEnded | PlainMessage<BillingIssueMetadataTrialEnded> | undefined, b: BillingIssueMetadataTrialEnded | PlainMessage<BillingIssueMetadataTrialEnded> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataTrialEnded, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataNoPaymentMethod
 */
export class BillingIssueMetadataNoPaymentMethod extends Message<BillingIssueMetadataNoPaymentMethod> {
  constructor(data?: PartialMessage<BillingIssueMetadataNoPaymentMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataNoPaymentMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataNoPaymentMethod {
    return new BillingIssueMetadataNoPaymentMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataNoPaymentMethod {
    return new BillingIssueMetadataNoPaymentMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataNoPaymentMethod {
    return new BillingIssueMetadataNoPaymentMethod().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataNoPaymentMethod | PlainMessage<BillingIssueMetadataNoPaymentMethod> | undefined, b: BillingIssueMetadataNoPaymentMethod | PlainMessage<BillingIssueMetadataNoPaymentMethod> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataNoPaymentMethod, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataNoBillableAddress
 */
export class BillingIssueMetadataNoBillableAddress extends Message<BillingIssueMetadataNoBillableAddress> {
  constructor(data?: PartialMessage<BillingIssueMetadataNoBillableAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataNoBillableAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataNoBillableAddress {
    return new BillingIssueMetadataNoBillableAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataNoBillableAddress {
    return new BillingIssueMetadataNoBillableAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataNoBillableAddress {
    return new BillingIssueMetadataNoBillableAddress().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataNoBillableAddress | PlainMessage<BillingIssueMetadataNoBillableAddress> | undefined, b: BillingIssueMetadataNoBillableAddress | PlainMessage<BillingIssueMetadataNoBillableAddress> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataNoBillableAddress, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataPaymentFailed
 */
export class BillingIssueMetadataPaymentFailed extends Message<BillingIssueMetadataPaymentFailed> {
  /**
   * @generated from field: repeated rill.admin.v1.BillingIssueMetadataPaymentFailedMeta invoices = 1;
   */
  invoices: BillingIssueMetadataPaymentFailedMeta[] = [];

  constructor(data?: PartialMessage<BillingIssueMetadataPaymentFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataPaymentFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invoices", kind: "message", T: BillingIssueMetadataPaymentFailedMeta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataPaymentFailed {
    return new BillingIssueMetadataPaymentFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataPaymentFailed {
    return new BillingIssueMetadataPaymentFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataPaymentFailed {
    return new BillingIssueMetadataPaymentFailed().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataPaymentFailed | PlainMessage<BillingIssueMetadataPaymentFailed> | undefined, b: BillingIssueMetadataPaymentFailed | PlainMessage<BillingIssueMetadataPaymentFailed> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataPaymentFailed, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataPaymentFailedMeta
 */
export class BillingIssueMetadataPaymentFailedMeta extends Message<BillingIssueMetadataPaymentFailedMeta> {
  /**
   * @generated from field: string invoice_id = 1;
   */
  invoiceId = "";

  /**
   * @generated from field: string invoice_number = 2;
   */
  invoiceNumber = "";

  /**
   * @generated from field: string invoice_url = 3;
   */
  invoiceUrl = "";

  /**
   * @generated from field: string amount_due = 4;
   */
  amountDue = "";

  /**
   * @generated from field: string currency = 5;
   */
  currency = "";

  /**
   * @generated from field: google.protobuf.Timestamp due_date = 6;
   */
  dueDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp failed_on = 7;
   */
  failedOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp grace_period_end_date = 8;
   */
  gracePeriodEndDate?: Timestamp;

  constructor(data?: PartialMessage<BillingIssueMetadataPaymentFailedMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataPaymentFailedMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invoice_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "invoice_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "invoice_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_due", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "due_date", kind: "message", T: Timestamp },
    { no: 7, name: "failed_on", kind: "message", T: Timestamp },
    { no: 8, name: "grace_period_end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataPaymentFailedMeta {
    return new BillingIssueMetadataPaymentFailedMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataPaymentFailedMeta {
    return new BillingIssueMetadataPaymentFailedMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataPaymentFailedMeta {
    return new BillingIssueMetadataPaymentFailedMeta().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataPaymentFailedMeta | PlainMessage<BillingIssueMetadataPaymentFailedMeta> | undefined, b: BillingIssueMetadataPaymentFailedMeta | PlainMessage<BillingIssueMetadataPaymentFailedMeta> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataPaymentFailedMeta, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataSubscriptionCancelled
 */
export class BillingIssueMetadataSubscriptionCancelled extends Message<BillingIssueMetadataSubscriptionCancelled> {
  /**
   * @generated from field: google.protobuf.Timestamp end_date = 1;
   */
  endDate?: Timestamp;

  constructor(data?: PartialMessage<BillingIssueMetadataSubscriptionCancelled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataSubscriptionCancelled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataSubscriptionCancelled {
    return new BillingIssueMetadataSubscriptionCancelled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataSubscriptionCancelled {
    return new BillingIssueMetadataSubscriptionCancelled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataSubscriptionCancelled {
    return new BillingIssueMetadataSubscriptionCancelled().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataSubscriptionCancelled | PlainMessage<BillingIssueMetadataSubscriptionCancelled> | undefined, b: BillingIssueMetadataSubscriptionCancelled | PlainMessage<BillingIssueMetadataSubscriptionCancelled> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataSubscriptionCancelled, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.BillingIssueMetadataNeverSubscribed
 */
export class BillingIssueMetadataNeverSubscribed extends Message<BillingIssueMetadataNeverSubscribed> {
  constructor(data?: PartialMessage<BillingIssueMetadataNeverSubscribed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.BillingIssueMetadataNeverSubscribed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BillingIssueMetadataNeverSubscribed {
    return new BillingIssueMetadataNeverSubscribed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BillingIssueMetadataNeverSubscribed {
    return new BillingIssueMetadataNeverSubscribed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BillingIssueMetadataNeverSubscribed {
    return new BillingIssueMetadataNeverSubscribed().fromJsonString(jsonString, options);
  }

  static equals(a: BillingIssueMetadataNeverSubscribed | PlainMessage<BillingIssueMetadataNeverSubscribed> | undefined, b: BillingIssueMetadataNeverSubscribed | PlainMessage<BillingIssueMetadataNeverSubscribed> | undefined): boolean {
    return proto3.util.equals(BillingIssueMetadataNeverSubscribed, a, b);
  }
}

