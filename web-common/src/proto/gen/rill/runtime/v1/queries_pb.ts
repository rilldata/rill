// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/queries.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp, Value } from "@bufbuild/protobuf";
import { StructType } from "./schema_pb.js";
import { ExportFormat } from "./export_format_pb.js";
import { Resource, ResourceName } from "./resources_pb.js";
import { Expression } from "./expression_pb.js";
import { TimeGrain } from "./time_grain_pb.js";

/**
 * @generated from enum rill.runtime.v1.BuiltinMeasure
 */
export enum BuiltinMeasure {
  /**
   * @generated from enum value: BUILTIN_MEASURE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BUILTIN_MEASURE_COUNT = 1;
   */
  COUNT = 1,

  /**
   * @generated from enum value: BUILTIN_MEASURE_COUNT_DISTINCT = 2;
   */
  COUNT_DISTINCT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BuiltinMeasure)
proto3.util.setEnumType(BuiltinMeasure, "rill.runtime.v1.BuiltinMeasure", [
  { no: 0, name: "BUILTIN_MEASURE_UNSPECIFIED" },
  { no: 1, name: "BUILTIN_MEASURE_COUNT" },
  { no: 2, name: "BUILTIN_MEASURE_COUNT_DISTINCT" },
]);

/**
 * Present for backwards compatibility
 *
 * @generated from enum rill.runtime.v1.MetricsViewComparisonSortType
 */
export enum MetricsViewComparisonSortType {
  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE = 1;
   */
  BASE_VALUE = 1,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE = 2;
   */
  COMPARISON_VALUE = 2,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA = 3;
   */
  ABS_DELTA = 3,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA = 4;
   */
  REL_DELTA = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MetricsViewComparisonSortType)
proto3.util.setEnumType(MetricsViewComparisonSortType, "rill.runtime.v1.MetricsViewComparisonSortType", [
  { no: 0, name: "METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED" },
  { no: 1, name: "METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE" },
  { no: 2, name: "METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE" },
  { no: 3, name: "METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA" },
  { no: 4, name: "METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA" },
]);

/**
 * @generated from enum rill.runtime.v1.MetricsViewComparisonMeasureType
 */
export enum MetricsViewComparisonMeasureType {
  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE = 1;
   */
  BASE_VALUE = 1,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE = 2;
   */
  COMPARISON_VALUE = 2,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA = 3;
   */
  ABS_DELTA = 3,

  /**
   * @generated from enum value: METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA = 4;
   */
  REL_DELTA = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MetricsViewComparisonMeasureType)
proto3.util.setEnumType(MetricsViewComparisonMeasureType, "rill.runtime.v1.MetricsViewComparisonMeasureType", [
  { no: 0, name: "METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED" },
  { no: 1, name: "METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE" },
  { no: 2, name: "METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE" },
  { no: 3, name: "METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA" },
  { no: 4, name: "METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA" },
]);

/**
 * @generated from enum rill.runtime.v1.HistogramMethod
 */
export enum HistogramMethod {
  /**
   * @generated from enum value: HISTOGRAM_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: HISTOGRAM_METHOD_FD = 1;
   */
  FD = 1,

  /**
   * @generated from enum value: HISTOGRAM_METHOD_DIAGNOSTIC = 2;
   */
  DIAGNOSTIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HistogramMethod)
proto3.util.setEnumType(HistogramMethod, "rill.runtime.v1.HistogramMethod", [
  { no: 0, name: "HISTOGRAM_METHOD_UNSPECIFIED" },
  { no: 1, name: "HISTOGRAM_METHOD_FD" },
  { no: 2, name: "HISTOGRAM_METHOD_DIAGNOSTIC" },
]);

/**
 * @generated from message rill.runtime.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 7;
   */
  connector = "";

  /**
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * @generated from field: repeated google.protobuf.Value args = 3;
   */
  args: Value[] = [];

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  /**
   * @generated from field: bool dry_run = 5;
   */
  dryRun = false;

  /**
   * @generated from field: int32 limit = 6;
   */
  limit = 0;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "message", T: Value, repeated: true },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: rill.runtime.v1.StructType meta = 1;
   */
  meta?: StructType;

  /**
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: StructType },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryBatchRequest
 */
export class QueryBatchRequest extends Message<QueryBatchRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: repeated rill.runtime.v1.Query queries = 2;
   */
  queries: Query[] = [];

  constructor(data?: PartialMessage<QueryBatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryBatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "queries", kind: "message", T: Query, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBatchRequest {
    return new QueryBatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBatchRequest {
    return new QueryBatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBatchRequest {
    return new QueryBatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBatchRequest | PlainMessage<QueryBatchRequest> | undefined, b: QueryBatchRequest | PlainMessage<QueryBatchRequest> | undefined): boolean {
    return proto3.util.equals(QueryBatchRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryBatchResponse
 */
export class QueryBatchResponse extends Message<QueryBatchResponse> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: rill.runtime.v1.QueryResult result = 2;
   */
  result?: QueryResult;

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<QueryBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result", kind: "message", T: QueryResult },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBatchResponse {
    return new QueryBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBatchResponse {
    return new QueryBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBatchResponse {
    return new QueryBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBatchResponse | PlainMessage<QueryBatchResponse> | undefined, b: QueryBatchResponse | PlainMessage<QueryBatchResponse> | undefined): boolean {
    return proto3.util.equals(QueryBatchResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ExportRequest
 */
export class ExportRequest extends Message<ExportRequest> {
  /**
   * Instance ID to run the query against.
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Optional limit on the number of rows to export. It is applied in addition to any limit specified in the query.
   *
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * Format of the export.
   *
   * @generated from field: rill.runtime.v1.ExportFormat format = 3;
   */
  format = ExportFormat.UNSPECIFIED;

  /**
   * Query to export.
   *
   * @generated from field: rill.runtime.v1.Query query = 4;
   */
  query?: Query;

  /**
   * Deprecated. Use query instead.
   *
   * @generated from field: string baked_query = 5 [deprecated = true];
   * @deprecated
   */
  bakedQuery = "";

  /**
   * If true, the export will include header comments with metadata about the export.
   *
   * @generated from field: bool include_header = 6;
   */
  includeHeader = false;

  /**
   * Optional name of the dashboard the export originates from.
   * Only used if include_header is true.
   *
   * @generated from field: rill.runtime.v1.ResourceName origin_dashboard = 7;
   */
  originDashboard?: ResourceName;

  /**
   * Optional UI URL that the export originates from.
   * Only used if include_header is true.
   *
   * @generated from field: string origin_url = 8;
   */
  originUrl = "";

  constructor(data?: PartialMessage<ExportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ExportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "format", kind: "enum", T: proto3.getEnumType(ExportFormat) },
    { no: 4, name: "query", kind: "message", T: Query },
    { no: 5, name: "baked_query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "include_header", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "origin_dashboard", kind: "message", T: ResourceName },
    { no: 8, name: "origin_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportRequest {
    return new ExportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportRequest {
    return new ExportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportRequest {
    return new ExportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportRequest | PlainMessage<ExportRequest> | undefined, b: ExportRequest | PlainMessage<ExportRequest> | undefined): boolean {
    return proto3.util.equals(ExportRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ExportResponse
 */
export class ExportResponse extends Message<ExportResponse> {
  /**
   * @generated from field: string download_url_path = 1;
   */
  downloadUrlPath = "";

  constructor(data?: PartialMessage<ExportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ExportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "download_url_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportResponse {
    return new ExportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportResponse {
    return new ExportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportResponse {
    return new ExportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportResponse | PlainMessage<ExportResponse> | undefined, b: ExportResponse | PlainMessage<ExportResponse> | undefined): boolean {
    return proto3.util.equals(ExportResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ExportReportRequest
 */
export class ExportReportRequest extends Message<ExportReportRequest> {
  /**
   * Instance ID that contains the report.
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Name of the report to export.
   *
   * @generated from field: string report = 2;
   */
  report = "";

  /**
   * The execution time to evaluate the report relative to.
   * This is provided by the report implementation when sending a report.
   *
   * @generated from field: google.protobuf.Timestamp execution_time = 5;
   */
  executionTime?: Timestamp;

  /**
   * Contextual information about the base URL of the UI that initiated the export.
   * This is used to generate header comments in the exported file when include_header is true in the report spec.
   *
   * @generated from field: string origin_base_url = 6;
   */
  originBaseUrl = "";

  constructor(data?: PartialMessage<ExportReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ExportReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "report", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "execution_time", kind: "message", T: Timestamp },
    { no: 6, name: "origin_base_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportReportRequest {
    return new ExportReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportReportRequest {
    return new ExportReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportReportRequest {
    return new ExportReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportReportRequest | PlainMessage<ExportReportRequest> | undefined, b: ExportReportRequest | PlainMessage<ExportReportRequest> | undefined): boolean {
    return proto3.util.equals(ExportReportRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ExportReportResponse
 */
export class ExportReportResponse extends Message<ExportReportResponse> {
  /**
   * @generated from field: string download_url_path = 1;
   */
  downloadUrlPath = "";

  constructor(data?: PartialMessage<ExportReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ExportReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "download_url_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportReportResponse {
    return new ExportReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportReportResponse {
    return new ExportReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportReportResponse {
    return new ExportReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportReportResponse | PlainMessage<ExportReportResponse> | undefined, b: ExportReportResponse | PlainMessage<ExportReportResponse> | undefined): boolean {
    return proto3.util.equals(ExportReportResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from oneof rill.runtime.v1.Query.query
   */
  query: {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationRequest metrics_view_aggregation_request = 20;
     */
    value: MetricsViewAggregationRequest;
    case: "metricsViewAggregationRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewToplistRequest metrics_view_toplist_request = 2;
     */
    value: MetricsViewToplistRequest;
    case: "metricsViewToplistRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewComparisonRequest metrics_view_comparison_request = 3;
     */
    value: MetricsViewComparisonRequest;
    case: "metricsViewComparisonRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewTimeSeriesRequest metrics_view_time_series_request = 4;
     */
    value: MetricsViewTimeSeriesRequest;
    case: "metricsViewTimeSeriesRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewTotalsRequest metrics_view_totals_request = 5;
     */
    value: MetricsViewTotalsRequest;
    case: "metricsViewTotalsRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewRowsRequest metrics_view_rows_request = 6;
     */
    value: MetricsViewRowsRequest;
    case: "metricsViewRowsRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnRollupIntervalRequest column_rollup_interval_request = 7;
     */
    value: ColumnRollupIntervalRequest;
    case: "columnRollupIntervalRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTopKRequest column_top_k_request = 8;
     */
    value: ColumnTopKRequest;
    case: "columnTopKRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnNullCountRequest column_null_count_request = 9;
     */
    value: ColumnNullCountRequest;
    case: "columnNullCountRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnDescriptiveStatisticsRequest column_descriptive_statistics_request = 10;
     */
    value: ColumnDescriptiveStatisticsRequest;
    case: "columnDescriptiveStatisticsRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeGrainRequest column_time_grain_request = 11;
     */
    value: ColumnTimeGrainRequest;
    case: "columnTimeGrainRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnNumericHistogramRequest column_numeric_histogram_request = 12;
     */
    value: ColumnNumericHistogramRequest;
    case: "columnNumericHistogramRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnRugHistogramRequest column_rug_histogram_request = 13;
     */
    value: ColumnRugHistogramRequest;
    case: "columnRugHistogramRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeRangeRequest column_time_range_request = 14;
     */
    value: ColumnTimeRangeRequest;
    case: "columnTimeRangeRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnCardinalityRequest column_cardinality_request = 15;
     */
    value: ColumnCardinalityRequest;
    case: "columnCardinalityRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeSeriesRequest column_time_series_request = 16;
     */
    value: ColumnTimeSeriesRequest;
    case: "columnTimeSeriesRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableCardinalityRequest table_cardinality_request = 17;
     */
    value: TableCardinalityRequest;
    case: "tableCardinalityRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableColumnsRequest table_columns_request = 18;
     */
    value: TableColumnsRequest;
    case: "tableColumnsRequest";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableRowsRequest table_rows_request = 19;
     */
    value: TableRowsRequest;
    case: "tableRowsRequest";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 20, name: "metrics_view_aggregation_request", kind: "message", T: MetricsViewAggregationRequest, oneof: "query" },
    { no: 2, name: "metrics_view_toplist_request", kind: "message", T: MetricsViewToplistRequest, oneof: "query" },
    { no: 3, name: "metrics_view_comparison_request", kind: "message", T: MetricsViewComparisonRequest, oneof: "query" },
    { no: 4, name: "metrics_view_time_series_request", kind: "message", T: MetricsViewTimeSeriesRequest, oneof: "query" },
    { no: 5, name: "metrics_view_totals_request", kind: "message", T: MetricsViewTotalsRequest, oneof: "query" },
    { no: 6, name: "metrics_view_rows_request", kind: "message", T: MetricsViewRowsRequest, oneof: "query" },
    { no: 7, name: "column_rollup_interval_request", kind: "message", T: ColumnRollupIntervalRequest, oneof: "query" },
    { no: 8, name: "column_top_k_request", kind: "message", T: ColumnTopKRequest, oneof: "query" },
    { no: 9, name: "column_null_count_request", kind: "message", T: ColumnNullCountRequest, oneof: "query" },
    { no: 10, name: "column_descriptive_statistics_request", kind: "message", T: ColumnDescriptiveStatisticsRequest, oneof: "query" },
    { no: 11, name: "column_time_grain_request", kind: "message", T: ColumnTimeGrainRequest, oneof: "query" },
    { no: 12, name: "column_numeric_histogram_request", kind: "message", T: ColumnNumericHistogramRequest, oneof: "query" },
    { no: 13, name: "column_rug_histogram_request", kind: "message", T: ColumnRugHistogramRequest, oneof: "query" },
    { no: 14, name: "column_time_range_request", kind: "message", T: ColumnTimeRangeRequest, oneof: "query" },
    { no: 15, name: "column_cardinality_request", kind: "message", T: ColumnCardinalityRequest, oneof: "query" },
    { no: 16, name: "column_time_series_request", kind: "message", T: ColumnTimeSeriesRequest, oneof: "query" },
    { no: 17, name: "table_cardinality_request", kind: "message", T: TableCardinalityRequest, oneof: "query" },
    { no: 18, name: "table_columns_request", kind: "message", T: TableColumnsRequest, oneof: "query" },
    { no: 19, name: "table_rows_request", kind: "message", T: TableRowsRequest, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryResult
 */
export class QueryResult extends Message<QueryResult> {
  /**
   * @generated from oneof rill.runtime.v1.QueryResult.result
   */
  result: {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationResponse metrics_view_aggregation_response = 21;
     */
    value: MetricsViewAggregationResponse;
    case: "metricsViewAggregationResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewToplistResponse metrics_view_toplist_response = 3;
     */
    value: MetricsViewToplistResponse;
    case: "metricsViewToplistResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewComparisonResponse metrics_view_comparison_response = 4;
     */
    value: MetricsViewComparisonResponse;
    case: "metricsViewComparisonResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewTimeSeriesResponse metrics_view_time_series_response = 5;
     */
    value: MetricsViewTimeSeriesResponse;
    case: "metricsViewTimeSeriesResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewTotalsResponse metrics_view_totals_response = 6;
     */
    value: MetricsViewTotalsResponse;
    case: "metricsViewTotalsResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewRowsResponse metrics_view_rows_response = 7;
     */
    value: MetricsViewRowsResponse;
    case: "metricsViewRowsResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnRollupIntervalResponse column_rollup_interval_response = 8;
     */
    value: ColumnRollupIntervalResponse;
    case: "columnRollupIntervalResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTopKResponse column_top_k_response = 9;
     */
    value: ColumnTopKResponse;
    case: "columnTopKResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnNullCountResponse column_null_count_response = 10;
     */
    value: ColumnNullCountResponse;
    case: "columnNullCountResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnDescriptiveStatisticsResponse column_descriptive_statistics_response = 11;
     */
    value: ColumnDescriptiveStatisticsResponse;
    case: "columnDescriptiveStatisticsResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeGrainResponse column_time_grain_response = 12;
     */
    value: ColumnTimeGrainResponse;
    case: "columnTimeGrainResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnNumericHistogramResponse column_numeric_histogram_response = 13;
     */
    value: ColumnNumericHistogramResponse;
    case: "columnNumericHistogramResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnRugHistogramResponse column_rug_histogram_response = 14;
     */
    value: ColumnRugHistogramResponse;
    case: "columnRugHistogramResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeRangeResponse column_time_range_response = 15;
     */
    value: ColumnTimeRangeResponse;
    case: "columnTimeRangeResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnCardinalityResponse column_cardinality_response = 16;
     */
    value: ColumnCardinalityResponse;
    case: "columnCardinalityResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ColumnTimeSeriesResponse column_time_series_response = 17;
     */
    value: ColumnTimeSeriesResponse;
    case: "columnTimeSeriesResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableCardinalityResponse table_cardinality_response = 18;
     */
    value: TableCardinalityResponse;
    case: "tableCardinalityResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableColumnsResponse table_columns_response = 19;
     */
    value: TableColumnsResponse;
    case: "tableColumnsResponse";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TableRowsResponse table_rows_response = 20;
     */
    value: TableRowsResponse;
    case: "tableRowsResponse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 21, name: "metrics_view_aggregation_response", kind: "message", T: MetricsViewAggregationResponse, oneof: "result" },
    { no: 3, name: "metrics_view_toplist_response", kind: "message", T: MetricsViewToplistResponse, oneof: "result" },
    { no: 4, name: "metrics_view_comparison_response", kind: "message", T: MetricsViewComparisonResponse, oneof: "result" },
    { no: 5, name: "metrics_view_time_series_response", kind: "message", T: MetricsViewTimeSeriesResponse, oneof: "result" },
    { no: 6, name: "metrics_view_totals_response", kind: "message", T: MetricsViewTotalsResponse, oneof: "result" },
    { no: 7, name: "metrics_view_rows_response", kind: "message", T: MetricsViewRowsResponse, oneof: "result" },
    { no: 8, name: "column_rollup_interval_response", kind: "message", T: ColumnRollupIntervalResponse, oneof: "result" },
    { no: 9, name: "column_top_k_response", kind: "message", T: ColumnTopKResponse, oneof: "result" },
    { no: 10, name: "column_null_count_response", kind: "message", T: ColumnNullCountResponse, oneof: "result" },
    { no: 11, name: "column_descriptive_statistics_response", kind: "message", T: ColumnDescriptiveStatisticsResponse, oneof: "result" },
    { no: 12, name: "column_time_grain_response", kind: "message", T: ColumnTimeGrainResponse, oneof: "result" },
    { no: 13, name: "column_numeric_histogram_response", kind: "message", T: ColumnNumericHistogramResponse, oneof: "result" },
    { no: 14, name: "column_rug_histogram_response", kind: "message", T: ColumnRugHistogramResponse, oneof: "result" },
    { no: 15, name: "column_time_range_response", kind: "message", T: ColumnTimeRangeResponse, oneof: "result" },
    { no: 16, name: "column_cardinality_response", kind: "message", T: ColumnCardinalityResponse, oneof: "result" },
    { no: 17, name: "column_time_series_response", kind: "message", T: ColumnTimeSeriesResponse, oneof: "result" },
    { no: 18, name: "table_cardinality_response", kind: "message", T: TableCardinalityResponse, oneof: "result" },
    { no: 19, name: "table_columns_response", kind: "message", T: TableColumnsResponse, oneof: "result" },
    { no: 20, name: "table_rows_response", kind: "message", T: TableRowsResponse, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResult {
    return new QueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResult | PlainMessage<QueryResult> | undefined, b: QueryResult | PlainMessage<QueryResult> | undefined): boolean {
    return proto3.util.equals(QueryResult, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationRequest
 */
export class MetricsViewAggregationRequest extends Message<MetricsViewAggregationRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Required
   *
   * @generated from field: string metrics_view = 2;
   */
  metricsView = "";

  /**
   * Required
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewAggregationDimension dimensions = 3;
   */
  dimensions: MetricsViewAggregationDimension[] = [];

  /**
   * Required
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewAggregationMeasure measures = 4;
   */
  measures: MetricsViewAggregationMeasure[] = [];

  /**
   * Optional. Defaults to unsorted
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewAggregationSort sort = 5;
   */
  sort: MetricsViewAggregationSort[] = [];

  /**
   * Optional. Defaults to unbounded
   *
   * @generated from field: rill.runtime.v1.TimeRange time_range = 12;
   */
  timeRange?: TimeRange;

  /**
   * Optional, if omitted than the request prepares an aggregation without a comparison
   *
   * @generated from field: rill.runtime.v1.TimeRange comparison_time_range = 16;
   */
  comparisonTimeRange?: TimeRange;

  /**
   * Deprecated in favor of time_range
   *
   * @generated from field: google.protobuf.Timestamp time_start = 6;
   */
  timeStart?: Timestamp;

  /**
   * Deprecated in favor of time_range
   *
   * @generated from field: google.protobuf.Timestamp time_end = 7;
   */
  timeEnd?: Timestamp;

  /**
   * Optional. List of dimensions/measures. No pivot is done if ommitted
   *
   * @generated from field: repeated string pivot_on = 15;
   */
  pivotOn: string[] = [];

  /**
   * Optional
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewComparisonMeasureAlias aliases = 18;
   */
  aliases: MetricsViewComparisonMeasureAlias[] = [];

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 8;
   */
  where?: Expression;

  /**
   * Optional. If both where and where_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string where_sql = 19;
   */
  whereSql = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression having = 13;
   */
  having?: Expression;

  /**
   * Optional. If both having and having_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string having_sql = 20;
   */
  havingSql = "";

  /**
   * Optional. Defaults to unlimited. Set to 0 to allow the server to pick an appropriate limit
   *
   * @generated from field: int64 limit = 9;
   */
  limit = protoInt64.zero;

  /**
   * Optional. Defaults to 0
   *
   * @generated from field: int64 offset = 10;
   */
  offset = protoInt64.zero;

  /**
   * Optional
   *
   * @generated from field: int32 priority = 11;
   */
  priority = 0;

  /**
   * Optional
   *
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 14;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: bool exact = 17;
   */
  exact = false;

  /**
   * @generated from field: bool fill_missing = 21;
   */
  fillMissing = false;

  /**
   * Optional. Defaults to false. Used to fetch rows from underlying model
   *
   * @generated from field: bool rows = 22;
   */
  rows = false;

  constructor(data?: PartialMessage<MetricsViewAggregationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimensions", kind: "message", T: MetricsViewAggregationDimension, repeated: true },
    { no: 4, name: "measures", kind: "message", T: MetricsViewAggregationMeasure, repeated: true },
    { no: 5, name: "sort", kind: "message", T: MetricsViewAggregationSort, repeated: true },
    { no: 12, name: "time_range", kind: "message", T: TimeRange },
    { no: 16, name: "comparison_time_range", kind: "message", T: TimeRange },
    { no: 6, name: "time_start", kind: "message", T: Timestamp },
    { no: 7, name: "time_end", kind: "message", T: Timestamp },
    { no: 15, name: "pivot_on", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "aliases", kind: "message", T: MetricsViewComparisonMeasureAlias, repeated: true },
    { no: 8, name: "where", kind: "message", T: Expression },
    { no: 19, name: "where_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "having", kind: "message", T: Expression },
    { no: 20, name: "having_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 17, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "fill_missing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "rows", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationRequest {
    return new MetricsViewAggregationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationRequest {
    return new MetricsViewAggregationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationRequest {
    return new MetricsViewAggregationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationRequest | PlainMessage<MetricsViewAggregationRequest> | undefined, b: MetricsViewAggregationRequest | PlainMessage<MetricsViewAggregationRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationResponse
 */
export class MetricsViewAggregationResponse extends Message<MetricsViewAggregationResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: rill.runtime.v1.StructType schema = 1;
   */
  schema?: StructType;

  /**
   * Not optional, not null
   *
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewAggregationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: StructType },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationResponse {
    return new MetricsViewAggregationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationResponse {
    return new MetricsViewAggregationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationResponse {
    return new MetricsViewAggregationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationResponse | PlainMessage<MetricsViewAggregationResponse> | undefined, b: MetricsViewAggregationResponse | PlainMessage<MetricsViewAggregationResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationDimension
 */
export class MetricsViewAggregationDimension extends Message<MetricsViewAggregationDimension> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 2;
   */
  timeGrain = TimeGrain.UNSPECIFIED;

  /**
   * Optional. IANA format, ie Europe/Copenhagen. Defaults to UTC
   *
   * @generated from field: string time_zone = 3;
   */
  timeZone = "";

  /**
   * @generated from field: string alias = 4;
   */
  alias = "";

  constructor(data?: PartialMessage<MetricsViewAggregationDimension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationDimension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 3, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationDimension {
    return new MetricsViewAggregationDimension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationDimension {
    return new MetricsViewAggregationDimension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationDimension {
    return new MetricsViewAggregationDimension().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationDimension | PlainMessage<MetricsViewAggregationDimension> | undefined, b: MetricsViewAggregationDimension | PlainMessage<MetricsViewAggregationDimension> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationDimension, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasure
 */
export class MetricsViewAggregationMeasure extends Message<MetricsViewAggregationMeasure> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.BuiltinMeasure builtin_measure = 2;
   */
  builtinMeasure = BuiltinMeasure.UNSPECIFIED;

  /**
   * Required if BUILTIN_MEASURE_COUNT_DISTINCT
   *
   * @generated from field: repeated google.protobuf.Value builtin_measure_args = 3;
   */
  builtinMeasureArgs: Value[] = [];

  /**
   * @generated from field: rill.runtime.v1.Expression filter = 4;
   */
  filter?: Expression;

  /**
   * Optional
   *
   * @generated from oneof rill.runtime.v1.MetricsViewAggregationMeasure.compute
   */
  compute: {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeCount count = 5;
     */
    value: MetricsViewAggregationMeasureComputeCount;
    case: "count";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeCountDistinct count_distinct = 6;
     */
    value: MetricsViewAggregationMeasureComputeCountDistinct;
    case: "countDistinct";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonValue comparison_value = 7;
     */
    value: MetricsViewAggregationMeasureComputeComparisonValue;
    case: "comparisonValue";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonDelta comparison_delta = 8;
     */
    value: MetricsViewAggregationMeasureComputeComparisonDelta;
    case: "comparisonDelta";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonRatio comparison_ratio = 9;
     */
    value: MetricsViewAggregationMeasureComputeComparisonRatio;
    case: "comparisonRatio";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputePercentOfTotal percent_of_total = 10;
     */
    value: MetricsViewAggregationMeasureComputePercentOfTotal;
    case: "percentOfTotal";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewAggregationMeasureComputeURI uri = 11;
     */
    value: MetricsViewAggregationMeasureComputeURI;
    case: "uri";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MetricsViewAggregationMeasure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "builtin_measure", kind: "enum", T: proto3.getEnumType(BuiltinMeasure) },
    { no: 3, name: "builtin_measure_args", kind: "message", T: Value, repeated: true },
    { no: 4, name: "filter", kind: "message", T: Expression },
    { no: 5, name: "count", kind: "message", T: MetricsViewAggregationMeasureComputeCount, oneof: "compute" },
    { no: 6, name: "count_distinct", kind: "message", T: MetricsViewAggregationMeasureComputeCountDistinct, oneof: "compute" },
    { no: 7, name: "comparison_value", kind: "message", T: MetricsViewAggregationMeasureComputeComparisonValue, oneof: "compute" },
    { no: 8, name: "comparison_delta", kind: "message", T: MetricsViewAggregationMeasureComputeComparisonDelta, oneof: "compute" },
    { no: 9, name: "comparison_ratio", kind: "message", T: MetricsViewAggregationMeasureComputeComparisonRatio, oneof: "compute" },
    { no: 10, name: "percent_of_total", kind: "message", T: MetricsViewAggregationMeasureComputePercentOfTotal, oneof: "compute" },
    { no: 11, name: "uri", kind: "message", T: MetricsViewAggregationMeasureComputeURI, oneof: "compute" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasure {
    return new MetricsViewAggregationMeasure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasure {
    return new MetricsViewAggregationMeasure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasure {
    return new MetricsViewAggregationMeasure().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasure | PlainMessage<MetricsViewAggregationMeasure> | undefined, b: MetricsViewAggregationMeasure | PlainMessage<MetricsViewAggregationMeasure> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasure, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeCount
 */
export class MetricsViewAggregationMeasureComputeCount extends Message<MetricsViewAggregationMeasureComputeCount> {
  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeCount {
    return new MetricsViewAggregationMeasureComputeCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeCount {
    return new MetricsViewAggregationMeasureComputeCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeCount {
    return new MetricsViewAggregationMeasureComputeCount().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeCount | PlainMessage<MetricsViewAggregationMeasureComputeCount> | undefined, b: MetricsViewAggregationMeasureComputeCount | PlainMessage<MetricsViewAggregationMeasureComputeCount> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeCount, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeCountDistinct
 */
export class MetricsViewAggregationMeasureComputeCountDistinct extends Message<MetricsViewAggregationMeasureComputeCountDistinct> {
  /**
   * @generated from field: string dimension = 1;
   */
  dimension = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeCountDistinct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeCountDistinct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dimension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeCountDistinct {
    return new MetricsViewAggregationMeasureComputeCountDistinct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeCountDistinct {
    return new MetricsViewAggregationMeasureComputeCountDistinct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeCountDistinct {
    return new MetricsViewAggregationMeasureComputeCountDistinct().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeCountDistinct | PlainMessage<MetricsViewAggregationMeasureComputeCountDistinct> | undefined, b: MetricsViewAggregationMeasureComputeCountDistinct | PlainMessage<MetricsViewAggregationMeasureComputeCountDistinct> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeCountDistinct, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonValue
 */
export class MetricsViewAggregationMeasureComputeComparisonValue extends Message<MetricsViewAggregationMeasureComputeComparisonValue> {
  /**
   * @generated from field: string measure = 1;
   */
  measure = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeComparisonValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "measure", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeComparisonValue {
    return new MetricsViewAggregationMeasureComputeComparisonValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonValue {
    return new MetricsViewAggregationMeasureComputeComparisonValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonValue {
    return new MetricsViewAggregationMeasureComputeComparisonValue().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeComparisonValue | PlainMessage<MetricsViewAggregationMeasureComputeComparisonValue> | undefined, b: MetricsViewAggregationMeasureComputeComparisonValue | PlainMessage<MetricsViewAggregationMeasureComputeComparisonValue> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeComparisonValue, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonDelta
 */
export class MetricsViewAggregationMeasureComputeComparisonDelta extends Message<MetricsViewAggregationMeasureComputeComparisonDelta> {
  /**
   * @generated from field: string measure = 1;
   */
  measure = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeComparisonDelta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonDelta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "measure", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeComparisonDelta {
    return new MetricsViewAggregationMeasureComputeComparisonDelta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonDelta {
    return new MetricsViewAggregationMeasureComputeComparisonDelta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonDelta {
    return new MetricsViewAggregationMeasureComputeComparisonDelta().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeComparisonDelta | PlainMessage<MetricsViewAggregationMeasureComputeComparisonDelta> | undefined, b: MetricsViewAggregationMeasureComputeComparisonDelta | PlainMessage<MetricsViewAggregationMeasureComputeComparisonDelta> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeComparisonDelta, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonRatio
 */
export class MetricsViewAggregationMeasureComputeComparisonRatio extends Message<MetricsViewAggregationMeasureComputeComparisonRatio> {
  /**
   * @generated from field: string measure = 1;
   */
  measure = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeComparisonRatio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeComparisonRatio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "measure", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeComparisonRatio {
    return new MetricsViewAggregationMeasureComputeComparisonRatio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonRatio {
    return new MetricsViewAggregationMeasureComputeComparisonRatio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeComparisonRatio {
    return new MetricsViewAggregationMeasureComputeComparisonRatio().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeComparisonRatio | PlainMessage<MetricsViewAggregationMeasureComputeComparisonRatio> | undefined, b: MetricsViewAggregationMeasureComputeComparisonRatio | PlainMessage<MetricsViewAggregationMeasureComputeComparisonRatio> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeComparisonRatio, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputePercentOfTotal
 */
export class MetricsViewAggregationMeasureComputePercentOfTotal extends Message<MetricsViewAggregationMeasureComputePercentOfTotal> {
  /**
   * @generated from field: string measure = 1;
   */
  measure = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputePercentOfTotal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputePercentOfTotal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "measure", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputePercentOfTotal {
    return new MetricsViewAggregationMeasureComputePercentOfTotal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputePercentOfTotal {
    return new MetricsViewAggregationMeasureComputePercentOfTotal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputePercentOfTotal {
    return new MetricsViewAggregationMeasureComputePercentOfTotal().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputePercentOfTotal | PlainMessage<MetricsViewAggregationMeasureComputePercentOfTotal> | undefined, b: MetricsViewAggregationMeasureComputePercentOfTotal | PlainMessage<MetricsViewAggregationMeasureComputePercentOfTotal> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputePercentOfTotal, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationMeasureComputeURI
 */
export class MetricsViewAggregationMeasureComputeURI extends Message<MetricsViewAggregationMeasureComputeURI> {
  /**
   * @generated from field: string dimension = 1;
   */
  dimension = "";

  constructor(data?: PartialMessage<MetricsViewAggregationMeasureComputeURI>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationMeasureComputeURI";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dimension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationMeasureComputeURI {
    return new MetricsViewAggregationMeasureComputeURI().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeURI {
    return new MetricsViewAggregationMeasureComputeURI().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationMeasureComputeURI {
    return new MetricsViewAggregationMeasureComputeURI().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationMeasureComputeURI | PlainMessage<MetricsViewAggregationMeasureComputeURI> | undefined, b: MetricsViewAggregationMeasureComputeURI | PlainMessage<MetricsViewAggregationMeasureComputeURI> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationMeasureComputeURI, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewAggregationSort
 */
export class MetricsViewAggregationSort extends Message<MetricsViewAggregationSort> {
  /**
   * Required. Dimension or measure name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional
   *
   * @generated from field: bool desc = 2;
   */
  desc = false;

  constructor(data?: PartialMessage<MetricsViewAggregationSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewAggregationSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewAggregationSort {
    return new MetricsViewAggregationSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewAggregationSort {
    return new MetricsViewAggregationSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewAggregationSort {
    return new MetricsViewAggregationSort().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewAggregationSort | PlainMessage<MetricsViewAggregationSort> | undefined, b: MetricsViewAggregationSort | PlainMessage<MetricsViewAggregationSort> | undefined): boolean {
    return proto3.util.equals(MetricsViewAggregationSort, a, b);
  }
}

/**
 * Deprecated, use MetricsViewComparisonRequest without a comparison time range
 *
 * @generated from message rill.runtime.v1.MetricsViewToplistRequest
 */
export class MetricsViewToplistRequest extends Message<MetricsViewToplistRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: string dimension_name = 3;
   */
  dimensionName = "";

  /**
   * @generated from field: repeated string measure_names = 4;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 5;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 6;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: int64 limit = 7;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 8;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewSort sort = 9;
   */
  sort: MetricsViewSort[] = [];

  /**
   * @generated from field: rill.runtime.v1.Expression where = 10;
   */
  where?: Expression;

  /**
   * @generated from field: string where_sql = 15;
   */
  whereSql = "";

  /**
   * @generated from field: rill.runtime.v1.Expression having = 13;
   */
  having?: Expression;

  /**
   * @generated from field: string having_sql = 16;
   */
  havingSql = "";

  /**
   * @generated from field: int32 priority = 11;
   */
  priority = 0;

  /**
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 14;
   */
  filter?: MetricsViewFilter;

  constructor(data?: PartialMessage<MetricsViewToplistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimension_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "time_start", kind: "message", T: Timestamp },
    { no: 6, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "sort", kind: "message", T: MetricsViewSort, repeated: true },
    { no: 10, name: "where", kind: "message", T: Expression },
    { no: 15, name: "where_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "having", kind: "message", T: Expression },
    { no: 16, name: "having_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "filter", kind: "message", T: MetricsViewFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined, b: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewToplistResponse
 */
export class MetricsViewToplistResponse extends Message<MetricsViewToplistResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * Not optional, not null
   *
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewToplistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined, b: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistResponse, a, b);
  }
}

/**
 * Request message for QueryService.MetricsViewComparison
 *
 * @generated from message rill.runtime.v1.MetricsViewComparisonRequest
 */
export class MetricsViewComparisonRequest extends Message<MetricsViewComparisonRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * Required
   *
   * @generated from field: rill.runtime.v1.MetricsViewAggregationDimension dimension = 3;
   */
  dimension?: MetricsViewAggregationDimension;

  /**
   * Required
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewAggregationMeasure measures = 4;
   */
  measures: MetricsViewAggregationMeasure[] = [];

  /**
   * Measures that should be compared
   * Optional. Defaults to all measures
   *
   * @generated from field: repeated string comparison_measures = 16;
   */
  comparisonMeasures: string[] = [];

  /**
   * Required
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewComparisonSort sort = 5;
   */
  sort: MetricsViewComparisonSort[] = [];

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.TimeRange time_range = 6;
   */
  timeRange?: TimeRange;

  /**
   * Optional, if omitted than the request prepares the toplist without a comparison
   *
   * @generated from field: rill.runtime.v1.TimeRange comparison_time_range = 7;
   */
  comparisonTimeRange?: TimeRange;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 8;
   */
  where?: Expression;

  /**
   * Optional. If both where and where_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string where_sql = 17;
   */
  whereSql = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression having = 12;
   */
  having?: Expression;

  /**
   * Optional. If both having and having_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string having_sql = 18;
   */
  havingSql = "";

  /**
   * Optional
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewComparisonMeasureAlias aliases = 15;
   */
  aliases: MetricsViewComparisonMeasureAlias[] = [];

  /**
   * Optional. Defaults to unlimited. Set to 0 to allow the server to pick an appropriate limit
   *
   * @generated from field: int64 limit = 9;
   */
  limit = protoInt64.zero;

  /**
   * Optional. Defaults to 0
   *
   * @generated from field: int64 offset = 10;
   */
  offset = protoInt64.zero;

  /**
   * Optional
   *
   * @generated from field: int32 priority = 11;
   */
  priority = 0;

  /**
   * Optional, defaults to false
   *
   * @generated from field: bool exact = 13;
   */
  exact = false;

  /**
   * Optional
   *
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 14;
   */
  filter?: MetricsViewFilter;

  constructor(data?: PartialMessage<MetricsViewComparisonRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimension", kind: "message", T: MetricsViewAggregationDimension },
    { no: 4, name: "measures", kind: "message", T: MetricsViewAggregationMeasure, repeated: true },
    { no: 16, name: "comparison_measures", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "sort", kind: "message", T: MetricsViewComparisonSort, repeated: true },
    { no: 6, name: "time_range", kind: "message", T: TimeRange },
    { no: 7, name: "comparison_time_range", kind: "message", T: TimeRange },
    { no: 8, name: "where", kind: "message", T: Expression },
    { no: 17, name: "where_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "having", kind: "message", T: Expression },
    { no: 18, name: "having_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "aliases", kind: "message", T: MetricsViewComparisonMeasureAlias, repeated: true },
    { no: 9, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "filter", kind: "message", T: MetricsViewFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonRequest {
    return new MetricsViewComparisonRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonRequest {
    return new MetricsViewComparisonRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonRequest {
    return new MetricsViewComparisonRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonRequest | PlainMessage<MetricsViewComparisonRequest> | undefined, b: MetricsViewComparisonRequest | PlainMessage<MetricsViewComparisonRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonRequest, a, b);
  }
}

/**
 * Response message for QueryService.MetricsViewComparison
 *
 * @generated from message rill.runtime.v1.MetricsViewComparisonResponse
 */
export class MetricsViewComparisonResponse extends Message<MetricsViewComparisonResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewComparisonRow rows = 1;
   */
  rows: MetricsViewComparisonRow[] = [];

  constructor(data?: PartialMessage<MetricsViewComparisonResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rows", kind: "message", T: MetricsViewComparisonRow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonResponse {
    return new MetricsViewComparisonResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonResponse {
    return new MetricsViewComparisonResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonResponse {
    return new MetricsViewComparisonResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonResponse | PlainMessage<MetricsViewComparisonResponse> | undefined, b: MetricsViewComparisonResponse | PlainMessage<MetricsViewComparisonResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonResponse, a, b);
  }
}

/**
 * 2 of the (start, end, iso_duration) should be set
 *
 * @generated from message rill.runtime.v1.TimeRange
 */
export class TimeRange extends Message<TimeRange> {
  /**
   * Optional. Defaults to min
   *
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * Optional. Defaults to max
   *
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * Optional, ie PT1M
   *
   * @generated from field: string iso_duration = 3;
   */
  isoDuration = "";

  /**
   * Optional, ie PT1M
   *
   * @generated from field: string iso_offset = 4;
   */
  isoOffset = "";

  /**
   * @generated from field: rill.runtime.v1.TimeGrain round_to_grain = 5;
   */
  roundToGrain = TimeGrain.UNSPECIFIED;

  /**
   * Optional. IANA format, ie Europe/Copenhagen. Defaults to UTC
   *
   * @generated from field: string time_zone = 6;
   */
  timeZone = "";

  /**
   * Optional. Rill format time range. Should only be used for alerts and reports.
   * For dashboard call ResolveTimeRanges.
   *
   * @generated from field: string expression = 7;
   */
  expression = "";

  constructor(data?: PartialMessage<TimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "iso_duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "iso_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "round_to_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 6, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRange {
    return new TimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRange {
    return new TimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRange {
    return new TimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRange | PlainMessage<TimeRange> | undefined, b: TimeRange | PlainMessage<TimeRange> | undefined): boolean {
    return proto3.util.equals(TimeRange, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewComparisonSort
 */
export class MetricsViewComparisonSort extends Message<MetricsViewComparisonSort> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional, defaults to false
   *
   * @generated from field: bool desc = 2;
   */
  desc = false;

  /**
   * Deprecated. Present for backwards compatibility for older reports
   *
   * @generated from field: rill.runtime.v1.MetricsViewComparisonSortType type = 3;
   */
  type = MetricsViewComparisonSortType.UNSPECIFIED;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewComparisonMeasureType sort_type = 4;
   */
  sortType = MetricsViewComparisonMeasureType.UNSPECIFIED;

  constructor(data?: PartialMessage<MetricsViewComparisonSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(MetricsViewComparisonSortType) },
    { no: 4, name: "sort_type", kind: "enum", T: proto3.getEnumType(MetricsViewComparisonMeasureType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonSort {
    return new MetricsViewComparisonSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonSort {
    return new MetricsViewComparisonSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonSort {
    return new MetricsViewComparisonSort().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonSort | PlainMessage<MetricsViewComparisonSort> | undefined, b: MetricsViewComparisonSort | PlainMessage<MetricsViewComparisonSort> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonSort, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewComparisonRow
 */
export class MetricsViewComparisonRow extends Message<MetricsViewComparisonRow> {
  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Value dimension_value = 1;
   */
  dimensionValue?: Value;

  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewComparisonValue measure_values = 2;
   */
  measureValues: MetricsViewComparisonValue[] = [];

  constructor(data?: PartialMessage<MetricsViewComparisonRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dimension_value", kind: "message", T: Value },
    { no: 2, name: "measure_values", kind: "message", T: MetricsViewComparisonValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonRow {
    return new MetricsViewComparisonRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonRow {
    return new MetricsViewComparisonRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonRow {
    return new MetricsViewComparisonRow().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonRow | PlainMessage<MetricsViewComparisonRow> | undefined, b: MetricsViewComparisonRow | PlainMessage<MetricsViewComparisonRow> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonRow, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewComparisonValue
 */
export class MetricsViewComparisonValue extends Message<MetricsViewComparisonValue> {
  /**
   * Not optional, not null
   *
   * @generated from field: string measure_name = 1;
   */
  measureName = "";

  /**
   * Can be null
   *
   * @generated from field: google.protobuf.Value base_value = 2;
   */
  baseValue?: Value;

  /**
   * Can be null
   *
   * @generated from field: google.protobuf.Value comparison_value = 3;
   */
  comparisonValue?: Value;

  /**
   * Can be null
   *
   * @generated from field: google.protobuf.Value delta_abs = 4;
   */
  deltaAbs?: Value;

  /**
   * Can be null
   *
   * @generated from field: google.protobuf.Value delta_rel = 5;
   */
  deltaRel?: Value;

  constructor(data?: PartialMessage<MetricsViewComparisonValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "measure_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_value", kind: "message", T: Value },
    { no: 3, name: "comparison_value", kind: "message", T: Value },
    { no: 4, name: "delta_abs", kind: "message", T: Value },
    { no: 5, name: "delta_rel", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonValue {
    return new MetricsViewComparisonValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonValue {
    return new MetricsViewComparisonValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonValue {
    return new MetricsViewComparisonValue().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonValue | PlainMessage<MetricsViewComparisonValue> | undefined, b: MetricsViewComparisonValue | PlainMessage<MetricsViewComparisonValue> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonValue, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewComparisonMeasureAlias
 */
export class MetricsViewComparisonMeasureAlias extends Message<MetricsViewComparisonMeasureAlias> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: rill.runtime.v1.MetricsViewComparisonMeasureType type = 2;
   */
  type = MetricsViewComparisonMeasureType.UNSPECIFIED;

  /**
   * @generated from field: string alias = 3;
   */
  alias = "";

  constructor(data?: PartialMessage<MetricsViewComparisonMeasureAlias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewComparisonMeasureAlias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(MetricsViewComparisonMeasureType) },
    { no: 3, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewComparisonMeasureAlias {
    return new MetricsViewComparisonMeasureAlias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewComparisonMeasureAlias {
    return new MetricsViewComparisonMeasureAlias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewComparisonMeasureAlias {
    return new MetricsViewComparisonMeasureAlias().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewComparisonMeasureAlias | PlainMessage<MetricsViewComparisonMeasureAlias> | undefined, b: MetricsViewComparisonMeasureAlias | PlainMessage<MetricsViewComparisonMeasureAlias> | undefined): boolean {
    return proto3.util.equals(MetricsViewComparisonMeasureAlias, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesRequest
 */
export class MetricsViewTimeSeriesRequest extends Message<MetricsViewTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * Optional. Defaults to min
   *
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * Optional. Defaults to max
   *
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * Required
   *
   * @generated from field: rill.runtime.v1.TimeGrain time_granularity = 6;
   */
  timeGranularity = TimeGrain.UNSPECIFIED;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 7;
   */
  where?: Expression;

  /**
   * Optional. If both where and where_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string where_sql = 13;
   */
  whereSql = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression having = 11;
   */
  having?: Expression;

  /**
   * Optional. If both having and having_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string having_sql = 14;
   */
  havingSql = "";

  /**
   * Optional. IANA format, ie Europe/Copenhagen. Defaults to UTC
   *
   * @generated from field: string time_zone = 10;
   */
  timeZone = "";

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  /**
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 12;
   */
  filter?: MetricsViewFilter;

  constructor(data?: PartialMessage<MetricsViewTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 6, name: "time_granularity", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 7, name: "where", kind: "message", T: Expression },
    { no: 13, name: "where_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "having", kind: "message", T: Expression },
    { no: 14, name: "having_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "filter", kind: "message", T: MetricsViewFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined, b: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesResponse
 */
export class MetricsViewTimeSeriesResponse extends Message<MetricsViewTimeSeriesResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue data = 2;
   */
  data: TimeSeriesValue[] = [];

  constructor(data?: PartialMessage<MetricsViewTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: TimeSeriesValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined, b: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTotalsRequest
 */
export class MetricsViewTotalsRequest extends Message<MetricsViewTotalsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * Optional. Defaults to min
   *
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * Optional. Defaults to max
   *
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 7;
   */
  where?: Expression;

  /**
   * Optional. If both where and where_sql are set, both will be applied with an AND between them.
   *
   * @generated from field: string where_sql = 11;
   */
  whereSql = "";

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  /**
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 10;
   */
  filter?: MetricsViewFilter;

  constructor(data?: PartialMessage<MetricsViewTotalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "where", kind: "message", T: Expression },
    { no: 11, name: "where_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "filter", kind: "message", T: MetricsViewFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined, b: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTotalsResponse
 */
export class MetricsViewTotalsResponse extends Message<MetricsViewTotalsResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Struct data = 2;
   */
  data?: Struct;

  constructor(data?: PartialMessage<MetricsViewTotalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined, b: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewRowsRequest
 */
export class MetricsViewRowsRequest extends Message<MetricsViewRowsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * Optional, defaults to min
   *
   * @generated from field: google.protobuf.Timestamp time_start = 3;
   */
  timeStart?: Timestamp;

  /**
   * Optional, defaults to max
   *
   * @generated from field: google.protobuf.Timestamp time_end = 4;
   */
  timeEnd?: Timestamp;

  /**
   * Optional, doesn't prepend the timestamp rollup column if ommitted
   *
   * @generated from field: rill.runtime.v1.TimeGrain time_granularity = 10;
   */
  timeGranularity = TimeGrain.UNSPECIFIED;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 5;
   */
  where?: Expression;

  /**
   * Optional
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewSort sort = 6;
   */
  sort: MetricsViewSort[] = [];

  /**
   * Optional
   *
   * @generated from field: int32 limit = 7;
   */
  limit = 0;

  /**
   * Optional
   *
   * @generated from field: int64 offset = 8;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  /**
   * Optional. IANA format, ie Europe/Copenhagen. Defaults to UTC
   *
   * @generated from field: string time_zone = 11;
   */
  timeZone = "";

  /**
   * Deprecated. should be removed once UI is moved to use new filters
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 12;
   */
  filter?: MetricsViewFilter;

  constructor(data?: PartialMessage<MetricsViewRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_start", kind: "message", T: Timestamp },
    { no: 4, name: "time_end", kind: "message", T: Timestamp },
    { no: 10, name: "time_granularity", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 5, name: "where", kind: "message", T: Expression },
    { no: 6, name: "sort", kind: "message", T: MetricsViewSort, repeated: true },
    { no: 7, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "filter", kind: "message", T: MetricsViewFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewRowsRequest | PlainMessage<MetricsViewRowsRequest> | undefined, b: MetricsViewRowsRequest | PlainMessage<MetricsViewRowsRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewRowsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewRowsResponse
 */
export class MetricsViewRowsResponse extends Message<MetricsViewRowsResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * Not optional, not null
   *
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewRowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewRowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewRowsResponse | PlainMessage<MetricsViewRowsResponse> | undefined, b: MetricsViewRowsResponse | PlainMessage<MetricsViewRowsResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewRowsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSort
 */
export class MetricsViewSort extends Message<MetricsViewSort> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional, defaults to false
   *
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  constructor(data?: PartialMessage<MetricsViewSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined, b: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined): boolean {
    return proto3.util.equals(MetricsViewSort, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewFilter
 */
export class MetricsViewFilter extends Message<MetricsViewFilter> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond include = 2;
   */
  include: MetricsViewFilter_Cond[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond exclude = 3;
   */
  exclude: MetricsViewFilter_Cond[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "include", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
    { no: 3, name: "exclude", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined, b: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewFilter.Cond
 */
export class MetricsViewFilter_Cond extends Message<MetricsViewFilter_Cond> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated google.protobuf.Value in = 2;
   */
  in: Value[] = [];

  /**
   * @generated from field: repeated string like = 3;
   */
  like: string[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter_Cond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter.Cond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "in", kind: "message", T: Value, repeated: true },
    { no: 3, name: "like", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined, b: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter_Cond, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewColumn
 */
export class MetricsViewColumn extends Message<MetricsViewColumn> {
  /**
   * Not optional, not null
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Not optional, not null
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Not optional, not null
   *
   * @generated from field: bool nullable = 3;
   */
  nullable = false;

  constructor(data?: PartialMessage<MetricsViewColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined, b: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined): boolean {
    return proto3.util.equals(MetricsViewColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.InlineMeasure
 */
export class InlineMeasure extends Message<InlineMeasure> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required, ie 'count(*)'
   *
   * @generated from field: string expression = 2;
   */
  expression = "";

  constructor(data?: PartialMessage<InlineMeasure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.InlineMeasure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InlineMeasure {
    return new InlineMeasure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InlineMeasure {
    return new InlineMeasure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InlineMeasure {
    return new InlineMeasure().fromJsonString(jsonString, options);
  }

  static equals(a: InlineMeasure | PlainMessage<InlineMeasure> | undefined, b: InlineMeasure | PlainMessage<InlineMeasure> | undefined): boolean {
    return proto3.util.equals(InlineMeasure, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeRangeRequest
 */
export class MetricsViewTimeRangeRequest extends Message<MetricsViewTimeRangeRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewTimeRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeRangeRequest {
    return new MetricsViewTimeRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeRangeRequest {
    return new MetricsViewTimeRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeRangeRequest {
    return new MetricsViewTimeRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeRangeRequest | PlainMessage<MetricsViewTimeRangeRequest> | undefined, b: MetricsViewTimeRangeRequest | PlainMessage<MetricsViewTimeRangeRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeRangeRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeRangeResponse
 */
export class MetricsViewTimeRangeResponse extends Message<MetricsViewTimeRangeResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: rill.runtime.v1.TimeRangeSummary time_range_summary = 1;
   */
  timeRangeSummary?: TimeRangeSummary;

  constructor(data?: PartialMessage<MetricsViewTimeRangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeRangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_range_summary", kind: "message", T: TimeRangeSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeRangeResponse {
    return new MetricsViewTimeRangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeRangeResponse {
    return new MetricsViewTimeRangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeRangeResponse {
    return new MetricsViewTimeRangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeRangeResponse | PlainMessage<MetricsViewTimeRangeResponse> | undefined, b: MetricsViewTimeRangeResponse | PlainMessage<MetricsViewTimeRangeResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeRangeResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSchemaRequest
 */
export class MetricsViewSchemaRequest extends Message<MetricsViewSchemaRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSchemaRequest {
    return new MetricsViewSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSchemaRequest {
    return new MetricsViewSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSchemaRequest {
    return new MetricsViewSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSchemaRequest | PlainMessage<MetricsViewSchemaRequest> | undefined, b: MetricsViewSchemaRequest | PlainMessage<MetricsViewSchemaRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewSchemaRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSchemaResponse
 */
export class MetricsViewSchemaResponse extends Message<MetricsViewSchemaResponse> {
  /**
   * @generated from field: rill.runtime.v1.StructType schema = 1;
   */
  schema?: StructType;

  constructor(data?: PartialMessage<MetricsViewSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: StructType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSchemaResponse {
    return new MetricsViewSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSchemaResponse {
    return new MetricsViewSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSchemaResponse {
    return new MetricsViewSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSchemaResponse | PlainMessage<MetricsViewSchemaResponse> | undefined, b: MetricsViewSchemaResponse | PlainMessage<MetricsViewSchemaResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewSchemaResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSearchRequest
 */
export class MetricsViewSearchRequest extends Message<MetricsViewSearchRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string dimensions = 3;
   */
  dimensions: string[] = [];

  /**
   * @generated from field: string search = 4;
   */
  search = "";

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.TimeRange time_range = 5;
   */
  timeRange?: TimeRange;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression where = 6;
   */
  where?: Expression;

  /**
   * Optional
   *
   * @generated from field: rill.runtime.v1.Expression having = 7;
   */
  having?: Expression;

  /**
   * Optional
   *
   * @generated from field: int32 limit = 8;
   */
  limit = 0;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time_range", kind: "message", T: TimeRange },
    { no: 6, name: "where", kind: "message", T: Expression },
    { no: 7, name: "having", kind: "message", T: Expression },
    { no: 8, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSearchRequest {
    return new MetricsViewSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSearchRequest {
    return new MetricsViewSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSearchRequest {
    return new MetricsViewSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSearchRequest | PlainMessage<MetricsViewSearchRequest> | undefined, b: MetricsViewSearchRequest | PlainMessage<MetricsViewSearchRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewSearchRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSearchResponse
 */
export class MetricsViewSearchResponse extends Message<MetricsViewSearchResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewSearchResponse.SearchResult results = 1;
   */
  results: MetricsViewSearchResponse_SearchResult[] = [];

  constructor(data?: PartialMessage<MetricsViewSearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: MetricsViewSearchResponse_SearchResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSearchResponse {
    return new MetricsViewSearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSearchResponse {
    return new MetricsViewSearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSearchResponse {
    return new MetricsViewSearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSearchResponse | PlainMessage<MetricsViewSearchResponse> | undefined, b: MetricsViewSearchResponse | PlainMessage<MetricsViewSearchResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewSearchResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSearchResponse.SearchResult
 */
export class MetricsViewSearchResponse_SearchResult extends Message<MetricsViewSearchResponse_SearchResult> {
  /**
   * @generated from field: string dimension = 1;
   */
  dimension = "";

  /**
   * @generated from field: google.protobuf.Value value = 2;
   */
  value?: Value;

  constructor(data?: PartialMessage<MetricsViewSearchResponse_SearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSearchResponse.SearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dimension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSearchResponse_SearchResult {
    return new MetricsViewSearchResponse_SearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSearchResponse_SearchResult {
    return new MetricsViewSearchResponse_SearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSearchResponse_SearchResult {
    return new MetricsViewSearchResponse_SearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSearchResponse_SearchResult | PlainMessage<MetricsViewSearchResponse_SearchResult> | undefined, b: MetricsViewSearchResponse_SearchResult | PlainMessage<MetricsViewSearchResponse_SearchResult> | undefined): boolean {
    return proto3.util.equals(MetricsViewSearchResponse_SearchResult, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeRangesRequest
 */
export class MetricsViewTimeRangesRequest extends Message<MetricsViewTimeRangesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string expressions = 3;
   */
  expressions: string[] = [];

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  /**
   * Optional timezone param to easily override time-range expressions
   *
   * @generated from field: string time_zone = 5;
   */
  timeZone = "";

  constructor(data?: PartialMessage<MetricsViewTimeRangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeRangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expressions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeRangesRequest {
    return new MetricsViewTimeRangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeRangesRequest {
    return new MetricsViewTimeRangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeRangesRequest {
    return new MetricsViewTimeRangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeRangesRequest | PlainMessage<MetricsViewTimeRangesRequest> | undefined, b: MetricsViewTimeRangesRequest | PlainMessage<MetricsViewTimeRangesRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeRangesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewTimeRangesResponse
 */
export class MetricsViewTimeRangesResponse extends Message<MetricsViewTimeRangesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.TimeRange time_ranges = 1;
   */
  timeRanges: TimeRange[] = [];

  constructor(data?: PartialMessage<MetricsViewTimeRangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeRangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_ranges", kind: "message", T: TimeRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeRangesResponse {
    return new MetricsViewTimeRangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeRangesResponse {
    return new MetricsViewTimeRangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeRangesResponse {
    return new MetricsViewTimeRangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeRangesResponse | PlainMessage<MetricsViewTimeRangesResponse> | undefined, b: MetricsViewTimeRangesResponse | PlainMessage<MetricsViewTimeRangesResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeRangesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResolveCanvasRequest
 */
export class ResolveCanvasRequest extends Message<ResolveCanvasRequest> {
  /**
   * Instance ID
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Canvas name
   *
   * @generated from field: string canvas = 2;
   */
  canvas = "";

  /**
   * Optional args for resolving templating in the component properties
   *
   * @generated from field: google.protobuf.Struct args = 3;
   */
  args?: Struct;

  constructor(data?: PartialMessage<ResolveCanvasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResolveCanvasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "canvas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveCanvasRequest {
    return new ResolveCanvasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveCanvasRequest {
    return new ResolveCanvasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveCanvasRequest {
    return new ResolveCanvasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveCanvasRequest | PlainMessage<ResolveCanvasRequest> | undefined, b: ResolveCanvasRequest | PlainMessage<ResolveCanvasRequest> | undefined): boolean {
    return proto3.util.equals(ResolveCanvasRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResolveCanvasResponse
 */
export class ResolveCanvasResponse extends Message<ResolveCanvasResponse> {
  /**
   * The canvas resource.
   *
   * @generated from field: rill.runtime.v1.Resource canvas = 1;
   */
  canvas?: Resource;

  /**
   * All the component resources referenced by the canvas.
   * The resources state.valid_spec.renderer_properties will have templating resolved for the provided args.
   * (Corresponds to calling the ResolveComponent API for each component referenced in the canvas spec).
   *
   * @generated from field: map<string, rill.runtime.v1.Resource> resolved_components = 2;
   */
  resolvedComponents: { [key: string]: Resource } = {};

  /**
   * All the metrics view resources referenced in the components' renderer_properties.metrics_view field.
   *
   * @generated from field: map<string, rill.runtime.v1.Resource> referenced_metrics_views = 3;
   */
  referencedMetricsViews: { [key: string]: Resource } = {};

  constructor(data?: PartialMessage<ResolveCanvasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResolveCanvasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "canvas", kind: "message", T: Resource },
    { no: 2, name: "resolved_components", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Resource} },
    { no: 3, name: "referenced_metrics_views", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Resource} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveCanvasResponse {
    return new ResolveCanvasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveCanvasResponse {
    return new ResolveCanvasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveCanvasResponse {
    return new ResolveCanvasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveCanvasResponse | PlainMessage<ResolveCanvasResponse> | undefined, b: ResolveCanvasResponse | PlainMessage<ResolveCanvasResponse> | undefined): boolean {
    return proto3.util.equals(ResolveCanvasResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResolveComponentRequest
 */
export class ResolveComponentRequest extends Message<ResolveComponentRequest> {
  /**
   * Instance ID
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Component name
   *
   * @generated from field: string component = 2;
   */
  component = "";

  /**
   * Optional args for resolving templating in the renderer properties
   *
   * @generated from field: google.protobuf.Struct args = 3;
   */
  args?: Struct;

  constructor(data?: PartialMessage<ResolveComponentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResolveComponentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "component", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveComponentRequest {
    return new ResolveComponentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveComponentRequest {
    return new ResolveComponentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveComponentRequest {
    return new ResolveComponentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveComponentRequest | PlainMessage<ResolveComponentRequest> | undefined, b: ResolveComponentRequest | PlainMessage<ResolveComponentRequest> | undefined): boolean {
    return proto3.util.equals(ResolveComponentRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResolveComponentResponse
 */
export class ResolveComponentResponse extends Message<ResolveComponentResponse> {
  /**
   * Renderer properties with templating resolved for the provided args
   *
   * @generated from field: google.protobuf.Struct renderer_properties = 2;
   */
  rendererProperties?: Struct;

  constructor(data?: PartialMessage<ResolveComponentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResolveComponentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "renderer_properties", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveComponentResponse {
    return new ResolveComponentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveComponentResponse {
    return new ResolveComponentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveComponentResponse {
    return new ResolveComponentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveComponentResponse | PlainMessage<ResolveComponentResponse> | undefined, b: ResolveComponentResponse | PlainMessage<ResolveComponentResponse> | undefined): boolean {
    return proto3.util.equals(ResolveComponentResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRollupIntervalRequest
 */
export class ColumnRollupIntervalRequest extends Message<ColumnRollupIntervalRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnRollupIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRollupIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRollupIntervalRequest | PlainMessage<ColumnRollupIntervalRequest> | undefined, b: ColumnRollupIntervalRequest | PlainMessage<ColumnRollupIntervalRequest> | undefined): boolean {
    return proto3.util.equals(ColumnRollupIntervalRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRollupIntervalResponse
 */
export class ColumnRollupIntervalResponse extends Message<ColumnRollupIntervalResponse> {
  /**
   * Minimum timestamp
   *
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * Maximum timestamp
   *
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * Human friendly time grain that is still bounded by (min, max), ie 'minute' time grain for an hour time range
   *
   * @generated from field: rill.runtime.v1.TimeGrain interval = 3;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<ColumnRollupIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRollupIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRollupIntervalResponse | PlainMessage<ColumnRollupIntervalResponse> | undefined, b: ColumnRollupIntervalResponse | PlainMessage<ColumnRollupIntervalResponse> | undefined): boolean {
    return proto3.util.equals(ColumnRollupIntervalResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTopKRequest
 */
export class ColumnTopKRequest extends Message<ColumnTopKRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 7;
   */
  connector = "";

  /**
   * @generated from field: string database = 8;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 9;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * default is count(*)
   *
   * @generated from field: string agg = 4;
   */
  agg = "";

  /**
   * default is 50
   *
   * @generated from field: int32 k = 5;
   */
  k = 0;

  /**
   * @generated from field: int32 priority = 6;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTopKRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTopKRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "agg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "k", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTopKRequest | PlainMessage<ColumnTopKRequest> | undefined, b: ColumnTopKRequest | PlainMessage<ColumnTopKRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTopKRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTopKResponse
 */
export class ColumnTopKResponse extends Message<ColumnTopKResponse> {
  /**
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<ColumnTopKResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTopKResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTopKResponse | PlainMessage<ColumnTopKResponse> | undefined, b: ColumnTopKResponse | PlainMessage<ColumnTopKResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTopKResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CategoricalSummary
 */
export class CategoricalSummary extends Message<CategoricalSummary> {
  /**
   * @generated from oneof rill.runtime.v1.CategoricalSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.TopK top_k = 1;
     */
    value: TopK;
    case: "topK";
  } | {
    /**
     * @generated from field: double cardinality = 2;
     */
    value: number;
    case: "cardinality";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CategoricalSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CategoricalSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "top_k", kind: "message", T: TopK, oneof: "case" },
    { no: 2, name: "cardinality", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJsonString(jsonString, options);
  }

  static equals(a: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined, b: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined): boolean {
    return proto3.util.equals(CategoricalSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK
 */
export class TopK extends Message<TopK> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.TopK.Entry entries = 1;
   */
  entries: TopK_Entry[] = [];

  constructor(data?: PartialMessage<TopK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TopK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: TopK_Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK {
    return new TopK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJsonString(jsonString, options);
  }

  static equals(a: TopK | PlainMessage<TopK> | undefined, b: TopK | PlainMessage<TopK> | undefined): boolean {
    return proto3.util.equals(TopK, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK.Entry
 */
export class TopK_Entry extends Message<TopK_Entry> {
  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Value value = 1;
   */
  value?: Value;

  /**
   * Not optional, not null
   *
   * @generated from field: double count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<TopK_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TopK.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
    { no: 2, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK_Entry {
    return new TopK_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: TopK_Entry | PlainMessage<TopK_Entry> | undefined, b: TopK_Entry | PlainMessage<TopK_Entry> | undefined): boolean {
    return proto3.util.equals(TopK_Entry, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnNullCountRequest
 */
export class ColumnNullCountRequest extends Message<ColumnNullCountRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnNullCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNullCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNullCountRequest | PlainMessage<ColumnNullCountRequest> | undefined, b: ColumnNullCountRequest | PlainMessage<ColumnNullCountRequest> | undefined): boolean {
    return proto3.util.equals(ColumnNullCountRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnNullCountResponse
 */
export class ColumnNullCountResponse extends Message<ColumnNullCountResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: double count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<ColumnNullCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNullCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNullCountResponse | PlainMessage<ColumnNullCountResponse> | undefined, b: ColumnNullCountResponse | PlainMessage<ColumnNullCountResponse> | undefined): boolean {
    return proto3.util.equals(ColumnNullCountResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnDescriptiveStatisticsRequest
 */
export class ColumnDescriptiveStatisticsRequest extends Message<ColumnDescriptiveStatisticsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnDescriptiveStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnDescriptiveStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnDescriptiveStatisticsRequest | PlainMessage<ColumnDescriptiveStatisticsRequest> | undefined, b: ColumnDescriptiveStatisticsRequest | PlainMessage<ColumnDescriptiveStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(ColumnDescriptiveStatisticsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnDescriptiveStatisticsResponse
 */
export class ColumnDescriptiveStatisticsResponse extends Message<ColumnDescriptiveStatisticsResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnDescriptiveStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnDescriptiveStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnDescriptiveStatisticsResponse | PlainMessage<ColumnDescriptiveStatisticsResponse> | undefined, b: ColumnDescriptiveStatisticsResponse | PlainMessage<ColumnDescriptiveStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(ColumnDescriptiveStatisticsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericSummary
 */
export class NumericSummary extends Message<NumericSummary> {
  /**
   * @generated from oneof rill.runtime.v1.NumericSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.NumericHistogramBins numeric_histogram_bins = 1;
     */
    value: NumericHistogramBins;
    case: "numericHistogramBins";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericStatistics numeric_statistics = 2;
     */
    value: NumericStatistics;
    case: "numericStatistics";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericOutliers numeric_outliers = 3;
     */
    value: NumericOutliers;
    case: "numericOutliers";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NumericSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_histogram_bins", kind: "message", T: NumericHistogramBins, oneof: "case" },
    { no: 2, name: "numeric_statistics", kind: "message", T: NumericStatistics, oneof: "case" },
    { no: 3, name: "numeric_outliers", kind: "message", T: NumericOutliers, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericSummary {
    return new NumericSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJsonString(jsonString, options);
  }

  static equals(a: NumericSummary | PlainMessage<NumericSummary> | undefined, b: NumericSummary | PlainMessage<NumericSummary> | undefined): boolean {
    return proto3.util.equals(NumericSummary, a, b);
  }
}

/**
 * All fields are not null
 *
 * @generated from message rill.runtime.v1.NumericHistogramBins
 */
export class NumericHistogramBins extends Message<NumericHistogramBins> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericHistogramBins.Bin bins = 1;
   */
  bins: NumericHistogramBins_Bin[] = [];

  constructor(data?: PartialMessage<NumericHistogramBins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bins", kind: "message", T: NumericHistogramBins_Bin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined, b: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericHistogramBins.Bin
 */
export class NumericHistogramBins_Bin extends Message<NumericHistogramBins_Bin> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double midpoint = 3;
   */
  midpoint = 0;

  /**
   * @generated from field: double high = 4;
   */
  high = 0;

  /**
   * @generated from field: double count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericHistogramBins_Bin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins.Bin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "midpoint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined, b: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins_Bin, a, b);
  }
}

/**
 * All fields are not null
 *
 * @generated from message rill.runtime.v1.NumericStatistics
 */
export class NumericStatistics extends Message<NumericStatistics> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  /**
   * @generated from field: double mean = 3;
   */
  mean = 0;

  /**
   * @generated from field: double q25 = 4;
   */
  q25 = 0;

  /**
   * @generated from field: double q50 = 5;
   */
  q50 = 0;

  /**
   * @generated from field: double q75 = 6;
   */
  q75 = 0;

  /**
   * @generated from field: double sd = 7;
   */
  sd = 0;

  constructor(data?: PartialMessage<NumericStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "mean", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "q25", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "q50", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "q75", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "sd", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericStatistics {
    return new NumericStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: NumericStatistics | PlainMessage<NumericStatistics> | undefined, b: NumericStatistics | PlainMessage<NumericStatistics> | undefined): boolean {
    return proto3.util.equals(NumericStatistics, a, b);
  }
}

/**
 * All fields are not null
 *
 * @generated from message rill.runtime.v1.NumericOutliers
 */
export class NumericOutliers extends Message<NumericOutliers> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericOutliers.Outlier outliers = 1;
   */
  outliers: NumericOutliers_Outlier[] = [];

  constructor(data?: PartialMessage<NumericOutliers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outliers", kind: "message", T: NumericOutliers_Outlier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers {
    return new NumericOutliers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers | PlainMessage<NumericOutliers> | undefined, b: NumericOutliers | PlainMessage<NumericOutliers> | undefined): boolean {
    return proto3.util.equals(NumericOutliers, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericOutliers.Outlier
 */
export class NumericOutliers_Outlier extends Message<NumericOutliers_Outlier> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double high = 3;
   */
  high = 0;

  /**
   * @generated from field: bool present = 4;
   */
  present = false;

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericOutliers_Outlier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers.Outlier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "present", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined, b: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined): boolean {
    return proto3.util.equals(NumericOutliers_Outlier, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeGrainRequest
 */
export class ColumnTimeGrainRequest extends Message<ColumnTimeGrainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTimeGrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeGrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeGrainRequest | PlainMessage<ColumnTimeGrainRequest> | undefined, b: ColumnTimeGrainRequest | PlainMessage<ColumnTimeGrainRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeGrainRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeGrainResponse
 */
export class ColumnTimeGrainResponse extends Message<ColumnTimeGrainResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 1;
   */
  timeGrain = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<ColumnTimeGrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeGrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeGrainResponse | PlainMessage<ColumnTimeGrainResponse> | undefined, b: ColumnTimeGrainResponse | PlainMessage<ColumnTimeGrainResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeGrainResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnNumericHistogramRequest
 */
export class ColumnNumericHistogramRequest extends Message<ColumnNumericHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 6;
   */
  connector = "";

  /**
   * @generated from field: string database = 7;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 8;
   */
  databaseSchema = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: rill.runtime.v1.HistogramMethod histogram_method = 4;
   */
  histogramMethod = HistogramMethod.UNSPECIFIED;

  /**
   * @generated from field: int32 priority = 5;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnNumericHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNumericHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "histogram_method", kind: "enum", T: proto3.getEnumType(HistogramMethod) },
    { no: 5, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNumericHistogramRequest | PlainMessage<ColumnNumericHistogramRequest> | undefined, b: ColumnNumericHistogramRequest | PlainMessage<ColumnNumericHistogramRequest> | undefined): boolean {
    return proto3.util.equals(ColumnNumericHistogramRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnNumericHistogramResponse
 */
export class ColumnNumericHistogramResponse extends Message<ColumnNumericHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnNumericHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNumericHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNumericHistogramResponse | PlainMessage<ColumnNumericHistogramResponse> | undefined, b: ColumnNumericHistogramResponse | PlainMessage<ColumnNumericHistogramResponse> | undefined): boolean {
    return proto3.util.equals(ColumnNumericHistogramResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRugHistogramRequest
 */
export class ColumnRugHistogramRequest extends Message<ColumnRugHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnRugHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRugHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRugHistogramRequest | PlainMessage<ColumnRugHistogramRequest> | undefined, b: ColumnRugHistogramRequest | PlainMessage<ColumnRugHistogramRequest> | undefined): boolean {
    return proto3.util.equals(ColumnRugHistogramRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRugHistogramResponse
 */
export class ColumnRugHistogramResponse extends Message<ColumnRugHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnRugHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRugHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRugHistogramResponse | PlainMessage<ColumnRugHistogramResponse> | undefined, b: ColumnRugHistogramResponse | PlainMessage<ColumnRugHistogramResponse> | undefined): boolean {
    return proto3.util.equals(ColumnRugHistogramResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeRangeRequest
 */
export class ColumnTimeRangeRequest extends Message<ColumnTimeRangeRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTimeRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeRangeRequest | PlainMessage<ColumnTimeRangeRequest> | undefined, b: ColumnTimeRangeRequest | PlainMessage<ColumnTimeRangeRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeRangeRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeRangeResponse
 */
export class ColumnTimeRangeResponse extends Message<ColumnTimeRangeResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeRangeSummary time_range_summary = 1;
   */
  timeRangeSummary?: TimeRangeSummary;

  constructor(data?: PartialMessage<ColumnTimeRangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeRangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_range_summary", kind: "message", T: TimeRangeSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeRangeResponse | PlainMessage<ColumnTimeRangeResponse> | undefined, b: ColumnTimeRangeResponse | PlainMessage<ColumnTimeRangeResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeRangeResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeRangeSummary
 */
export class TimeRangeSummary extends Message<TimeRangeSummary> {
  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Timestamp min = 1;
   */
  min?: Timestamp;

  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Timestamp max = 2;
   */
  max?: Timestamp;

  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Timestamp watermark = 4;
   */
  watermark?: Timestamp;

  constructor(data?: PartialMessage<TimeRangeSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRangeSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "message", T: Timestamp },
    { no: 2, name: "max", kind: "message", T: Timestamp },
    { no: 4, name: "watermark", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined, b: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined): boolean {
    return proto3.util.equals(TimeRangeSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnCardinalityRequest
 */
export class ColumnCardinalityRequest extends Message<ColumnCardinalityRequest> {
  /**
   * Required
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Required
   *
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnCardinalityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnCardinalityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnCardinalityRequest | PlainMessage<ColumnCardinalityRequest> | undefined, b: ColumnCardinalityRequest | PlainMessage<ColumnCardinalityRequest> | undefined): boolean {
    return proto3.util.equals(ColumnCardinalityRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnCardinalityResponse
 */
export class ColumnCardinalityResponse extends Message<ColumnCardinalityResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<ColumnCardinalityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnCardinalityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnCardinalityResponse | PlainMessage<ColumnCardinalityResponse> | undefined, b: ColumnCardinalityResponse | PlainMessage<ColumnCardinalityResponse> | undefined): boolean {
    return proto3.util.equals(ColumnCardinalityResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesRequest
 */
export class ColumnTimeSeriesRequest extends Message<ColumnTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 11;
   */
  connector = "";

  /**
   * @generated from field: string database = 12;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 13;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * Optional. Defaults to [count(*)]
   *
   * @generated from field: repeated rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure measures = 3;
   */
  measures: ColumnTimeSeriesRequest_BasicMeasure[] = [];

  /**
   * Required
   *
   * @generated from field: string timestamp_column_name = 4;
   */
  timestampColumnName = "";

  /**
   * Optional. Defaults to [min, max)
   *
   * @generated from field: rill.runtime.v1.TimeSeriesTimeRange time_range = 5;
   */
  timeRange?: TimeSeriesTimeRange;

  /**
   * Optional. Spark is not calculated if ommitted. See http://www.vldb.org/pvldb/vol7/p797-jugel.pdf
   *
   * @generated from field: int32 pixels = 7;
   */
  pixels = 0;

  /**
   * Unused
   *
   * @generated from field: int32 sample_size = 8;
   */
  sampleSize = 0;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  /**
   * Optional. IANA format, ie Europe/Copenhagen. Defaults to UTC
   *
   * @generated from field: string time_zone = 10;
   */
  timeZone = "";

  constructor(data?: PartialMessage<ColumnTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measures", kind: "message", T: ColumnTimeSeriesRequest_BasicMeasure, repeated: true },
    { no: 4, name: "timestamp_column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time_range", kind: "message", T: TimeSeriesTimeRange },
    { no: 7, name: "pixels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesRequest | PlainMessage<ColumnTimeSeriesRequest> | undefined, b: ColumnTimeSeriesRequest | PlainMessage<ColumnTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure
 */
export class ColumnTimeSeriesRequest_BasicMeasure extends Message<ColumnTimeSeriesRequest_BasicMeasure> {
  /**
   * Unused
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Required. IE 'count(*)'
   *
   * @generated from field: string expression = 2;
   */
  expression = "";

  /**
   * Optional. Defaults to 'measure_{i}', ie measure_0
   *
   * @generated from field: string sql_name = 3;
   */
  sqlName = "";

  constructor(data?: PartialMessage<ColumnTimeSeriesRequest_BasicMeasure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sql_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesRequest_BasicMeasure | PlainMessage<ColumnTimeSeriesRequest_BasicMeasure> | undefined, b: ColumnTimeSeriesRequest_BasicMeasure | PlainMessage<ColumnTimeSeriesRequest_BasicMeasure> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesRequest_BasicMeasure, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesResponse
 */
export class ColumnTimeSeriesResponse extends Message<ColumnTimeSeriesResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeSeriesResponse rollup = 1;
   */
  rollup?: TimeSeriesResponse;

  constructor(data?: PartialMessage<ColumnTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollup", kind: "message", T: TimeSeriesResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesResponse | PlainMessage<ColumnTimeSeriesResponse> | undefined, b: ColumnTimeSeriesResponse | PlainMessage<ColumnTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesResponse, a, b);
  }
}

/**
 * Either [start, end] or interval should be specified
 *
 * @generated from message rill.runtime.v1.TimeSeriesTimeRange
 */
export class TimeSeriesTimeRange extends Message<TimeSeriesTimeRange> {
  /**
   * Optional. Defaults to min
   *
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * Optional. Defaults to max
   *
   * @generated from field: google.protobuf.Timestamp end = 3;
   */
  end?: Timestamp;

  /**
   * Optional. Defaults to the most human friendly for [min, max) range, ie 'minute' for hour range
   *
   * @generated from field: rill.runtime.v1.TimeGrain interval = 4;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<TimeSeriesTimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesTimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "end", kind: "message", T: Timestamp },
    { no: 4, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined, b: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined): boolean {
    return proto3.util.equals(TimeSeriesTimeRange, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesResponse
 */
export class TimeSeriesResponse extends Message<TimeSeriesResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue results = 1;
   */
  results: TimeSeriesValue[] = [];

  /**
   * Not optional, not null, empty if 'pixels' is not specified
   *
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue spark = 2;
   */
  spark: TimeSeriesValue[] = [];

  /**
   * Not optional, not null, unused
   *
   * @generated from field: int32 sample_size = 4;
   */
  sampleSize = 0;

  constructor(data?: PartialMessage<TimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 2, name: "spark", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 4, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined, b: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(TimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesValue
 */
export class TimeSeriesValue extends Message<TimeSeriesValue> {
  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * 0-based. Can be NaN if timestamps are the same. (Used for spark data only.)
   *
   * @generated from field: double bin = 2;
   */
  bin = 0;

  /**
   * Not optional, not null
   *
   * @generated from field: google.protobuf.Struct records = 3;
   */
  records?: Struct;

  constructor(data?: PartialMessage<TimeSeriesValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "bin", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "records", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined, b: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined): boolean {
    return proto3.util.equals(TimeSeriesValue, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableCardinalityRequest
 */
export class TableCardinalityRequest extends Message<TableCardinalityRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 4;
   */
  connector = "";

  /**
   * @generated from field: string database = 5;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 6;
   */
  databaseSchema = "";

  /**
   * Required
   *
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableCardinalityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableCardinalityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableCardinalityRequest | PlainMessage<TableCardinalityRequest> | undefined, b: TableCardinalityRequest | PlainMessage<TableCardinalityRequest> | undefined): boolean {
    return proto3.util.equals(TableCardinalityRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableCardinalityResponse
 */
export class TableCardinalityResponse extends Message<TableCardinalityResponse> {
  /**
   * Not optional, not null
   *
   * @generated from field: int64 cardinality = 1;
   */
  cardinality = protoInt64.zero;

  constructor(data?: PartialMessage<TableCardinalityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableCardinalityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cardinality", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableCardinalityResponse | PlainMessage<TableCardinalityResponse> | undefined, b: TableCardinalityResponse | PlainMessage<TableCardinalityResponse> | undefined): boolean {
    return proto3.util.equals(TableCardinalityResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableColumnsRequest
 */
export class TableColumnsRequest extends Message<TableColumnsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 4;
   */
  connector = "";

  /**
   * @generated from field: string database = 5;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 6;
   */
  databaseSchema = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableColumnsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableColumnsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableColumnsRequest | PlainMessage<TableColumnsRequest> | undefined, b: TableColumnsRequest | PlainMessage<TableColumnsRequest> | undefined): boolean {
    return proto3.util.equals(TableColumnsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableColumnsResponse
 */
export class TableColumnsResponse extends Message<TableColumnsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ProfileColumn profile_columns = 1;
   */
  profileColumns: ProfileColumn[] = [];

  /**
   * @generated from field: map<string, string> unsupported_columns = 2;
   */
  unsupportedColumns: { [key: string]: string } = {};

  constructor(data?: PartialMessage<TableColumnsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableColumnsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_columns", kind: "message", T: ProfileColumn, repeated: true },
    { no: 2, name: "unsupported_columns", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableColumnsResponse | PlainMessage<TableColumnsResponse> | undefined, b: TableColumnsResponse | PlainMessage<TableColumnsResponse> | undefined): boolean {
    return proto3.util.equals(TableColumnsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumn
 */
export class ProfileColumn extends Message<ProfileColumn> {
  /**
   * Not optional, not null
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Not optional, not null
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Unused
   *
   * @generated from field: int32 largest_string_length = 3;
   */
  largestStringLength = 0;

  constructor(data?: PartialMessage<ProfileColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "largest_string_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumn {
    return new ProfileColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumn | PlainMessage<ProfileColumn> | undefined, b: ProfileColumn | PlainMessage<ProfileColumn> | undefined): boolean {
    return proto3.util.equals(ProfileColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableRowsRequest
 */
export class TableRowsRequest extends Message<TableRowsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string connector = 5;
   */
  connector = "";

  /**
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableRowsRequest | PlainMessage<TableRowsRequest> | undefined, b: TableRowsRequest | PlainMessage<TableRowsRequest> | undefined): boolean {
    return proto3.util.equals(TableRowsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableRowsResponse
 */
export class TableRowsResponse extends Message<TableRowsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct data = 1;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<TableRowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableRowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableRowsResponse | PlainMessage<TableRowsResponse> | undefined, b: TableRowsResponse | PlainMessage<TableRowsResponse> | undefined): boolean {
    return proto3.util.equals(TableRowsResponse, a, b);
  }
}

