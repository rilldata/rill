// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/color.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message rill.runtime.v1.Color
 */
export class Color extends Message<Color> {
  /**
   * @generated from field: float red = 1;
   */
  red = 0;

  /**
   * @generated from field: float green = 2;
   */
  green = 0;

  /**
   * @generated from field: float blue = 3;
   */
  blue = 0;

  /**
   * @generated from field: float alpha = 4;
   */
  alpha = 0;

  constructor(data?: PartialMessage<Color>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Color";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "red", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "green", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "blue", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "alpha", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Color {
    return new Color().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Color {
    return new Color().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Color {
    return new Color().fromJsonString(jsonString, options);
  }

  static equals(a: Color | PlainMessage<Color> | undefined, b: Color | PlainMessage<Color> | undefined): boolean {
    return proto3.util.equals(Color, a, b);
  }
}

