// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/api.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { StructType } from "./schema_pb.js";
import { RefreshModelTrigger, Resource, ResourceName } from "./resources_pb.js";

/**
 * FileEvent describes a file change.
 *
 * @generated from enum rill.runtime.v1.FileEvent
 */
export enum FileEvent {
  /**
   * @generated from enum value: FILE_EVENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILE_EVENT_WRITE = 1;
   */
  WRITE = 1,

  /**
   * @generated from enum value: FILE_EVENT_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FileEvent)
proto3.util.setEnumType(FileEvent, "rill.runtime.v1.FileEvent", [
  { no: 0, name: "FILE_EVENT_UNSPECIFIED" },
  { no: 1, name: "FILE_EVENT_WRITE" },
  { no: 2, name: "FILE_EVENT_DELETE" },
]);

/**
 * @generated from enum rill.runtime.v1.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 4;
   */
  DEBUG = 4,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 8;
   */
  INFO = 8,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 12;
   */
  WARN = 12,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 16;
   */
  ERROR = 16,

  /**
   * @generated from enum value: LOG_LEVEL_FATAL = 20;
   */
  FATAL = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "rill.runtime.v1.LogLevel", [
  { no: 0, name: "LOG_LEVEL_UNSPECIFIED" },
  { no: 4, name: "LOG_LEVEL_DEBUG" },
  { no: 8, name: "LOG_LEVEL_INFO" },
  { no: 12, name: "LOG_LEVEL_WARN" },
  { no: 16, name: "LOG_LEVEL_ERROR" },
  { no: 20, name: "LOG_LEVEL_FATAL" },
]);

/**
 * @generated from enum rill.runtime.v1.ResourceEvent
 */
export enum ResourceEvent {
  /**
   * @generated from enum value: RESOURCE_EVENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOURCE_EVENT_WRITE = 1;
   */
  WRITE = 1,

  /**
   * @generated from enum value: RESOURCE_EVENT_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceEvent)
proto3.util.setEnumType(ResourceEvent, "rill.runtime.v1.ResourceEvent", [
  { no: 0, name: "RESOURCE_EVENT_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_EVENT_WRITE" },
  { no: 2, name: "RESOURCE_EVENT_DELETE" },
]);

/**
 * Request message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * Runtime version
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * Runtime server time
   *
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.HealthRequest
 */
export class HealthRequest extends Message<HealthRequest> {
  constructor(data?: PartialMessage<HealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.HealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthRequest {
    return new HealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthRequest | PlainMessage<HealthRequest> | undefined, b: HealthRequest | PlainMessage<HealthRequest> | undefined): boolean {
    return proto3.util.equals(HealthRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.HealthResponse
 */
export class HealthResponse extends Message<HealthResponse> {
  /**
   * @generated from field: string limiter_error = 1;
   */
  limiterError = "";

  /**
   * @generated from field: string conn_cache_error = 2;
   */
  connCacheError = "";

  /**
   * @generated from field: string metastore_error = 3;
   */
  metastoreError = "";

  /**
   * @generated from field: string network_error = 4;
   */
  networkError = "";

  /**
   * @generated from field: map<string, rill.runtime.v1.InstanceHealth> instances_health = 5;
   */
  instancesHealth: { [key: string]: InstanceHealth } = {};

  constructor(data?: PartialMessage<HealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.HealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limiter_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conn_cache_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metastore_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "network_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "instances_health", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: InstanceHealth} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthResponse {
    return new HealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthResponse | PlainMessage<HealthResponse> | undefined, b: HealthResponse | PlainMessage<HealthResponse> | undefined): boolean {
    return proto3.util.equals(HealthResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.InstanceHealthRequest
 */
export class InstanceHealthRequest extends Message<InstanceHealthRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<InstanceHealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.InstanceHealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceHealthRequest {
    return new InstanceHealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceHealthRequest {
    return new InstanceHealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceHealthRequest {
    return new InstanceHealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceHealthRequest | PlainMessage<InstanceHealthRequest> | undefined, b: InstanceHealthRequest | PlainMessage<InstanceHealthRequest> | undefined): boolean {
    return proto3.util.equals(InstanceHealthRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.InstanceHealthResponse
 */
export class InstanceHealthResponse extends Message<InstanceHealthResponse> {
  /**
   * @generated from field: rill.runtime.v1.InstanceHealth instance_health = 1;
   */
  instanceHealth?: InstanceHealth;

  constructor(data?: PartialMessage<InstanceHealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.InstanceHealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_health", kind: "message", T: InstanceHealth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceHealthResponse {
    return new InstanceHealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceHealthResponse {
    return new InstanceHealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceHealthResponse {
    return new InstanceHealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceHealthResponse | PlainMessage<InstanceHealthResponse> | undefined, b: InstanceHealthResponse | PlainMessage<InstanceHealthResponse> | undefined): boolean {
    return proto3.util.equals(InstanceHealthResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.InstanceHealth
 */
export class InstanceHealth extends Message<InstanceHealth> {
  /**
   * @generated from field: string controller_error = 1;
   */
  controllerError = "";

  /**
   * @generated from field: string olap_error = 2;
   */
  olapError = "";

  /**
   * @generated from field: string repo_error = 3;
   */
  repoError = "";

  /**
   * @generated from field: map<string, string> metrics_view_errors = 4;
   */
  metricsViewErrors: { [key: string]: string } = {};

  /**
   * @generated from field: int32 parse_error_count = 5;
   */
  parseErrorCount = 0;

  /**
   * @generated from field: int32 reconcile_error_count = 6;
   */
  reconcileErrorCount = 0;

  constructor(data?: PartialMessage<InstanceHealth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.InstanceHealth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repo_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metrics_view_errors", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "parse_error_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "reconcile_error_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceHealth {
    return new InstanceHealth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceHealth {
    return new InstanceHealth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceHealth {
    return new InstanceHealth().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceHealth | PlainMessage<InstanceHealth> | undefined, b: InstanceHealth | PlainMessage<InstanceHealth> | undefined): boolean {
    return proto3.util.equals(InstanceHealth, a, b);
  }
}

/**
 * Instance represents a single data project, meaning one set of code artifacts,
 * one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
 * metadata (such as reconciliation state). Instances are the unit of isolation within
 * the runtime. They enable one runtime deployment to serve not only multiple data
 * projects, but also multiple tenants. On local, the runtime will usually have
 * just a single instance.
 *
 * @generated from message rill.runtime.v1.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string environment = 20;
   */
  environment = "";

  /**
   * @generated from field: string olap_connector = 2;
   */
  olapConnector = "";

  /**
   * @generated from field: string repo_connector = 4;
   */
  repoConnector = "";

  /**
   * @generated from field: string admin_connector = 19;
   */
  adminConnector = "";

  /**
   * @generated from field: string ai_connector = 21;
   */
  aiConnector = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 11;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 12;
   */
  updatedOn?: Timestamp;

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 10;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.Connector project_connectors = 13;
   */
  projectConnectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 7;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> project_variables = 8;
   */
  projectVariables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, bool> feature_flags = 22;
   */
  featureFlags: { [key: string]: boolean } = {};

  /**
   * @generated from field: map<string, string> annotations = 14;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * @generated from field: bool watch_repo = 15;
   */
  watchRepo = false;

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "ai_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_on", kind: "message", T: Timestamp },
    { no: 12, name: "updated_on", kind: "message", T: Timestamp },
    { no: 10, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 13, name: "project_connectors", kind: "message", T: Connector, repeated: true },
    { no: 7, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "project_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 22, name: "feature_flags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 14, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Connector
 */
export class Connector extends Message<Connector> {
  /**
   * Type of the connector. One of the infra driver supported.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Name of the connector
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Config for the connector
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string } = {};

  /**
   * Properties in config that use templating
   *
   * @generated from field: repeated string templated_properties = 5;
   */
  templatedProperties: string[] = [];

  /**
   * Provision settings if its a managed connector
   *
   * @generated from field: bool provision = 6;
   */
  provision = false;

  /**
   * @generated from field: google.protobuf.Struct provision_args = 7;
   */
  provisionArgs?: Struct;

  /**
   * DEPRECATED: config_from_variables stores configs whose value is a variable. This is only set for configs obtained from `connector.yaml`
   *
   * @generated from field: map<string, string> config_from_variables = 4;
   */
  configFromVariables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Connector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Connector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "templated_properties", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "provision", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "provision_args", kind: "message", T: Struct },
    { no: 4, name: "config_from_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connector {
    return new Connector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJsonString(jsonString, options);
  }

  static equals(a: Connector | PlainMessage<Connector> | undefined, b: Connector | PlainMessage<Connector> | undefined): boolean {
    return proto3.util.equals(Connector, a, b);
  }
}

/**
 * Request message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool sensitive = 2;
   */
  sensitive = false;

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sensitive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceResponse
 */
export class GetInstanceResponse extends Message<GetInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<GetInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined, b: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.CreateInstance.
 * See message Instance for field descriptions.
 *
 * @generated from message rill.runtime.v1.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string environment = 16;
   */
  environment = "";

  /**
   * @generated from field: string olap_connector = 2;
   */
  olapConnector = "";

  /**
   * @generated from field: string repo_connector = 4;
   */
  repoConnector = "";

  /**
   * @generated from field: string admin_connector = 15;
   */
  adminConnector = "";

  /**
   * @generated from field: string ai_connector = 17;
   */
  aiConnector = "";

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 10;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 7;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 9;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * @generated from field: bool watch_repo = 11;
   */
  watchRepo = false;

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "ai_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 7, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.CreateInstance
 *
 * @generated from message rill.runtime.v1.CreateInstanceResponse
 */
export class CreateInstanceResponse extends Message<CreateInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<CreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceResponse
 */
export class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {
  constructor(data?: PartialMessage<DeleteInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.EditInstance.
 * See message Instance for field descriptions.
 *
 * @generated from message rill.runtime.v1.EditInstanceRequest
 */
export class EditInstanceRequest extends Message<EditInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: optional string environment = 17;
   */
  environment?: string;

  /**
   * @generated from field: optional string olap_connector = 2;
   */
  olapConnector?: string;

  /**
   * @generated from field: optional string repo_connector = 4;
   */
  repoConnector?: string;

  /**
   * @generated from field: optional string admin_connector = 16;
   */
  adminConnector?: string;

  /**
   * @generated from field: optional string ai_connector = 18;
   */
  aiConnector?: string;

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 9;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 15;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 10;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: optional bool embed_catalog = 6;
   */
  embedCatalog?: boolean;

  /**
   * @generated from field: optional bool watch_repo = 11;
   */
  watchRepo?: boolean;

  constructor(data?: PartialMessage<EditInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.EditInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "ai_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 15, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditInstanceRequest | PlainMessage<EditInstanceRequest> | undefined, b: EditInstanceRequest | PlainMessage<EditInstanceRequest> | undefined): boolean {
    return proto3.util.equals(EditInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.EditInstance
 *
 * @generated from message rill.runtime.v1.EditInstanceResponse
 */
export class EditInstanceResponse extends Message<EditInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<EditInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.EditInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditInstanceResponse | PlainMessage<EditInstanceResponse> | undefined, b: EditInstanceResponse | PlainMessage<EditInstanceResponse> | undefined): boolean {
    return proto3.util.equals(EditInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesRequest
 */
export class ListFilesRequest extends Message<ListFilesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string glob = 2;
   */
  glob = "";

  constructor(data?: PartialMessage<ListFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "glob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined, b: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListFilesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesResponse
 */
export class ListFilesResponse extends Message<ListFilesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.DirEntry files = 1;
   */
  files: DirEntry[] = [];

  constructor(data?: PartialMessage<ListFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: DirEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined, b: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListFilesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DirEntry
 */
export class DirEntry extends Message<DirEntry> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool is_dir = 2;
   */
  isDir = false;

  constructor(data?: PartialMessage<DirEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DirEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_dir", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DirEntry {
    return new DirEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DirEntry {
    return new DirEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DirEntry {
    return new DirEntry().fromJsonString(jsonString, options);
  }

  static equals(a: DirEntry | PlainMessage<DirEntry> | undefined, b: DirEntry | PlainMessage<DirEntry> | undefined): boolean {
    return proto3.util.equals(DirEntry, a, b);
  }
}

/**
 * Request message for RuntimeService.WatchFiles
 *
 * @generated from message rill.runtime.v1.WatchFilesRequest
 */
export class WatchFilesRequest extends Message<WatchFilesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool replay = 2;
   */
  replay = false;

  constructor(data?: PartialMessage<WatchFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchFilesRequest | PlainMessage<WatchFilesRequest> | undefined, b: WatchFilesRequest | PlainMessage<WatchFilesRequest> | undefined): boolean {
    return proto3.util.equals(WatchFilesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.WatchFiles
 *
 * @generated from message rill.runtime.v1.WatchFilesResponse
 */
export class WatchFilesResponse extends Message<WatchFilesResponse> {
  /**
   * @generated from field: rill.runtime.v1.FileEvent event = 1;
   */
  event = FileEvent.UNSPECIFIED;

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool is_dir = 3;
   */
  isDir = false;

  constructor(data?: PartialMessage<WatchFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "enum", T: proto3.getEnumType(FileEvent) },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_dir", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchFilesResponse | PlainMessage<WatchFilesResponse> | undefined, b: WatchFilesResponse | PlainMessage<WatchFilesResponse> | undefined): boolean {
    return proto3.util.equals(WatchFilesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileRequest
 */
export class GetFileRequest extends Message<GetFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<GetFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileRequest {
    return new GetFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileRequest | PlainMessage<GetFileRequest> | undefined, b: GetFileRequest | PlainMessage<GetFileRequest> | undefined): boolean {
    return proto3.util.equals(GetFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileResponse
 */
export class GetFileResponse extends Message<GetFileResponse> {
  /**
   * @generated from field: string blob = 1;
   */
  blob = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 2;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<GetFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileResponse {
    return new GetFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileResponse | PlainMessage<GetFileResponse> | undefined, b: GetFileResponse | PlainMessage<GetFileResponse> | undefined): boolean {
    return proto3.util.equals(GetFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileRequest
 */
export class PutFileRequest extends Message<PutFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string blob = 3;
   */
  blob = "";

  /**
   * Create indicates whether to create the file if it doesn't already exist
   *
   * @generated from field: bool create = 4;
   */
  create = false;

  /**
   * Will cause the operation to fail if the file already exists.
   * It should only be set when create = true.
   *
   * @generated from field: bool create_only = 5;
   */
  createOnly = false;

  constructor(data?: PartialMessage<PutFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileRequest {
    return new PutFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileRequest | PlainMessage<PutFileRequest> | undefined, b: PutFileRequest | PlainMessage<PutFileRequest> | undefined): boolean {
    return proto3.util.equals(PutFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileResponse
 */
export class PutFileResponse extends Message<PutFileResponse> {
  /**
   * TODO: Redundant, should be removed (but frontend currently uses it)
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  constructor(data?: PartialMessage<PutFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileResponse {
    return new PutFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileResponse | PlainMessage<PutFileResponse> | undefined, b: PutFileResponse | PlainMessage<PutFileResponse> | undefined): boolean {
    return proto3.util.equals(PutFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.CreateDirectory
 *
 * @generated from message rill.runtime.v1.CreateDirectoryRequest
 */
export class CreateDirectoryRequest extends Message<CreateDirectoryRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<CreateDirectoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateDirectoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined, b: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.CreateDirectory
 *
 * @generated from message rill.runtime.v1.CreateDirectoryResponse
 */
export class CreateDirectoryResponse extends Message<CreateDirectoryResponse> {
  constructor(data?: PartialMessage<CreateDirectoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateDirectoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined, b: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileRequest
 */
export class DeleteFileRequest extends Message<DeleteFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<DeleteFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined, b: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileResponse
 */
export class DeleteFileResponse extends Message<DeleteFileResponse> {
  constructor(data?: PartialMessage<DeleteFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined, b: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileRequest
 */
export class RenameFileRequest extends Message<RenameFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * @generated from field: string to_path = 3;
   */
  toPath = "";

  constructor(data?: PartialMessage<RenameFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined, b: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined): boolean {
    return proto3.util.equals(RenameFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileResponse
 */
export class RenameFileResponse extends Message<RenameFileResponse> {
  constructor(data?: PartialMessage<RenameFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined, b: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined): boolean {
    return proto3.util.equals(RenameFileResponse, a, b);
  }
}

/**
 * Example contains metadata about an example project that is available for unpacking.
 *
 * @generated from message rill.runtime.v1.Example
 */
export class Example extends Message<Example> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<Example>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Example";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Example {
    return new Example().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJsonString(jsonString, options);
  }

  static equals(a: Example | PlainMessage<Example> | undefined, b: Example | PlainMessage<Example> | undefined): boolean {
    return proto3.util.equals(Example, a, b);
  }
}

/**
 * Request message for RuntimeService.ListExamples
 *
 * @generated from message rill.runtime.v1.ListExamplesRequest
 */
export class ListExamplesRequest extends Message<ListExamplesRequest> {
  constructor(data?: PartialMessage<ListExamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListExamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExamplesRequest | PlainMessage<ListExamplesRequest> | undefined, b: ListExamplesRequest | PlainMessage<ListExamplesRequest> | undefined): boolean {
    return proto3.util.equals(ListExamplesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListExamples
 *
 * @generated from message rill.runtime.v1.ListExamplesResponse
 */
export class ListExamplesResponse extends Message<ListExamplesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Example examples = 1;
   */
  examples: Example[] = [];

  constructor(data?: PartialMessage<ListExamplesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListExamplesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "examples", kind: "message", T: Example, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExamplesResponse | PlainMessage<ListExamplesResponse> | undefined, b: ListExamplesResponse | PlainMessage<ListExamplesResponse> | undefined): boolean {
    return proto3.util.equals(ListExamplesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.UnpackExample
 *
 * @generated from message rill.runtime.v1.UnpackExampleRequest
 */
export class UnpackExampleRequest extends Message<UnpackExampleRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<UnpackExampleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackExampleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackExampleRequest | PlainMessage<UnpackExampleRequest> | undefined, b: UnpackExampleRequest | PlainMessage<UnpackExampleRequest> | undefined): boolean {
    return proto3.util.equals(UnpackExampleRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.UnpackExample
 *
 * @generated from message rill.runtime.v1.UnpackExampleResponse
 */
export class UnpackExampleResponse extends Message<UnpackExampleResponse> {
  constructor(data?: PartialMessage<UnpackExampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackExampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackExampleResponse | PlainMessage<UnpackExampleResponse> | undefined, b: UnpackExampleResponse | PlainMessage<UnpackExampleResponse> | undefined): boolean {
    return proto3.util.equals(UnpackExampleResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.UnpackEmpty
 *
 * @generated from message rill.runtime.v1.UnpackEmptyRequest
 */
export class UnpackEmptyRequest extends Message<UnpackEmptyRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<UnpackEmptyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackEmptyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackEmptyRequest | PlainMessage<UnpackEmptyRequest> | undefined, b: UnpackEmptyRequest | PlainMessage<UnpackEmptyRequest> | undefined): boolean {
    return proto3.util.equals(UnpackEmptyRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.UnpackEmpty
 *
 * @generated from message rill.runtime.v1.UnpackEmptyResponse
 */
export class UnpackEmptyResponse extends Message<UnpackEmptyResponse> {
  constructor(data?: PartialMessage<UnpackEmptyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackEmptyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackEmptyResponse | PlainMessage<UnpackEmptyResponse> | undefined, b: UnpackEmptyResponse | PlainMessage<UnpackEmptyResponse> | undefined): boolean {
    return proto3.util.equals(UnpackEmptyResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GenerateMetricsViewFile
 *
 * @generated from message rill.runtime.v1.GenerateMetricsViewFileRequest
 */
export class GenerateMetricsViewFileRequest extends Message<GenerateMetricsViewFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Model to base the metrics view on.
   * If you set this, do NOT set connector, database, database_schema or table.
   *
   * @generated from field: string model = 8;
   */
  model = "";

  /**
   * Connector for the table.
   * See "table" for more details.
   *
   * @generated from field: string connector = 2;
   */
  connector = "";

  /**
   * Database for the table.
   * See "table" for more details.
   *
   * @generated from field: string database = 6;
   */
  database = "";

  /**
   * Database schema for the table.
   * See "table" for more details.
   *
   * @generated from field: string database_schema = 7;
   */
  databaseSchema = "";

  /**
   * Table to base the metrics view on.
   * If you set this, do NOT set model.
   *
   * @generated from field: string table = 3;
   */
  table = "";

  /**
   * Path to save the metrics view file to.
   *
   * @generated from field: string path = 4;
   */
  path = "";

  /**
   * If true, the AI will be used to generate the metrics view file.
   * Otherwise, it falls back to a simpler heuristic approach.
   *
   * @generated from field: bool use_ai = 5;
   */
  useAi = false;

  constructor(data?: PartialMessage<GenerateMetricsViewFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateMetricsViewFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "database_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "use_ai", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateMetricsViewFileRequest {
    return new GenerateMetricsViewFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateMetricsViewFileRequest {
    return new GenerateMetricsViewFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateMetricsViewFileRequest {
    return new GenerateMetricsViewFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateMetricsViewFileRequest | PlainMessage<GenerateMetricsViewFileRequest> | undefined, b: GenerateMetricsViewFileRequest | PlainMessage<GenerateMetricsViewFileRequest> | undefined): boolean {
    return proto3.util.equals(GenerateMetricsViewFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GenerateMetricsViewFile
 *
 * @generated from message rill.runtime.v1.GenerateMetricsViewFileResponse
 */
export class GenerateMetricsViewFileResponse extends Message<GenerateMetricsViewFileResponse> {
  /**
   * Indicates if AI-based generation succeeded. If it failed, it falls back to the simpler heuristic approach.
   *
   * @generated from field: bool ai_succeeded = 1;
   */
  aiSucceeded = false;

  constructor(data?: PartialMessage<GenerateMetricsViewFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateMetricsViewFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ai_succeeded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateMetricsViewFileResponse {
    return new GenerateMetricsViewFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateMetricsViewFileResponse {
    return new GenerateMetricsViewFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateMetricsViewFileResponse {
    return new GenerateMetricsViewFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateMetricsViewFileResponse | PlainMessage<GenerateMetricsViewFileResponse> | undefined, b: GenerateMetricsViewFileResponse | PlainMessage<GenerateMetricsViewFileResponse> | undefined): boolean {
    return proto3.util.equals(GenerateMetricsViewFileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateResolverRequest
 */
export class GenerateResolverRequest extends Message<GenerateResolverRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string prompt = 2;
   */
  prompt = "";

  /**
   * Both connector and table must be specified if metrics_view is not.
   *
   * @generated from field: string connector = 3;
   */
  connector = "";

  /**
   * @generated from field: string table = 4;
   */
  table = "";

  /**
   * table and connector should not be provided if metrics_view is provided.
   *
   * @generated from field: string metrics_view = 5;
   */
  metricsView = "";

  constructor(data?: PartialMessage<GenerateResolverRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateResolverRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metrics_view", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateResolverRequest {
    return new GenerateResolverRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateResolverRequest {
    return new GenerateResolverRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateResolverRequest {
    return new GenerateResolverRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateResolverRequest | PlainMessage<GenerateResolverRequest> | undefined, b: GenerateResolverRequest | PlainMessage<GenerateResolverRequest> | undefined): boolean {
    return proto3.util.equals(GenerateResolverRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateResolverResponse
 */
export class GenerateResolverResponse extends Message<GenerateResolverResponse> {
  /**
   * @generated from field: string resolver = 1;
   */
  resolver = "";

  /**
   * @generated from field: google.protobuf.Struct resolver_properties = 2;
   */
  resolverProperties?: Struct;

  constructor(data?: PartialMessage<GenerateResolverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateResolverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resolver_properties", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateResolverResponse {
    return new GenerateResolverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateResolverResponse {
    return new GenerateResolverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateResolverResponse {
    return new GenerateResolverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateResolverResponse | PlainMessage<GenerateResolverResponse> | undefined, b: GenerateResolverResponse | PlainMessage<GenerateResolverResponse> | undefined): boolean {
    return proto3.util.equals(GenerateResolverResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateRendererRequest
 */
export class GenerateRendererRequest extends Message<GenerateRendererRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string prompt = 2;
   */
  prompt = "";

  /**
   * @generated from field: string resolver = 3;
   */
  resolver = "";

  /**
   * @generated from field: google.protobuf.Struct resolver_properties = 4;
   */
  resolverProperties?: Struct;

  constructor(data?: PartialMessage<GenerateRendererRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateRendererRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resolver_properties", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRendererRequest {
    return new GenerateRendererRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRendererRequest {
    return new GenerateRendererRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRendererRequest {
    return new GenerateRendererRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRendererRequest | PlainMessage<GenerateRendererRequest> | undefined, b: GenerateRendererRequest | PlainMessage<GenerateRendererRequest> | undefined): boolean {
    return proto3.util.equals(GenerateRendererRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateRendererResponse
 */
export class GenerateRendererResponse extends Message<GenerateRendererResponse> {
  /**
   * @generated from field: string renderer = 1;
   */
  renderer = "";

  /**
   * @generated from field: google.protobuf.Struct renderer_properties = 2;
   */
  rendererProperties?: Struct;

  constructor(data?: PartialMessage<GenerateRendererResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateRendererResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "renderer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "renderer_properties", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRendererResponse {
    return new GenerateRendererResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRendererResponse {
    return new GenerateRendererResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRendererResponse {
    return new GenerateRendererResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRendererResponse | PlainMessage<GenerateRendererResponse> | undefined, b: GenerateRendererResponse | PlainMessage<GenerateRendererResponse> | undefined): boolean {
    return proto3.util.equals(GenerateRendererResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryResolverRequest
 */
export class QueryResolverRequest extends Message<QueryResolverRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string resolver = 2;
   */
  resolver = "";

  /**
   * @generated from field: google.protobuf.Struct resolver_properties = 3;
   */
  resolverProperties?: Struct;

  /**
   * @generated from field: google.protobuf.Struct resolver_args = 4;
   */
  resolverArgs?: Struct;

  /**
   * @generated from field: int32 limit = 5;
   */
  limit = 0;

  constructor(data?: PartialMessage<QueryResolverRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResolverRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resolver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resolver_properties", kind: "message", T: Struct },
    { no: 4, name: "resolver_args", kind: "message", T: Struct },
    { no: 5, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResolverRequest {
    return new QueryResolverRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResolverRequest {
    return new QueryResolverRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResolverRequest {
    return new QueryResolverRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResolverRequest | PlainMessage<QueryResolverRequest> | undefined, b: QueryResolverRequest | PlainMessage<QueryResolverRequest> | undefined): boolean {
    return proto3.util.equals(QueryResolverRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.QueryResolverResponse
 */
export class QueryResolverResponse extends Message<QueryResolverResponse> {
  /**
   * @generated from field: rill.runtime.v1.StructType schema = 1;
   */
  schema?: StructType;

  /**
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<QueryResolverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResolverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: StructType },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResolverResponse {
    return new QueryResolverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResolverResponse {
    return new QueryResolverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResolverResponse {
    return new QueryResolverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResolverResponse | PlainMessage<QueryResolverResponse> | undefined, b: QueryResolverResponse | PlainMessage<QueryResolverResponse> | undefined): boolean {
    return proto3.util.equals(QueryResolverResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Log
 */
export class Log extends Message<Log> {
  /**
   * @generated from field: rill.runtime.v1.LogLevel level = 1;
   */
  level = LogLevel.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: string json_payload = 4;
   */
  jsonPayload = "";

  constructor(data?: PartialMessage<Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "json_payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Log {
    return new Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJsonString(jsonString, options);
  }

  static equals(a: Log | PlainMessage<Log> | undefined, b: Log | PlainMessage<Log> | undefined): boolean {
    return proto3.util.equals(Log, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ModelPartition
 */
export class ModelPartition extends Message<ModelPartition> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: google.protobuf.Struct data = 2;
   */
  data?: Struct;

  /**
   * @generated from field: google.protobuf.Timestamp watermark = 3;
   */
  watermark?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp executed_on = 4;
   */
  executedOn?: Timestamp;

  /**
   * @generated from field: string error = 5;
   */
  error = "";

  /**
   * @generated from field: uint32 elapsed_ms = 6;
   */
  elapsedMs = 0;

  constructor(data?: PartialMessage<ModelPartition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ModelPartition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: Struct },
    { no: 3, name: "watermark", kind: "message", T: Timestamp },
    { no: 4, name: "executed_on", kind: "message", T: Timestamp },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "elapsed_ms", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelPartition {
    return new ModelPartition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelPartition {
    return new ModelPartition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelPartition {
    return new ModelPartition().fromJsonString(jsonString, options);
  }

  static equals(a: ModelPartition | PlainMessage<ModelPartition> | undefined, b: ModelPartition | PlainMessage<ModelPartition> | undefined): boolean {
    return proto3.util.equals(ModelPartition, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetLogsRequest
 */
export class GetLogsRequest extends Message<GetLogsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  /**
   * @generated from field: rill.runtime.v1.LogLevel level = 4;
   */
  level = LogLevel.UNSPECIFIED;

  constructor(data?: PartialMessage<GetLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLogsRequest | PlainMessage<GetLogsRequest> | undefined, b: GetLogsRequest | PlainMessage<GetLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetLogsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetLogsResponse
 */
export class GetLogsResponse extends Message<GetLogsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Log logs = 1;
   */
  logs: Log[] = [];

  constructor(data?: PartialMessage<GetLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Log, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLogsResponse | PlainMessage<GetLogsResponse> | undefined, b: GetLogsResponse | PlainMessage<GetLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetLogsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchLogsRequest
 */
export class WatchLogsRequest extends Message<WatchLogsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool replay = 2;
   */
  replay = false;

  /**
   * @generated from field: int32 replay_limit = 3;
   */
  replayLimit = 0;

  /**
   * @generated from field: rill.runtime.v1.LogLevel level = 4;
   */
  level = LogLevel.UNSPECIFIED;

  constructor(data?: PartialMessage<WatchLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "replay_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchLogsRequest | PlainMessage<WatchLogsRequest> | undefined, b: WatchLogsRequest | PlainMessage<WatchLogsRequest> | undefined): boolean {
    return proto3.util.equals(WatchLogsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchLogsResponse
 */
export class WatchLogsResponse extends Message<WatchLogsResponse> {
  /**
   * @generated from field: rill.runtime.v1.Log log = 1;
   */
  log?: Log;

  constructor(data?: PartialMessage<WatchLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: Log },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchLogsResponse | PlainMessage<WatchLogsResponse> | undefined, b: WatchLogsResponse | PlainMessage<WatchLogsResponse> | undefined): boolean {
    return proto3.util.equals(WatchLogsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ListResourcesRequest
 */
export class ListResourcesRequest extends Message<ListResourcesRequest> {
  /**
   * Instance to list resources from.
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Filter by resource kind (optional).
   *
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * Filter by resource path (optional).
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * Skip security checks
   *
   * @generated from field: bool skip_security_checks = 4;
   */
  skipSecurityChecks = false;

  constructor(data?: PartialMessage<ListResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "skip_security_checks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourcesRequest | PlainMessage<ListResourcesRequest> | undefined, b: ListResourcesRequest | PlainMessage<ListResourcesRequest> | undefined): boolean {
    return proto3.util.equals(ListResourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ListResourcesResponse
 */
export class ListResourcesResponse extends Message<ListResourcesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<ListResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourcesResponse | PlainMessage<ListResourcesResponse> | undefined, b: ListResourcesResponse | PlainMessage<ListResourcesResponse> | undefined): boolean {
    return proto3.util.equals(ListResourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchResourcesRequest
 */
export class WatchResourcesRequest extends Message<WatchResourcesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: bool replay = 3;
   */
  replay = false;

  /**
   * @generated from field: string level = 4;
   */
  level = "";

  constructor(data?: PartialMessage<WatchResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined, b: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined): boolean {
    return proto3.util.equals(WatchResourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchResourcesResponse
 */
export class WatchResourcesResponse extends Message<WatchResourcesResponse> {
  /**
   * @generated from field: rill.runtime.v1.ResourceEvent event = 1;
   */
  event = ResourceEvent.UNSPECIFIED;

  /**
   * @generated from field: rill.runtime.v1.ResourceName name = 2;
   */
  name?: ResourceName;

  /**
   * @generated from field: rill.runtime.v1.Resource resource = 3;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<WatchResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "enum", T: proto3.getEnumType(ResourceEvent) },
    { no: 2, name: "name", kind: "message", T: ResourceName },
    { no: 3, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined, b: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined): boolean {
    return proto3.util.equals(WatchResourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetResourceRequest
 */
export class GetResourceRequest extends Message<GetResourceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: rill.runtime.v1.ResourceName name = 2;
   */
  name?: ResourceName;

  /**
   * @generated from field: bool skip_security_checks = 3;
   */
  skipSecurityChecks = false;

  constructor(data?: PartialMessage<GetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "message", T: ResourceName },
    { no: 3, name: "skip_security_checks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined, b: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetResourceRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetResourceResponse
 */
export class GetResourceResponse extends Message<GetResourceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined, b: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined): boolean {
    return proto3.util.equals(GetResourceResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetExploreRequest
 */
export class GetExploreRequest extends Message<GetExploreRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetExploreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetExploreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExploreRequest {
    return new GetExploreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExploreRequest {
    return new GetExploreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExploreRequest {
    return new GetExploreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetExploreRequest | PlainMessage<GetExploreRequest> | undefined, b: GetExploreRequest | PlainMessage<GetExploreRequest> | undefined): boolean {
    return proto3.util.equals(GetExploreRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetExploreResponse
 */
export class GetExploreResponse extends Message<GetExploreResponse> {
  /**
   * @generated from field: rill.runtime.v1.Resource explore = 1;
   */
  explore?: Resource;

  /**
   * @generated from field: rill.runtime.v1.Resource metrics_view = 2;
   */
  metricsView?: Resource;

  constructor(data?: PartialMessage<GetExploreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetExploreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "explore", kind: "message", T: Resource },
    { no: 2, name: "metrics_view", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExploreResponse {
    return new GetExploreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExploreResponse {
    return new GetExploreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExploreResponse {
    return new GetExploreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetExploreResponse | PlainMessage<GetExploreResponse> | undefined, b: GetExploreResponse | PlainMessage<GetExploreResponse> | undefined): boolean {
    return proto3.util.equals(GetExploreResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetModelPartitionsRequest
 */
export class GetModelPartitionsRequest extends Message<GetModelPartitionsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: bool pending = 5;
   */
  pending = false;

  /**
   * @generated from field: bool errored = 6;
   */
  errored = false;

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<GetModelPartitionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetModelPartitionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "errored", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelPartitionsRequest {
    return new GetModelPartitionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelPartitionsRequest {
    return new GetModelPartitionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelPartitionsRequest {
    return new GetModelPartitionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelPartitionsRequest | PlainMessage<GetModelPartitionsRequest> | undefined, b: GetModelPartitionsRequest | PlainMessage<GetModelPartitionsRequest> | undefined): boolean {
    return proto3.util.equals(GetModelPartitionsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetModelPartitionsResponse
 */
export class GetModelPartitionsResponse extends Message<GetModelPartitionsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ModelPartition partitions = 1;
   */
  partitions: ModelPartition[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<GetModelPartitionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetModelPartitionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partitions", kind: "message", T: ModelPartition, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelPartitionsResponse {
    return new GetModelPartitionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelPartitionsResponse {
    return new GetModelPartitionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelPartitionsResponse {
    return new GetModelPartitionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelPartitionsResponse | PlainMessage<GetModelPartitionsResponse> | undefined, b: GetModelPartitionsResponse | PlainMessage<GetModelPartitionsResponse> | undefined): boolean {
    return proto3.util.equals(GetModelPartitionsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CreateTriggerRequest
 */
export class CreateTriggerRequest extends Message<CreateTriggerRequest> {
  /**
   * Instance to target.
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Resources to trigger. See RefreshTriggerSpec for details.
   *
   * @generated from field: repeated rill.runtime.v1.ResourceName resources = 4;
   */
  resources: ResourceName[] = [];

  /**
   * Models to trigger. Unlike resources, this supports advanced configuration of the refresh trigger.
   *
   * @generated from field: repeated rill.runtime.v1.RefreshModelTrigger models = 5;
   */
  models: RefreshModelTrigger[] = [];

  /**
   * Parser is a convenience flag to trigger the global project parser.
   * Triggering the project parser ensures a pull of the repository and a full parse of all files.
   *
   * @generated from field: bool parser = 6;
   */
  parser = false;

  /**
   * Convenience flag to trigger all sources and models.
   *
   * @generated from field: bool all_sources_models = 7;
   */
  allSourcesModels = false;

  /**
   * Convenience flag to trigger all sources and models.
   * Will trigger models with RefreshModelTrigger.full set to true.
   *
   * @generated from field: bool all_sources_models_full = 8;
   */
  allSourcesModelsFull = false;

  constructor(data?: PartialMessage<CreateTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resources", kind: "message", T: ResourceName, repeated: true },
    { no: 5, name: "models", kind: "message", T: RefreshModelTrigger, repeated: true },
    { no: 6, name: "parser", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "all_sources_models", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "all_sources_models_full", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTriggerRequest | PlainMessage<CreateTriggerRequest> | undefined, b: CreateTriggerRequest | PlainMessage<CreateTriggerRequest> | undefined): boolean {
    return proto3.util.equals(CreateTriggerRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CreateTriggerResponse
 */
export class CreateTriggerResponse extends Message<CreateTriggerResponse> {
  constructor(data?: PartialMessage<CreateTriggerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateTriggerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTriggerResponse | PlainMessage<CreateTriggerResponse> | undefined, b: CreateTriggerResponse | PlainMessage<CreateTriggerResponse> | undefined): boolean {
    return proto3.util.equals(CreateTriggerResponse, a, b);
  }
}

/**
 * ConnectorDriver represents a connector driver available in the runtime.
 *
 * @generated from message rill.runtime.v1.ConnectorDriver
 */
export class ConnectorDriver extends Message<ConnectorDriver> {
  /**
   * Name is the name of the connector
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Properties for configuring the connector
   *
   * @generated from field: repeated rill.runtime.v1.ConnectorDriver.Property config_properties = 2;
   */
  configProperties: ConnectorDriver_Property[] = [];

  /**
   * Properties that can be provided to the connector when using it as a source
   *
   * @generated from field: repeated rill.runtime.v1.ConnectorDriver.Property source_properties = 3;
   */
  sourceProperties: ConnectorDriver_Property[] = [];

  /**
   * Pretty display name for use in UIs
   *
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * Human readable description of the connector
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * Capabilities supported by the connector
   *
   * @generated from field: bool implements_registry = 10;
   */
  implementsRegistry = false;

  /**
   * @generated from field: bool implements_catalog = 11;
   */
  implementsCatalog = false;

  /**
   * @generated from field: bool implements_repo = 12;
   */
  implementsRepo = false;

  /**
   * @generated from field: bool implements_admin = 13;
   */
  implementsAdmin = false;

  /**
   * @generated from field: bool implements_ai = 14;
   */
  implementsAi = false;

  /**
   * @generated from field: bool implements_sql_store = 15;
   */
  implementsSqlStore = false;

  /**
   * @generated from field: bool implements_olap = 16;
   */
  implementsOlap = false;

  /**
   * @generated from field: bool implements_object_store = 17;
   */
  implementsObjectStore = false;

  /**
   * @generated from field: bool implements_file_store = 18;
   */
  implementsFileStore = false;

  /**
   * @generated from field: bool implements_notifier = 19;
   */
  implementsNotifier = false;

  /**
   * @generated from field: bool implements_warehouse = 20;
   */
  implementsWarehouse = false;

  constructor(data?: PartialMessage<ConnectorDriver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ConnectorDriver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config_properties", kind: "message", T: ConnectorDriver_Property, repeated: true },
    { no: 3, name: "source_properties", kind: "message", T: ConnectorDriver_Property, repeated: true },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "implements_registry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "implements_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "implements_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "implements_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "implements_ai", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "implements_sql_store", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "implements_olap", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "implements_object_store", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "implements_file_store", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "implements_notifier", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "implements_warehouse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorDriver {
    return new ConnectorDriver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorDriver {
    return new ConnectorDriver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorDriver {
    return new ConnectorDriver().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorDriver | PlainMessage<ConnectorDriver> | undefined, b: ConnectorDriver | PlainMessage<ConnectorDriver> | undefined): boolean {
    return proto3.util.equals(ConnectorDriver, a, b);
  }
}

/**
 * Property represents the spec of one of the driver's config properties
 *
 * @generated from message rill.runtime.v1.ConnectorDriver.Property
 */
export class ConnectorDriver_Property extends Message<ConnectorDriver_Property> {
  /**
   * The property key
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * The type expected for this property
   *
   * @generated from field: rill.runtime.v1.ConnectorDriver.Property.Type type = 2;
   */
  type = ConnectorDriver_Property_Type.UNSPECIFIED;

  /**
   * Required is true if the field must be set
   *
   * @generated from field: bool required = 3;
   */
  required = false;

  /**
   * Pretty name for the property
   *
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * Human readable description of the field
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * Link to documentation for this property
   *
   * @generated from field: string docs_url = 6;
   */
  docsUrl = "";

  /**
   * Additional textual explanation for use in UIs
   *
   * @generated from field: string hint = 7;
   */
  hint = "";

  /**
   * Default value for the property
   *
   * @generated from field: string default = 8;
   */
  default = "";

  /**
   * Placeholder value for use in UIs
   *
   * @generated from field: string placeholder = 9;
   */
  placeholder = "";

  /**
   * If true, the property is a secret and should not be displayed in UIs
   *
   * @generated from field: bool secret = 10;
   */
  secret = false;

  /**
   * If true, the property should not be prompted. The expectation is that only advanced users will use it and can set directly in the connector.yaml
   *
   * @generated from field: bool no_prompt = 11;
   */
  noPrompt = false;

  constructor(data?: PartialMessage<ConnectorDriver_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ConnectorDriver.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ConnectorDriver_Property_Type) },
    { no: 3, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "docs_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "hint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "no_prompt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorDriver_Property {
    return new ConnectorDriver_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorDriver_Property {
    return new ConnectorDriver_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorDriver_Property {
    return new ConnectorDriver_Property().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorDriver_Property | PlainMessage<ConnectorDriver_Property> | undefined, b: ConnectorDriver_Property | PlainMessage<ConnectorDriver_Property> | undefined): boolean {
    return proto3.util.equals(ConnectorDriver_Property, a, b);
  }
}

/**
 * Type of the property
 *
 * @generated from enum rill.runtime.v1.ConnectorDriver.Property.Type
 */
export enum ConnectorDriver_Property_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_NUMBER = 1;
   */
  NUMBER = 1,

  /**
   * @generated from enum value: TYPE_BOOLEAN = 2;
   */
  BOOLEAN = 2,

  /**
   * @generated from enum value: TYPE_STRING = 3;
   */
  STRING = 3,

  /**
   * @generated from enum value: TYPE_FILE = 4;
   */
  FILE = 4,

  /**
   * @generated from enum value: TYPE_INFORMATIONAL = 5;
   */
  INFORMATIONAL = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectorDriver_Property_Type)
proto3.util.setEnumType(ConnectorDriver_Property_Type, "rill.runtime.v1.ConnectorDriver.Property.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_NUMBER" },
  { no: 2, name: "TYPE_BOOLEAN" },
  { no: 3, name: "TYPE_STRING" },
  { no: 4, name: "TYPE_FILE" },
  { no: 5, name: "TYPE_INFORMATIONAL" },
]);

/**
 * AnalyzedConnector contains information about a connector that is referenced in the project files.
 *
 * @generated from message rill.runtime.v1.AnalyzedConnector
 */
export class AnalyzedConnector extends Message<AnalyzedConnector> {
  /**
   * Connector name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Connector driver metadata
   *
   * @generated from field: rill.runtime.v1.ConnectorDriver driver = 2;
   */
  driver?: ConnectorDriver;

  /**
   * Combined config properties for the connector
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string } = {};

  /**
   * Config properties preset by the runtime or when the instance was created
   *
   * @generated from field: map<string, string> preset_config = 4;
   */
  presetConfig: { [key: string]: string } = {};

  /**
   * Config properties set in project YAML files
   *
   * @generated from field: map<string, string> project_config = 5;
   */
  projectConfig: { [key: string]: string } = {};

  /**
   * Config properties set as dynamic variables
   *
   * @generated from field: map<string, string> env_config = 6;
   */
  envConfig: { [key: string]: string } = {};

  /**
   * Provision indicates if its a managed connector
   *
   * @generated from field: bool provision = 10;
   */
  provision = false;

  /**
   * Provision args for the provisioner if provision is true
   *
   * @generated from field: google.protobuf.Struct provision_args = 11;
   */
  provisionArgs?: Struct;

  /**
   * True if the connector can be accessed without credentials
   *
   * @generated from field: bool has_anonymous_access = 7;
   */
  hasAnonymousAccess = false;

  /**
   * List of resources that appear to use the connector
   *
   * @generated from field: repeated rill.runtime.v1.ResourceName used_by = 8;
   */
  usedBy: ResourceName[] = [];

  /**
   * Error message if the connector is misconfigured
   *
   * @generated from field: string error_message = 9;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<AnalyzedConnector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzedConnector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "driver", kind: "message", T: ConnectorDriver },
    { no: 3, name: "config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "preset_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "project_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "env_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "provision", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "provision_args", kind: "message", T: Struct },
    { no: 7, name: "has_anonymous_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "used_by", kind: "message", T: ResourceName, repeated: true },
    { no: 9, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzedConnector {
    return new AnalyzedConnector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzedConnector {
    return new AnalyzedConnector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzedConnector {
    return new AnalyzedConnector().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzedConnector | PlainMessage<AnalyzedConnector> | undefined, b: AnalyzedConnector | PlainMessage<AnalyzedConnector> | undefined): boolean {
    return proto3.util.equals(AnalyzedConnector, a, b);
  }
}

/**
 * Request message for RuntimeService.ListConnectorDrivers
 *
 * @generated from message rill.runtime.v1.ListConnectorDriversRequest
 */
export class ListConnectorDriversRequest extends Message<ListConnectorDriversRequest> {
  constructor(data?: PartialMessage<ListConnectorDriversRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorDriversRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorDriversRequest {
    return new ListConnectorDriversRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorDriversRequest {
    return new ListConnectorDriversRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorDriversRequest {
    return new ListConnectorDriversRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorDriversRequest | PlainMessage<ListConnectorDriversRequest> | undefined, b: ListConnectorDriversRequest | PlainMessage<ListConnectorDriversRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectorDriversRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListConnectorDrivers
 *
 * @generated from message rill.runtime.v1.ListConnectorDriversResponse
 */
export class ListConnectorDriversResponse extends Message<ListConnectorDriversResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ConnectorDriver connectors = 1;
   */
  connectors: ConnectorDriver[] = [];

  constructor(data?: PartialMessage<ListConnectorDriversResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorDriversResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: ConnectorDriver, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorDriversResponse {
    return new ListConnectorDriversResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorDriversResponse {
    return new ListConnectorDriversResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorDriversResponse {
    return new ListConnectorDriversResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorDriversResponse | PlainMessage<ListConnectorDriversResponse> | undefined, b: ListConnectorDriversResponse | PlainMessage<ListConnectorDriversResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectorDriversResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.AnalyzeConnectors
 *
 * @generated from message rill.runtime.v1.AnalyzeConnectorsRequest
 */
export class AnalyzeConnectorsRequest extends Message<AnalyzeConnectorsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<AnalyzeConnectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzeConnectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConnectorsRequest {
    return new AnalyzeConnectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConnectorsRequest {
    return new AnalyzeConnectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConnectorsRequest {
    return new AnalyzeConnectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeConnectorsRequest | PlainMessage<AnalyzeConnectorsRequest> | undefined, b: AnalyzeConnectorsRequest | PlainMessage<AnalyzeConnectorsRequest> | undefined): boolean {
    return proto3.util.equals(AnalyzeConnectorsRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.AnalyzeConnectors
 *
 * @generated from message rill.runtime.v1.AnalyzeConnectorsResponse
 */
export class AnalyzeConnectorsResponse extends Message<AnalyzeConnectorsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.AnalyzedConnector connectors = 1;
   */
  connectors: AnalyzedConnector[] = [];

  constructor(data?: PartialMessage<AnalyzeConnectorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzeConnectorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: AnalyzedConnector, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConnectorsResponse {
    return new AnalyzeConnectorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConnectorsResponse {
    return new AnalyzeConnectorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConnectorsResponse {
    return new AnalyzeConnectorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeConnectorsResponse | PlainMessage<AnalyzeConnectorsResponse> | undefined, b: AnalyzeConnectorsResponse | PlainMessage<AnalyzeConnectorsResponse> | undefined): boolean {
    return proto3.util.equals(AnalyzeConnectorsResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.ListNotifierConnectors
 *
 * @generated from message rill.runtime.v1.ListNotifierConnectorsRequest
 */
export class ListNotifierConnectorsRequest extends Message<ListNotifierConnectorsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<ListNotifierConnectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListNotifierConnectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotifierConnectorsRequest {
    return new ListNotifierConnectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotifierConnectorsRequest {
    return new ListNotifierConnectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotifierConnectorsRequest {
    return new ListNotifierConnectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotifierConnectorsRequest | PlainMessage<ListNotifierConnectorsRequest> | undefined, b: ListNotifierConnectorsRequest | PlainMessage<ListNotifierConnectorsRequest> | undefined): boolean {
    return proto3.util.equals(ListNotifierConnectorsRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListNotifierConnectors
 *
 * @generated from message rill.runtime.v1.ListNotifierConnectorsResponse
 */
export class ListNotifierConnectorsResponse extends Message<ListNotifierConnectorsResponse> {
  /**
   * Note: In this list, the Connector.config property will always be empty.
   *
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 1;
   */
  connectors: Connector[] = [];

  constructor(data?: PartialMessage<ListNotifierConnectorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListNotifierConnectorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: Connector, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotifierConnectorsResponse {
    return new ListNotifierConnectorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotifierConnectorsResponse {
    return new ListNotifierConnectorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotifierConnectorsResponse {
    return new ListNotifierConnectorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotifierConnectorsResponse | PlainMessage<ListNotifierConnectorsResponse> | undefined, b: ListNotifierConnectorsResponse | PlainMessage<ListNotifierConnectorsResponse> | undefined): boolean {
    return proto3.util.equals(ListNotifierConnectorsResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.IssueDevJWT
 *
 * @generated from message rill.runtime.v1.IssueDevJWTRequest
 */
export class IssueDevJWTRequest extends Message<IssueDevJWTRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: repeated string groups = 3;
   */
  groups: string[] = [];

  /**
   * @generated from field: bool admin = 4;
   */
  admin = false;

  /**
   * Additional arbitrary attributes to include in the JWT.
   * They take precedence if they collide with name, email, groups or admin.
   *
   * @generated from field: google.protobuf.Struct attributes = 5;
   */
  attributes?: Struct;

  constructor(data?: PartialMessage<IssueDevJWTRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.IssueDevJWTRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "attributes", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueDevJWTRequest | PlainMessage<IssueDevJWTRequest> | undefined, b: IssueDevJWTRequest | PlainMessage<IssueDevJWTRequest> | undefined): boolean {
    return proto3.util.equals(IssueDevJWTRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.IssueDevJWT
 *
 * @generated from message rill.runtime.v1.IssueDevJWTResponse
 */
export class IssueDevJWTResponse extends Message<IssueDevJWTResponse> {
  /**
   * @generated from field: string jwt = 1;
   */
  jwt = "";

  constructor(data?: PartialMessage<IssueDevJWTResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.IssueDevJWTResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueDevJWTResponse | PlainMessage<IssueDevJWTResponse> | undefined, b: IssueDevJWTResponse | PlainMessage<IssueDevJWTResponse> | undefined): boolean {
    return proto3.util.equals(IssueDevJWTResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.AnalyzeVariables
 *
 * @generated from message rill.runtime.v1.AnalyzeVariablesRequest
 */
export class AnalyzeVariablesRequest extends Message<AnalyzeVariablesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<AnalyzeVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzeVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeVariablesRequest {
    return new AnalyzeVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeVariablesRequest {
    return new AnalyzeVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeVariablesRequest {
    return new AnalyzeVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeVariablesRequest | PlainMessage<AnalyzeVariablesRequest> | undefined, b: AnalyzeVariablesRequest | PlainMessage<AnalyzeVariablesRequest> | undefined): boolean {
    return proto3.util.equals(AnalyzeVariablesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.AnalyzeVariables
 *
 * @generated from message rill.runtime.v1.AnalyzeVariablesResponse
 */
export class AnalyzeVariablesResponse extends Message<AnalyzeVariablesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.AnalyzedVariable variables = 1;
   */
  variables: AnalyzedVariable[] = [];

  constructor(data?: PartialMessage<AnalyzeVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzeVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "message", T: AnalyzedVariable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeVariablesResponse {
    return new AnalyzeVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeVariablesResponse {
    return new AnalyzeVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeVariablesResponse {
    return new AnalyzeVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeVariablesResponse | PlainMessage<AnalyzeVariablesResponse> | undefined, b: AnalyzeVariablesResponse | PlainMessage<AnalyzeVariablesResponse> | undefined): boolean {
    return proto3.util.equals(AnalyzeVariablesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.AnalyzedVariable
 */
export class AnalyzedVariable extends Message<AnalyzedVariable> {
  /**
   * Name of the variable.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Default value set for the variable in rill.yaml, if any.
   *
   * @generated from field: string default_value = 2;
   */
  defaultValue = "";

  /**
   * List of resources that appear to use the connector.
   *
   * @generated from field: repeated rill.runtime.v1.ResourceName used_by = 8;
   */
  usedBy: ResourceName[] = [];

  constructor(data?: PartialMessage<AnalyzedVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.AnalyzedVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "used_by", kind: "message", T: ResourceName, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzedVariable {
    return new AnalyzedVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzedVariable {
    return new AnalyzedVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzedVariable {
    return new AnalyzedVariable().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzedVariable | PlainMessage<AnalyzedVariable> | undefined, b: AnalyzedVariable | PlainMessage<AnalyzedVariable> | undefined): boolean {
    return proto3.util.equals(AnalyzedVariable, a, b);
  }
}

